[sat] [1]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.154]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/979]

[bottom clause]
advisedby(A,B) :-
   taughtby(C,B,D), taughtby(E,B,F), taughtby(E,B,G), position(B,H), 
   position(B,faculty_8), phase(A,I), phase(A,post_quals_9), yearsinprogram(A,J), 
   ta(K,A,L), ta(M,A,N), professor(B), student(A), 
   publication(O,B), publication(P,B), publication(Q,B), publication(R,B), 
   publication(S,B), publication(T,B), publication(U,B), publication(V,B), 
   publication(W,B), publication(X,B), publication(Y,B), publication(Z,B), 
   publication(A1,B), allpublicationswith(B,B), nofpubs(B,B1), nofpubs(A,C1), 
   commonpub(B,D1), commonpub(B,E1), commonpub(B,B), commonpub(B,F1), 
   taughtby(M,E1,G1), taughtby(M,H1,N), taughtby(M,E1,I1), taughtby(M,J1,K1), 
   taughtby(K,H1,L1), taughtby(K,D1,G1), taughtby(K,M1,D), taughtby(K,J1,N), 
   taughtby(K,N1,L), taughtby(K,D1,O1), taughtby(K,P1,G), taughtby(K,D1,F), 
   taughtby(K,E1,K1), taughtby(C,Q1,L), taughtby(C,D1,G), taughtby(C,Q1,K1), 
   taughtby(R1,E1,L1), taughtby(S1,E1,D), taughtby(T1,E1,O1), taughtby(U1,E1,G), 
   taughtby(V1,E1,F), taughtby(W1,E1,X1), taughtby(Y1,E1,F), taughtby(Z1,D1,L1), 
   taughtby(U1,D1,D), taughtby(A2,D1,B2), taughtby(C2,D1,N), taughtby(U1,D1,L), 
   taughtby(D2,D1,I1), taughtby(C2,D1,K1), taughtby(U1,D1,X1), taughtby(E2,D1,K1), 
   taughtby(E2,D1,N), courselevel(M,F2), courselevel(K,G2), courselevel(C,H2), 
   courselevel(M,level_400_7), courselevel(K,level_300_7), courselevel(C,level_500_7), position(E1,H), 
   position(D1,H), position(E1,faculty_8), position(D1,faculty_8), ta(M,I2,K1), 
   ta(M,J2,I1), ta(M,K2,N), ta(K,L2,K1), ta(K,M2,F), 
   ta(K,N2,G), ta(K,M2,G), ta(K,O2,O1), ta(K,P2,O1), 
   ta(K,J2,L), ta(K,Q2,N), ta(K,J2,N), ta(C,N2,K1), 
   ta(C,R2,G), ta(C,R2,L), professor(E1), professor(D1), 
   student(F1), publication(A1,E1), publication(Z,E1), publication(Y,E1), 
   publication(X,E1), publication(W,E1), publication(V,E1), publication(U,F1), 
   publication(T,D1), publication(S,E1), publication(R,E1), publication(Q,E1), 
   publication(P,E1), publication(O,E1), publication(S2,E1), publication(T2,E1), 
   publication(U2,E1), publication(V2,E1), publication(W2,E1), publication(X2,E1), 
   publication(Y2,E1), publication(Z2,E1), publication(A3,E1), publication(B3,E1), 
   publication(C3,E1), publication(D3,D1), publication(E3,D1), publication(F3,D1), 
   publication(G3,D1), publication(H3,D1), publication(I3,D1), publication(J3,D1), 
   publication(K3,D1), publication(L3,D1), publication(M3,D1), publication(N3,D1), 
   publication(O3,D1), publication(P3,D1), publication(Y2,D1), allpublicationswith(F1,F1), 
   allpublicationswith(F1,B), allpublicationswith(E1,E1), allpublicationswith(D1,D1), nofpubs(F1,Q3), 
   nofpubs(E1,R3), nofpubs(D1,S3), commonpub(F1,B), commonpub(F1,F1), 
   commonpub(E1,D1), commonpub(E1,T3), commonpub(E1,J1), commonpub(E1,E1), 
   commonpub(D1,D1), commonpub(D1,U3), commonpub(D1,V3), commonpub(D1,E1), 
   geq(C1,0), geq(B1,13), geq(J,3), geq(C1,C1), 
   geq(B1,C1), geq(B1,B1), geq(B1,J), geq(J,C1), 
   geq(J,J), diff(C1,B1), diff(C1,J), diff(B1,C1), 
   diff(B1,J), diff(J,C1), diff(J,B1), taughtby(D2,N1,B2), 
   taughtby(D2,W3,F), taughtby(A2,Q1,L1), taughtby(Z1,J1,B2), taughtby(Z1,P1,I1), 
   taughtby(Z1,P1,F), taughtby(V1,X3,Y3), taughtby(T1,H1,G1), taughtby(T1,Q1,N), 
   taughtby(T1,H1,K1), taughtby(S1,M1,L1), taughtby(S1,Q1,G1), taughtby(S1,J1,L), 
   taughtby(S1,J1,G), taughtby(S1,Q1,F), taughtby(S1,P1,X1), taughtby(Z3,Q2,F), 
   taughtby(A4,Q1,G1), taughtby(B4,P1,O1), taughtby(Z3,N1,G1), taughtby(C4,J1,O1), 
   taughtby(D4,J1,X1), taughtby(E4,J1,O1), taughtby(F4,H1,B2), taughtby(F4,H1,F), 
   courselevel(D2,G2), courselevel(C2,F2), courselevel(A2,H2), courselevel(Z1,H2), 
   courselevel(W1,H2), courselevel(V1,H2), courselevel(U1,F2), courselevel(T1,F2), 
   courselevel(S1,G2), courselevel(R1,H2), courselevel(D2,level_300_7), courselevel(C2,level_400_7), 
   courselevel(A2,level_500_7), courselevel(Z1,level_500_7), courselevel(W1,level_500_7), courselevel(V1,level_500_7), 
   courselevel(U1,level_400_7), courselevel(T1,level_400_7), courselevel(S1,level_300_7), courselevel(R1,level_500_7), 
   position(V3,G4), position(Q1,H), position(P1,H), position(J1,H), 
   position(H1,H), position(V3,faculty_adjunct_8), position(Q1,faculty_8), position(P1,faculty_8), 
   position(J1,faculty_8), position(H1,faculty_8), projectmember(H4,J1), projectmember(I4,J1), 
   projectmember(J4,H1), projectmember(K4,H1), phase(U3,L4), phase(T3,L4), 
   phase(R2,I), phase(Q2,L4), phase(P2,I), phase(N2,M4), 
   phase(K2,I), phase(I2,M4), phase(U3,post_generals_9), phase(T3,post_generals_9), 
   phase(R2,post_quals_9), phase(Q2,post_generals_9), phase(P2,post_quals_9), phase(N2,pre_quals_9), 
   phase(K2,post_quals_9), phase(I2,pre_quals_9), tempadvisedby(N2,E1), tempadvisedby(K2,Q1), 
   tempadvisedby(I2,P1), yearsinprogram(U3,N4), yearsinprogram(T3,O4), yearsinprogram(R2,P4), 
   yearsinprogram(Q2,Q4), yearsinprogram(P2,R4), yearsinprogram(N2,R4), yearsinprogram(K2,P4), 
   yearsinprogram(I2,Q3), ta(D2,S4,K1), ta(D2,T4,F), ta(D2,U4,O1), 
   ta(D2,X3,I1), ta(D2,U4,I1), ta(D2,K2,L), ta(D2,V4,L), 
   ta(U1,T3,G), ta(U1,Q2,L), ta(T1,K2,K1), ta(T1,N2,O1), 
   ta(T1,W4,O1), ta(T1,T3,N), ta(S1,X4,F), ta(S1,Y4,F), 
   ta(S1,Z4,G), ta(S1,A5,G), ta(S1,O2,I1), ta(S1,N2,I1), 
   ta(S1,M2,I1), ta(S1,B5,L), ta(C5,R2,N), ta(D5,N2,F), 
   ta(Z3,K2,I1), ta(Z3,I2,F), professor(V3), professor(Q1), 
   professor(P1), professor(N1), professor(M1), professor(J1), 
   professor(H1), student(U3), student(T3), student(R2), 
   student(Q2), student(P2), student(O2), student(N2), 
   student(M2), student(L2), student(K2), student(J2), 
   student(I2), publication(P3,V3), publication(O3,V3), publication(N3,V3), 
   publication(N3,U3), publication(M3,V3), publication(M3,U3), publication(L3,V3), 
   publication(L3,U3), publication(K3,V3), publication(K3,U3), publication(J3,V3), 
   publication(J3,U3), publication(I3,V3), publication(H3,V3), publication(H3,U3), 
   publication(G3,V3), publication(F3,V3), publication(E3,V3), publication(D3,V3), 
   publication(D3,U3), publication(C3,J1), publication(B3,J1), publication(A3,J1), 
   publication(Z2,Q2), publication(X2,T3), publication(W2,Q2), publication(V2,J1), 
   publication(U2,T3), publication(T2,J1), publication(S2,T3), publication(E5,V3), 
   publication(F5,V3), publication(E5,U3), publication(F5,U3), publication(G5,U3), 
   publication(H5,Q1), publication(I5,Q1), publication(J5,Q1), publication(K5,Q1), 
   publication(L5,Q1), publication(M5,Q1), publication(N5,Q1), publication(O5,Q1), 
   publication(P5,Q1), publication(Q5,Q1), publication(R5,J1), publication(S5,J1), 
   allpublicationswith(V3,V3), allpublicationswith(U3,U3), allpublicationswith(T3,T3), allpublicationswith(T3,E1), 
   allpublicationswith(Q2,Q2), allpublicationswith(Q2,E1), allpublicationswith(Q1,Q1), allpublicationswith(J1,J1), 
   nofpubs(V3,S3), nofpubs(U3,T5), nofpubs(T3,J), nofpubs(R2,C1), 
   nofpubs(Q2,R4), nofpubs(P2,C1), nofpubs(O2,C1), nofpubs(N2,C1), 
   nofpubs(M2,C1), nofpubs(L2,C1), nofpubs(K2,C1), nofpubs(J2,C1), 
   nofpubs(I2,C1), nofpubs(Q1,T5), nofpubs(P1,C1), nofpubs(N1,C1), 
   nofpubs(M1,C1), nofpubs(J1,O4), nofpubs(H1,C1), commonpub(V3,D1), 
   commonpub(V3,U3), commonpub(V3,V3), commonpub(U3,U5), commonpub(U3,D1), 
   commonpub(U3,U3), commonpub(U3,V3), commonpub(T3,T3), commonpub(T3,E1), 
   commonpub(Q2,E1), commonpub(Q2,Q2), commonpub(Q1,Q1), commonpub(Q1,V5), 
   commonpub(J1,U5), commonpub(J1,J1), commonpub(J1,E1), geq(S3,15), 
   geq(R3,22), geq(Q3,1), geq(S3,S3), geq(S3,Q3), 
   geq(S3,C1), geq(S3,B1), geq(S3,J), geq(R3,S3), 
   geq(R3,R3), geq(R3,Q3), geq(R3,C1), geq(R3,B1), 
   geq(R3,J), geq(Q3,Q3), geq(Q3,C1), geq(B1,Q3), 
   geq(J,Q3), diff(S3,R3), diff(S3,Q3), diff(S3,C1), 
   diff(S3,B1), diff(S3,J), diff(R3,S3), diff(R3,Q3), 
   diff(R3,C1), diff(R3,B1), diff(R3,J), diff(Q3,S3), 
   diff(Q3,R3), diff(Q3,C1), diff(Q3,B1), diff(Q3,J), 
   diff(C1,S3), diff(B1,S3), diff(J,S3), diff(C1,R3), 
   diff(B1,R3), diff(J,R3), diff(C1,Q3), diff(B1,Q3), 
   diff(J,Q3), taughtby(Z3,W5,B2), taughtby(Z3,X5,L), taughtby(Z3,W3,K1), 
   taughtby(Y5,W3,G), taughtby(Z5,W3,G), courselevel(D5,H2), courselevel(C5,H2), 
   courselevel(F4,H2), courselevel(E4,H2), courselevel(D4,F2), courselevel(C4,H2), 
   courselevel(B4,H2), courselevel(A4,H2), courselevel(Z3,G2), courselevel(D5,level_500_7), 
   courselevel(C5,level_500_7), courselevel(F4,level_500_7), courselevel(E4,level_500_7), courselevel(D4,level_400_7), 
   courselevel(C4,level_500_7), courselevel(B4,level_500_7), courselevel(A4,level_500_7), courselevel(Z3,level_300_7), 
   phase(B5,I), phase(Y4,M4), phase(X4,M4), phase(V4,I), 
   phase(X3,M4), phase(B5,post_quals_9), phase(Y4,pre_quals_9), phase(X4,pre_quals_9), 
   phase(V4,post_quals_9), phase(X3,pre_quals_9), tempadvisedby(Y4,E1), tempadvisedby(X4,J1), 
   tempadvisedby(V4,H1), tempadvisedby(X3,B), yearsinprogram(B5,J), yearsinprogram(Y4,Q3), 
   yearsinprogram(X4,Q3), yearsinprogram(V4,J), yearsinprogram(X3,R4), ta(F4,V4,F), 
   ta(E4,X5,O1), ta(Z3,X5,K1), ta(Z3,Z4,O1), ta(Z3,B5,O1), 
   ta(Z3,A6,L), ta(Z3,B6,N), ta(Z5,X3,G), professor(W3), 
   student(V5), student(U5), student(B5), student(A5), 
   student(Z4), student(Y4), student(X4), student(W4), 
   student(V4), student(U4), student(T4), student(S4), 
   student(X3), publication(S5,U5), publication(R5,U5), publication(Q5,V5), 
   publication(P5,V5), publication(O5,V5), publication(N5,V5), publication(M5,V5), 
   publication(L5,V5), publication(K5,V5), publication(J5,V5), publication(I5,V5), 
   publication(H5,V5), publication(G5,V5), publication(G5,U5), allpublicationswith(V5,V5), 
   allpublicationswith(U5,U5), allpublicationswith(Q1,V5), nofpubs(V5,C6), nofpubs(U5,J), 
   nofpubs(B5,C1), nofpubs(A5,C1), nofpubs(Z4,C1), nofpubs(Y4,C1), 
   nofpubs(X4,C1), nofpubs(W4,C1), nofpubs(V4,C1), nofpubs(U4,C1), 
   nofpubs(T4,C1), nofpubs(S4,C1), nofpubs(X3,C1), nofpubs(W3,C1), 
   commonpub(V5,U5), commonpub(V5,U3), commonpub(V5,Q1), commonpub(V5,V5), 
   commonpub(U5,U5), commonpub(U5,U3), commonpub(U5,J1), commonpub(U5,V5), 
   geq(T5,10), geq(R4,2), geq(Q4,6), geq(P4,4), 
   geq(O4,7), geq(N4,5), geq(T5,T5), geq(T5,R4), 
   geq(T5,Q4), geq(T5,P4), geq(T5,O4), geq(T5,N4), 
   geq(T5,Q3), geq(T5,C1), geq(T5,J), geq(R4,R4), 
   geq(R4,Q3), geq(R4,C1), geq(Q4,R4), geq(Q4,Q4), 
   geq(Q4,P4), geq(Q4,N4), geq(Q4,Q3), geq(Q4,C1), 
   geq(Q4,J), geq(P4,R4), geq(P4,P4), geq(P4,Q3), 
   geq(P4,C1), geq(P4,J), geq(O4,R4), geq(O4,Q4), 
   geq(O4,P4), geq(O4,O4), geq(O4,N4), geq(O4,Q3), 
   geq(O4,C1), geq(O4,J), geq(N4,R4), geq(N4,P4), 
   geq(N4,N4), geq(N4,Q3), geq(N4,C1), geq(N4,J), 
   geq(S3,T5), geq(R3,T5), geq(B1,T5), geq(S3,R4), 
   geq(R3,R4), geq(B1,R4), geq(J,R4), geq(S3,Q4), 
   geq(R3,Q4), geq(B1,Q4), geq(S3,P4), geq(R3,P4), 
   geq(B1,P4), geq(S3,O4), geq(R3,O4), geq(B1,O4), 
   geq(S3,N4), geq(R3,N4), geq(B1,N4), diff(T5,R4), 
   diff(T5,Q4), diff(T5,P4), diff(T5,O4), diff(T5,N4), 
   diff(T5,S3), diff(T5,R3), diff(T5,Q3), diff(T5,C1), 
   diff(T5,B1), diff(T5,J), diff(R4,T5), diff(R4,Q4), 
   diff(R4,P4), diff(R4,O4), diff(R4,N4), diff(R4,S3), 
   diff(R4,R3), diff(R4,Q3), diff(R4,C1), diff(R4,B1), 
   diff(R4,J), diff(Q4,T5), diff(Q4,R4), diff(Q4,P4), 
   diff(Q4,O4), diff(Q4,N4), diff(Q4,S3), diff(Q4,R3), 
   diff(Q4,Q3), diff(Q4,C1), diff(Q4,B1), diff(Q4,J), 
   diff(P4,T5), diff(P4,R4), diff(P4,Q4), diff(P4,O4), 
   diff(P4,N4), diff(P4,S3), diff(P4,R3), diff(P4,Q3), 
   diff(P4,C1), diff(P4,B1), diff(P4,J), diff(O4,T5), 
   diff(O4,R4), diff(O4,Q4), diff(O4,P4), diff(O4,N4), 
   diff(O4,S3), diff(O4,R3), diff(O4,Q3), diff(O4,C1), 
   diff(O4,B1), diff(O4,J), diff(N4,T5), diff(N4,R4), 
   diff(N4,Q4), diff(N4,P4), diff(N4,O4), diff(N4,S3), 
   diff(N4,R3), diff(N4,Q3), diff(N4,C1), diff(N4,B1), 
   diff(N4,J), diff(S3,T5), diff(R3,T5), diff(Q3,T5), 
   diff(C1,T5), diff(B1,T5), diff(J,T5), diff(S3,R4), 
   diff(R3,R4), diff(Q3,R4), diff(C1,R4), diff(B1,R4), 
   diff(J,R4), diff(S3,Q4), diff(R3,Q4), diff(Q3,Q4), 
   diff(C1,Q4), diff(B1,Q4), diff(J,Q4), diff(S3,P4), 
   diff(R3,P4), diff(Q3,P4), diff(C1,P4), diff(B1,P4), 
   diff(J,P4), diff(S3,O4), diff(R3,O4), diff(Q3,O4), 
   diff(C1,O4), diff(B1,O4), diff(J,O4), diff(S3,N4), 
   diff(R3,N4), diff(Q3,N4), diff(C1,N4), diff(B1,N4), 
   diff(J,N4), courselevel(Z5,H2), courselevel(Y5,H2), courselevel(Z5,level_500_7), 
   courselevel(Y5,level_500_7), phase(X5,L4), phase(X5,post_generals_9), yearsinprogram(X5,Q4), 
   professor(W5), student(B6), student(A6), student(X5), 
   nofpubs(B6,C1), nofpubs(A6,C1), nofpubs(X5,C1), nofpubs(W5,C1), 
   geq(C6,11), geq(C6,C6), geq(C6,T5), geq(C6,R4), 
   geq(C6,Q4), geq(C6,P4), geq(C6,O4), geq(C6,N4), 
   geq(C6,Q3), geq(C6,C1), geq(C6,J), geq(S3,C6), 
   geq(R3,C6), geq(B1,C6), diff(C6,T5), diff(C6,R4), 
   diff(C6,Q4), diff(C6,P4), diff(C6,O4), diff(C6,N4), 
   diff(C6,S3), diff(C6,R3), diff(C6,Q3), diff(C6,C1), 
   diff(C6,B1), diff(C6,J), diff(T5,C6), diff(R4,C6), 
   diff(Q4,C6), diff(P4,C6), diff(O4,C6), diff(N4,C6), 
   diff(S3,C6), diff(R3,C6), diff(Q3,C6), diff(C1,C6), 
   diff(B1,C6), diff(J,C6).
[literals] [747]
[saturation time] [0.145]
[sat] [1]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.14]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.146]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.144]
[sat] [2]
[advisedby(person141_1,person331_1)]
[sat] [2]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.151]
[sat] [2]
[advisedby(person141_1,person331_1)]
[sat] [2]
[sat] [2]
[advisedby(person141_1,person331_1)]
[sat] [2]
[repeated literals] [232/979]

[bottom clause]
[literals] [747]
[saturation time] [0.142]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.149]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
advisedby(A,B) :-
   taughtby(C,B,D), taughtby(E,B,F), taughtby(E,B,G), position(B,H), 
   position(B,faculty_8), phase(A,I), phase(A,post_quals_9), yearsinprogram(A,J), 
   ta(K,A,L), ta(M,A,N), professor(B), student(A), 
   publication(O,B), publication(P,B), publication(Q,B), publication(R,B), 
   publication(S,B), publication(T,B), publication(U,B), publication(V,B), 
   publication(W,B), publication(X,B), publication(Y,B), publication(Z,B), 
   publication(A1,B), allpublicationswith(B,B), nofpubs(B,B1), nofpubs(A,C1), 
   commonpub(B,D1), commonpub(B,E1), commonpub(B,B), commonpub(B,F1), 
   taughtby(M,E1,G1), taughtby(M,H1,N), taughtby(M,E1,I1), taughtby(M,J1,K1), 
   taughtby(K,H1,L1), taughtby(K,D1,G1), taughtby(K,M1,D), taughtby(K,J1,N), 
   taughtby(K,N1,L), taughtby(K,D1,O1), taughtby(K,P1,G), taughtby(K,D1,F), 
   taughtby(K,E1,K1), taughtby(C,Q1,L), taughtby(C,D1,G), taughtby(C,Q1,K1), 
   taughtby(R1,E1,L1), taughtby(S1,E1,D), taughtby(T1,E1,O1), taughtby(U1,E1,G), 
   taughtby(V1,E1,F), taughtby(W1,E1,X1), taughtby(Y1,E1,F), taughtby(Z1,D1,L1), 
   taughtby(U1,D1,D), taughtby(A2,D1,B2), taughtby(C2,D1,N), taughtby(U1,D1,L), 
   taughtby(D2,D1,I1), taughtby(C2,D1,K1), taughtby(U1,D1,X1), taughtby(E2,D1,K1), 
   taughtby(E2,D1,N), courselevel(M,F2), courselevel(K,G2), courselevel(C,H2), 
   courselevel(M,level_400_7), courselevel(K,level_300_7), courselevel(C,level_500_7), position(E1,H), 
   position(D1,H), position(E1,faculty_8), position(D1,faculty_8), ta(M,I2,K1), 
   ta(M,J2,I1), ta(M,K2,N), ta(K,L2,K1), ta(K,M2,F), 
   ta(K,N2,G), ta(K,M2,G), ta(K,O2,O1), ta(K,P2,O1), 
   ta(K,J2,L), ta(K,Q2,N), ta(K,J2,N), ta(C,N2,K1), 
   ta(C,R2,G), ta(C,R2,L), professor(E1), professor(D1), 
   student(F1), publication(A1,E1), publication(Z,E1), publication(Y,E1), 
   publication(X,E1), publication(W,E1), publication(V,E1), publication(U,F1), 
   publication(T,D1), publication(S,E1), publication(R,E1), publication(Q,E1), 
   publication(P,E1), publication(O,E1), publication(S2,E1), publication(T2,E1), 
   publication(U2,E1), publication(V2,E1), publication(W2,E1), publication(X2,E1), 
   publication(Y2,E1), publication(Z2,E1), publication(A3,E1), publication(B3,E1), 
   publication(C3,E1), publication(D3,D1), publication(E3,D1), publication(F3,D1), 
   publication(G3,D1), publication(H3,D1), publication(I3,D1), publication(J3,D1), 
   publication(K3,D1), publication(L3,D1), publication(M3,D1), publication(N3,D1), 
   publication(O3,D1), publication(P3,D1), publication(Y2,D1), allpublicationswith(F1,F1), 
   allpublicationswith(F1,B), allpublicationswith(E1,E1), allpublicationswith(D1,D1), nofpubs(F1,Q3), 
   nofpubs(E1,R3), nofpubs(D1,S3), commonpub(F1,B), commonpub(F1,F1), 
   commonpub(E1,D1), commonpub(E1,T3), commonpub(E1,J1), commonpub(E1,E1), 
   commonpub(E1,B), commonpub(E1,Q2), commonpub(D1,D1), commonpub(D1,U3), 
   commonpub(D1,V3), commonpub(D1,E1), commonpub(D1,B), geq(C1,0), 
   geq(B1,13), geq(J,3), geq(C1,C1), geq(B1,C1), 
   geq(B1,B1), geq(B1,J), geq(J,C1), geq(J,J), 
   diff(C1,B1), diff(C1,J), diff(B1,C1), diff(B1,J), 
   diff(J,C1), diff(J,B1), taughtby(D2,N1,B2), taughtby(D2,W3,F), 
   taughtby(A2,Q1,L1), taughtby(Z1,J1,B2), taughtby(Z1,P1,I1), taughtby(Z1,P1,F), 
   taughtby(V1,X3,Y3), taughtby(T1,H1,G1), taughtby(T1,Q1,N), taughtby(T1,H1,K1), 
   taughtby(S1,M1,L1), taughtby(S1,Q1,G1), taughtby(S1,J1,L), taughtby(S1,J1,G), 
   taughtby(S1,Q1,F), taughtby(S1,P1,X1), taughtby(Z3,Q2,F), taughtby(A4,Q1,G1), 
   taughtby(B4,P1,O1), taughtby(Z3,N1,G1), taughtby(C4,J1,O1), taughtby(D4,J1,X1), 
   taughtby(E4,J1,O1), taughtby(F4,H1,B2), taughtby(F4,H1,F), courselevel(D2,G2), 
   courselevel(C2,F2), courselevel(A2,H2), courselevel(Z1,H2), courselevel(W1,H2), 
   courselevel(V1,H2), courselevel(U1,F2), courselevel(T1,F2), courselevel(S1,G2), 
   courselevel(R1,H2), courselevel(D2,level_300_7), courselevel(C2,level_400_7), courselevel(A2,level_500_7), 
   courselevel(Z1,level_500_7), courselevel(W1,level_500_7), courselevel(V1,level_500_7), courselevel(U1,level_400_7), 
   courselevel(T1,level_400_7), courselevel(S1,level_300_7), courselevel(R1,level_500_7), position(V3,G4), 
   position(Q1,H), position(P1,H), position(J1,H), position(H1,H), 
   position(V3,faculty_adjunct_8), position(Q1,faculty_8), position(P1,faculty_8), position(J1,faculty_8), 
   position(H1,faculty_8), projectmember(H4,J1), projectmember(I4,J1), projectmember(J4,H1), 
   projectmember(K4,H1), phase(U3,L4), phase(T3,L4), phase(R2,I), 
   phase(Q2,L4), phase(P2,I), phase(N2,M4), phase(K2,I), 
   phase(I2,M4), phase(U3,post_generals_9), phase(T3,post_generals_9), phase(R2,post_quals_9), 
   phase(Q2,post_generals_9), phase(P2,post_quals_9), phase(N2,pre_quals_9), phase(K2,post_quals_9), 
   phase(I2,pre_quals_9), tempadvisedby(N2,E1), tempadvisedby(K2,Q1), tempadvisedby(I2,P1), 
   yearsinprogram(U3,N4), yearsinprogram(T3,O4), yearsinprogram(R2,P4), yearsinprogram(Q2,Q4), 
   yearsinprogram(P2,R4), yearsinprogram(N2,R4), yearsinprogram(K2,P4), yearsinprogram(I2,Q3), 
   ta(D2,S4,K1), ta(D2,T4,F), ta(D2,U4,O1), ta(D2,X3,I1), 
   ta(D2,U4,I1), ta(D2,K2,L), ta(D2,V4,L), ta(U1,T3,G), 
   ta(U1,Q2,L), ta(T1,K2,K1), ta(T1,N2,O1), ta(T1,W4,O1), 
   ta(T1,T3,N), ta(S1,X4,F), ta(S1,Y4,F), ta(S1,Z4,G), 
   ta(S1,A5,G), ta(S1,O2,I1), ta(S1,N2,I1), ta(S1,M2,I1), 
   ta(S1,B5,L), ta(C5,R2,N), ta(D5,N2,F), ta(Z3,K2,I1), 
   ta(Z3,I2,F), professor(V3), professor(Q1), professor(P1), 
   professor(N1), professor(M1), professor(J1), professor(H1), 
   student(U3), student(T3), student(R2), student(Q2), 
   student(P2), student(O2), student(N2), student(M2), 
   student(L2), student(K2), student(J2), student(I2), 
   publication(P3,V3), publication(O3,V3), publication(N3,V3), publication(N3,U3), 
   publication(M3,V3), publication(M3,U3), publication(L3,V3), publication(L3,U3), 
   publication(K3,V3), publication(K3,U3), publication(J3,V3), publication(J3,U3), 
   publication(I3,V3), publication(H3,V3), publication(H3,U3), publication(G3,V3), 
   publication(F3,V3), publication(E3,V3), publication(D3,V3), publication(D3,U3), 
   publication(C3,J1), publication(B3,J1), publication(A3,J1), publication(Z2,Q2), 
   publication(X2,T3), publication(W2,Q2), publication(V2,J1), publication(U2,T3), 
   publication(T2,J1), publication(S2,T3), publication(E5,V3), publication(F5,V3), 
   publication(E5,U3), publication(F5,U3), publication(G5,U3), publication(H5,Q1), 
   publication(I5,Q1), publication(J5,Q1), publication(K5,Q1), publication(L5,Q1), 
   publication(M5,Q1), publication(N5,Q1), publication(O5,Q1), publication(P5,Q1), 
   publication(Q5,Q1), publication(R5,J1), publication(S5,J1), allpublicationswith(V3,V3), 
   allpublicationswith(U3,U3), allpublicationswith(T3,T3), allpublicationswith(T3,E1), allpublicationswith(Q2,Q2), 
   allpublicationswith(Q2,E1), allpublicationswith(Q1,Q1), allpublicationswith(J1,J1), nofpubs(V3,S3), 
   nofpubs(U3,T5), nofpubs(T3,J), nofpubs(R2,C1), nofpubs(Q2,R4), 
   nofpubs(P2,C1), nofpubs(O2,C1), nofpubs(N2,C1), nofpubs(M2,C1), 
   nofpubs(L2,C1), nofpubs(K2,C1), nofpubs(J2,C1), nofpubs(I2,C1), 
   nofpubs(Q1,T5), nofpubs(P1,C1), nofpubs(N1,C1), nofpubs(M1,C1), 
   nofpubs(J1,O4), nofpubs(H1,C1), commonpub(V3,D1), commonpub(V3,U3), 
   commonpub(V3,V3), commonpub(U3,U5), commonpub(U3,D1), commonpub(U3,U3), 
   commonpub(U3,V3), commonpub(U3,V5), commonpub(T3,T3), commonpub(T3,E1), 
   commonpub(Q2,E1), commonpub(Q2,Q2), commonpub(Q1,Q1), commonpub(Q1,V5), 
   commonpub(J1,U5), commonpub(J1,J1), commonpub(J1,E1), geq(S3,15), 
   geq(R3,22), geq(Q3,1), geq(S3,S3), geq(S3,Q3), 
   geq(S3,C1), geq(S3,B1), geq(S3,J), geq(R3,S3), 
   geq(R3,R3), geq(R3,Q3), geq(R3,C1), geq(R3,B1), 
   geq(R3,J), geq(Q3,Q3), geq(Q3,C1), geq(B1,Q3), 
   geq(J,Q3), diff(S3,R3), diff(S3,Q3), diff(S3,C1), 
   diff(S3,B1), diff(S3,J), diff(R3,S3), diff(R3,Q3), 
   diff(R3,C1), diff(R3,B1), diff(R3,J), diff(Q3,S3), 
   diff(Q3,R3), diff(Q3,C1), diff(Q3,B1), diff(Q3,J), 
   diff(C1,S3), diff(B1,S3), diff(J,S3), diff(C1,R3), 
   diff(B1,R3), diff(J,R3), diff(C1,Q3), diff(B1,Q3), 
   diff(J,Q3), taughtby(Z3,W5,B2), taughtby(Z3,X5,L), taughtby(Z3,W3,K1), 
   taughtby(Y5,W3,G), taughtby(Z5,W3,G), courselevel(D5,H2), courselevel(C5,H2), 
   courselevel(F4,H2), courselevel(E4,H2), courselevel(D4,F2), courselevel(C4,H2), 
   courselevel(B4,H2), courselevel(A4,H2), courselevel(Z3,G2), courselevel(D5,level_500_7), 
   courselevel(C5,level_500_7), courselevel(F4,level_500_7), courselevel(E4,level_500_7), courselevel(D4,level_400_7), 
   courselevel(C4,level_500_7), courselevel(B4,level_500_7), courselevel(A4,level_500_7), courselevel(Z3,level_300_7), 
   phase(B5,I), phase(Y4,M4), phase(X4,M4), phase(V4,I), 
   phase(X3,M4), phase(B5,post_quals_9), phase(Y4,pre_quals_9), phase(X4,pre_quals_9), 
   phase(V4,post_quals_9), phase(X3,pre_quals_9), tempadvisedby(Y4,E1), tempadvisedby(X4,J1), 
   tempadvisedby(V4,H1), tempadvisedby(X3,B), yearsinprogram(B5,J), yearsinprogram(Y4,Q3), 
   yearsinprogram(X4,Q3), yearsinprogram(V4,J), yearsinprogram(X3,R4), ta(F4,V4,F), 
   ta(E4,X5,O1), ta(Z3,X5,K1), ta(Z3,Z4,O1), ta(Z3,B5,O1), 
   ta(Z3,A6,L), ta(Z3,B6,N), ta(Z5,X3,G), professor(W3), 
   student(V5), student(U5), student(B5), student(A5), 
   student(Z4), student(Y4), student(X4), student(W4), 
   student(V4), student(U4), student(T4), student(S4), 
   student(X3), publication(S5,U5), publication(R5,U5), publication(Q5,V5), 
   publication(P5,V5), publication(O5,V5), publication(N5,V5), publication(M5,V5), 
   publication(L5,V5), publication(K5,V5), publication(J5,V5), publication(I5,V5), 
   publication(H5,V5), publication(G5,V5), publication(G5,U5), allpublicationswith(V5,V5), 
   allpublicationswith(U5,U5), allpublicationswith(Q1,V5), nofpubs(V5,C6), nofpubs(U5,J), 
   nofpubs(B5,C1), nofpubs(A5,C1), nofpubs(Z4,C1), nofpubs(Y4,C1), 
   nofpubs(X4,C1), nofpubs(W4,C1), nofpubs(V4,C1), nofpubs(U4,C1), 
   nofpubs(T4,C1), nofpubs(S4,C1), nofpubs(X3,C1), nofpubs(W3,C1), 
   commonpub(V5,U5), commonpub(V5,U3), commonpub(V5,Q1), commonpub(V5,V5), 
   commonpub(U5,U5), commonpub(U5,U3), commonpub(U5,J1), commonpub(U5,V5), 
   geq(T5,10), geq(R4,2), geq(Q4,6), geq(P4,4), 
   geq(O4,7), geq(N4,5), geq(T5,T5), geq(T5,R4), 
   geq(T5,Q4), geq(T5,P4), geq(T5,O4), geq(T5,N4), 
   geq(T5,Q3), geq(T5,C1), geq(T5,J), geq(R4,R4), 
   geq(R4,Q3), geq(R4,C1), geq(Q4,R4), geq(Q4,Q4), 
   geq(Q4,P4), geq(Q4,N4), geq(Q4,Q3), geq(Q4,C1), 
   geq(Q4,J), geq(P4,R4), geq(P4,P4), geq(P4,Q3), 
   geq(P4,C1), geq(P4,J), geq(O4,R4), geq(O4,Q4), 
   geq(O4,P4), geq(O4,O4), geq(O4,N4), geq(O4,Q3), 
   geq(O4,C1), geq(O4,J), geq(N4,R4), geq(N4,P4), 
   geq(N4,N4), geq(N4,Q3), geq(N4,C1), geq(N4,J), 
   geq(S3,T5), geq(R3,T5), geq(B1,T5), geq(S3,R4), 
   geq(R3,R4), geq(B1,R4), geq(J,R4), geq(S3,Q4), 
   geq(R3,Q4), geq(B1,Q4), geq(S3,P4), geq(R3,P4), 
   geq(B1,P4), geq(S3,O4), geq(R3,O4), geq(B1,O4), 
   geq(S3,N4), geq(R3,N4), geq(B1,N4), diff(T5,R4), 
   diff(T5,Q4), diff(T5,P4), diff(T5,O4), diff(T5,N4), 
   diff(T5,S3), diff(T5,R3), diff(T5,Q3), diff(T5,C1), 
   diff(T5,B1), diff(T5,J), diff(R4,T5), diff(R4,Q4), 
   diff(R4,P4), diff(R4,O4), diff(R4,N4), diff(R4,S3), 
   diff(R4,R3), diff(R4,Q3), diff(R4,C1), diff(R4,B1), 
   diff(R4,J), diff(Q4,T5), diff(Q4,R4), diff(Q4,P4), 
   diff(Q4,O4), diff(Q4,N4), diff(Q4,S3), diff(Q4,R3), 
   diff(Q4,Q3), diff(Q4,C1), diff(Q4,B1), diff(Q4,J), 
   diff(P4,T5), diff(P4,R4), diff(P4,Q4), diff(P4,O4), 
   diff(P4,N4), diff(P4,S3), diff(P4,R3), diff(P4,Q3), 
   diff(P4,C1), diff(P4,B1), diff(P4,J), diff(O4,T5), 
   diff(O4,R4), diff(O4,Q4), diff(O4,P4), diff(O4,N4), 
   diff(O4,S3), diff(O4,R3), diff(O4,Q3), diff(O4,C1), 
   diff(O4,B1), diff(O4,J), diff(N4,T5), diff(N4,R4), 
   diff(N4,Q4), diff(N4,P4), diff(N4,O4), diff(N4,S3), 
   diff(N4,R3), diff(N4,Q3), diff(N4,C1), diff(N4,B1), 
   diff(N4,J), diff(S3,T5), diff(R3,T5), diff(Q3,T5), 
   diff(C1,T5), diff(B1,T5), diff(J,T5), diff(S3,R4), 
   diff(R3,R4), diff(Q3,R4), diff(C1,R4), diff(B1,R4), 
   diff(J,R4), diff(S3,Q4), diff(R3,Q4), diff(Q3,Q4), 
   diff(C1,Q4), diff(B1,Q4), diff(J,Q4), diff(S3,P4), 
   diff(R3,P4), diff(Q3,P4), diff(C1,P4), diff(B1,P4), 
   diff(J,P4), diff(S3,O4), diff(R3,O4), diff(Q3,O4), 
   diff(C1,O4), diff(B1,O4), diff(J,O4), diff(S3,N4), 
   diff(R3,N4), diff(Q3,N4), diff(C1,N4), diff(B1,N4), 
   diff(J,N4), courselevel(Z5,H2), courselevel(Y5,H2), courselevel(Z5,level_500_7), 
   courselevel(Y5,level_500_7), phase(X5,L4), phase(X5,post_generals_9), yearsinprogram(X5,Q4), 
   professor(W5), student(B6), student(A6), student(X5), 
   nofpubs(B6,C1), nofpubs(A6,C1), nofpubs(X5,C1), nofpubs(W5,C1), 
   geq(C6,11), geq(C6,C6), geq(C6,T5), geq(C6,R4), 
   geq(C6,Q4), geq(C6,P4), geq(C6,O4), geq(C6,N4), 
   geq(C6,Q3), geq(C6,C1), geq(C6,J), geq(S3,C6), 
   geq(R3,C6), geq(B1,C6), diff(C6,T5), diff(C6,R4), 
   diff(C6,Q4), diff(C6,P4), diff(C6,O4), diff(C6,N4), 
   diff(C6,S3), diff(C6,R3), diff(C6,Q3), diff(C6,C1), 
   diff(C6,B1), diff(C6,J), diff(T5,C6), diff(R4,C6), 
   diff(Q4,C6), diff(P4,C6), diff(O4,C6), diff(N4,C6), 
   diff(S3,C6), diff(R3,C6), diff(Q3,C6), diff(C1,C6), 
   diff(B1,C6), diff(J,C6).
[literals] [751]
[saturation time] [0.154]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
advisedby(A,B) :-
   taughtby(C,B,D), taughtby(E,B,F), taughtby(E,B,G), position(B,H), 
   position(B,faculty_8), phase(A,I), phase(A,post_quals_9), yearsinprogram(A,J), 
   ta(K,A,L), ta(M,A,N), professor(B), student(A), 
   publication(O,B), publication(P,B), publication(Q,B), publication(R,B), 
   publication(S,B), publication(T,B), publication(U,B), publication(V,B), 
   publication(W,B), publication(X,B), publication(Y,B), publication(Z,B), 
   publication(A1,B), allpublicationswith(B,B), nofpubs(B,B1), nofpubs(A,C1), 
   commonpub(B,D1), commonpub(B,E1), commonpub(B,B), commonpub(B,F1), 
   taughtby(M,E1,G1), taughtby(M,H1,N), taughtby(M,E1,I1), taughtby(M,J1,K1), 
   taughtby(K,H1,L1), taughtby(K,D1,G1), taughtby(K,M1,D), taughtby(K,J1,N), 
   taughtby(K,N1,L), taughtby(K,D1,O1), taughtby(K,P1,G), taughtby(K,D1,F), 
   taughtby(K,E1,K1), taughtby(C,Q1,L), taughtby(C,D1,G), taughtby(C,Q1,K1), 
   taughtby(R1,E1,L1), taughtby(S1,E1,D), taughtby(T1,E1,O1), taughtby(U1,E1,G), 
   taughtby(V1,E1,F), taughtby(W1,E1,X1), taughtby(Y1,E1,F), taughtby(Z1,D1,L1), 
   taughtby(U1,D1,D), taughtby(A2,D1,B2), taughtby(C2,D1,N), taughtby(U1,D1,L), 
   taughtby(D2,D1,I1), taughtby(C2,D1,K1), taughtby(U1,D1,X1), taughtby(E2,D1,K1), 
   taughtby(E2,D1,N), courselevel(M,F2), courselevel(K,G2), courselevel(C,H2), 
   courselevel(M,level_400_7), courselevel(K,level_300_7), courselevel(C,level_500_7), position(E1,H), 
   position(D1,H), position(E1,faculty_8), position(D1,faculty_8), ta(M,I2,K1), 
   ta(M,J2,I1), ta(M,K2,N), ta(K,L2,K1), ta(K,M2,F), 
   ta(K,N2,G), ta(K,M2,G), ta(K,O2,O1), ta(K,P2,O1), 
   ta(K,J2,L), ta(K,Q2,N), ta(K,J2,N), ta(C,N2,K1), 
   ta(C,R2,G), ta(C,R2,L), professor(E1), professor(D1), 
   student(F1), publication(A1,E1), publication(Z,E1), publication(Y,E1), 
   publication(X,E1), publication(W,E1), publication(V,E1), publication(U,F1), 
   publication(T,D1), publication(S,E1), publication(R,E1), publication(Q,E1), 
   publication(P,E1), publication(O,E1), publication(S2,E1), publication(T2,E1), 
   publication(U2,E1), publication(V2,E1), publication(W2,E1), publication(X2,E1), 
   publication(Y2,E1), publication(Z2,E1), publication(A3,E1), publication(B3,E1), 
   publication(C3,E1), publication(D3,D1), publication(E3,D1), publication(F3,D1), 
   publication(G3,D1), publication(H3,D1), publication(I3,D1), publication(J3,D1), 
   publication(K3,D1), publication(L3,D1), publication(M3,D1), publication(N3,D1), 
   publication(O3,D1), publication(P3,D1), publication(Y2,D1), allpublicationswith(F1,F1), 
   allpublicationswith(F1,B), allpublicationswith(E1,E1), allpublicationswith(D1,D1), nofpubs(F1,Q3), 
   nofpubs(E1,R3), nofpubs(D1,S3), commonpub(F1,B), commonpub(F1,F1), 
   commonpub(E1,D1), commonpub(E1,T3), commonpub(E1,J1), commonpub(E1,E1), 
   commonpub(E1,B), commonpub(E1,Q2), commonpub(D1,D1), commonpub(D1,U3), 
   commonpub(D1,V3), commonpub(D1,E1), commonpub(D1,B), geq(C1,0), 
   geq(B1,13), geq(J,3), geq(C1,C1), geq(B1,C1), 
   geq(B1,B1), geq(B1,J), geq(J,C1), geq(J,J), 
   diff(C1,B1), diff(C1,J), diff(B1,C1), diff(B1,J), 
   diff(J,C1), diff(J,B1), taughtby(D2,N1,B2), taughtby(D2,W3,F), 
   taughtby(A2,Q1,L1), taughtby(Z1,J1,B2), taughtby(Z1,P1,I1), taughtby(Z1,P1,F), 
   taughtby(V1,X3,Y3), taughtby(T1,H1,G1), taughtby(T1,Q1,N), taughtby(T1,H1,K1), 
   taughtby(S1,M1,L1), taughtby(S1,Q1,G1), taughtby(S1,J1,L), taughtby(S1,J1,G), 
   taughtby(S1,Q1,F), taughtby(S1,P1,X1), taughtby(Z3,Q2,F), taughtby(A4,Q1,G1), 
   taughtby(B4,P1,O1), taughtby(Z3,N1,G1), taughtby(C4,J1,O1), taughtby(D4,J1,X1), 
   taughtby(E4,J1,O1), taughtby(F4,H1,B2), taughtby(F4,H1,F), courselevel(D2,G2), 
   courselevel(C2,F2), courselevel(A2,H2), courselevel(Z1,H2), courselevel(W1,H2), 
   courselevel(V1,H2), courselevel(U1,F2), courselevel(T1,F2), courselevel(S1,G2), 
   courselevel(R1,H2), courselevel(D2,level_300_7), courselevel(C2,level_400_7), courselevel(A2,level_500_7), 
   courselevel(Z1,level_500_7), courselevel(W1,level_500_7), courselevel(V1,level_500_7), courselevel(U1,level_400_7), 
   courselevel(T1,level_400_7), courselevel(S1,level_300_7), courselevel(R1,level_500_7), position(V3,G4), 
   position(Q1,H), position(P1,H), position(J1,H), position(H1,H), 
   position(V3,faculty_adjunct_8), position(Q1,faculty_8), position(P1,faculty_8), position(J1,faculty_8), 
   position(H1,faculty_8), projectmember(H4,J1), projectmember(I4,J1), projectmember(J4,H1), 
   projectmember(K4,H1), phase(U3,L4), phase(T3,L4), phase(R2,I), 
   phase(Q2,L4), phase(P2,I), phase(N2,M4), phase(K2,I), 
   phase(I2,M4), phase(U3,post_generals_9), phase(T3,post_generals_9), phase(R2,post_quals_9), 
   phase(Q2,post_generals_9), phase(P2,post_quals_9), phase(N2,pre_quals_9), phase(K2,post_quals_9), 
   phase(I2,pre_quals_9), tempadvisedby(N2,E1), tempadvisedby(K2,Q1), tempadvisedby(I2,P1), 
   yearsinprogram(U3,N4), yearsinprogram(T3,O4), yearsinprogram(R2,P4), yearsinprogram(Q2,Q4), 
   yearsinprogram(P2,R4), yearsinprogram(N2,R4), yearsinprogram(K2,P4), yearsinprogram(I2,Q3), 
   ta(D2,S4,K1), ta(D2,T4,F), ta(D2,U4,O1), ta(D2,X3,I1), 
   ta(D2,U4,I1), ta(D2,K2,L), ta(D2,V4,L), ta(U1,T3,G), 
   ta(U1,Q2,L), ta(T1,K2,K1), ta(T1,N2,O1), ta(T1,W4,O1), 
   ta(T1,T3,N), ta(S1,X4,F), ta(S1,Y4,F), ta(S1,Z4,G), 
   ta(S1,A5,G), ta(S1,O2,I1), ta(S1,N2,I1), ta(S1,M2,I1), 
   ta(S1,B5,L), ta(C5,R2,N), ta(D5,N2,F), ta(Z3,K2,I1), 
   ta(Z3,I2,F), professor(V3), professor(Q1), professor(P1), 
   professor(N1), professor(M1), professor(J1), professor(H1), 
   student(U3), student(T3), student(R2), student(Q2), 
   student(P2), student(O2), student(N2), student(M2), 
   student(L2), student(K2), student(J2), student(I2), 
   publication(P3,V3), publication(O3,V3), publication(N3,V3), publication(N3,U3), 
   publication(M3,V3), publication(M3,U3), publication(L3,V3), publication(L3,U3), 
   publication(K3,V3), publication(K3,U3), publication(J3,V3), publication(J3,U3), 
   publication(I3,V3), publication(H3,V3), publication(H3,U3), publication(G3,V3), 
   publication(F3,V3), publication(E3,V3), publication(D3,V3), publication(D3,U3), 
   publication(C3,J1), publication(B3,J1), publication(A3,J1), publication(Z2,Q2), 
   publication(X2,T3), publication(W2,Q2), publication(V2,J1), publication(U2,T3), 
   publication(T2,J1), publication(S2,T3), publication(E5,V3), publication(F5,V3), 
   publication(E5,U3), publication(F5,U3), publication(G5,U3), publication(H5,Q1), 
   publication(I5,Q1), publication(J5,Q1), publication(K5,Q1), publication(L5,Q1), 
   publication(M5,Q1), publication(N5,Q1), publication(O5,Q1), publication(P5,Q1), 
   publication(Q5,Q1), publication(R5,J1), publication(S5,J1), allpublicationswith(V3,V3), 
   allpublicationswith(U3,U3), allpublicationswith(T3,T3), allpublicationswith(T3,E1), allpublicationswith(Q2,Q2), 
   allpublicationswith(Q2,E1), allpublicationswith(Q1,Q1), allpublicationswith(J1,J1), nofpubs(V3,S3), 
   nofpubs(U3,T5), nofpubs(T3,J), nofpubs(R2,C1), nofpubs(Q2,R4), 
   nofpubs(P2,C1), nofpubs(O2,C1), nofpubs(N2,C1), nofpubs(M2,C1), 
   nofpubs(L2,C1), nofpubs(K2,C1), nofpubs(J2,C1), nofpubs(I2,C1), 
   nofpubs(Q1,T5), nofpubs(P1,C1), nofpubs(N1,C1), nofpubs(M1,C1), 
   nofpubs(J1,O4), nofpubs(H1,C1), commonpub(V3,D1), commonpub(V3,U3), 
   commonpub(V3,V3), commonpub(U3,U5), commonpub(U3,D1), commonpub(U3,U3), 
   commonpub(U3,V3), commonpub(U3,V5), commonpub(T3,T3), commonpub(T3,E1), 
   commonpub(Q2,E1), commonpub(Q2,Q2), commonpub(Q1,Q1), commonpub(Q1,V5), 
   commonpub(J1,U5), commonpub(J1,J1), commonpub(J1,E1), geq(S3,15), 
   geq(R3,22), geq(Q3,1), geq(S3,S3), geq(S3,Q3), 
   geq(S3,C1), geq(S3,B1), geq(S3,J), geq(R3,S3), 
   geq(R3,R3), geq(R3,Q3), geq(R3,C1), geq(R3,B1), 
   geq(R3,J), geq(Q3,Q3), geq(Q3,C1), geq(B1,Q3), 
   geq(J,Q3), diff(S3,R3), diff(S3,Q3), diff(S3,C1), 
   diff(S3,B1), diff(S3,J), diff(R3,S3), diff(R3,Q3), 
   diff(R3,C1), diff(R3,B1), diff(R3,J), diff(Q3,S3), 
   diff(Q3,R3), diff(Q3,C1), diff(Q3,B1), diff(Q3,J), 
   diff(C1,S3), diff(B1,S3), diff(J,S3), diff(C1,R3), 
   diff(B1,R3), diff(J,R3), diff(C1,Q3), diff(B1,Q3), 
   diff(J,Q3), taughtby(Z3,W5,B2), taughtby(Z3,X5,L), taughtby(Z3,W3,K1), 
   taughtby(Y5,W3,G), taughtby(Z5,W3,G), courselevel(D5,H2), courselevel(C5,H2), 
   courselevel(F4,H2), courselevel(E4,H2), courselevel(D4,F2), courselevel(C4,H2), 
   courselevel(B4,H2), courselevel(A4,H2), courselevel(Z3,G2), courselevel(D5,level_500_7), 
   courselevel(C5,level_500_7), courselevel(F4,level_500_7), courselevel(E4,level_500_7), courselevel(D4,level_400_7), 
   courselevel(C4,level_500_7), courselevel(B4,level_500_7), courselevel(A4,level_500_7), courselevel(Z3,level_300_7), 
   phase(B5,I), phase(Y4,M4), phase(X4,M4), phase(V4,I), 
   phase(X3,M4), phase(B5,post_quals_9), phase(Y4,pre_quals_9), phase(X4,pre_quals_9), 
   phase(V4,post_quals_9), phase(X3,pre_quals_9), tempadvisedby(Y4,E1), tempadvisedby(X4,J1), 
   tempadvisedby(V4,H1), tempadvisedby(X3,B), yearsinprogram(B5,J), yearsinprogram(Y4,Q3), 
   yearsinprogram(X4,Q3), yearsinprogram(V4,J), yearsinprogram(X3,R4), ta(F4,V4,F), 
   ta(E4,X5,O1), ta(Z3,X5,K1), ta(Z3,Z4,O1), ta(Z3,B5,O1), 
   ta(Z3,A6,L), ta(Z3,B6,N), ta(Z5,X3,G), professor(W3), 
   student(V5), student(U5), student(B5), student(A5), 
   student(Z4), student(Y4), student(X4), student(W4), 
   student(V4), student(U4), student(T4), student(S4), 
   student(X3), publication(S5,U5), publication(R5,U5), publication(Q5,V5), 
   publication(P5,V5), publication(O5,V5), publication(N5,V5), publication(M5,V5), 
   publication(L5,V5), publication(K5,V5), publication(J5,V5), publication(I5,V5), 
   publication(H5,V5), publication(G5,V5), publication(G5,U5), allpublicationswith(V5,V5), 
   allpublicationswith(U5,U5), allpublicationswith(Q1,V5), nofpubs(V5,C6), nofpubs(U5,J), 
   nofpubs(B5,C1), nofpubs(A5,C1), nofpubs(Z4,C1), nofpubs(Y4,C1), 
   nofpubs(X4,C1), nofpubs(W4,C1), nofpubs(V4,C1), nofpubs(U4,C1), 
   nofpubs(T4,C1), nofpubs(S4,C1), nofpubs(X3,C1), nofpubs(W3,C1), 
   commonpub(V5,U5), commonpub(V5,U3), commonpub(V5,Q1), commonpub(V5,V5), 
   commonpub(U5,U5), commonpub(U5,U3), commonpub(U5,J1), commonpub(U5,V5), 
   geq(T5,10), geq(R4,2), geq(Q4,6), geq(P4,4), 
   geq(O4,7), geq(N4,5), geq(T5,T5), geq(T5,R4), 
   geq(T5,Q4), geq(T5,P4), geq(T5,O4), geq(T5,N4), 
   geq(T5,Q3), geq(T5,C1), geq(T5,J), geq(R4,R4), 
   geq(R4,Q3), geq(R4,C1), geq(Q4,R4), geq(Q4,Q4), 
   geq(Q4,P4), geq(Q4,N4), geq(Q4,Q3), geq(Q4,C1), 
   geq(Q4,J), geq(P4,R4), geq(P4,P4), geq(P4,Q3), 
   geq(P4,C1), geq(P4,J), geq(O4,R4), geq(O4,Q4), 
   geq(O4,P4), geq(O4,O4), geq(O4,N4), geq(O4,Q3), 
   geq(O4,C1), geq(O4,J), geq(N4,R4), geq(N4,P4), 
   geq(N4,N4), geq(N4,Q3), geq(N4,C1), geq(N4,J), 
   geq(S3,T5), geq(R3,T5), geq(B1,T5), geq(S3,R4), 
   geq(R3,R4), geq(B1,R4), geq(J,R4), geq(S3,Q4), 
   geq(R3,Q4), geq(B1,Q4), geq(S3,P4), geq(R3,P4), 
   geq(B1,P4), geq(S3,O4), geq(R3,O4), geq(B1,O4), 
   geq(S3,N4), geq(R3,N4), geq(B1,N4), diff(T5,R4), 
   diff(T5,Q4), diff(T5,P4), diff(T5,O4), diff(T5,N4), 
   diff(T5,S3), diff(T5,R3), diff(T5,Q3), diff(T5,C1), 
   diff(T5,B1), diff(T5,J), diff(R4,T5), diff(R4,Q4), 
   diff(R4,P4), diff(R4,O4), diff(R4,N4), diff(R4,S3), 
   diff(R4,R3), diff(R4,Q3), diff(R4,C1), diff(R4,B1), 
   diff(R4,J), diff(Q4,T5), diff(Q4,R4), diff(Q4,P4), 
   diff(Q4,O4), diff(Q4,N4), diff(Q4,S3), diff(Q4,R3), 
   diff(Q4,Q3), diff(Q4,C1), diff(Q4,B1), diff(Q4,J), 
   diff(P4,T5), diff(P4,R4), diff(P4,Q4), diff(P4,O4), 
   diff(P4,N4), diff(P4,S3), diff(P4,R3), diff(P4,Q3), 
   diff(P4,C1), diff(P4,B1), diff(P4,J), diff(O4,T5), 
   diff(O4,R4), diff(O4,Q4), diff(O4,P4), diff(O4,N4), 
   diff(O4,S3), diff(O4,R3), diff(O4,Q3), diff(O4,C1), 
   diff(O4,B1), diff(O4,J), diff(N4,T5), diff(N4,R4), 
   diff(N4,Q4), diff(N4,P4), diff(N4,O4), diff(N4,S3), 
   diff(N4,R3), diff(N4,Q3), diff(N4,C1), diff(N4,B1), 
   diff(N4,J), diff(S3,T5), diff(R3,T5), diff(Q3,T5), 
   diff(C1,T5), diff(B1,T5), diff(J,T5), diff(S3,R4), 
   diff(R3,R4), diff(Q3,R4), diff(C1,R4), diff(B1,R4), 
   diff(J,R4), diff(S3,Q4), diff(R3,Q4), diff(Q3,Q4), 
   diff(C1,Q4), diff(B1,Q4), diff(J,Q4), diff(S3,P4), 
   diff(R3,P4), diff(Q3,P4), diff(C1,P4), diff(B1,P4), 
   diff(J,P4), diff(S3,O4), diff(R3,O4), diff(Q3,O4), 
   diff(C1,O4), diff(B1,O4), diff(J,O4), diff(S3,N4), 
   diff(R3,N4), diff(Q3,N4), diff(C1,N4), diff(B1,N4), 
   diff(J,N4), courselevel(Z5,H2), courselevel(Y5,H2), courselevel(Z5,level_500_7), 
   courselevel(Y5,level_500_7), phase(X5,L4), phase(X5,post_generals_9), yearsinprogram(X5,Q4), 
   professor(W5), student(B6), student(A6), student(X5), 
   nofpubs(B6,C1), nofpubs(A6,C1), nofpubs(X5,C1), nofpubs(W5,C1), 
   geq(C6,11), geq(C6,C6), geq(C6,T5), geq(C6,R4), 
   geq(C6,Q4), geq(C6,P4), geq(C6,O4), geq(C6,N4), 
   geq(C6,Q3), geq(C6,C1), geq(C6,J), geq(S3,C6), 
   geq(R3,C6), geq(B1,C6), diff(C6,T5), diff(C6,R4), 
   diff(C6,Q4), diff(C6,P4), diff(C6,O4), diff(C6,N4), 
   diff(C6,S3), diff(C6,R3), diff(C6,Q3), diff(C6,C1), 
   diff(C6,B1), diff(C6,J), diff(T5,C6), diff(R4,C6), 
   diff(Q4,C6), diff(P4,C6), diff(O4,C6), diff(N4,C6), 
   diff(S3,C6), diff(R3,C6), diff(Q3,C6), diff(C1,C6), 
   diff(B1,C6), diff(J,C6).
[literals] [751]
[saturation time] [0.141]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
advisedby(A,B) :-
   taughtby(C,B,D), taughtby(E,B,F), taughtby(E,B,G), position(B,H), 
   position(B,faculty_8), phase(A,I), phase(A,post_quals_9), yearsinprogram(A,J), 
   ta(K,A,L), ta(M,A,N), professor(B), student(A), 
   publication(O,B), publication(P,B), publication(Q,B), publication(R,B), 
   publication(S,B), publication(T,B), publication(U,B), publication(V,B), 
   publication(W,B), publication(X,B), publication(Y,B), publication(Z,B), 
   publication(A1,B), allpublicationswith(B,B), nofpubs(B,B1), nofpubs(A,C1), 
   commonpub(B,D1), commonpub(B,E1), commonpub(B,B), commonpub(B,F1), 
   taughtby(M,E1,G1), taughtby(M,H1,N), taughtby(M,E1,I1), taughtby(M,J1,K1), 
   taughtby(K,H1,L1), taughtby(K,D1,G1), taughtby(K,M1,D), taughtby(K,J1,N), 
   taughtby(K,N1,L), taughtby(K,D1,O1), taughtby(K,P1,G), taughtby(K,D1,F), 
   taughtby(K,E1,K1), taughtby(C,Q1,L), taughtby(C,D1,G), taughtby(C,Q1,K1), 
   taughtby(R1,E1,L1), taughtby(S1,E1,D), taughtby(T1,E1,O1), taughtby(U1,E1,G), 
   taughtby(V1,E1,F), taughtby(W1,E1,X1), taughtby(Y1,E1,F), taughtby(Z1,D1,L1), 
   taughtby(U1,D1,D), taughtby(A2,D1,B2), taughtby(C2,D1,N), taughtby(U1,D1,L), 
   taughtby(D2,D1,I1), taughtby(C2,D1,K1), taughtby(U1,D1,X1), taughtby(E2,D1,K1), 
   taughtby(E2,D1,N), courselevel(M,F2), courselevel(K,G2), courselevel(C,H2), 
   courselevel(M,level_400_7), courselevel(K,level_300_7), courselevel(C,level_500_7), position(E1,H), 
   position(D1,H), position(E1,faculty_8), position(D1,faculty_8), ta(M,I2,K1), 
   ta(M,J2,I1), ta(M,K2,N), ta(K,L2,K1), ta(K,M2,F), 
   ta(K,N2,G), ta(K,M2,G), ta(K,O2,O1), ta(K,P2,O1), 
   ta(K,J2,L), ta(K,Q2,N), ta(K,J2,N), ta(C,N2,K1), 
   ta(C,R2,G), ta(C,R2,L), professor(E1), professor(D1), 
   student(F1), publication(A1,E1), publication(Z,E1), publication(Y,E1), 
   publication(X,E1), publication(W,E1), publication(V,E1), publication(U,F1), 
   publication(T,D1), publication(S,E1), publication(R,E1), publication(Q,E1), 
   publication(P,E1), publication(O,E1), publication(S2,E1), publication(T2,E1), 
   publication(U2,E1), publication(V2,E1), publication(W2,E1), publication(X2,E1), 
   publication(Y2,E1), publication(Z2,E1), publication(A3,E1), publication(B3,E1), 
   publication(C3,E1), publication(D3,D1), publication(E3,D1), publication(F3,D1), 
   publication(G3,D1), publication(H3,D1), publication(I3,D1), publication(J3,D1), 
   publication(K3,D1), publication(L3,D1), publication(M3,D1), publication(N3,D1), 
   publication(O3,D1), publication(P3,D1), publication(Y2,D1), allpublicationswith(F1,F1), 
   allpublicationswith(F1,B), allpublicationswith(E1,E1), allpublicationswith(D1,D1), nofpubs(F1,Q3), 
   nofpubs(E1,R3), nofpubs(D1,S3), commonpub(F1,B), commonpub(F1,F1), 
   commonpub(E1,D1), commonpub(E1,T3), commonpub(E1,J1), commonpub(E1,E1), 
   commonpub(E1,B), commonpub(E1,Q2), commonpub(D1,D1), commonpub(D1,U3), 
   commonpub(D1,V3), commonpub(D1,E1), commonpub(D1,B), geq(C1,0), 
   geq(B1,13), geq(J,3), geq(C1,C1), geq(B1,C1), 
   geq(B1,B1), geq(B1,J), geq(J,C1), geq(J,J), 
   diff(C1,B1), diff(C1,J), diff(B1,C1), diff(B1,J), 
   diff(J,C1), diff(J,B1), taughtby(D2,N1,B2), taughtby(D2,W3,F), 
   taughtby(A2,Q1,L1), taughtby(Z1,J1,B2), taughtby(Z1,P1,I1), taughtby(Z1,P1,F), 
   taughtby(V1,X3,Y3), taughtby(T1,H1,G1), taughtby(T1,Q1,N), taughtby(T1,H1,K1), 
   taughtby(S1,M1,L1), taughtby(S1,Q1,G1), taughtby(S1,J1,L), taughtby(S1,J1,G), 
   taughtby(S1,Q1,F), taughtby(S1,P1,X1), taughtby(Z3,Q2,F), taughtby(A4,Q1,G1), 
   taughtby(B4,P1,O1), taughtby(Z3,N1,G1), taughtby(C4,J1,O1), taughtby(D4,J1,X1), 
   taughtby(E4,J1,O1), taughtby(F4,H1,B2), taughtby(F4,H1,F), courselevel(D2,G2), 
   courselevel(C2,F2), courselevel(A2,H2), courselevel(Z1,H2), courselevel(W1,H2), 
   courselevel(V1,H2), courselevel(U1,F2), courselevel(T1,F2), courselevel(S1,G2), 
   courselevel(R1,H2), courselevel(D2,level_300_7), courselevel(C2,level_400_7), courselevel(A2,level_500_7), 
   courselevel(Z1,level_500_7), courselevel(W1,level_500_7), courselevel(V1,level_500_7), courselevel(U1,level_400_7), 
   courselevel(T1,level_400_7), courselevel(S1,level_300_7), courselevel(R1,level_500_7), position(V3,G4), 
   position(Q1,H), position(P1,H), position(J1,H), position(H1,H), 
   position(V3,faculty_adjunct_8), position(Q1,faculty_8), position(P1,faculty_8), position(J1,faculty_8), 
   position(H1,faculty_8), projectmember(H4,J1), projectmember(I4,J1), projectmember(J4,H1), 
   projectmember(K4,H1), phase(U3,L4), phase(T3,L4), phase(R2,I), 
   phase(Q2,L4), phase(P2,I), phase(N2,M4), phase(K2,I), 
   phase(I2,M4), phase(U3,post_generals_9), phase(T3,post_generals_9), phase(R2,post_quals_9), 
   phase(Q2,post_generals_9), phase(P2,post_quals_9), phase(N2,pre_quals_9), phase(K2,post_quals_9), 
   phase(I2,pre_quals_9), tempadvisedby(N2,E1), tempadvisedby(K2,Q1), tempadvisedby(I2,P1), 
   yearsinprogram(U3,N4), yearsinprogram(T3,O4), yearsinprogram(R2,P4), yearsinprogram(Q2,Q4), 
   yearsinprogram(P2,R4), yearsinprogram(N2,R4), yearsinprogram(K2,P4), yearsinprogram(I2,Q3), 
   ta(D2,S4,K1), ta(D2,T4,F), ta(D2,U4,O1), ta(D2,X3,I1), 
   ta(D2,U4,I1), ta(D2,K2,L), ta(D2,V4,L), ta(U1,T3,G), 
   ta(U1,Q2,L), ta(T1,K2,K1), ta(T1,N2,O1), ta(T1,W4,O1), 
   ta(T1,T3,N), ta(S1,X4,F), ta(S1,Y4,F), ta(S1,Z4,G), 
   ta(S1,A5,G), ta(S1,O2,I1), ta(S1,N2,I1), ta(S1,M2,I1), 
   ta(S1,B5,L), ta(C5,R2,N), ta(D5,N2,F), ta(Z3,K2,I1), 
   ta(Z3,I2,F), professor(V3), professor(Q1), professor(P1), 
   professor(N1), professor(M1), professor(J1), professor(H1), 
   student(U3), student(T3), student(R2), student(Q2), 
   student(P2), student(O2), student(N2), student(M2), 
   student(L2), student(K2), student(J2), student(I2), 
   publication(P3,V3), publication(O3,V3), publication(N3,V3), publication(N3,U3), 
   publication(M3,V3), publication(M3,U3), publication(L3,V3), publication(L3,U3), 
   publication(K3,V3), publication(K3,U3), publication(J3,V3), publication(J3,U3), 
   publication(I3,V3), publication(H3,V3), publication(H3,U3), publication(G3,V3), 
   publication(F3,V3), publication(E3,V3), publication(D3,V3), publication(D3,U3), 
   publication(C3,J1), publication(B3,J1), publication(A3,J1), publication(Z2,Q2), 
   publication(X2,T3), publication(W2,Q2), publication(V2,J1), publication(U2,T3), 
   publication(T2,J1), publication(S2,T3), publication(E5,V3), publication(F5,V3), 
   publication(E5,U3), publication(F5,U3), publication(G5,U3), publication(H5,Q1), 
   publication(I5,Q1), publication(J5,Q1), publication(K5,Q1), publication(L5,Q1), 
   publication(M5,Q1), publication(N5,Q1), publication(O5,Q1), publication(P5,Q1), 
   publication(Q5,Q1), publication(R5,J1), publication(S5,J1), allpublicationswith(V3,V3), 
   allpublicationswith(U3,U3), allpublicationswith(T3,T3), allpublicationswith(T3,E1), allpublicationswith(Q2,Q2), 
   allpublicationswith(Q2,E1), allpublicationswith(Q1,Q1), allpublicationswith(J1,J1), nofpubs(V3,S3), 
   nofpubs(U3,T5), nofpubs(T3,J), nofpubs(R2,C1), nofpubs(Q2,R4), 
   nofpubs(P2,C1), nofpubs(O2,C1), nofpubs(N2,C1), nofpubs(M2,C1), 
   nofpubs(L2,C1), nofpubs(K2,C1), nofpubs(J2,C1), nofpubs(I2,C1), 
   nofpubs(Q1,T5), nofpubs(P1,C1), nofpubs(N1,C1), nofpubs(M1,C1), 
   nofpubs(J1,O4), nofpubs(H1,C1), commonpub(V3,D1), commonpub(V3,U3), 
   commonpub(V3,V3), commonpub(U3,U5), commonpub(U3,D1), commonpub(U3,U3), 
   commonpub(U3,V3), commonpub(U3,V5), commonpub(T3,T3), commonpub(T3,E1), 
   commonpub(Q2,E1), commonpub(Q2,Q2), commonpub(Q1,Q1), commonpub(Q1,V5), 
   commonpub(J1,U5), commonpub(J1,J1), commonpub(J1,E1), geq(S3,15), 
   geq(R3,22), geq(Q3,1), geq(S3,S3), geq(S3,Q3), 
   geq(S3,C1), geq(S3,B1), geq(S3,J), geq(R3,S3), 
   geq(R3,R3), geq(R3,Q3), geq(R3,C1), geq(R3,B1), 
   geq(R3,J), geq(Q3,Q3), geq(Q3,C1), geq(B1,Q3), 
   geq(J,Q3), diff(S3,R3), diff(S3,Q3), diff(S3,C1), 
   diff(S3,B1), diff(S3,J), diff(R3,S3), diff(R3,Q3), 
   diff(R3,C1), diff(R3,B1), diff(R3,J), diff(Q3,S3), 
   diff(Q3,R3), diff(Q3,C1), diff(Q3,B1), diff(Q3,J), 
   diff(C1,S3), diff(B1,S3), diff(J,S3), diff(C1,R3), 
   diff(B1,R3), diff(J,R3), diff(C1,Q3), diff(B1,Q3), 
   diff(J,Q3), taughtby(Z3,W5,B2), taughtby(Z3,X5,L), taughtby(Z3,W3,K1), 
   taughtby(Y5,W3,G), taughtby(Z5,W3,G), courselevel(D5,H2), courselevel(C5,H2), 
   courselevel(F4,H2), courselevel(E4,H2), courselevel(D4,F2), courselevel(C4,H2), 
   courselevel(B4,H2), courselevel(A4,H2), courselevel(Z3,G2), courselevel(D5,level_500_7), 
   courselevel(C5,level_500_7), courselevel(F4,level_500_7), courselevel(E4,level_500_7), courselevel(D4,level_400_7), 
   courselevel(C4,level_500_7), courselevel(B4,level_500_7), courselevel(A4,level_500_7), courselevel(Z3,level_300_7), 
   phase(B5,I), phase(Y4,M4), phase(X4,M4), phase(V4,I), 
   phase(X3,M4), phase(B5,post_quals_9), phase(Y4,pre_quals_9), phase(X4,pre_quals_9), 
   phase(V4,post_quals_9), phase(X3,pre_quals_9), tempadvisedby(Y4,E1), tempadvisedby(X4,J1), 
   tempadvisedby(V4,H1), tempadvisedby(X3,B), yearsinprogram(B5,J), yearsinprogram(Y4,Q3), 
   yearsinprogram(X4,Q3), yearsinprogram(V4,J), yearsinprogram(X3,R4), ta(F4,V4,F), 
   ta(E4,X5,O1), ta(Z3,X5,K1), ta(Z3,Z4,O1), ta(Z3,B5,O1), 
   ta(Z3,A6,L), ta(Z3,B6,N), ta(Z5,X3,G), professor(W3), 
   student(V5), student(U5), student(B5), student(A5), 
   student(Z4), student(Y4), student(X4), student(W4), 
   student(V4), student(U4), student(T4), student(S4), 
   student(X3), publication(S5,U5), publication(R5,U5), publication(Q5,V5), 
   publication(P5,V5), publication(O5,V5), publication(N5,V5), publication(M5,V5), 
   publication(L5,V5), publication(K5,V5), publication(J5,V5), publication(I5,V5), 
   publication(H5,V5), publication(G5,V5), publication(G5,U5), allpublicationswith(V5,V5), 
   allpublicationswith(U5,U5), allpublicationswith(Q1,V5), nofpubs(V5,C6), nofpubs(U5,J), 
   nofpubs(B5,C1), nofpubs(A5,C1), nofpubs(Z4,C1), nofpubs(Y4,C1), 
   nofpubs(X4,C1), nofpubs(W4,C1), nofpubs(V4,C1), nofpubs(U4,C1), 
   nofpubs(T4,C1), nofpubs(S4,C1), nofpubs(X3,C1), nofpubs(W3,C1), 
   commonpub(V5,U5), commonpub(V5,U3), commonpub(V5,Q1), commonpub(V5,V5), 
   commonpub(U5,U5), commonpub(U5,U3), commonpub(U5,J1), commonpub(U5,V5), 
   geq(T5,10), geq(R4,2), geq(Q4,6), geq(P4,4), 
   geq(O4,7), geq(N4,5), geq(T5,T5), geq(T5,R4), 
   geq(T5,Q4), geq(T5,P4), geq(T5,O4), geq(T5,N4), 
   geq(T5,Q3), geq(T5,C1), geq(T5,J), geq(R4,R4), 
   geq(R4,Q3), geq(R4,C1), geq(Q4,R4), geq(Q4,Q4), 
   geq(Q4,P4), geq(Q4,N4), geq(Q4,Q3), geq(Q4,C1), 
   geq(Q4,J), geq(P4,R4), geq(P4,P4), geq(P4,Q3), 
   geq(P4,C1), geq(P4,J), geq(O4,R4), geq(O4,Q4), 
   geq(O4,P4), geq(O4,O4), geq(O4,N4), geq(O4,Q3), 
   geq(O4,C1), geq(O4,J), geq(N4,R4), geq(N4,P4), 
   geq(N4,N4), geq(N4,Q3), geq(N4,C1), geq(N4,J), 
   geq(S3,T5), geq(R3,T5), geq(B1,T5), geq(S3,R4), 
   geq(R3,R4), geq(B1,R4), geq(J,R4), geq(S3,Q4), 
   geq(R3,Q4), geq(B1,Q4), geq(S3,P4), geq(R3,P4), 
   geq(B1,P4), geq(S3,O4), geq(R3,O4), geq(B1,O4), 
   geq(S3,N4), geq(R3,N4), geq(B1,N4), diff(T5,R4), 
   diff(T5,Q4), diff(T5,P4), diff(T5,O4), diff(T5,N4), 
   diff(T5,S3), diff(T5,R3), diff(T5,Q3), diff(T5,C1), 
   diff(T5,B1), diff(T5,J), diff(R4,T5), diff(R4,Q4), 
   diff(R4,P4), diff(R4,O4), diff(R4,N4), diff(R4,S3), 
   diff(R4,R3), diff(R4,Q3), diff(R4,C1), diff(R4,B1), 
   diff(R4,J), diff(Q4,T5), diff(Q4,R4), diff(Q4,P4), 
   diff(Q4,O4), diff(Q4,N4), diff(Q4,S3), diff(Q4,R3), 
   diff(Q4,Q3), diff(Q4,C1), diff(Q4,B1), diff(Q4,J), 
   diff(P4,T5), diff(P4,R4), diff(P4,Q4), diff(P4,O4), 
   diff(P4,N4), diff(P4,S3), diff(P4,R3), diff(P4,Q3), 
   diff(P4,C1), diff(P4,B1), diff(P4,J), diff(O4,T5), 
   diff(O4,R4), diff(O4,Q4), diff(O4,P4), diff(O4,N4), 
   diff(O4,S3), diff(O4,R3), diff(O4,Q3), diff(O4,C1), 
   diff(O4,B1), diff(O4,J), diff(N4,T5), diff(N4,R4), 
   diff(N4,Q4), diff(N4,P4), diff(N4,O4), diff(N4,S3), 
   diff(N4,R3), diff(N4,Q3), diff(N4,C1), diff(N4,B1), 
   diff(N4,J), diff(S3,T5), diff(R3,T5), diff(Q3,T5), 
   diff(C1,T5), diff(B1,T5), diff(J,T5), diff(S3,R4), 
   diff(R3,R4), diff(Q3,R4), diff(C1,R4), diff(B1,R4), 
   diff(J,R4), diff(S3,Q4), diff(R3,Q4), diff(Q3,Q4), 
   diff(C1,Q4), diff(B1,Q4), diff(J,Q4), diff(S3,P4), 
   diff(R3,P4), diff(Q3,P4), diff(C1,P4), diff(B1,P4), 
   diff(J,P4), diff(S3,O4), diff(R3,O4), diff(Q3,O4), 
   diff(C1,O4), diff(B1,O4), diff(J,O4), diff(S3,N4), 
   diff(R3,N4), diff(Q3,N4), diff(C1,N4), diff(B1,N4), 
   diff(J,N4), courselevel(Z5,H2), courselevel(Y5,H2), courselevel(Z5,level_500_7), 
   courselevel(Y5,level_500_7), phase(X5,L4), phase(X5,post_generals_9), yearsinprogram(X5,Q4), 
   professor(W5), student(B6), student(A6), student(X5), 
   nofpubs(B6,C1), nofpubs(A6,C1), nofpubs(X5,C1), nofpubs(W5,C1), 
   geq(C6,11), geq(C6,C6), geq(C6,T5), geq(C6,R4), 
   geq(C6,Q4), geq(C6,P4), geq(C6,O4), geq(C6,N4), 
   geq(C6,Q3), geq(C6,C1), geq(C6,J), geq(S3,C6), 
   geq(R3,C6), geq(B1,C6), diff(C6,T5), diff(C6,R4), 
   diff(C6,Q4), diff(C6,P4), diff(C6,O4), diff(C6,N4), 
   diff(C6,S3), diff(C6,R3), diff(C6,Q3), diff(C6,C1), 
   diff(C6,B1), diff(C6,J), diff(T5,C6), diff(R4,C6), 
   diff(Q4,C6), diff(P4,C6), diff(O4,C6), diff(N4,C6), 
   diff(S3,C6), diff(R3,C6), diff(Q3,C6), diff(C1,C6), 
   diff(B1,C6), diff(J,C6).
[literals] [751]
[saturation time] [0.143]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[sat] [1]

[bottom clause]
[literals] [1]
[saturation time] [0.003]
[sat] [1]

[bottom clause]
[literals] [1]
[saturation time] [0.003]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]

[bottom clause]
[literals] [1]
[saturation time] [0.336]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]

[bottom clause]
[literals] [1]
[saturation time] [0.34]
[error] [set(evalfn,f)]
[consulting pos examples] [advisedby.f]
[consulting neg examples] [advisedby.n]
[sat] [2]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.155]
[sat] [10]
[advisedby(person6_1,person29_1)]
[sat] [10]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.146]
[sat] [2]
[advisedby(person141_1,person331_1)]
[sat] [2]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.158]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.143]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.15]
[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]

:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(735,0,nofpubs(152,159),[[1]/person],[[2]/number],[946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983]).
'$aleph_sat_litinfo'(736,0,nofpubs(151,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(644,0,yearsinprogram(126,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(641,0,yearsinprogram(132,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(512,0,nofpubs(98,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(9,0,yearsinprogram(1,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(28,0,nofpubs(2,28),[[1]/person],[[2]/number],[192,195,196,197,200,202,203,205,552,558,562,567,572,577,580,583,586,803,806,810,813,816,819,829,840,851,862,873,884,890,896,902,908,914,920,959,970,982]).
'$aleph_sat_litinfo'(945,0,nofpubs(153,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(944,0,nofpubs(154,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(943,0,nofpubs(157,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(942,0,nofpubs(158,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(748,0,nofpubs(101,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(747,0,nofpubs(102,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(746,0,nofpubs(123,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(745,0,nofpubs(124,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(744,0,nofpubs(125,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(743,0,nofpubs(126,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(742,0,nofpubs(127,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(741,0,nofpubs(128,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(740,0,nofpubs(129,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(739,0,nofpubs(130,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(738,0,nofpubs(131,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(737,0,nofpubs(132,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(528,0,nofpubs(34,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(526,0,nofpubs(39,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(525,0,nofpubs(40,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(524,0,nofpubs(42,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(522,0,nofpubs(61,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(521,0,nofpubs(62,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(520,0,nofpubs(63,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(519,0,nofpubs(64,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(518,0,nofpubs(65,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(517,0,nofpubs(66,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(516,0,nofpubs(67,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(515,0,nofpubs(68,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(513,0,nofpubs(70,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(29,0,nofpubs(1,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(643,0,yearsinprogram(128,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(642,0,yearsinprogram(129,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(331,0,yearsinprogram(61,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(175,0,nofpubs(32,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(176,0,nofpubs(31,96),[[1]/person],[[2]/number],[547,554,555,556,557,558,559,564,569,570,571,572,573,575,582,583,584,802,805,809,812,815,818,826,837,848,859,870,881,887,893,899,905,911,917,958,967,979]).
'$aleph_sat_litinfo'(510,0,nofpubs(100,97),[[1]/person],[[2]/number],[546,549,550,551,552,553,554,564,565,566,567,568,569,574,579,580,581,801,804,808,811,814,817,825,836,847,858,869,880,886,892,898,904,910,916,957,966,978]).
'$aleph_sat_litinfo'(177,0,nofpubs(30,97),[[1]/person],[[2]/number],[546,549,550,551,552,553,554,564,565,566,567,568,569,574,579,580,581,801,804,808,811,814,817,825,836,847,858,869,880,886,892,898,904,910,916,957,966,978]).
'$aleph_sat_litinfo'(324,0,yearsinprogram(99,118),[[1]/person],[[2]/number],[762,768,778,791,795,796,797,798,799,800,817,818,819,824,835,846,857,868,875,876,877,878,879,880,881,882,883,884,885,916,917,918,919,920,921,953,965,977]).
'$aleph_sat_litinfo'(527,0,nofpubs(36,119),[[1]/person],[[2]/number],[761,767,787,788,789,790,791,792,793,794,814,815,816,823,834,845,856,864,865,866,867,868,869,870,871,872,873,874,879,910,911,912,913,914,915,952,964,976]).
'$aleph_sat_litinfo'(325,0,yearsinprogram(98,119),[[1]/person],[[2]/number],[761,767,787,788,789,790,791,792,793,794,814,815,816,823,834,845,856,864,865,866,867,868,869,870,871,872,873,874,879,910,911,912,913,914,915,952,964,976]).
'$aleph_sat_litinfo'(330,0,yearsinprogram(63,120),[[1]/person],[[2]/number],[760,766,777,782,783,784,785,786,789,796,811,812,813,822,833,844,853,854,855,856,857,858,859,860,861,862,863,867,878,904,905,906,907,908,909,951,963,975]).
'$aleph_sat_litinfo'(326,0,yearsinprogram(70,120),[[1]/person],[[2]/number],[760,766,777,782,783,784,785,786,789,796,811,812,813,822,833,844,853,854,855,856,857,858,859,860,861,862,863,867,878,904,905,906,907,908,909,951,963,975]).
'$aleph_sat_litinfo'(932,0,yearsinprogram(154,121),[[1]/person],[[2]/number],[759,765,775,776,777,778,779,780,781,788,808,809,810,821,832,842,843,844,845,846,847,848,849,850,851,852,855,866,877,898,899,900,901,902,903,950,962,974]).
'$aleph_sat_litinfo'(327,0,yearsinprogram(69,121),[[1]/person],[[2]/number],[759,765,775,776,777,778,779,780,781,788,808,809,810,821,832,842,843,844,845,846,847,848,849,850,851,852,855,866,877,898,899,900,901,902,903,950,962,974]).
'$aleph_sat_litinfo'(645,0,yearsinprogram(102,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(514,0,nofpubs(69,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(329,0,yearsinprogram(66,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(328,0,yearsinprogram(68,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(523,0,nofpubs(43,150),[[1]/person],[[2]/number],[757,763,764,765,766,767,768,769,770,771,801,802,803,820,821,822,823,824,825,826,827,828,829,830,831,842,853,864,875,886,887,888,889,890,891,948,960,972]).
'$aleph_sat_litinfo'(511,0,nofpubs(99,150),[[1]/person],[[2]/number],[757,763,764,765,766,767,768,769,770,771,801,802,803,820,821,822,823,824,825,826,827,828,829,830,831,842,853,864,875,886,887,888,889,890,891,948,960,972]).
'$aleph_sat_litinfo'(596,0,taughtby(104,153,54),[[1]/course],[[2]/person,[3]/date],[925,938,945]).
'$aleph_sat_litinfo'(650,0,ta(104,154,37),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(649,0,ta(109,154,41),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(597,0,taughtby(104,154,12),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(655,0,ta(104,157,12),[[1]/course],[[2]/person,[3]/date],[935,940,943]).
'$aleph_sat_litinfo'(656,0,ta(104,158,14),[[1]/course],[[2]/person,[3]/date],[934,939,942]).
'$aleph_sat_litinfo'(671,0,ta(156,102,7),[[2]/person],[[1]/course,[3]/date],[922,926,928,933]).
'$aleph_sat_litinfo'(604,0,taughtby(156,101,7),[[2]/person],[[1]/course,[3]/date],[922,926,928,933]).
'$aleph_sat_litinfo'(601,0,taughtby(155,101,7),[[2]/person],[[1]/course,[3]/date],[923,927,929]).
'$aleph_sat_litinfo'(753,0,commonpub(151,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(749,0,commonpub(152,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(543,0,commonpub(36,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(532,0,commonpub(99,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(542,0,commonpub(43,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(536,0,commonpub(99,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(599,0,taughtby(104,101,37),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(210,0,taughtby(56,101,6),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(335,0,ta(56,102,35),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(222,0,taughtby(48,102,103),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(332,0,ta(56,123,37),[[1]/course],[[2]/person,[3]/date],[670,685,746]).
'$aleph_sat_litinfo'(333,0,ta(56,124,6),[[1]/course],[[2]/person,[3]/date],[669,684,745]).
'$aleph_sat_litinfo'(336,0,ta(56,125,35),[[1]/course],[[2]/person,[3]/date],[667,668,683,744]).
'$aleph_sat_litinfo'(334,0,ta(56,125,41),[[1]/course],[[2]/person,[3]/date],[667,668,683,744]).
'$aleph_sat_litinfo'(648,0,ta(110,126,6),[[1]/course],[[2]/person,[3]/date],[630,635,639,644,665,666,682,743]).
'$aleph_sat_litinfo'(338,0,ta(56,126,12),[[1]/course],[[2]/person,[3]/date],[630,635,639,644,665,666,682,743]).
'$aleph_sat_litinfo'(343,0,ta(46,127,41),[[1]/course],[[2]/person,[3]/date],[664,681,742]).
'$aleph_sat_litinfo'(345,0,ta(45,128,6),[[1]/course],[[2]/person,[3]/date],[629,634,638,643,663,680,741]).
'$aleph_sat_litinfo'(346,0,ta(45,129,6),[[1]/course],[[2]/person,[3]/date],[628,633,637,642,662,679,740]).
'$aleph_sat_litinfo'(652,0,ta(104,130,41),[[1]/course],[[2]/person,[3]/date],[660,661,678,739]).
'$aleph_sat_litinfo'(347,0,ta(45,130,7),[[1]/course],[[2]/person,[3]/date],[660,661,678,739]).
'$aleph_sat_litinfo'(348,0,ta(45,131,7),[[1]/course],[[2]/person,[3]/date],[659,677,738]).
'$aleph_sat_litinfo'(653,0,ta(104,132,41),[[1]/course],[[2]/person,[3]/date],[627,632,641,657,658,676,737]).
'$aleph_sat_litinfo'(352,0,ta(45,132,12),[[1]/course],[[2]/person,[3]/date],[627,632,641,657,658,676,737]).
'$aleph_sat_litinfo'(594,0,taughtby(105,43,33),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(541,0,commonpub(43,43),[[1]/person],[[2]/person],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(236,0,taughtby(45,43,6),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(232,0,taughtby(45,43,33),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(228,0,taughtby(46,43,14),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(213,0,taughtby(53,43,38),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(52,0,taughtby(3,43,37),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(50,0,taughtby(3,43,12),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(534,0,commonpub(99,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(530,0,commonpub(100,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(187,0,commonpub(30,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(474,0,publication(135,99),[[2]/person],[[1]/ref],[716,717]).
'$aleph_sat_litinfo'(463,0,publication(135,100),[[2]/person],[[1]/ref],[716,717]).
'$aleph_sat_litinfo'(535,0,commonpub(99,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(531,0,commonpub(100,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(188,0,commonpub(30,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(476,0,publication(136,99),[[2]/person],[[1]/ref],[714,715]).
'$aleph_sat_litinfo'(465,0,publication(136,100),[[2]/person],[[1]/ref],[714,715]).
'$aleph_sat_litinfo'(479,0,publication(137,99),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(485,0,publication(138,43),[[2]/person],[[1]/ref],[709,710]).
'$aleph_sat_litinfo'(486,0,publication(139,43),[[2]/person],[[1]/ref],[707,708]).
'$aleph_sat_litinfo'(487,0,publication(140,43),[[2]/person],[[1]/ref],[705,706]).
'$aleph_sat_litinfo'(488,0,publication(141,43),[[2]/person],[[1]/ref],[703,704]).
'$aleph_sat_litinfo'(489,0,publication(142,43),[[2]/person],[[1]/ref],[701,702]).
'$aleph_sat_litinfo'(490,0,publication(143,43),[[2]/person],[[1]/ref],[699,700]).
'$aleph_sat_litinfo'(491,0,publication(144,43),[[2]/person],[[1]/ref],[697,698]).
'$aleph_sat_litinfo'(492,0,publication(145,43),[[2]/person],[[1]/ref],[695,696]).
'$aleph_sat_litinfo'(493,0,publication(146,43),[[2]/person],[[1]/ref],[693,694]).
'$aleph_sat_litinfo'(494,0,publication(147,43),[[2]/person],[[1]/ref],[691,692]).
'$aleph_sat_litinfo'(626,0,projectmember(112,36),[[1]/project],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(625,0,projectmember(113,36),[[1]/project],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(592,0,taughtby(107,36,41),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(591,0,taughtby(108,36,50),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(590,0,taughtby(109,36,41),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(544,0,commonpub(36,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(235,0,taughtby(45,36,7),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(234,0,taughtby(45,36,12),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(216,0,taughtby(52,36,54),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(182,0,commonpub(31,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(41,0,taughtby(11,36,14),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(37,0,taughtby(13,36,37),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(495,0,publication(148,36),[[2]/person],[[1]/ref],[689,690]).
'$aleph_sat_litinfo'(498,0,publication(149,36),[[2]/person],[[1]/ref],[687,688]).
'$aleph_sat_litinfo'(603,0,taughtby(104,101,37),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(380,0,ta(104,61,6),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(373,0,ta(104,63,35),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(252,0,taughtby(104,40,33),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(239,0,taughtby(104,69,6),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(264,0,taughtby(109,36,41),[[2]/person],[[1]/course,[3]/date],[590,608,617,649]).
'$aleph_sat_litinfo'(269,0,taughtby(110,34,6),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(267,0,taughtby(110,34,54),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(357,0,ta(133,70,14),[[2]/person],[[1]/course,[3]/date],[606,615,647]).
'$aleph_sat_litinfo'(364,0,ta(134,66,6),[[2]/person],[[1]/course,[3]/date],[605,614,646]).
'$aleph_sat_litinfo'(190,0,commonpub(30,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(184,0,commonpub(31,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(178,0,commonpub(32,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(49,0,taughtby(3,2,4),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(48,0,taughtby(5,2,7),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(47,0,taughtby(5,2,6),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(32,0,commonpub(2,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(624,0,projectmember(114,34),[[1]/project],[[2]/person],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(623,0,projectmember(115,34),[[1]/project],[[2]/person],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(589,0,taughtby(110,34,6),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(588,0,taughtby(110,34,54),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(230,0,taughtby(46,34,37),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(227,0,taughtby(46,34,33),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(38,0,taughtby(11,34,38),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(35,0,taughtby(13,34,14),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(545,0,commonpub(36,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(539,0,commonpub(69,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(538,0,commonpub(98,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(238,0,taughtby(44,31,38),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(233,0,taughtby(45,31,4),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(229,0,taughtby(46,31,41),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(225,0,taughtby(47,31,7),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(221,0,taughtby(48,31,6),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(220,0,taughtby(49,31,50),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(219,0,taughtby(51,31,6),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(189,0,commonpub(30,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(183,0,commonpub(31,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(46,0,taughtby(11,31,37),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(36,0,taughtby(13,31,35),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(34,0,taughtby(13,31,33),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(31,0,commonpub(2,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(301,0,projectmember(112,36),[[2]/person],[[1]/project],[626]).
'$aleph_sat_litinfo'(302,0,projectmember(113,36),[[2]/person],[[1]/project],[625]).
'$aleph_sat_litinfo'(303,0,projectmember(114,34),[[2]/person],[[1]/project],[624]).
'$aleph_sat_litinfo'(304,0,projectmember(115,34),[[2]/person],[[1]/project],[623]).
'$aleph_sat_litinfo'(242,0,taughtby(105,43,33),[[2]/person],[[1]/course,[3]/date],[594,612,621]).
'$aleph_sat_litinfo'(248,0,taughtby(106,42,41),[[2]/person],[[1]/course,[3]/date],[593,611,620]).
'$aleph_sat_litinfo'(260,0,taughtby(107,36,41),[[2]/person],[[1]/course,[3]/date],[592,610,619]).
'$aleph_sat_litinfo'(263,0,taughtby(108,36,50),[[2]/person],[[1]/course,[3]/date],[591,609,618]).
'$aleph_sat_litinfo'(340,0,ta(47,69,12),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(185,0,commonpub(31,69),[[1]/person],[[2]/person],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(99,0,ta(11,69,14),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(537,0,commonpub(98,98),[[1]/person],[[2]/person],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(344,0,ta(46,98,14),[[1]/course],[[2]/person,[3]/date],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(339,0,ta(47,98,7),[[1]/course],[[2]/person,[3]/date],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(181,0,commonpub(31,98),[[1]/person],[[2]/person],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(231,0,taughtby(45,39,38),[[1]/course],[[2]/person,[3]/date],[255,256,385,526]).
'$aleph_sat_litinfo'(40,0,taughtby(11,39,4),[[1]/course],[[2]/person,[3]/date],[255,256,385,526]).
'$aleph_sat_litinfo'(208,0,taughtby(56,40,54),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(42,0,taughtby(11,40,12),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(237,0,taughtby(45,42,50),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(218,0,taughtby(52,42,6),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(217,0,taughtby(52,42,35),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(44,0,taughtby(11,42,7),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(87,0,ta(13,61,37),[[1]/course],[[2]/person,[3]/date],[312,320,323,331,379,380,399,522]).
'$aleph_sat_litinfo'(100,0,ta(11,62,14),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(98,0,ta(11,62,12),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(88,0,ta(13,62,35),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(341,0,ta(46,63,37),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(337,0,ta(56,63,12),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(89,0,ta(13,63,14),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(91,0,ta(11,64,37),[[1]/course],[[2]/person,[3]/date],[371,396,519]).
'$aleph_sat_litinfo'(351,0,ta(45,65,35),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(94,0,ta(11,65,7),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(92,0,ta(11,65,6),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(350,0,ta(45,66,35),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(342,0,ta(46,66,41),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(101,0,ta(3,66,37),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(93,0,ta(11,66,7),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(349,0,ta(45,67,35),[[1]/course],[[2]/person,[3]/date],[361,362,393,516]).
'$aleph_sat_litinfo'(95,0,ta(11,67,41),[[1]/course],[[2]/person,[3]/date],[361,362,393,516]).
'$aleph_sat_litinfo'(96,0,ta(11,68,41),[[1]/course],[[2]/person,[3]/date],[309,317,328,360,392,515]).
'$aleph_sat_litinfo'(103,0,ta(3,70,12),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(102,0,ta(3,70,7),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(136,0,publication(71,31),[[2]/person],[[1]/ref],[453,454]).
'$aleph_sat_litinfo'(139,0,publication(72,31),[[2]/person],[[1]/ref],[451,452]).
'$aleph_sat_litinfo'(140,0,publication(73,31),[[2]/person],[[1]/ref],[449,450]).
'$aleph_sat_litinfo'(141,0,publication(74,31),[[2]/person],[[1]/ref],[447,448]).
'$aleph_sat_litinfo'(142,0,publication(75,31),[[2]/person],[[1]/ref],[445,446]).
'$aleph_sat_litinfo'(144,0,publication(76,31),[[2]/person],[[1]/ref],[443,444]).
'$aleph_sat_litinfo'(226,0,taughtby(47,30,50),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(224,0,taughtby(47,30,12),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(223,0,taughtby(47,30,4),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(215,0,taughtby(52,30,38),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(214,0,taughtby(53,30,54),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(212,0,taughtby(55,30,37),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(211,0,taughtby(55,30,14),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(209,0,taughtby(56,30,35),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(207,0,taughtby(57,30,14),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(206,0,taughtby(57,30,37),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(186,0,commonpub(30,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(180,0,commonpub(31,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(51,0,taughtby(3,30,7),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(45,0,taughtby(11,30,6),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(43,0,taughtby(11,30,41),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(39,0,taughtby(11,30,33),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(30,0,commonpub(2,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(170,0,publication(77,30),[[2]/person],[[1]/ref],[441,442]).
'$aleph_sat_litinfo'(150,0,publication(77,31),[[2]/person],[[1]/ref],[441,442]).
'$aleph_sat_litinfo'(152,0,publication(78,31),[[2]/person],[[1]/ref],[439,440]).
'$aleph_sat_litinfo'(153,0,publication(79,31),[[2]/person],[[1]/ref],[437,438]).
'$aleph_sat_litinfo'(154,0,publication(80,31),[[2]/person],[[1]/ref],[435,436]).
'$aleph_sat_litinfo'(155,0,publication(81,31),[[2]/person],[[1]/ref],[433,434]).
'$aleph_sat_litinfo'(156,0,publication(82,30),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(157,0,publication(83,30),[[2]/person],[[1]/ref],[428,429]).
'$aleph_sat_litinfo'(158,0,publication(84,30),[[2]/person],[[1]/ref],[426,427]).
'$aleph_sat_litinfo'(159,0,publication(85,30),[[2]/person],[[1]/ref],[424,425]).
'$aleph_sat_litinfo'(160,0,publication(86,30),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(161,0,publication(87,30),[[2]/person],[[1]/ref],[419,420]).
'$aleph_sat_litinfo'(162,0,publication(88,30),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(163,0,publication(89,30),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(164,0,publication(90,30),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(165,0,publication(91,30),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(166,0,publication(92,30),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(167,0,publication(93,30),[[2]/person],[[1]/ref],[402,403]).
'$aleph_sat_litinfo'(169,0,publication(94,30),[[2]/person],[[1]/ref],[400,401]).
'$aleph_sat_litinfo'(261,0,taughtby(45,36,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(259,0,taughtby(45,36,12),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(255,0,taughtby(45,39,38),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(251,0,taughtby(45,42,50),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(245,0,taughtby(45,43,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(241,0,taughtby(45,43,33),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(55,0,taughtby(45,31,4),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(270,0,taughtby(46,34,37),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(266,0,taughtby(46,34,33),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(243,0,taughtby(46,43,14),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(57,0,taughtby(46,31,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(74,0,taughtby(47,30,50),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(68,0,taughtby(47,30,12),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(65,0,taughtby(47,30,4),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(58,0,taughtby(47,31,7),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(253,0,taughtby(56,40,54),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(69,0,taughtby(56,30,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(53,0,taughtby(44,31,38),[[2]/person],[[1]/course,[3]/date],[238,280,290]).
'$aleph_sat_litinfo'(59,0,taughtby(48,31,6),[[2]/person],[[1]/course,[3]/date],[221,222,276,286]).
'$aleph_sat_litinfo'(61,0,taughtby(49,31,50),[[2]/person],[[1]/course,[3]/date],[220,275,285]).
'$aleph_sat_litinfo'(257,0,taughtby(52,36,54),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(250,0,taughtby(52,42,6),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(247,0,taughtby(52,42,35),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(63,0,taughtby(52,30,38),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(240,0,taughtby(53,43,38),[[2]/person],[[1]/course,[3]/date],[213,214,273,283]).
'$aleph_sat_litinfo'(66,0,taughtby(53,30,54),[[2]/person],[[1]/course,[3]/date],[213,214,273,283]).
'$aleph_sat_litinfo'(73,0,taughtby(55,30,37),[[2]/person],[[1]/course,[3]/date],[211,212,272,282]).
'$aleph_sat_litinfo'(67,0,taughtby(55,30,14),[[2]/person],[[1]/course,[3]/date],[211,212,272,282]).
'$aleph_sat_litinfo'(62,0,taughtby(51,31,6),[[2]/person],[[1]/course,[3]/date],[219]).
'$aleph_sat_litinfo'(76,0,taughtby(57,30,14),[[2]/person],[[1]/course,[3]/date],[206,207]).
'$aleph_sat_litinfo'(75,0,taughtby(57,30,37),[[2]/person],[[1]/course,[3]/date],[206,207]).
'$aleph_sat_litinfo'(33,0,commonpub(2,32),[[1]/person],[[2]/person],[106,119,133,171,172,175,178,179]).
'$aleph_sat_litinfo'(14,0,publication(15,2),[[2]/person],[[1]/ref],[131,132]).
'$aleph_sat_litinfo'(15,0,publication(16,2),[[2]/person],[[1]/ref],[129,130]).
'$aleph_sat_litinfo'(16,0,publication(17,2),[[2]/person],[[1]/ref],[127,128]).
'$aleph_sat_litinfo'(17,0,publication(18,2),[[2]/person],[[1]/ref],[125,126]).
'$aleph_sat_litinfo'(18,0,publication(19,2),[[2]/person],[[1]/ref],[123,124]).
'$aleph_sat_litinfo'(19,0,publication(20,2),[[2]/person],[[1]/ref],[121,122]).
'$aleph_sat_litinfo'(20,0,publication(21,2),[[2]/person],[[1]/ref],[119,120]).
'$aleph_sat_litinfo'(21,0,publication(22,2),[[2]/person],[[1]/ref],[117,118]).
'$aleph_sat_litinfo'(22,0,publication(23,2),[[2]/person],[[1]/ref],[115,116]).
'$aleph_sat_litinfo'(23,0,publication(24,2),[[2]/person],[[1]/ref],[113,114]).
'$aleph_sat_litinfo'(24,0,publication(25,2),[[2]/person],[[1]/ref],[111,112]).
'$aleph_sat_litinfo'(25,0,publication(26,2),[[2]/person],[[1]/ref],[109,110]).
'$aleph_sat_litinfo'(26,0,publication(27,2),[[2]/person],[[1]/ref],[107,108]).
'$aleph_sat_litinfo'(71,0,taughtby(3,30,7),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(2,0,taughtby(3,2,4),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(72,0,taughtby(11,30,6),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(70,0,taughtby(11,30,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(64,0,taughtby(11,30,33),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(60,0,taughtby(11,31,37),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(10,0,ta(11,1,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(56,0,taughtby(13,31,35),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(54,0,taughtby(13,31,33),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(11,0,ta(13,1,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(4,0,taughtby(5,2,7),[[2]/person],[[1]/course,[3]/date],[47,48]).
'$aleph_sat_litinfo'(3,0,taughtby(5,2,6),[[2]/person],[[1]/course,[3]/date],[47,48]).
'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(5,0,position(2,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(6,0,position(2,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(7,0,phase(1,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(8,0,phase(1,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(12,0,professor(2),[[1]/person],[],[]).
'$aleph_sat_litinfo'(13,0,student(1),[[1]/person],[],[]).
'$aleph_sat_litinfo'(27,0,allpublicationswith(2,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(77,0,courselevel(13,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(78,0,courselevel(11,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(79,0,courselevel(3,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(80,0,courselevel(13,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(81,0,courselevel(11,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(82,0,courselevel(3,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(83,0,position(31,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(84,0,position(30,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(85,0,position(31,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(86,0,position(30,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(90,0,ta(13,1,14),[[1]/course],[[2]/person,[3]/date],[7,8,9,10,11,13,29]).
'$aleph_sat_litinfo'(97,0,ta(11,1,12),[[1]/course],[[2]/person,[3]/date],[7,8,9,10,11,13,29]).
'$aleph_sat_litinfo'(104,0,professor(31),[[1]/person],[],[]).
'$aleph_sat_litinfo'(105,0,professor(30),[[1]/person],[],[]).
'$aleph_sat_litinfo'(106,0,student(32),[[1]/person],[],[]).
'$aleph_sat_litinfo'(107,0,publication(27,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(108,0,publication(27,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(109,0,publication(26,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(110,0,publication(26,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(111,0,publication(25,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(112,0,publication(25,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(113,0,publication(24,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(114,0,publication(24,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(115,0,publication(23,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(116,0,publication(23,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(117,0,publication(22,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(118,0,publication(22,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(119,0,publication(21,32),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(120,0,publication(21,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(121,0,publication(20,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(122,0,publication(20,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(123,0,publication(19,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(124,0,publication(19,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(125,0,publication(18,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(126,0,publication(18,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(127,0,publication(17,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(128,0,publication(17,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(129,0,publication(16,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(130,0,publication(16,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(131,0,publication(15,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(132,0,publication(15,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(133,0,publication(21,32),[[2]/person],[[1]/ref],[119,120]).
'$aleph_sat_litinfo'(134,0,publication(15,31),[[2]/person],[[1]/ref],[131,132]).
'$aleph_sat_litinfo'(135,0,publication(16,31),[[2]/person],[[1]/ref],[129,130]).
'$aleph_sat_litinfo'(137,0,publication(17,31),[[2]/person],[[1]/ref],[127,128]).
'$aleph_sat_litinfo'(138,0,publication(18,31),[[2]/person],[[1]/ref],[125,126]).
'$aleph_sat_litinfo'(143,0,publication(19,31),[[2]/person],[[1]/ref],[123,124]).
'$aleph_sat_litinfo'(145,0,publication(22,31),[[2]/person],[[1]/ref],[117,118]).
'$aleph_sat_litinfo'(146,0,publication(23,31),[[2]/person],[[1]/ref],[115,116]).
'$aleph_sat_litinfo'(147,0,publication(24,31),[[2]/person],[[1]/ref],[113,114]).
'$aleph_sat_litinfo'(148,0,publication(25,31),[[2]/person],[[1]/ref],[111,112]).
'$aleph_sat_litinfo'(149,0,publication(26,31),[[2]/person],[[1]/ref],[109,110]).
'$aleph_sat_litinfo'(151,0,publication(27,31),[[2]/person],[[1]/ref],[107,108]).
'$aleph_sat_litinfo'(168,0,publication(20,30),[[2]/person],[[1]/ref],[121,122]).
'$aleph_sat_litinfo'(171,0,allpublicationswith(32,32),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(172,0,allpublicationswith(32,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(173,0,allpublicationswith(31,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(174,0,allpublicationswith(30,30),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(179,0,commonpub(32,32),[[1]/person],[[2]/person],[106,119,133,171,172,175,178,179]).
'$aleph_sat_litinfo'(191,0,geq(29,aleph_const(0)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(192,0,geq(28,aleph_const(13)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(193,0,geq(10,aleph_const(3)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(194,0,geq(29,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(195,0,geq(28,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(196,0,geq(28,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(197,0,geq(28,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(198,0,geq(10,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(199,0,geq(10,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(200,0,diff(29,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(201,0,diff(29,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(202,0,diff(28,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(203,0,diff(28,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(204,0,diff(10,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(205,0,diff(10,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(244,0,taughtby(3,43,12),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(246,0,taughtby(3,43,37),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(249,0,taughtby(11,42,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(254,0,taughtby(11,40,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(256,0,taughtby(11,39,4),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(258,0,taughtby(11,36,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(262,0,taughtby(13,36,37),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(265,0,taughtby(11,34,38),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(268,0,taughtby(13,34,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(271,0,courselevel(56,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(272,0,courselevel(55,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(273,0,courselevel(53,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(274,0,courselevel(52,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(275,0,courselevel(49,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(276,0,courselevel(48,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(277,0,courselevel(47,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(278,0,courselevel(46,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(279,0,courselevel(45,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(280,0,courselevel(44,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(281,0,courselevel(56,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(282,0,courselevel(55,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(283,0,courselevel(53,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(284,0,courselevel(52,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(285,0,courselevel(49,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(286,0,courselevel(48,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(287,0,courselevel(47,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(288,0,courselevel(46,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(289,0,courselevel(45,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(290,0,courselevel(44,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(291,0,position(100,111),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(292,0,position(43,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(293,0,position(42,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(294,0,position(36,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(295,0,position(34,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(296,0,position(100,aleph_const(faculty_adjunct_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(297,0,position(43,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(298,0,position(42,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(299,0,position(36,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(300,0,position(34,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(305,0,phase(99,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(306,0,phase(98,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(307,0,phase(70,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(308,0,phase(69,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(309,0,phase(68,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(310,0,phase(66,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(311,0,phase(63,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(312,0,phase(61,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(313,0,phase(99,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(314,0,phase(98,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(315,0,phase(70,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(316,0,phase(69,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(317,0,phase(68,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(318,0,phase(66,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(319,0,phase(63,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(320,0,phase(61,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(321,0,tempadvisedby(66,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(322,0,tempadvisedby(63,43),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(323,0,tempadvisedby(61,42),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(353,0,ta(47,98,7),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(354,0,ta(46,98,14),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(355,0,ta(3,70,7),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(356,0,ta(3,70,12),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(358,0,ta(47,69,12),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(359,0,ta(11,69,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(360,0,ta(11,68,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(361,0,ta(11,67,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(362,0,ta(45,67,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(363,0,ta(3,66,37),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(365,0,ta(11,66,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(366,0,ta(46,66,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(367,0,ta(45,66,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(368,0,ta(11,65,6),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(369,0,ta(11,65,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(370,0,ta(45,65,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(371,0,ta(11,64,37),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(372,0,ta(46,63,37),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(374,0,ta(56,63,12),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(375,0,ta(13,63,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(376,0,ta(13,62,35),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(377,0,ta(11,62,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(378,0,ta(11,62,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(379,0,ta(13,61,37),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(381,0,professor(100),[[1]/person],[],[]).
'$aleph_sat_litinfo'(382,0,professor(43),[[1]/person],[],[]).
'$aleph_sat_litinfo'(383,0,professor(42),[[1]/person],[],[]).
'$aleph_sat_litinfo'(384,0,professor(40),[[1]/person],[],[]).
'$aleph_sat_litinfo'(385,0,professor(39),[[1]/person],[],[]).
'$aleph_sat_litinfo'(386,0,professor(36),[[1]/person],[],[]).
'$aleph_sat_litinfo'(387,0,professor(34),[[1]/person],[],[]).
'$aleph_sat_litinfo'(388,0,student(99),[[1]/person],[],[]).
'$aleph_sat_litinfo'(389,0,student(98),[[1]/person],[],[]).
'$aleph_sat_litinfo'(390,0,student(70),[[1]/person],[],[]).
'$aleph_sat_litinfo'(391,0,student(69),[[1]/person],[],[]).
'$aleph_sat_litinfo'(392,0,student(68),[[1]/person],[],[]).
'$aleph_sat_litinfo'(393,0,student(67),[[1]/person],[],[]).
'$aleph_sat_litinfo'(394,0,student(66),[[1]/person],[],[]).
'$aleph_sat_litinfo'(395,0,student(65),[[1]/person],[],[]).
'$aleph_sat_litinfo'(396,0,student(64),[[1]/person],[],[]).
'$aleph_sat_litinfo'(397,0,student(63),[[1]/person],[],[]).
'$aleph_sat_litinfo'(398,0,student(62),[[1]/person],[],[]).
'$aleph_sat_litinfo'(399,0,student(61),[[1]/person],[],[]).
'$aleph_sat_litinfo'(400,0,publication(94,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(401,0,publication(94,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(402,0,publication(93,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(403,0,publication(93,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(404,0,publication(92,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(405,0,publication(92,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(406,0,publication(92,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(407,0,publication(91,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(408,0,publication(91,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(409,0,publication(91,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(410,0,publication(90,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(411,0,publication(90,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(412,0,publication(90,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(413,0,publication(89,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(414,0,publication(89,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(415,0,publication(89,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(416,0,publication(88,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(417,0,publication(88,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(418,0,publication(88,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(419,0,publication(87,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(420,0,publication(87,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(421,0,publication(86,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(422,0,publication(86,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(423,0,publication(86,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(424,0,publication(85,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(425,0,publication(85,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(426,0,publication(84,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(427,0,publication(84,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(428,0,publication(83,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(429,0,publication(83,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(430,0,publication(82,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(431,0,publication(82,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(432,0,publication(82,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(433,0,publication(81,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(434,0,publication(81,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(435,0,publication(80,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(436,0,publication(80,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(437,0,publication(79,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(438,0,publication(79,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(439,0,publication(78,69),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(440,0,publication(78,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(441,0,publication(77,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(442,0,publication(77,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(443,0,publication(76,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(444,0,publication(76,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(445,0,publication(75,69),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(446,0,publication(75,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(447,0,publication(74,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(448,0,publication(74,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(449,0,publication(73,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(450,0,publication(73,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(451,0,publication(72,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(452,0,publication(72,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(453,0,publication(71,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(454,0,publication(71,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(455,0,publication(82,100),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(456,0,publication(83,100),[[2]/person],[[1]/ref],[428,429]).
'$aleph_sat_litinfo'(457,0,publication(84,100),[[2]/person],[[1]/ref],[426,427]).
'$aleph_sat_litinfo'(458,0,publication(85,100),[[2]/person],[[1]/ref],[424,425]).
'$aleph_sat_litinfo'(459,0,publication(86,100),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(460,0,publication(87,100),[[2]/person],[[1]/ref],[419,420]).
'$aleph_sat_litinfo'(461,0,publication(88,100),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(462,0,publication(89,100),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(464,0,publication(90,100),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(466,0,publication(91,100),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(467,0,publication(92,100),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(468,0,publication(93,100),[[2]/person],[[1]/ref],[402,403]).
'$aleph_sat_litinfo'(469,0,publication(94,100),[[2]/person],[[1]/ref],[400,401]).
'$aleph_sat_litinfo'(470,0,publication(82,99),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(471,0,publication(86,99),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(472,0,publication(88,99),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(473,0,publication(89,99),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(475,0,publication(90,99),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(477,0,publication(91,99),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(478,0,publication(92,99),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(480,0,publication(71,98),[[2]/person],[[1]/ref],[453,454]).
'$aleph_sat_litinfo'(481,0,publication(73,98),[[2]/person],[[1]/ref],[449,450]).
'$aleph_sat_litinfo'(482,0,publication(76,98),[[2]/person],[[1]/ref],[443,444]).
'$aleph_sat_litinfo'(483,0,publication(75,69),[[2]/person],[[1]/ref],[445,446]).
'$aleph_sat_litinfo'(484,0,publication(78,69),[[2]/person],[[1]/ref],[439,440]).
'$aleph_sat_litinfo'(496,0,publication(72,36),[[2]/person],[[1]/ref],[451,452]).
'$aleph_sat_litinfo'(497,0,publication(74,36),[[2]/person],[[1]/ref],[447,448]).
'$aleph_sat_litinfo'(499,0,publication(79,36),[[2]/person],[[1]/ref],[437,438]).
'$aleph_sat_litinfo'(500,0,publication(80,36),[[2]/person],[[1]/ref],[435,436]).
'$aleph_sat_litinfo'(501,0,publication(81,36),[[2]/person],[[1]/ref],[433,434]).
'$aleph_sat_litinfo'(502,0,allpublicationswith(100,100),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(503,0,allpublicationswith(99,99),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(504,0,allpublicationswith(98,98),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(505,0,allpublicationswith(98,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(506,0,allpublicationswith(69,69),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(507,0,allpublicationswith(69,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(508,0,allpublicationswith(43,43),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(509,0,allpublicationswith(36,36),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(529,0,commonpub(100,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(533,0,commonpub(99,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(540,0,commonpub(69,69),[[1]/person],[[2]/person],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(546,0,geq(97,aleph_const(15)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(547,0,geq(96,aleph_const(22)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(548,0,geq(95,aleph_const(1)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(549,0,geq(97,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(550,0,geq(97,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(551,0,geq(97,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(552,0,geq(97,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(553,0,geq(97,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(554,0,geq(96,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(555,0,geq(96,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(556,0,geq(96,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(557,0,geq(96,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(558,0,geq(96,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(559,0,geq(96,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(560,0,geq(95,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(561,0,geq(95,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(562,0,geq(28,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(563,0,geq(10,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(564,0,diff(97,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(565,0,diff(97,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(566,0,diff(97,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(567,0,diff(97,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(568,0,diff(97,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(569,0,diff(96,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(570,0,diff(96,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(571,0,diff(96,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(572,0,diff(96,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(573,0,diff(96,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(574,0,diff(95,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(575,0,diff(95,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(576,0,diff(95,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(577,0,diff(95,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(578,0,diff(95,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(579,0,diff(29,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(580,0,diff(28,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(581,0,diff(10,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(582,0,diff(29,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(583,0,diff(28,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(584,0,diff(10,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(585,0,diff(29,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(586,0,diff(28,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(587,0,diff(10,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(593,0,taughtby(106,42,41),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(595,0,taughtby(104,40,33),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(598,0,taughtby(104,69,6),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(600,0,taughtby(48,102,103),[[2]/person],[[1]/course,[3]/date],[221,222,276,286]).
'$aleph_sat_litinfo'(602,0,taughtby(56,101,6),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(605,0,courselevel(134,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(606,0,courselevel(133,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(607,0,courselevel(110,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(608,0,courselevel(109,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(609,0,courselevel(108,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(610,0,courselevel(107,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(611,0,courselevel(106,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(612,0,courselevel(105,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(613,0,courselevel(104,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(614,0,courselevel(134,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(615,0,courselevel(133,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(616,0,courselevel(110,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(617,0,courselevel(109,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(618,0,courselevel(108,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(619,0,courselevel(107,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(620,0,courselevel(106,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(621,0,courselevel(105,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(622,0,courselevel(104,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(627,0,phase(132,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(628,0,phase(129,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(629,0,phase(128,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(630,0,phase(126,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(631,0,phase(102,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(632,0,phase(132,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(633,0,phase(129,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(634,0,phase(128,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(635,0,phase(126,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(636,0,phase(102,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(637,0,tempadvisedby(129,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(638,0,tempadvisedby(128,36),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(639,0,tempadvisedby(126,34),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(640,0,tempadvisedby(102,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(646,0,ta(134,66,6),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(647,0,ta(133,70,14),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(651,0,ta(104,61,6),[[1]/course],[[2]/person,[3]/date],[312,320,323,331,379,380,399,522]).
'$aleph_sat_litinfo'(654,0,ta(104,63,35),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(657,0,ta(104,132,41),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(658,0,ta(45,132,12),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(659,0,ta(45,131,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(660,0,ta(45,130,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(661,0,ta(104,130,41),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(662,0,ta(45,129,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(663,0,ta(45,128,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(664,0,ta(46,127,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(665,0,ta(110,126,6),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(666,0,ta(56,126,12),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(667,0,ta(56,125,41),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(668,0,ta(56,125,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(669,0,ta(56,124,6),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(670,0,ta(56,123,37),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(672,0,ta(56,102,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(673,0,professor(101),[[1]/person],[],[]).
'$aleph_sat_litinfo'(674,0,student(152),[[1]/person],[],[]).
'$aleph_sat_litinfo'(675,0,student(151),[[1]/person],[],[]).
'$aleph_sat_litinfo'(676,0,student(132),[[1]/person],[],[]).
'$aleph_sat_litinfo'(677,0,student(131),[[1]/person],[],[]).
'$aleph_sat_litinfo'(678,0,student(130),[[1]/person],[],[]).
'$aleph_sat_litinfo'(679,0,student(129),[[1]/person],[],[]).
'$aleph_sat_litinfo'(680,0,student(128),[[1]/person],[],[]).
'$aleph_sat_litinfo'(681,0,student(127),[[1]/person],[],[]).
'$aleph_sat_litinfo'(682,0,student(126),[[1]/person],[],[]).
'$aleph_sat_litinfo'(683,0,student(125),[[1]/person],[],[]).
'$aleph_sat_litinfo'(684,0,student(124),[[1]/person],[],[]).
'$aleph_sat_litinfo'(685,0,student(123),[[1]/person],[],[]).
'$aleph_sat_litinfo'(686,0,student(102),[[1]/person],[],[]).
'$aleph_sat_litinfo'(687,0,publication(149,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(688,0,publication(149,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(689,0,publication(148,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(690,0,publication(148,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(691,0,publication(147,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(692,0,publication(147,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(693,0,publication(146,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(694,0,publication(146,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(695,0,publication(145,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(696,0,publication(145,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(697,0,publication(144,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(698,0,publication(144,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(699,0,publication(143,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(700,0,publication(143,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(701,0,publication(142,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(702,0,publication(142,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(703,0,publication(141,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(704,0,publication(141,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(705,0,publication(140,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(706,0,publication(140,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(707,0,publication(139,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(708,0,publication(139,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(709,0,publication(138,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(710,0,publication(138,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(711,0,publication(137,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(712,0,publication(137,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(713,0,publication(137,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(714,0,publication(136,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(715,0,publication(136,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(716,0,publication(135,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(717,0,publication(135,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(718,0,publication(138,152),[[2]/person],[[1]/ref],[709,710]).
'$aleph_sat_litinfo'(719,0,publication(139,152),[[2]/person],[[1]/ref],[707,708]).
'$aleph_sat_litinfo'(720,0,publication(140,152),[[2]/person],[[1]/ref],[705,706]).
'$aleph_sat_litinfo'(721,0,publication(141,152),[[2]/person],[[1]/ref],[703,704]).
'$aleph_sat_litinfo'(722,0,publication(142,152),[[2]/person],[[1]/ref],[701,702]).
'$aleph_sat_litinfo'(723,0,publication(143,152),[[2]/person],[[1]/ref],[699,700]).
'$aleph_sat_litinfo'(724,0,publication(144,152),[[2]/person],[[1]/ref],[697,698]).
'$aleph_sat_litinfo'(725,0,publication(137,152),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(726,0,publication(145,152),[[2]/person],[[1]/ref],[695,696]).
'$aleph_sat_litinfo'(727,0,publication(146,152),[[2]/person],[[1]/ref],[693,694]).
'$aleph_sat_litinfo'(728,0,publication(147,152),[[2]/person],[[1]/ref],[691,692]).
'$aleph_sat_litinfo'(729,0,publication(148,151),[[2]/person],[[1]/ref],[689,690]).
'$aleph_sat_litinfo'(730,0,publication(149,151),[[2]/person],[[1]/ref],[687,688]).
'$aleph_sat_litinfo'(731,0,publication(137,151),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(732,0,allpublicationswith(152,152),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(733,0,allpublicationswith(151,151),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(734,0,allpublicationswith(43,152),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(750,0,commonpub(152,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(751,0,commonpub(152,43),[[1]/person],[[2]/person],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(752,0,commonpub(152,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(754,0,commonpub(151,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(755,0,commonpub(151,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(756,0,commonpub(151,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(757,0,geq(150,aleph_const(10)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(758,0,geq(122,aleph_const(2)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(759,0,geq(121,aleph_const(6)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(760,0,geq(120,aleph_const(4)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(761,0,geq(119,aleph_const(7)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(762,0,geq(118,aleph_const(5)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(763,0,geq(150,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(764,0,geq(150,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(765,0,geq(150,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(766,0,geq(150,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(767,0,geq(150,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(768,0,geq(150,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(769,0,geq(150,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(770,0,geq(150,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(771,0,geq(150,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(772,0,geq(122,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(773,0,geq(122,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(774,0,geq(122,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(775,0,geq(121,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(776,0,geq(121,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(777,0,geq(121,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(778,0,geq(121,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(779,0,geq(121,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(780,0,geq(121,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(781,0,geq(121,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(782,0,geq(120,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(783,0,geq(120,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(784,0,geq(120,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(785,0,geq(120,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(786,0,geq(120,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(787,0,geq(119,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(788,0,geq(119,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(789,0,geq(119,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(790,0,geq(119,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(791,0,geq(119,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(792,0,geq(119,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(793,0,geq(119,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(794,0,geq(119,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(795,0,geq(118,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(796,0,geq(118,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(797,0,geq(118,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(798,0,geq(118,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(799,0,geq(118,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(800,0,geq(118,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(801,0,geq(97,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(802,0,geq(96,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(803,0,geq(28,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(804,0,geq(97,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(805,0,geq(96,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(806,0,geq(28,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(807,0,geq(10,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(808,0,geq(97,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(809,0,geq(96,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(810,0,geq(28,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(811,0,geq(97,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(812,0,geq(96,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(813,0,geq(28,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(814,0,geq(97,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(815,0,geq(96,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(816,0,geq(28,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(817,0,geq(97,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(818,0,geq(96,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(819,0,geq(28,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(820,0,diff(150,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(821,0,diff(150,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(822,0,diff(150,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(823,0,diff(150,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(824,0,diff(150,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(825,0,diff(150,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(826,0,diff(150,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(827,0,diff(150,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(828,0,diff(150,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(829,0,diff(150,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(830,0,diff(150,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(831,0,diff(122,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(832,0,diff(122,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(833,0,diff(122,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(834,0,diff(122,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(835,0,diff(122,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(836,0,diff(122,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(837,0,diff(122,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(838,0,diff(122,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(839,0,diff(122,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(840,0,diff(122,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(841,0,diff(122,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(842,0,diff(121,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(843,0,diff(121,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(844,0,diff(121,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(845,0,diff(121,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(846,0,diff(121,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(847,0,diff(121,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(848,0,diff(121,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(849,0,diff(121,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(850,0,diff(121,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(851,0,diff(121,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(852,0,diff(121,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(853,0,diff(120,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(854,0,diff(120,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(855,0,diff(120,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(856,0,diff(120,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(857,0,diff(120,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(858,0,diff(120,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(859,0,diff(120,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(860,0,diff(120,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(861,0,diff(120,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(862,0,diff(120,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(863,0,diff(120,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(864,0,diff(119,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(865,0,diff(119,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(866,0,diff(119,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(867,0,diff(119,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(868,0,diff(119,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(869,0,diff(119,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(870,0,diff(119,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(871,0,diff(119,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(872,0,diff(119,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(873,0,diff(119,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(874,0,diff(119,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(875,0,diff(118,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(876,0,diff(118,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(877,0,diff(118,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(878,0,diff(118,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(879,0,diff(118,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(880,0,diff(118,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(881,0,diff(118,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(882,0,diff(118,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(883,0,diff(118,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(884,0,diff(118,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(885,0,diff(118,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(886,0,diff(97,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(887,0,diff(96,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(888,0,diff(95,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(889,0,diff(29,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(890,0,diff(28,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(891,0,diff(10,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(892,0,diff(97,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(893,0,diff(96,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(894,0,diff(95,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(895,0,diff(29,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(896,0,diff(28,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(897,0,diff(10,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(898,0,diff(97,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(899,0,diff(96,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(900,0,diff(95,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(901,0,diff(29,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(902,0,diff(28,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(903,0,diff(10,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(904,0,diff(97,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(905,0,diff(96,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(906,0,diff(95,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(907,0,diff(29,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(908,0,diff(28,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(909,0,diff(10,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(910,0,diff(97,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(911,0,diff(96,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(912,0,diff(95,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(913,0,diff(29,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(914,0,diff(28,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(915,0,diff(10,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(916,0,diff(97,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(917,0,diff(96,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(918,0,diff(95,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(919,0,diff(29,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(920,0,diff(28,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(921,0,diff(10,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(922,0,taughtby(156,101,7),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(923,0,taughtby(155,101,7),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(924,0,taughtby(104,154,12),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(925,0,taughtby(104,153,54),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(926,0,courselevel(156,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(927,0,courselevel(155,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(928,0,courselevel(156,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(929,0,courselevel(155,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(930,0,phase(154,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(931,0,phase(154,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(933,0,ta(156,102,7),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(934,0,ta(104,158,14),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(935,0,ta(104,157,12),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(936,0,ta(104,154,37),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(937,0,ta(109,154,41),[[2]/person],[[1]/course,[3]/date],[590,608,617,649]).
'$aleph_sat_litinfo'(938,0,professor(153),[[1]/person],[],[]).
'$aleph_sat_litinfo'(939,0,student(158),[[1]/person],[],[]).
'$aleph_sat_litinfo'(940,0,student(157),[[1]/person],[],[]).
'$aleph_sat_litinfo'(941,0,student(154),[[1]/person],[],[]).
'$aleph_sat_litinfo'(946,0,geq(159,aleph_const(11)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(947,0,geq(159,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(948,0,geq(159,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(949,0,geq(159,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(950,0,geq(159,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(951,0,geq(159,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(952,0,geq(159,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(953,0,geq(159,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(954,0,geq(159,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(955,0,geq(159,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(956,0,geq(159,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(957,0,geq(97,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(958,0,geq(96,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(959,0,geq(28,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(960,0,diff(159,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(961,0,diff(159,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(962,0,diff(159,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(963,0,diff(159,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(964,0,diff(159,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(965,0,diff(159,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(966,0,diff(159,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(967,0,diff(159,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(968,0,diff(159,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(969,0,diff(159,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(970,0,diff(159,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(971,0,diff(159,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(972,0,diff(150,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(973,0,diff(122,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(974,0,diff(121,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(975,0,diff(120,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(976,0,diff(119,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(977,0,diff(118,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(978,0,diff(97,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(979,0,diff(96,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(980,0,diff(95,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(981,0,diff(29,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(982,0,diff(28,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(983,0,diff(10,159),[[1]/number,[2]/number],[],[]).


interesting_threshold(1).


diff(A,B) :-
   A\=B.


geq(B,A) :-
   var(A),
   !,
   B=A.
geq(A,B) :-
   A>=B.


allpublicationswith(A,B) :-
   nofpubs(A,C),
   commonpubs(A,B,C).


commonpubsratio(A,B,C) :-
   nofpubs(A,E),
   commonpubs(A,B,D),
   C is integer(D*100/E).


commonpubs(B,C,E) :-
   prolog:setof(A,(publication(A,B),publication(A,C)),D),
   length(D,E).


member(A,[A|_]).
member(A,[_|B]) :-
   member(A,B).


commonpub(C,A) :-
   prolog:setof(A,B^ (publication(B,C),publication(B,A)),D),
   member(A,D).


nofpubs(B,D) :-
   prolog:setof(A,publication(A,B),C),
   !,
   length(C,D).
nofpubs(_,0).


sameproject(project50_5,project50_5).
sameproject(project58_5,project58_5).
sameproject(project104_5,project104_5).
sameproject(project20_5,project20_5).
sameproject(project74_5,project74_5).
sameproject(project62_5,project62_5).
sameproject(project17_5,project17_5).
sameproject(project82_5,project82_5).
sameproject(project24_5,project24_5).
sameproject(project127_5,project127_5).
sameproject(project131_5,project131_5).
sameproject(project38_5,project38_5).
sameproject(project41_5,project41_5).
sameproject(project100_5,project100_5).
sameproject(project76_5,project76_5).
sameproject(project111_5,project111_5).
sameproject(project124_5,project124_5).
sameproject(project77_5,project77_5).
sameproject(project11_5,project11_5).
sameproject(project52_5,project52_5).
sameproject(project51_5,project51_5).
sameproject(project115_5,project115_5).
sameproject(project141_5,project141_5).
sameproject(project70_5,project70_5).
sameproject(project146_5,project146_5).
sameproject(project150_5,project150_5).
sameproject(project73_5,project73_5).
sameproject(project42_5,project42_5).
sameproject(project36_5,project36_5).
sameproject(project13_5,project13_5).
sameproject(project85_5,project85_5).
sameproject(project7_5,project7_5).
sameproject(project121_5,project121_5).
sameproject(project0_5,project0_5).
sameproject(project33_5,project33_5).
sameproject(project29_5,project29_5).
sameproject(project84_5,project84_5).
sameproject(project90_5,project90_5).
sameproject(project83_5,project83_5).
sameproject(project97_5,project97_5).
sameproject(project113_5,project113_5).
sameproject(project116_5,project116_5).
sameproject(project143_5,project143_5).
sameproject(project66_5,project66_5).
sameproject(project101_5,project101_5).
sameproject(project103_5,project103_5).
sameproject(project91_5,project91_5).
sameproject(project96_5,project96_5).
sameproject(project15_5,project15_5).
sameproject(project140_5,project140_5).
sameproject(project78_5,project78_5).
sameproject(project47_5,project47_5).
sameproject(project106_5,project106_5).
sameproject(project118_5,project118_5).
sameproject(project133_5,project133_5).
sameproject(project34_5,project34_5).
sameproject(project151_5,project151_5).
sameproject(project81_5,project81_5).
sameproject(project123_5,project123_5).
sameproject(project23_5,project23_5).
sameproject(project132_5,project132_5).
sameproject(project71_5,project71_5).
sameproject(project135_5,project135_5).
sameproject(project149_5,project149_5).
sameproject(project25_5,project25_5).
sameproject(project65_5,project65_5).
sameproject(project6_5,project6_5).
sameproject(project88_5,project88_5).
sameproject(project54_5,project54_5).
sameproject(project105_5,project105_5).
sameproject(project46_5,project46_5).
sameproject(project142_5,project142_5).
sameproject(project48_5,project48_5).
sameproject(project2_5,project2_5).
sameproject(project92_5,project92_5).
sameproject(project86_5,project86_5).
sameproject(project19_5,project19_5).
sameproject(project139_5,project139_5).
sameproject(project117_5,project117_5).
sameproject(project98_5,project98_5).
sameproject(project59_5,project59_5).
sameproject(project145_5,project145_5).
sameproject(project69_5,project69_5).
sameproject(project53_5,project53_5).
sameproject(project107_5,project107_5).
sameproject(project136_5,project136_5).
sameproject(project87_5,project87_5).
sameproject(project45_5,project45_5).
sameproject(project79_5,project79_5).
sameproject(project35_5,project35_5).
sameproject(project49_5,project49_5).
sameproject(project9_5,project9_5).
sameproject(project102_5,project102_5).
sameproject(project108_5,project108_5).
sameproject(project89_5,project89_5).
sameproject(project147_5,project147_5).
sameproject(project3_5,project3_5).
sameproject(project95_5,project95_5).
sameproject(project120_5,project120_5).
sameproject(project27_5,project27_5).
sameproject(project16_5,project16_5).
sameproject(project60_5,project60_5).
sameproject(project125_5,project125_5).
sameproject(project39_5,project39_5).
sameproject(project32_5,project32_5).
sameproject(project44_5,project44_5).
sameproject(project14_5,project14_5).
sameproject(project114_5,project114_5).
sameproject(project80_5,project80_5).
sameproject(project43_5,project43_5).
sameproject(project110_5,project110_5).
sameproject(project68_5,project68_5).
sameproject(project75_5,project75_5).
sameproject(project128_5,project128_5).
sameproject(project112_5,project112_5).
sameproject(project37_5,project37_5).
sameproject(project93_5,project93_5).
sameproject(project40_5,project40_5).
sameproject(project148_5,project148_5).
sameproject(project26_5,project26_5).
sameproject(project122_5,project122_5).
sameproject(project4_5,project4_5).
sameproject(project30_5,project30_5).
sameproject(project67_5,project67_5).
sameproject(project55_5,project55_5).
sameproject(project31_5,project31_5).
sameproject(project99_5,project99_5).
sameproject(project134_5,project134_5).
sameproject(project109_5,project109_5).
sameproject(project72_5,project72_5).
sameproject(project8_5,project8_5).
sameproject(project28_5,project28_5).
sameproject(project144_5,project144_5).
sameproject(project10_5,project10_5).
sameproject(project138_5,project138_5).
sameproject(project12_5,project12_5).
sameproject(project1_5,project1_5).
sameproject(project119_5,project119_5).
sameproject(project63_5,project63_5).
sameproject(project5_5,project5_5).
sameproject(project152_5,project152_5).
sameproject(project18_5,project18_5).
sameproject(project56_5,project56_5).
sameproject(project130_5,project130_5).
sameproject(project61_5,project61_5).
sameproject(project126_5,project126_5).
sameproject(project94_5,project94_5).
sameproject(project57_5,project57_5).
sameproject(project22_5,project22_5).
sameproject(project21_5,project21_5).
sameproject(project64_5,project64_5).
sameproject(project0_5,project0_5).
sameproject(project100_5,project100_5).
sameproject(project101_5,project101_5).
sameproject(project102_5,project102_5).
sameproject(project103_5,project103_5).
sameproject(project104_5,project104_5).
sameproject(project105_5,project105_5).
sameproject(project10_5,project10_5).
sameproject(project106_5,project106_5).
sameproject(project107_5,project107_5).
sameproject(project108_5,project108_5).
sameproject(project109_5,project109_5).
sameproject(project110_5,project110_5).
sameproject(project111_5,project111_5).
sameproject(project112_5,project112_5).
sameproject(project113_5,project113_5).
sameproject(project114_5,project114_5).
sameproject(project115_5,project115_5).
sameproject(project11_5,project11_5).
sameproject(project116_5,project116_5).
sameproject(project117_5,project117_5).
sameproject(project118_5,project118_5).
sameproject(project119_5,project119_5).
sameproject(project120_5,project120_5).
sameproject(project121_5,project121_5).
sameproject(project122_5,project122_5).
sameproject(project123_5,project123_5).
sameproject(project124_5,project124_5).
sameproject(project125_5,project125_5).
sameproject(project12_5,project12_5).
sameproject(project126_5,project126_5).
sameproject(project127_5,project127_5).
sameproject(project128_5,project128_5).
sameproject(project130_5,project130_5).
sameproject(project131_5,project131_5).
sameproject(project132_5,project132_5).
sameproject(project133_5,project133_5).
sameproject(project134_5,project134_5).
sameproject(project135_5,project135_5).
sameproject(project13_5,project13_5).
sameproject(project136_5,project136_5).
sameproject(project138_5,project138_5).
sameproject(project139_5,project139_5).
sameproject(project140_5,project140_5).
sameproject(project141_5,project141_5).
sameproject(project142_5,project142_5).
sameproject(project143_5,project143_5).
sameproject(project144_5,project144_5).
sameproject(project145_5,project145_5).
sameproject(project14_5,project14_5).
sameproject(project146_5,project146_5).
sameproject(project147_5,project147_5).
sameproject(project148_5,project148_5).
sameproject(project149_5,project149_5).
sameproject(project150_5,project150_5).
sameproject(project151_5,project151_5).
sameproject(project152_5,project152_5).
sameproject(project15_5,project15_5).
sameproject(project1_5,project1_5).
sameproject(project16_5,project16_5).
sameproject(project17_5,project17_5).
sameproject(project18_5,project18_5).
sameproject(project19_5,project19_5).
sameproject(project20_5,project20_5).
sameproject(project21_5,project21_5).
sameproject(project22_5,project22_5).
sameproject(project23_5,project23_5).
sameproject(project24_5,project24_5).
sameproject(project25_5,project25_5).
sameproject(project2_5,project2_5).
sameproject(project26_5,project26_5).
sameproject(project27_5,project27_5).
sameproject(project28_5,project28_5).
sameproject(project29_5,project29_5).
sameproject(project30_5,project30_5).
sameproject(project31_5,project31_5).
sameproject(project32_5,project32_5).
sameproject(project33_5,project33_5).
sameproject(project34_5,project34_5).
sameproject(project35_5,project35_5).
sameproject(project3_5,project3_5).
sameproject(project36_5,project36_5).
sameproject(project37_5,project37_5).
sameproject(project38_5,project38_5).
sameproject(project39_5,project39_5).
sameproject(project40_5,project40_5).
sameproject(project41_5,project41_5).
sameproject(project42_5,project42_5).
sameproject(project43_5,project43_5).
sameproject(project44_5,project44_5).
sameproject(project45_5,project45_5).
sameproject(project4_5,project4_5).
sameproject(project46_5,project46_5).
sameproject(project47_5,project47_5).
sameproject(project48_5,project48_5).
sameproject(project49_5,project49_5).
sameproject(project50_5,project50_5).
sameproject(project51_5,project51_5).
sameproject(project52_5,project52_5).
sameproject(project53_5,project53_5).
sameproject(project54_5,project54_5).
sameproject(project55_5,project55_5).
sameproject(project5_5,project5_5).
sameproject(project56_5,project56_5).
sameproject(project57_5,project57_5).
sameproject(project58_5,project58_5).
sameproject(project59_5,project59_5).
sameproject(project60_5,project60_5).
sameproject(project61_5,project61_5).
sameproject(project62_5,project62_5).
sameproject(project63_5,project63_5).
sameproject(project64_5,project64_5).
sameproject(project65_5,project65_5).
sameproject(project6_5,project6_5).
sameproject(project66_5,project66_5).
sameproject(project67_5,project67_5).
sameproject(project68_5,project68_5).
sameproject(project69_5,project69_5).
sameproject(project70_5,project70_5).
sameproject(project71_5,project71_5).
sameproject(project72_5,project72_5).
sameproject(project73_5,project73_5).
sameproject(project74_5,project74_5).
sameproject(project75_5,project75_5).
sameproject(project7_5,project7_5).
sameproject(project76_5,project76_5).
sameproject(project77_5,project77_5).
sameproject(project78_5,project78_5).
sameproject(project79_5,project79_5).
sameproject(project80_5,project80_5).
sameproject(project81_5,project81_5).
sameproject(project82_5,project82_5).
sameproject(project83_5,project83_5).
sameproject(project84_5,project84_5).
sameproject(project85_5,project85_5).
sameproject(project8_5,project8_5).
sameproject(project86_5,project86_5).
sameproject(project87_5,project87_5).
sameproject(project88_5,project88_5).
sameproject(project89_5,project89_5).
sameproject(project90_5,project90_5).
sameproject(project91_5,project91_5).
sameproject(project92_5,project92_5).
sameproject(project93_5,project93_5).
sameproject(project94_5,project94_5).
sameproject(project95_5,project95_5).
sameproject(project9_5,project9_5).
sameproject(project96_5,project96_5).
sameproject(project97_5,project97_5).
sameproject(project98_5,project98_5).
sameproject(project99_5,project99_5).


tempadvisedby(person408_1,person150_1).
tempadvisedby(person382_1,person415_1).
tempadvisedby(person333_1,person211_1).
tempadvisedby(person94_1,person79_1).
tempadvisedby(person377_1,person292_1).
tempadvisedby(person412_1,person168_1).
tempadvisedby(person42_1,person150_1).
tempadvisedby(person20_1,person240_1).
tempadvisedby(person233_1,person319_1).
tempadvisedby(person193_1,person415_1).
tempadvisedby(person284_1,person211_1).
tempadvisedby(person241_1,person393_1).
tempadvisedby(person270_1,person393_1).
tempadvisedby(person51_1,person72_1).
tempadvisedby(person363_1,person72_1).
tempadvisedby(person427_1,person393_1).
tempadvisedby(person431_1,person393_1).
tempadvisedby(person283_1,person394_1).
tempadvisedby(person27_1,person335_1).
tempadvisedby(person19_1,person98_1).
tempadvisedby(person398_1,person213_1).
tempadvisedby(person299_1,person235_1).
tempadvisedby(person175_1,person107_1).
tempadvisedby(person402_1,person234_1).
tempadvisedby(person417_1,person104_1).
tempadvisedby(person277_1,person235_1).
tempadvisedby(person186_1,person290_1).
tempadvisedby(person187_1,person180_1).
tempadvisedby(person343_1,person213_1).
tempadvisedby(person383_1,person165_1).
tempadvisedby(person390_1,person331_1).
tempadvisedby(person172_1,person331_1).
tempadvisedby(person191_1,person298_1).
tempadvisedby(person416_1,person52_1).
tempadvisedby(person278_1,person378_1).
tempadvisedby(person205_1,person324_1).
tempadvisedby(person182_1,person201_1).
tempadvisedby(person172_1,person331_1).
tempadvisedby(person175_1,person107_1).
tempadvisedby(person182_1,person201_1).
tempadvisedby(person186_1,person290_1).
tempadvisedby(person187_1,person180_1).
tempadvisedby(person191_1,person298_1).
tempadvisedby(person19_1,person98_1).
tempadvisedby(person193_1,person415_1).
tempadvisedby(person20_1,person240_1).
tempadvisedby(person205_1,person324_1).
tempadvisedby(person233_1,person319_1).
tempadvisedby(person241_1,person393_1).
tempadvisedby(person270_1,person393_1).
tempadvisedby(person27_1,person335_1).
tempadvisedby(person277_1,person235_1).
tempadvisedby(person278_1,person378_1).
tempadvisedby(person283_1,person394_1).
tempadvisedby(person284_1,person211_1).
tempadvisedby(person299_1,person235_1).
tempadvisedby(person333_1,person211_1).
tempadvisedby(person343_1,person213_1).
tempadvisedby(person363_1,person72_1).
tempadvisedby(person377_1,person292_1).
tempadvisedby(person382_1,person415_1).
tempadvisedby(person383_1,person165_1).
tempadvisedby(person390_1,person331_1).
tempadvisedby(person398_1,person213_1).
tempadvisedby(person402_1,person234_1).
tempadvisedby(person408_1,person150_1).
tempadvisedby(person412_1,person168_1).
tempadvisedby(person416_1,person52_1).
tempadvisedby(person417_1,person104_1).
tempadvisedby(person42_1,person150_1).
tempadvisedby(person427_1,person393_1).
tempadvisedby(person431_1,person393_1).
tempadvisedby(person51_1,person72_1).
tempadvisedby(person94_1,person79_1).


projectmember(project62_5,person319_1).
projectmember(project130_5,person324_1).
projectmember(project119_5,person201_1).
projectmember(project152_5,person201_1).
projectmember(project94_5,person324_1).
projectmember(project119_5,person201_1).
projectmember(project130_5,person324_1).
projectmember(project152_5,person201_1).
projectmember(project62_5,person319_1).
projectmember(project94_5,person324_1).


sameinteger(3,3).
sameinteger(5,5).
sameinteger(1,1).
sameinteger(2,2).
sameinteger(9,9).
sameinteger(4,4).
sameinteger(6,6).
sameinteger(10,10).
sameinteger(8,8).
sameinteger(7,7).
sameinteger(12,12).


samephase(post_quals_9,post_quals_9).
samephase(pre_quals_9,pre_quals_9).
samephase(post_generals_9,post_generals_9).


sameposition(faculty_affiliate_8,faculty_affiliate_8).
sameposition(faculty_8,faculty_8).
sameposition(faculty_adjunct_8,faculty_adjunct_8).
sameposition(faculty_emeritus_8,faculty_emeritus_8).
sameposition(faculty_visiting_8,faculty_visiting_8).


samelevel(level_100_7,level_100_7).
samelevel(level_300_7,level_300_7).
samelevel(level_400_7,level_400_7).
samelevel(level_500_7,level_500_7).


samequarter(autumn_0001_6,autumn_0001_6).
samequarter(winter_0001_6,winter_0001_6).
samequarter(spring_0001_6,spring_0001_6).
samequarter(summer_0001_6,summer_0001_6).
samequarter(autumn_0102_6,autumn_0102_6).
samequarter(winter_0102_6,winter_0102_6).
samequarter(spring_0102_6,spring_0102_6).
samequarter(summer_0102_6,summer_0102_6).
samequarter(autumn_0203_6,autumn_0203_6).
samequarter(winter_0203_6,winter_0203_6).
samequarter(spring_0203_6,spring_0203_6).
samequarter(summer_0203_6,summer_0203_6).
samequarter(autumn_0304_6,autumn_0304_6).
samequarter(winter_0304_6,winter_0304_6).
samequarter(spring_0304_6,spring_0304_6).
samequarter(summer_0304_6,summer_0304_6).
samequarter(autumn_0405_6,autumn_0405_6).
samequarter(winter_0405_6,winter_0405_6).
samequarter(spring_0405_6,spring_0405_6).
samequarter(summer_0405_6,summer_0405_6).


sametitle(notitle_3,notitle_3).


samearea(misc_2,misc_2).
samearea(ai_2,ai_2).
samearea(systems_2,systems_2).
samearea(theory_2,theory_2).
samearea(language_2,language_2).
samearea(graphics_2,graphics_2).
samearea(noarea_2,noarea_2).


publication(title278_3,person285_1).
publication(title336_3,person285_1).
publication(title252_3,person285_1).
publication(title336_3,person360_1).
publication(title278_3,person121_1).
publication(title252_3,person121_1).
publication(title191_3,person304_1).
publication(title145_3,person304_1).
publication(title188_3,person304_1).
publication(title22_3,person65_1).
publication(title319_3,person43_1).
publication(title134_3,person43_1).
publication(title293_3,person43_1).
publication(title39_3,person43_1).
publication(title313_3,person152_1).
publication(title288_3,person16_1).
publication(title16_3,person16_1).
publication(title98_3,person16_1).
publication(title219_3,person16_1).
publication(title230_3,person16_1).
publication(title78_3,person16_1).
publication(title151_3,person16_1).
publication(title305_3,person16_1).
publication(title156_3,person16_1).
publication(title288_3,person173_1).
publication(title57_3,person173_1).
publication(title16_3,person173_1).
publication(title98_3,person173_1).
publication(title181_3,person173_1).
publication(title219_3,person173_1).
publication(title230_3,person173_1).
publication(title319_3,person173_1).
publication(title296_3,person173_1).
publication(title134_3,person173_1).
publication(title78_3,person173_1).
publication(title293_3,person173_1).
publication(title35_3,person173_1).
publication(title151_3,person173_1).
publication(title305_3,person173_1).
publication(title39_3,person173_1).
publication(title156_3,person173_1).
publication(title22_3,person194_1).
publication(title83_3,person301_1).
publication(title313_3,person301_1).
publication(title265_3,person301_1).
publication(title83_3,person254_1).
publication(title265_3,person254_1).
publication(title191_3,person244_1).
publication(title145_3,person244_1).
publication(title188_3,person244_1).
publication(title288_3,person160_1).
publication(title57_3,person160_1).
publication(title98_3,person160_1).
publication(title181_3,person160_1).
publication(title219_3,person160_1).
publication(title230_3,person160_1).
publication(title319_3,person160_1).
publication(title296_3,person160_1).
publication(title134_3,person160_1).
publication(title78_3,person160_1).
publication(title293_3,person160_1).
publication(title35_3,person160_1).
publication(title151_3,person160_1).
publication(title305_3,person160_1).
publication(title39_3,person160_1).
publication(title156_3,person160_1).
publication(title25_3,person284_1).
publication(title284_3,person14_1).
publication(title110_3,person14_1).
publication(title118_3,person14_1).
publication(title71_3,person14_1).
publication(title316_3,person14_1).
publication(title118_3,person318_1).
publication(title217_3,person161_1).
publication(title55_3,person161_1).
publication(title331_3,person161_1).
publication(title250_3,person161_1).
publication(title268_3,person161_1).
publication(title271_3,person161_1).
publication(title171_3,person161_1).
publication(title120_3,person347_1).
publication(title86_3,person347_1).
publication(title338_3,person347_1).
publication(title224_3,person347_1).
publication(title260_3,person347_1).
publication(title112_3,person347_1).
publication(title97_3,person347_1).
publication(title50_3,person292_1).
publication(title103_3,person292_1).
publication(title166_3,person292_1).
publication(title72_3,person292_1).
publication(title47_3,person292_1).
publication(title41_3,person292_1).
publication(title40_3,person293_1).
publication(title13_3,person240_1).
publication(title140_3,person240_1).
publication(title217_3,person240_1).
publication(title92_3,person240_1).
publication(title167_3,person240_1).
publication(title331_3,person240_1).
publication(title26_3,person240_1).
publication(title275_3,person240_1).
publication(title333_3,person240_1).
publication(title270_3,person240_1).
publication(title208_3,person240_1).
publication(title103_3,person240_1).
publication(title268_3,person240_1).
publication(title340_3,person240_1).
publication(title192_3,person240_1).
publication(title54_3,person240_1).
publication(title177_3,person240_1).
publication(title33_3,person240_1).
publication(title10_3,person240_1).
publication(title84_3,person240_1).
publication(title161_3,person240_1).
publication(title248_3,person240_1).
publication(title102_3,person240_1).
publication(title274_3,person240_1).
publication(title47_3,person240_1).
publication(title0_3,person240_1).
publication(title82_3,person240_1).
publication(title337_3,person240_1).
publication(title344_3,person240_1).
publication(title254_3,person240_1).
publication(title119_3,person240_1).
publication(title114_3,person211_1).
publication(title259_3,person211_1).
publication(title59_3,person211_1).
publication(title160_3,person211_1).
publication(title88_3,person211_1).
publication(title24_3,person211_1).
publication(title323_3,person211_1).
publication(title190_3,person211_1).
publication(title11_3,person211_1).
publication(title199_3,person211_1).
publication(title240_3,person211_1).
publication(title335_3,person211_1).
publication(title241_3,person211_1).
publication(title212_3,person211_1).
publication(title228_3,person211_1).
publication(title345_3,person211_1).
publication(title89_3,person211_1).
publication(title165_3,person211_1).
publication(title113_3,person211_1).
publication(title233_3,person211_1).
publication(title132_3,person211_1).
publication(title310_3,person211_1).
publication(title218_3,person211_1).
publication(title71_3,person211_1).
publication(title341_3,person211_1).
publication(title207_3,person211_1).
publication(title229_3,person211_1).
publication(title292_3,person211_1).
publication(title49_3,person211_1).
publication(title238_3,person211_1).
publication(title255_3,person211_1).
publication(title329_3,person211_1).
publication(title79_3,person211_1).
publication(title325_3,person211_1).
publication(title44_3,person211_1).
publication(title25_3,person211_1).
publication(title118_3,person150_1).
publication(title140_3,person415_1).
publication(title12_3,person415_1).
publication(title182_3,person415_1).
publication(title122_3,person415_1).
publication(title208_3,person415_1).
publication(title103_3,person415_1).
publication(title347_3,person415_1).
publication(title266_3,person415_1).
publication(title340_3,person415_1).
publication(title269_3,person415_1).
publication(title5_3,person415_1).
publication(title70_3,person415_1).
publication(title179_3,person415_1).
publication(title29_3,person415_1).
publication(title72_3,person415_1).
publication(title47_3,person415_1).
publication(title0_3,person415_1).
publication(title38_3,person415_1).
publication(title290_3,person415_1).
publication(title63_3,person415_1).
publication(title82_3,person415_1).
publication(title283_3,person415_1).
publication(title337_3,person415_1).
publication(title94_3,person415_1).
publication(title147_3,person415_1).
publication(title329_3,person415_1).
publication(title297_3,person415_1).
publication(title79_3,person415_1).
publication(title312_3,person415_1).
publication(title107_3,person415_1).
publication(title273_3,person415_1).
publication(title172_3,person415_1).
publication(title295_3,person415_1).
publication(title41_3,person415_1).
publication(title325_3,person415_1).
publication(title44_3,person415_1).
publication(title87_3,person415_1).
publication(title222_3,person415_1).
publication(title236_3,person415_1).
publication(title258_3,person415_1).
publication(title301_3,person415_1).
publication(title318_3,person79_1).
publication(title115_3,person79_1).
publication(title231_3,person79_1).
publication(title226_3,person79_1).
publication(title195_3,person79_1).
publication(title162_3,person185_1).
publication(title178_3,person171_1).
publication(title225_3,person171_1).
publication(title269_3,person171_1).
publication(title150_3,person171_1).
publication(title70_3,person171_1).
publication(title63_3,person171_1).
publication(title94_3,person171_1).
publication(title147_3,person171_1).
publication(title170_3,person171_1).
publication(title125_3,person171_1).
publication(title90_3,person171_1).
publication(title114_3,person407_1).
publication(title12_3,person407_1).
publication(title259_3,person407_1).
publication(title217_3,person407_1).
publication(title92_3,person407_1).
publication(title182_3,person407_1).
publication(title59_3,person407_1).
publication(title160_3,person407_1).
publication(title55_3,person407_1).
publication(title88_3,person407_1).
publication(title167_3,person407_1).
publication(title24_3,person407_1).
publication(title323_3,person407_1).
publication(title331_3,person407_1).
publication(title190_3,person407_1).
publication(title120_3,person407_1).
publication(title250_3,person407_1).
publication(title11_3,person407_1).
publication(title284_3,person407_1).
publication(title199_3,person407_1).
publication(title240_3,person407_1).
publication(title335_3,person407_1).
publication(title270_3,person407_1).
publication(title241_3,person407_1).
publication(title212_3,person407_1).
publication(title110_3,person407_1).
publication(title268_3,person407_1).
publication(title228_3,person407_1).
publication(title347_3,person407_1).
publication(title266_3,person407_1).
publication(title192_3,person407_1).
publication(title345_3,person407_1).
publication(title5_3,person407_1).
publication(title271_3,person407_1).
publication(title89_3,person407_1).
publication(title165_3,person407_1).
publication(title113_3,person407_1).
publication(title233_3,person407_1).
publication(title179_3,person407_1).
publication(title132_3,person407_1).
publication(title177_3,person407_1).
publication(title310_3,person407_1).
publication(title171_3,person407_1).
publication(title33_3,person407_1).
publication(title218_3,person407_1).
publication(title71_3,person407_1).
publication(title341_3,person407_1).
publication(title207_3,person407_1).
publication(title229_3,person407_1).
publication(title292_3,person407_1).
publication(title316_3,person407_1).
publication(title49_3,person407_1).
publication(title38_3,person407_1).
publication(title238_3,person407_1).
publication(title283_3,person407_1).
publication(title255_3,person407_1).
publication(title224_3,person407_1).
publication(title260_3,person407_1).
publication(title297_3,person407_1).
publication(title312_3,person407_1).
publication(title273_3,person407_1).
publication(title25_3,person407_1).
publication(title258_3,person407_1).
publication(title118_3,person408_1).
publication(title118_3,person353_1).
publication(title40_3,person239_1).
publication(title13_3,person13_1).
publication(title26_3,person13_1).
publication(title275_3,person13_1).
publication(title333_3,person13_1).
publication(title54_3,person13_1).
publication(title10_3,person13_1).
publication(title84_3,person13_1).
publication(title161_3,person13_1).
publication(title248_3,person13_1).
publication(title344_3,person13_1).
publication(title50_3,person352_1).
publication(title208_3,person352_1).
publication(title103_3,person352_1).
publication(title166_3,person352_1).
publication(title314_3,person352_1).
publication(title47_3,person352_1).
publication(title86_3,person352_1).
publication(title82_3,person352_1).
publication(title79_3,person352_1).
publication(title261_3,person352_1).
publication(title87_3,person352_1).
publication(title329_3,person45_1).
publication(title79_3,person45_1).
publication(title325_3,person45_1).
publication(title44_3,person45_1).
publication(title150_3,person148_1).
publication(title125_3,person148_1).
publication(title90_3,person148_1).
publication(title162_3,person193_1).
publication(title170_3,person314_1).
publication(title107_3,person314_1).
publication(title172_3,person314_1).
publication(title295_3,person314_1).
publication(title222_3,person314_1).
publication(title301_3,person314_1).
publication(title25_3,person21_1).
publication(title122_3,person262_1).
publication(title314_3,person262_1).
publication(title29_3,person262_1).
publication(title72_3,person262_1).
publication(title290_3,person262_1).
publication(title86_3,person262_1).
publication(title261_3,person262_1).
publication(title41_3,person262_1).
publication(title102_3,person257_1).
publication(title274_3,person257_1).
publication(title254_3,person257_1).
publication(title119_3,person257_1).
publication(title269_3,person73_1).
publication(title63_3,person73_1).
publication(title318_3,person380_1).
publication(title115_3,person380_1).
publication(title231_3,person380_1).
publication(title226_3,person380_1).
publication(title195_3,person380_1).
publication(title314_3,person406_1).
publication(title86_3,person406_1).
publication(title261_3,person406_1).
publication(title118_3,person208_1).
publication(title182_3,person63_1).
publication(title178_3,person63_1).
publication(title225_3,person63_1).
publication(title5_3,person63_1).
publication(title314_3,person63_1).
publication(title86_3,person63_1).
publication(title147_3,person63_1).
publication(title261_3,person63_1).
publication(title97_3,person63_1).
publication(title222_3,person63_1).
publication(title236_3,person63_1).
publication(title301_3,person63_1).
publication(title325_3,person83_1).
publication(title322_3,person40_1).
publication(title346_3,person40_1).
publication(title1_3,person40_1).
publication(title183_3,person394_1).
publication(title30_3,person394_1).
publication(title153_3,person306_1).
publication(title111_3,person306_1).
publication(title15_3,person410_1).
publication(title45_3,person410_1).
publication(title60_3,person410_1).
publication(title93_3,person410_1).
publication(title272_3,person410_1).
publication(title116_3,person410_1).
publication(title203_3,person404_1).
publication(title185_3,person404_1).
publication(title201_3,person404_1).
publication(title137_3,person322_1).
publication(title109_3,person342_1).
publication(title181_3,person342_1).
publication(title135_3,person342_1).
publication(title15_3,person342_1).
publication(title45_3,person342_1).
publication(title263_3,person342_1).
publication(title35_3,person342_1).
publication(title272_3,person342_1).
publication(title116_3,person342_1).
publication(title85_3,person342_1).
publication(title304_3,person342_1).
publication(title302_3,person342_1).
publication(title137_3,person342_1).
publication(title183_3,person72_1).
publication(title30_3,person72_1).
publication(title201_3,person72_1).
publication(title302_3,person72_1).
publication(title137_3,person72_1).
publication(title109_3,person393_1).
publication(title153_3,person393_1).
publication(title123_3,person393_1).
publication(title181_3,person393_1).
publication(title135_3,person393_1).
publication(title45_3,person393_1).
publication(title60_3,person393_1).
publication(title93_3,person393_1).
publication(title35_3,person393_1).
publication(title220_3,person393_1).
publication(title272_3,person393_1).
publication(title116_3,person393_1).
publication(title111_3,person393_1).
publication(title4_3,person393_1).
publication(title85_3,person393_1).
publication(title304_3,person393_1).
publication(title322_3,person393_1).
publication(title346_3,person393_1).
publication(title1_3,person393_1).
publication(title304_3,person241_1).
publication(title302_3,person217_1).
publication(title137_3,person206_1).
publication(title109_3,person81_1).
publication(title45_3,person81_1).
publication(title116_3,person81_1).
publication(title304_3,person81_1).
publication(title100_3,person41_1).
publication(title99_3,person435_1).
publication(title123_3,person142_1).
publication(title263_3,person142_1).
publication(title220_3,person142_1).
publication(title99_3,person300_1).
publication(title181_3,person300_1).
publication(title35_3,person300_1).
publication(title4_3,person300_1).
publication(title203_3,person113_1).
publication(title185_3,person113_1).
publication(title100_3,person113_1).
publication(title106_3,person335_1).
publication(title14_3,person335_1).
publication(title130_3,person335_1).
publication(title106_3,person5_1).
publication(title130_3,person5_1).
publication(title257_3,person429_1).
publication(title142_3,person429_1).
publication(title14_3,person429_1).
publication(title257_3,person183_1).
publication(title142_3,person183_1).
publication(title294_3,person124_1).
publication(title214_3,person124_1).
publication(title186_3,person124_1).
publication(title141_3,person124_1).
publication(title246_3,person124_1).
publication(title253_3,person124_1).
publication(title227_3,person124_1).
publication(title48_3,person124_1).
publication(title282_3,person124_1).
publication(title267_3,person124_1).
publication(title133_3,person124_1).
publication(title245_3,person124_1).
publication(title213_3,person375_1).
publication(title91_3,person375_1).
publication(title74_3,person375_1).
publication(title9_3,person375_1).
publication(title117_3,person375_1).
publication(title239_3,person375_1).
publication(title194_3,person375_1).
publication(title64_3,person179_1).
publication(title143_3,person179_1).
publication(title338_3,person179_1).
publication(title51_3,person179_1).
publication(title294_3,person234_1).
publication(title213_3,person234_1).
publication(title168_3,person234_1).
publication(title96_3,person234_1).
publication(title3_3,person234_1).
publication(title189_3,person234_1).
publication(title46_3,person234_1).
publication(title28_3,person234_1).
publication(title141_3,person234_1).
publication(title53_3,person234_1).
publication(title176_3,person234_1).
publication(title58_3,person234_1).
publication(title65_3,person234_1).
publication(title198_3,person234_1).
publication(title315_3,person234_1).
publication(title196_3,person234_1).
publication(title91_3,person234_1).
publication(title289_3,person234_1).
publication(title43_3,person234_1).
publication(title48_3,person234_1).
publication(title74_3,person234_1).
publication(title117_3,person234_1).
publication(title239_3,person234_1).
publication(title194_3,person234_1).
publication(title237_3,person234_1).
publication(title204_3,person234_1).
publication(title121_3,person234_1).
publication(title209_3,person234_1).
publication(title332_3,person234_1).
publication(title247_3,person234_1).
publication(title342_3,person234_1).
publication(title169_3,person234_1).
publication(title144_3,person234_1).
publication(title17_3,person234_1).
publication(title80_3,person234_1).
publication(title7_3,person234_1).
publication(title234_3,person234_1).
publication(title339_3,person234_1).
publication(title69_3,person234_1).
publication(title249_3,person234_1).
publication(title76_3,person234_1).
publication(title81_3,person234_1).
publication(title285_3,person234_1).
publication(title101_3,person234_1).
publication(title223_3,person101_1).
publication(title56_3,person101_1).
publication(title294_3,person101_1).
publication(title214_3,person101_1).
publication(title157_3,person101_1).
publication(title68_3,person101_1).
publication(title197_3,person101_1).
publication(title139_3,person101_1).
publication(title141_3,person101_1).
publication(title131_3,person101_1).
publication(title2_3,person101_1).
publication(title75_3,person101_1).
publication(title174_3,person101_1).
publication(title148_3,person101_1).
publication(title8_3,person101_1).
publication(title282_3,person101_1).
publication(title52_3,person101_1).
publication(title31_3,person101_1).
publication(title133_3,person101_1).
publication(title245_3,person101_1).
publication(title67_3,person101_1).
publication(title173_3,person180_1).
publication(title223_3,person98_1).
publication(title197_3,person98_1).
publication(title139_3,person98_1).
publication(title2_3,person98_1).
publication(title174_3,person98_1).
publication(title148_3,person98_1).
publication(title8_3,person98_1).
publication(title244_3,person107_1).
publication(title300_3,person107_1).
publication(title124_3,person107_1).
publication(title96_3,person107_1).
publication(title176_3,person107_1).
publication(title198_3,person107_1).
publication(title303_3,person107_1).
publication(title209_3,person107_1).
publication(title320_3,person107_1).
publication(title169_3,person107_1).
publication(title17_3,person107_1).
publication(title264_3,person107_1).
publication(title294_3,person235_1).
publication(title108_3,person235_1).
publication(title141_3,person235_1).
publication(title42_3,person235_1).
publication(title338_3,person235_1).
publication(title51_3,person235_1).
publication(title37_3,person235_1).
publication(title281_3,person235_1).
publication(title315_3,person82_1).
publication(title196_3,person82_1).
publication(title221_3,person82_1).
publication(title232_3,person82_1).
publication(title9_3,person82_1).
publication(title32_3,person82_1).
publication(title251_3,person82_1).
publication(title211_3,person82_1).
publication(title23_3,person82_1).
publication(title204_3,person82_1).
publication(title121_3,person82_1).
publication(title332_3,person82_1).
publication(title144_3,person82_1).
publication(title163_3,person82_1).
publication(title306_3,person82_1).
publication(title80_3,person82_1).
publication(title234_3,person82_1).
publication(title256_3,person82_1).
publication(title61_3,person82_1).
publication(title343_3,person82_1).
publication(title187_3,person82_1).
publication(title249_3,person82_1).
publication(title6_3,person82_1).
publication(title76_3,person82_1).
publication(title299_3,person82_1).
publication(title34_3,person82_1).
publication(title280_3,person82_1).
publication(title36_3,person82_1).
publication(title81_3,person82_1).
publication(title146_3,person373_1).
publication(title186_3,person104_1).
publication(title277_3,person104_1).
publication(title180_3,person104_1).
publication(title141_3,person104_1).
publication(title246_3,person104_1).
publication(title227_3,person104_1).
publication(title48_3,person104_1).
publication(title267_3,person104_1).
publication(title149_3,person104_1).
publication(title253_3,person290_1).
publication(title221_3,person290_1).
publication(title232_3,person290_1).
publication(title9_3,person290_1).
publication(title32_3,person290_1).
publication(title251_3,person290_1).
publication(title211_3,person290_1).
publication(title23_3,person290_1).
publication(title163_3,person290_1).
publication(title306_3,person290_1).
publication(title256_3,person290_1).
publication(title61_3,person290_1).
publication(title343_3,person290_1).
publication(title187_3,person290_1).
publication(title6_3,person290_1).
publication(title299_3,person290_1).
publication(title34_3,person290_1).
publication(title280_3,person290_1).
publication(title36_3,person290_1).
publication(title294_3,person255_1).
publication(title141_3,person255_1).
publication(title146_3,person411_1).
publication(title186_3,person99_1).
publication(title180_3,person99_1).
publication(title286_3,person99_1).
publication(title173_3,person212_1).
publication(title96_3,person403_1).
publication(title46_3,person403_1).
publication(title53_3,person403_1).
publication(title58_3,person403_1).
publication(title289_3,person403_1).
publication(title43_3,person403_1).
publication(title169_3,person403_1).
publication(title7_3,person403_1).
publication(title339_3,person403_1).
publication(title108_3,person402_1).
publication(title42_3,person402_1).
publication(title56_3,person253_1).
publication(title214_3,person253_1).
publication(title157_3,person253_1).
publication(title68_3,person253_1).
publication(title131_3,person253_1).
publication(title75_3,person253_1).
publication(title282_3,person253_1).
publication(title245_3,person253_1).
publication(title206_3,person92_1).
publication(title242_3,person92_1).
publication(title31_3,person419_1).
publication(title64_3,person419_1).
publication(title143_3,person419_1).
publication(title294_3,person357_1).
publication(title141_3,person357_1).
publication(title262_3,person89_1).
publication(title206_3,person89_1).
publication(title242_3,person89_1).
publication(title206_3,person15_1).
publication(title168_3,person80_1).
publication(title300_3,person80_1).
publication(title96_3,person80_1).
publication(title189_3,person80_1).
publication(title46_3,person80_1).
publication(title28_3,person80_1).
publication(title176_3,person80_1).
publication(title65_3,person80_1).
publication(title237_3,person80_1).
publication(title247_3,person80_1).
publication(title342_3,person80_1).
publication(title169_3,person80_1).
publication(title17_3,person80_1).
publication(title339_3,person80_1).
publication(title285_3,person80_1).
publication(title101_3,person80_1).
publication(title244_3,person376_1).
publication(title124_3,person376_1).
publication(title303_3,person376_1).
publication(title320_3,person376_1).
publication(title264_3,person376_1).
publication(title52_3,person218_1).
publication(title67_3,person218_1).
publication(title37_3,person154_1).
publication(title281_3,person154_1).
publication(title186_3,person204_1).
publication(title277_3,person204_1).
publication(title3_3,person204_1).
publication(title286_3,person204_1).
publication(title149_3,person204_1).
publication(title69_3,person204_1).
publication(title294_3,person126_1).
publication(title141_3,person126_1).
publication(title262_3,person100_1).
publication(title37_3,person100_1).
publication(title281_3,person100_1).
publication(title164_3,person378_1).
publication(title202_3,person378_1).
publication(title152_3,person378_1).
publication(title154_3,person378_1).
publication(title334_3,person378_1).
publication(title193_3,person378_1).
publication(title326_3,person378_1).
publication(title328_3,person378_1).
publication(title327_3,person378_1).
publication(title308_3,person378_1).
publication(title136_3,person378_1).
publication(title243_3,person378_1).
publication(title127_3,person378_1).
publication(title317_3,person298_1).
publication(title18_3,person298_1).
publication(title126_3,person298_1).
publication(title309_3,person298_1).
publication(title128_3,person298_1).
publication(title77_3,person298_1).
publication(title216_3,person298_1).
publication(title235_3,person298_1).
publication(title311_3,person298_1).
publication(title298_3,person298_1).
publication(title326_3,person397_1).
publication(title62_3,person138_1).
publication(title210_3,person138_1).
publication(title287_3,person138_1).
publication(title317_3,person77_1).
publication(title18_3,person77_1).
publication(title126_3,person77_1).
publication(title309_3,person77_1).
publication(title128_3,person77_1).
publication(title77_3,person77_1).
publication(title216_3,person77_1).
publication(title287_3,person77_1).
publication(title235_3,person77_1).
publication(title311_3,person77_1).
publication(title298_3,person77_1).
publication(title164_3,person331_1).
publication(title202_3,person331_1).
publication(title95_3,person331_1).
publication(title152_3,person331_1).
publication(title154_3,person331_1).
publication(title158_3,person331_1).
publication(title73_3,person331_1).
publication(title19_3,person331_1).
publication(title159_3,person331_1).
publication(title334_3,person331_1).
publication(title276_3,person331_1).
publication(title328_3,person331_1).
publication(title327_3,person331_1).
publication(title308_3,person331_1).
publication(title136_3,person331_1).
publication(title243_3,person331_1).
publication(title138_3,person331_1).
publication(title127_3,person331_1).
publication(title20_3,person331_1).
publication(title21_3,person331_1).
publication(title27_3,person331_1).
publication(title105_3,person331_1).
publication(title330_3,person165_1).
publication(title200_3,person165_1).
publication(title129_3,person165_1).
publication(title155_3,person165_1).
publication(title104_3,person165_1).
publication(title324_3,person165_1).
publication(title215_3,person165_1).
publication(title205_3,person165_1).
publication(title291_3,person165_1).
publication(title321_3,person165_1).
publication(title175_3,person165_1).
publication(title307_3,person165_1).
publication(title193_3,person165_1).
publication(title184_3,person165_1).
publication(title138_3,person165_1).
publication(title330_3,person29_1).
publication(title200_3,person29_1).
publication(title129_3,person29_1).
publication(title155_3,person29_1).
publication(title104_3,person29_1).
publication(title324_3,person29_1).
publication(title215_3,person29_1).
publication(title205_3,person29_1).
publication(title279_3,person29_1).
publication(title291_3,person29_1).
publication(title66_3,person29_1).
publication(title321_3,person29_1).
publication(title175_3,person29_1).
publication(title307_3,person29_1).
publication(title184_3,person29_1).
publication(title62_3,person324_1).
publication(title158_3,person324_1).
publication(title19_3,person324_1).
publication(title210_3,person324_1).
publication(title21_3,person324_1).
publication(title27_3,person324_1).
publication(title105_3,person324_1).
publication(title330_3,person242_1).
publication(title104_3,person242_1).
publication(title215_3,person242_1).
publication(title205_3,person242_1).
publication(title279_3,person242_1).
publication(title291_3,person242_1).
publication(title66_3,person242_1).
publication(title321_3,person242_1).
publication(title175_3,person242_1).
publication(title287_3,person242_1).
publication(title159_3,person75_1).
publication(title20_3,person75_1).
publication(title95_3,person249_1).
publication(title73_3,person249_1).
publication(title276_3,person249_1).
publication(title0_3,person240_1).
publication(title0_3,person415_1).
publication(title100_3,person113_1).
publication(title100_3,person41_1).
publication(title101_3,person234_1).
publication(title101_3,person80_1).
publication(title102_3,person240_1).
publication(title102_3,person257_1).
publication(title103_3,person240_1).
publication(title103_3,person292_1).
publication(title103_3,person352_1).
publication(title103_3,person415_1).
publication(title10_3,person13_1).
publication(title10_3,person240_1).
publication(title104_3,person165_1).
publication(title104_3,person242_1).
publication(title104_3,person29_1).
publication(title105_3,person324_1).
publication(title105_3,person331_1).
publication(title106_3,person335_1).
publication(title106_3,person5_1).
publication(title107_3,person314_1).
publication(title107_3,person415_1).
publication(title108_3,person235_1).
publication(title108_3,person402_1).
publication(title109_3,person342_1).
publication(title109_3,person393_1).
publication(title109_3,person81_1).
publication(title110_3,person14_1).
publication(title110_3,person407_1).
publication(title111_3,person306_1).
publication(title111_3,person393_1).
publication(title112_3,person347_1).
publication(title113_3,person211_1).
publication(title113_3,person407_1).
publication(title11_3,person211_1).
publication(title11_3,person407_1).
publication(title114_3,person211_1).
publication(title114_3,person407_1).
publication(title115_3,person380_1).
publication(title115_3,person79_1).
publication(title116_3,person342_1).
publication(title116_3,person393_1).
publication(title116_3,person410_1).
publication(title116_3,person81_1).
publication(title117_3,person234_1).
publication(title117_3,person375_1).
publication(title118_3,person14_1).
publication(title118_3,person150_1).
publication(title118_3,person208_1).
publication(title118_3,person318_1).
publication(title118_3,person353_1).
publication(title118_3,person408_1).
publication(title119_3,person240_1).
publication(title119_3,person257_1).
publication(title120_3,person347_1).
publication(title120_3,person407_1).
publication(title121_3,person234_1).
publication(title121_3,person82_1).
publication(title122_3,person262_1).
publication(title122_3,person415_1).
publication(title123_3,person142_1).
publication(title123_3,person393_1).
publication(title12_3,person407_1).
publication(title12_3,person415_1).
publication(title124_3,person107_1).
publication(title124_3,person376_1).
publication(title125_3,person148_1).
publication(title125_3,person171_1).
publication(title126_3,person298_1).
publication(title126_3,person77_1).
publication(title127_3,person331_1).
publication(title127_3,person378_1).
publication(title128_3,person298_1).
publication(title128_3,person77_1).
publication(title129_3,person165_1).
publication(title129_3,person29_1).
publication(title130_3,person335_1).
publication(title130_3,person5_1).
publication(title131_3,person101_1).
publication(title131_3,person253_1).
publication(title132_3,person211_1).
publication(title132_3,person407_1).
publication(title133_3,person101_1).
publication(title133_3,person124_1).
publication(title13_3,person13_1).
publication(title13_3,person240_1).
publication(title135_3,person342_1).
publication(title135_3,person393_1).
publication(title136_3,person331_1).
publication(title136_3,person378_1).
publication(title137_3,person206_1).
publication(title137_3,person322_1).
publication(title137_3,person342_1).
publication(title137_3,person72_1).
publication(title138_3,person165_1).
publication(title138_3,person331_1).
publication(title139_3,person101_1).
publication(title139_3,person98_1).
publication(title1_3,person393_1).
publication(title1_3,person40_1).
publication(title140_3,person240_1).
publication(title140_3,person415_1).
publication(title141_3,person101_1).
publication(title141_3,person104_1).
publication(title141_3,person124_1).
publication(title141_3,person126_1).
publication(title141_3,person234_1).
publication(title141_3,person235_1).
publication(title141_3,person255_1).
publication(title141_3,person357_1).
publication(title142_3,person183_1).
publication(title142_3,person429_1).
publication(title143_3,person179_1).
publication(title143_3,person419_1).
publication(title14_3,person335_1).
publication(title14_3,person429_1).
publication(title144_3,person234_1).
publication(title144_3,person82_1).
publication(title146_3,person373_1).
publication(title146_3,person411_1).
publication(title147_3,person171_1).
publication(title147_3,person415_1).
publication(title147_3,person63_1).
publication(title148_3,person101_1).
publication(title148_3,person98_1).
publication(title149_3,person104_1).
publication(title149_3,person204_1).
publication(title150_3,person148_1).
publication(title150_3,person171_1).
publication(title152_3,person331_1).
publication(title152_3,person378_1).
publication(title153_3,person306_1).
publication(title153_3,person393_1).
publication(title15_3,person342_1).
publication(title15_3,person410_1).
publication(title154_3,person331_1).
publication(title154_3,person378_1).
publication(title155_3,person165_1).
publication(title155_3,person29_1).
publication(title157_3,person101_1).
publication(title157_3,person253_1).
publication(title158_3,person324_1).
publication(title158_3,person331_1).
publication(title159_3,person331_1).
publication(title159_3,person75_1).
publication(title160_3,person211_1).
publication(title160_3,person407_1).
publication(title161_3,person13_1).
publication(title161_3,person240_1).
publication(title162_3,person185_1).
publication(title162_3,person193_1).
publication(title163_3,person290_1).
publication(title163_3,person82_1).
publication(title164_3,person331_1).
publication(title164_3,person378_1).
publication(title165_3,person211_1).
publication(title165_3,person407_1).
publication(title166_3,person292_1).
publication(title166_3,person352_1).
publication(title167_3,person240_1).
publication(title167_3,person407_1).
publication(title168_3,person234_1).
publication(title168_3,person80_1).
publication(title169_3,person107_1).
publication(title169_3,person234_1).
publication(title169_3,person403_1).
publication(title169_3,person80_1).
publication(title170_3,person171_1).
publication(title170_3,person314_1).
publication(title171_3,person161_1).
publication(title171_3,person407_1).
publication(title172_3,person314_1).
publication(title172_3,person415_1).
publication(title173_3,person180_1).
publication(title173_3,person212_1).
publication(title17_3,person107_1).
publication(title17_3,person234_1).
publication(title17_3,person80_1).
publication(title174_3,person101_1).
publication(title174_3,person98_1).
publication(title175_3,person165_1).
publication(title175_3,person242_1).
publication(title175_3,person29_1).
publication(title176_3,person107_1).
publication(title176_3,person234_1).
publication(title176_3,person80_1).
publication(title177_3,person240_1).
publication(title177_3,person407_1).
publication(title178_3,person171_1).
publication(title178_3,person63_1).
publication(title179_3,person407_1).
publication(title179_3,person415_1).
publication(title180_3,person104_1).
publication(title180_3,person99_1).
publication(title181_3,person300_1).
publication(title181_3,person342_1).
publication(title181_3,person393_1).
publication(title182_3,person407_1).
publication(title182_3,person415_1).
publication(title182_3,person63_1).
publication(title183_3,person394_1).
publication(title183_3,person72_1).
publication(title18_3,person298_1).
publication(title18_3,person77_1).
publication(title184_3,person165_1).
publication(title184_3,person29_1).
publication(title185_3,person113_1).
publication(title185_3,person404_1).
publication(title186_3,person104_1).
publication(title186_3,person124_1).
publication(title186_3,person204_1).
publication(title186_3,person99_1).
publication(title187_3,person290_1).
publication(title187_3,person82_1).
publication(title189_3,person234_1).
publication(title189_3,person80_1).
publication(title190_3,person211_1).
publication(title190_3,person407_1).
publication(title192_3,person240_1).
publication(title192_3,person407_1).
publication(title193_3,person165_1).
publication(title193_3,person378_1).
publication(title19_3,person324_1).
publication(title19_3,person331_1).
publication(title194_3,person234_1).
publication(title194_3,person375_1).
publication(title195_3,person380_1).
publication(title195_3,person79_1).
publication(title196_3,person234_1).
publication(title196_3,person82_1).
publication(title197_3,person101_1).
publication(title197_3,person98_1).
publication(title198_3,person107_1).
publication(title198_3,person234_1).
publication(title199_3,person211_1).
publication(title199_3,person407_1).
publication(title200_3,person165_1).
publication(title200_3,person29_1).
publication(title201_3,person404_1).
publication(title201_3,person72_1).
publication(title202_3,person331_1).
publication(title202_3,person378_1).
publication(title203_3,person113_1).
publication(title203_3,person404_1).
publication(title20_3,person331_1).
publication(title20_3,person75_1).
publication(title204_3,person234_1).
publication(title204_3,person82_1).
publication(title205_3,person165_1).
publication(title205_3,person242_1).
publication(title205_3,person29_1).
publication(title206_3,person15_1).
publication(title206_3,person89_1).
publication(title206_3,person92_1).
publication(title207_3,person211_1).
publication(title207_3,person407_1).
publication(title208_3,person240_1).
publication(title208_3,person352_1).
publication(title208_3,person415_1).
publication(title209_3,person107_1).
publication(title209_3,person234_1).
publication(title210_3,person138_1).
publication(title210_3,person324_1).
publication(title211_3,person290_1).
publication(title211_3,person82_1).
publication(title212_3,person211_1).
publication(title212_3,person407_1).
publication(title213_3,person234_1).
publication(title213_3,person375_1).
publication(title21_3,person324_1).
publication(title21_3,person331_1).
publication(title214_3,person101_1).
publication(title214_3,person124_1).
publication(title214_3,person253_1).
publication(title215_3,person165_1).
publication(title215_3,person242_1).
publication(title215_3,person29_1).
publication(title216_3,person298_1).
publication(title216_3,person77_1).
publication(title217_3,person161_1).
publication(title217_3,person240_1).
publication(title217_3,person407_1).
publication(title218_3,person211_1).
publication(title218_3,person407_1).
publication(title220_3,person142_1).
publication(title220_3,person393_1).
publication(title221_3,person290_1).
publication(title221_3,person82_1).
publication(title222_3,person314_1).
publication(title222_3,person415_1).
publication(title222_3,person63_1).
publication(title223_3,person101_1).
publication(title223_3,person98_1).
publication(title224_3,person347_1).
publication(title224_3,person407_1).
publication(title225_3,person171_1).
publication(title225_3,person63_1).
publication(title226_3,person380_1).
publication(title226_3,person79_1).
publication(title227_3,person104_1).
publication(title227_3,person124_1).
publication(title228_3,person211_1).
publication(title228_3,person407_1).
publication(title229_3,person211_1).
publication(title229_3,person407_1).
publication(title231_3,person380_1).
publication(title231_3,person79_1).
publication(title232_3,person290_1).
publication(title232_3,person82_1).
publication(title233_3,person211_1).
publication(title233_3,person407_1).
publication(title23_3,person290_1).
publication(title23_3,person82_1).
publication(title234_3,person234_1).
publication(title234_3,person82_1).
publication(title235_3,person298_1).
publication(title235_3,person77_1).
publication(title236_3,person415_1).
publication(title236_3,person63_1).
publication(title237_3,person234_1).
publication(title237_3,person80_1).
publication(title238_3,person211_1).
publication(title238_3,person407_1).
publication(title239_3,person234_1).
publication(title239_3,person375_1).
publication(title2_3,person101_1).
publication(title2_3,person98_1).
publication(title240_3,person211_1).
publication(title240_3,person407_1).
publication(title241_3,person211_1).
publication(title241_3,person407_1).
publication(title242_3,person89_1).
publication(title242_3,person92_1).
publication(title243_3,person331_1).
publication(title243_3,person378_1).
publication(title24_3,person211_1).
publication(title24_3,person407_1).
publication(title244_3,person107_1).
publication(title244_3,person376_1).
publication(title245_3,person101_1).
publication(title245_3,person124_1).
publication(title245_3,person253_1).
publication(title246_3,person104_1).
publication(title246_3,person124_1).
publication(title247_3,person234_1).
publication(title247_3,person80_1).
publication(title248_3,person13_1).
publication(title248_3,person240_1).
publication(title249_3,person234_1).
publication(title249_3,person82_1).
publication(title250_3,person161_1).
publication(title250_3,person407_1).
publication(title251_3,person290_1).
publication(title251_3,person82_1).
publication(title253_3,person124_1).
publication(title253_3,person290_1).
publication(title25_3,person21_1).
publication(title25_3,person211_1).
publication(title25_3,person284_1).
publication(title25_3,person407_1).
publication(title254_3,person240_1).
publication(title254_3,person257_1).
publication(title255_3,person211_1).
publication(title255_3,person407_1).
publication(title256_3,person290_1).
publication(title256_3,person82_1).
publication(title257_3,person183_1).
publication(title257_3,person429_1).
publication(title258_3,person407_1).
publication(title258_3,person415_1).
publication(title259_3,person211_1).
publication(title259_3,person407_1).
publication(title260_3,person347_1).
publication(title260_3,person407_1).
publication(title261_3,person262_1).
publication(title261_3,person352_1).
publication(title261_3,person406_1).
publication(title261_3,person63_1).
publication(title262_3,person100_1).
publication(title262_3,person89_1).
publication(title263_3,person142_1).
publication(title263_3,person342_1).
publication(title26_3,person13_1).
publication(title26_3,person240_1).
publication(title264_3,person107_1).
publication(title264_3,person376_1).
publication(title266_3,person407_1).
publication(title266_3,person415_1).
publication(title267_3,person104_1).
publication(title267_3,person124_1).
publication(title268_3,person161_1).
publication(title268_3,person240_1).
publication(title268_3,person407_1).
publication(title269_3,person171_1).
publication(title269_3,person415_1).
publication(title269_3,person73_1).
publication(title270_3,person240_1).
publication(title270_3,person407_1).
publication(title271_3,person161_1).
publication(title271_3,person407_1).
publication(title272_3,person342_1).
publication(title272_3,person393_1).
publication(title272_3,person410_1).
publication(title273_3,person407_1).
publication(title273_3,person415_1).
publication(title27_3,person324_1).
publication(title27_3,person331_1).
publication(title274_3,person240_1).
publication(title274_3,person257_1).
publication(title275_3,person13_1).
publication(title275_3,person240_1).
publication(title276_3,person249_1).
publication(title276_3,person331_1).
publication(title277_3,person104_1).
publication(title277_3,person204_1).
publication(title279_3,person242_1).
publication(title279_3,person29_1).
publication(title280_3,person290_1).
publication(title280_3,person82_1).
publication(title281_3,person100_1).
publication(title281_3,person154_1).
publication(title281_3,person235_1).
publication(title282_3,person101_1).
publication(title282_3,person124_1).
publication(title282_3,person253_1).
publication(title283_3,person407_1).
publication(title283_3,person415_1).
publication(title28_3,person234_1).
publication(title28_3,person80_1).
publication(title284_3,person14_1).
publication(title284_3,person407_1).
publication(title285_3,person234_1).
publication(title285_3,person80_1).
publication(title286_3,person204_1).
publication(title286_3,person99_1).
publication(title287_3,person138_1).
publication(title287_3,person242_1).
publication(title287_3,person77_1).
publication(title289_3,person234_1).
publication(title289_3,person403_1).
publication(title290_3,person262_1).
publication(title290_3,person415_1).
publication(title291_3,person165_1).
publication(title291_3,person242_1).
publication(title291_3,person29_1).
publication(title292_3,person211_1).
publication(title292_3,person407_1).
publication(title29_3,person262_1).
publication(title29_3,person415_1).
publication(title294_3,person101_1).
publication(title294_3,person124_1).
publication(title294_3,person126_1).
publication(title294_3,person234_1).
publication(title294_3,person235_1).
publication(title294_3,person255_1).
publication(title294_3,person357_1).
publication(title295_3,person314_1).
publication(title295_3,person415_1).
publication(title297_3,person407_1).
publication(title297_3,person415_1).
publication(title298_3,person298_1).
publication(title298_3,person77_1).
publication(title299_3,person290_1).
publication(title299_3,person82_1).
publication(title300_3,person107_1).
publication(title300_3,person80_1).
publication(title301_3,person314_1).
publication(title301_3,person415_1).
publication(title301_3,person63_1).
publication(title302_3,person217_1).
publication(title302_3,person342_1).
publication(title302_3,person72_1).
publication(title303_3,person107_1).
publication(title303_3,person376_1).
publication(title30_3,person394_1).
publication(title30_3,person72_1).
publication(title304_3,person241_1).
publication(title304_3,person342_1).
publication(title304_3,person393_1).
publication(title304_3,person81_1).
publication(title306_3,person290_1).
publication(title306_3,person82_1).
publication(title307_3,person165_1).
publication(title307_3,person29_1).
publication(title308_3,person331_1).
publication(title308_3,person378_1).
publication(title309_3,person298_1).
publication(title309_3,person77_1).
publication(title310_3,person211_1).
publication(title310_3,person407_1).
publication(title311_3,person298_1).
publication(title311_3,person77_1).
publication(title312_3,person407_1).
publication(title312_3,person415_1).
publication(title31_3,person101_1).
publication(title31_3,person419_1).
publication(title314_3,person262_1).
publication(title314_3,person352_1).
publication(title314_3,person406_1).
publication(title314_3,person63_1).
publication(title315_3,person234_1).
publication(title315_3,person82_1).
publication(title316_3,person14_1).
publication(title316_3,person407_1).
publication(title317_3,person298_1).
publication(title317_3,person77_1).
publication(title318_3,person380_1).
publication(title318_3,person79_1).
publication(title320_3,person107_1).
publication(title320_3,person376_1).
publication(title321_3,person165_1).
publication(title321_3,person242_1).
publication(title321_3,person29_1).
publication(title322_3,person393_1).
publication(title322_3,person40_1).
publication(title323_3,person211_1).
publication(title323_3,person407_1).
publication(title32_3,person290_1).
publication(title32_3,person82_1).
publication(title324_3,person165_1).
publication(title324_3,person29_1).
publication(title325_3,person211_1).
publication(title325_3,person415_1).
publication(title325_3,person45_1).
publication(title325_3,person83_1).
publication(title326_3,person378_1).
publication(title326_3,person397_1).
publication(title327_3,person331_1).
publication(title327_3,person378_1).
publication(title328_3,person331_1).
publication(title328_3,person378_1).
publication(title329_3,person211_1).
publication(title329_3,person415_1).
publication(title329_3,person45_1).
publication(title330_3,person165_1).
publication(title330_3,person242_1).
publication(title330_3,person29_1).
publication(title331_3,person161_1).
publication(title331_3,person240_1).
publication(title331_3,person407_1).
publication(title332_3,person234_1).
publication(title332_3,person82_1).
publication(title333_3,person13_1).
publication(title333_3,person240_1).
publication(title33_3,person240_1).
publication(title33_3,person407_1).
publication(title334_3,person331_1).
publication(title334_3,person378_1).
publication(title335_3,person211_1).
publication(title335_3,person407_1).
publication(title337_3,person240_1).
publication(title337_3,person415_1).
publication(title338_3,person179_1).
publication(title338_3,person235_1).
publication(title338_3,person347_1).
publication(title339_3,person234_1).
publication(title339_3,person403_1).
publication(title339_3,person80_1).
publication(title3_3,person204_1).
publication(title3_3,person234_1).
publication(title340_3,person240_1).
publication(title340_3,person415_1).
publication(title341_3,person211_1).
publication(title341_3,person407_1).
publication(title342_3,person234_1).
publication(title342_3,person80_1).
publication(title343_3,person290_1).
publication(title343_3,person82_1).
publication(title34_3,person290_1).
publication(title34_3,person82_1).
publication(title344_3,person13_1).
publication(title344_3,person240_1).
publication(title345_3,person211_1).
publication(title345_3,person407_1).
publication(title346_3,person393_1).
publication(title346_3,person40_1).
publication(title347_3,person407_1).
publication(title347_3,person415_1).
publication(title35_3,person300_1).
publication(title35_3,person342_1).
publication(title35_3,person393_1).
publication(title36_3,person290_1).
publication(title36_3,person82_1).
publication(title37_3,person100_1).
publication(title37_3,person154_1).
publication(title37_3,person235_1).
publication(title38_3,person407_1).
publication(title38_3,person415_1).
publication(title40_3,person239_1).
publication(title40_3,person293_1).
publication(title41_3,person262_1).
publication(title41_3,person292_1).
publication(title41_3,person415_1).
publication(title42_3,person235_1).
publication(title42_3,person402_1).
publication(title43_3,person234_1).
publication(title43_3,person403_1).
publication(title4_3,person300_1).
publication(title4_3,person393_1).
publication(title44_3,person211_1).
publication(title44_3,person415_1).
publication(title44_3,person45_1).
publication(title45_3,person342_1).
publication(title45_3,person393_1).
publication(title45_3,person410_1).
publication(title45_3,person81_1).
publication(title46_3,person234_1).
publication(title46_3,person403_1).
publication(title46_3,person80_1).
publication(title47_3,person240_1).
publication(title47_3,person292_1).
publication(title47_3,person352_1).
publication(title47_3,person415_1).
publication(title48_3,person104_1).
publication(title48_3,person124_1).
publication(title48_3,person234_1).
publication(title49_3,person211_1).
publication(title49_3,person407_1).
publication(title50_3,person292_1).
publication(title50_3,person352_1).
publication(title51_3,person179_1).
publication(title51_3,person235_1).
publication(title52_3,person101_1).
publication(title52_3,person218_1).
publication(title53_3,person234_1).
publication(title53_3,person403_1).
publication(title5_3,person407_1).
publication(title5_3,person415_1).
publication(title5_3,person63_1).
publication(title54_3,person13_1).
publication(title54_3,person240_1).
publication(title55_3,person161_1).
publication(title55_3,person407_1).
publication(title56_3,person101_1).
publication(title56_3,person253_1).
publication(title58_3,person234_1).
publication(title58_3,person403_1).
publication(title59_3,person211_1).
publication(title59_3,person407_1).
publication(title60_3,person393_1).
publication(title60_3,person410_1).
publication(title61_3,person290_1).
publication(title61_3,person82_1).
publication(title62_3,person138_1).
publication(title62_3,person324_1).
publication(title63_3,person171_1).
publication(title63_3,person415_1).
publication(title63_3,person73_1).
publication(title6_3,person290_1).
publication(title6_3,person82_1).
publication(title64_3,person179_1).
publication(title64_3,person419_1).
publication(title65_3,person234_1).
publication(title65_3,person80_1).
publication(title66_3,person242_1).
publication(title66_3,person29_1).
publication(title67_3,person101_1).
publication(title67_3,person218_1).
publication(title68_3,person101_1).
publication(title68_3,person253_1).
publication(title69_3,person204_1).
publication(title69_3,person234_1).
publication(title70_3,person171_1).
publication(title70_3,person415_1).
publication(title71_3,person14_1).
publication(title71_3,person211_1).
publication(title71_3,person407_1).
publication(title72_3,person262_1).
publication(title72_3,person292_1).
publication(title72_3,person415_1).
publication(title73_3,person249_1).
publication(title73_3,person331_1).
publication(title7_3,person234_1).
publication(title7_3,person403_1).
publication(title74_3,person234_1).
publication(title74_3,person375_1).
publication(title75_3,person101_1).
publication(title75_3,person253_1).
publication(title76_3,person234_1).
publication(title76_3,person82_1).
publication(title77_3,person298_1).
publication(title77_3,person77_1).
publication(title79_3,person211_1).
publication(title79_3,person352_1).
publication(title79_3,person415_1).
publication(title79_3,person45_1).
publication(title80_3,person234_1).
publication(title80_3,person82_1).
publication(title81_3,person234_1).
publication(title81_3,person82_1).
publication(title82_3,person240_1).
publication(title82_3,person352_1).
publication(title82_3,person415_1).
publication(title8_3,person101_1).
publication(title8_3,person98_1).
publication(title84_3,person13_1).
publication(title84_3,person240_1).
publication(title85_3,person342_1).
publication(title85_3,person393_1).
publication(title86_3,person262_1).
publication(title86_3,person347_1).
publication(title86_3,person352_1).
publication(title86_3,person406_1).
publication(title86_3,person63_1).
publication(title87_3,person352_1).
publication(title87_3,person415_1).
publication(title88_3,person211_1).
publication(title88_3,person407_1).
publication(title89_3,person211_1).
publication(title89_3,person407_1).
publication(title90_3,person148_1).
publication(title90_3,person171_1).
publication(title91_3,person234_1).
publication(title91_3,person375_1).
publication(title92_3,person240_1).
publication(title92_3,person407_1).
publication(title93_3,person393_1).
publication(title93_3,person410_1).
publication(title9_3,person290_1).
publication(title9_3,person375_1).
publication(title9_3,person82_1).
publication(title94_3,person171_1).
publication(title94_3,person415_1).
publication(title95_3,person249_1).
publication(title95_3,person331_1).
publication(title96_3,person107_1).
publication(title96_3,person234_1).
publication(title96_3,person403_1).
publication(title96_3,person80_1).
publication(title97_3,person347_1).
publication(title97_3,person63_1).
publication(title99_3,person300_1).
publication(title99_3,person435_1).


samecourse(course145_4,course145_4).
samecourse(course17_4,course17_4).
samecourse(course73_4,course73_4).
samecourse(course102_4,course102_4).
samecourse(course142_4,course142_4).
samecourse(course81_4,course81_4).
samecourse(course105_4,course105_4).
samecourse(course90_4,course90_4).
samecourse(course92_4,course92_4).
samecourse(course140_4,course140_4).
samecourse(course69_4,course69_4).
samecourse(course94_4,course94_4).
samecourse(course59_4,course59_4).
samecourse(course26_4,course26_4).
samecourse(course175_4,course175_4).
samecourse(course58_4,course58_4).
samecourse(course10_4,course10_4).
samecourse(course42_4,course42_4).
samecourse(course25_4,course25_4).
samecourse(course100_4,course100_4).
samecourse(course78_4,course78_4).
samecourse(course106_4,course106_4).
samecourse(course72_4,course72_4).
samecourse(course127_4,course127_4).
samecourse(course31_4,course31_4).
samecourse(course163_4,course163_4).
samecourse(course95_4,course95_4).
samecourse(course171_4,course171_4).
samecourse(course112_4,course112_4).
samecourse(course111_4,course111_4).
samecourse(course70_4,course70_4).
samecourse(course33_4,course33_4).
samecourse(course133_4,course133_4).
samecourse(course130_4,course130_4).
samecourse(course99_4,course99_4).
samecourse(course113_4,course113_4).
samecourse(course43_4,course43_4).
samecourse(course55_4,course55_4).
samecourse(course37_4,course37_4).
samecourse(course60_4,course60_4).
samecourse(course6_4,course6_4).
samecourse(course52_4,course52_4).
samecourse(course44_4,course44_4).
samecourse(course24_4,course24_4).
samecourse(course57_4,course57_4).
samecourse(course143_4,course143_4).
samecourse(course50_4,course50_4).
samecourse(course156_4,course156_4).
samecourse(course141_4,course141_4).
samecourse(course12_4,course12_4).
samecourse(course170_4,course170_4).
samecourse(course123_4,course123_4).
samecourse(course173_4,course173_4).
samecourse(course85_4,course85_4).
samecourse(course64_4,course64_4).
samecourse(course168_4,course168_4).
samecourse(course158_4,course158_4).
samecourse(course76_4,course76_4).
samecourse(course16_4,course16_4).
samecourse(course15_4,course15_4).
samecourse(course39_4,course39_4).
samecourse(course32_4,course32_4).
samecourse(course7_4,course7_4).
samecourse(course134_4,course134_4).
samecourse(course135_4,course135_4).
samecourse(course65_4,course65_4).
samecourse(course86_4,course86_4).
samecourse(course131_4,course131_4).
samecourse(course128_4,course128_4).
samecourse(course82_4,course82_4).
samecourse(course132_4,course132_4).
samecourse(course89_4,course89_4).
samecourse(course157_4,course157_4).
samecourse(course110_4,course110_4).
samecourse(course125_4,course125_4).
samecourse(course164_4,course164_4).
samecourse(course28_4,course28_4).
samecourse(course107_4,course107_4).
samecourse(course0_4,course0_4).
samecourse(course13_4,course13_4).
samecourse(course115_4,course115_4).
samecourse(course101_4,course101_4).
samecourse(course136_4,course136_4).
samecourse(course108_4,course108_4).
samecourse(course67_4,course67_4).
samecourse(course153_4,course153_4).
samecourse(course1_4,course1_4).
samecourse(course83_4,course83_4).
samecourse(course79_4,course79_4).
samecourse(course114_4,course114_4).
samecourse(course148_4,course148_4).
samecourse(course93_4,course93_4).
samecourse(course159_4,course159_4).
samecourse(course154_4,course154_4).
samecourse(course118_4,course118_4).
samecourse(course109_4,course109_4).
samecourse(course56_4,course56_4).
samecourse(course41_4,course41_4).
samecourse(course150_4,course150_4).
samecourse(course3_4,course3_4).
samecourse(course146_4,course146_4).
samecourse(course124_4,course124_4).
samecourse(course51_4,course51_4).
samecourse(course49_4,course49_4).
samecourse(course53_4,course53_4).
samecourse(course46_4,course46_4).
samecourse(course19_4,course19_4).
samecourse(course172_4,course172_4).
samecourse(course71_4,course71_4).
samecourse(course63_4,course63_4).
samecourse(course152_4,course152_4).
samecourse(course54_4,course54_4).
samecourse(course138_4,course138_4).
samecourse(course35_4,course35_4).
samecourse(course5_4,course5_4).
samecourse(course18_4,course18_4).
samecourse(course21_4,course21_4).
samecourse(course151_4,course151_4).
samecourse(course38_4,course38_4).
samecourse(course45_4,course45_4).
samecourse(course20_4,course20_4).
samecourse(course48_4,course48_4).
samecourse(course62_4,course62_4).
samecourse(course80_4,course80_4).
samecourse(course30_4,course30_4).
samecourse(course75_4,course75_4).
samecourse(course8_4,course8_4).
samecourse(course129_4,course129_4).
samecourse(course116_4,course116_4).
samecourse(course120_4,course120_4).
samecourse(course166_4,course166_4).
samecourse(course74_4,course74_4).
samecourse(course2_4,course2_4).
samecourse(course4_4,course4_4).
samecourse(course34_4,course34_4).
samecourse(course14_4,course14_4).
samecourse(course167_4,course167_4).
samecourse(course139_4,course139_4).
samecourse(course162_4,course162_4).
samecourse(course61_4,course61_4).
samecourse(course23_4,course23_4).
samecourse(course9_4,course9_4).
samecourse(course87_4,course87_4).
samecourse(course174_4,course174_4).
samecourse(course88_4,course88_4).
samecourse(course144_4,course144_4).
samecourse(course165_4,course165_4).
samecourse(course11_4,course11_4).
samecourse(course147_4,course147_4).
samecourse(course104_4,course104_4).
samecourse(course68_4,course68_4).
samecourse(course161_4,course161_4).
samecourse(course27_4,course27_4).
samecourse(course126_4,course126_4).
samecourse(course97_4,course97_4).
samecourse(course40_4,course40_4).
samecourse(course29_4,course29_4).
samecourse(course103_4,course103_4).
samecourse(course77_4,course77_4).
samecourse(course91_4,course91_4).
samecourse(course160_4,course160_4).
samecourse(course155_4,course155_4).
samecourse(course66_4,course66_4).
samecourse(course119_4,course119_4).
samecourse(course121_4,course121_4).
samecourse(course117_4,course117_4).
samecourse(course36_4,course36_4).
samecourse(course169_4,course169_4).
samecourse(course84_4,course84_4).
samecourse(course137_4,course137_4).
samecourse(course122_4,course122_4).
samecourse(course98_4,course98_4).
samecourse(course149_4,course149_4).
samecourse(course0_4,course0_4).
samecourse(course101_4,course101_4).
samecourse(course103_4,course103_4).
samecourse(course104_4,course104_4).
samecourse(course107_4,course107_4).
samecourse(course108_4,course108_4).
samecourse(course109_4,course109_4).
samecourse(course110_4,course110_4).
samecourse(course114_4,course114_4).
samecourse(course11_4,course11_4).
samecourse(course115_4,course115_4).
samecourse(course116_4,course116_4).
samecourse(course117_4,course117_4).
samecourse(course118_4,course118_4).
samecourse(course119_4,course119_4).
samecourse(course120_4,course120_4).
samecourse(course121_4,course121_4).
samecourse(course122_4,course122_4).
samecourse(course123_4,course123_4).
samecourse(course124_4,course124_4).
samecourse(course12_4,course12_4).
samecourse(course125_4,course125_4).
samecourse(course126_4,course126_4).
samecourse(course128_4,course128_4).
samecourse(course129_4,course129_4).
samecourse(course131_4,course131_4).
samecourse(course132_4,course132_4).
samecourse(course134_4,course134_4).
samecourse(course13_4,course13_4).
samecourse(course135_4,course135_4).
samecourse(course136_4,course136_4).
samecourse(course137_4,course137_4).
samecourse(course138_4,course138_4).
samecourse(course139_4,course139_4).
samecourse(course141_4,course141_4).
samecourse(course143_4,course143_4).
samecourse(course144_4,course144_4).
samecourse(course14_4,course14_4).
samecourse(course146_4,course146_4).
samecourse(course147_4,course147_4).
samecourse(course148_4,course148_4).
samecourse(course149_4,course149_4).
samecourse(course1_4,course1_4).
samecourse(course150_4,course150_4).
samecourse(course151_4,course151_4).
samecourse(course152_4,course152_4).
samecourse(course153_4,course153_4).
samecourse(course154_4,course154_4).
samecourse(course15_4,course15_4).
samecourse(course155_4,course155_4).
samecourse(course156_4,course156_4).
samecourse(course157_4,course157_4).
samecourse(course158_4,course158_4).
samecourse(course159_4,course159_4).
samecourse(course160_4,course160_4).
samecourse(course161_4,course161_4).
samecourse(course162_4,course162_4).
samecourse(course164_4,course164_4).
samecourse(course16_4,course16_4).
samecourse(course165_4,course165_4).
samecourse(course166_4,course166_4).
samecourse(course167_4,course167_4).
samecourse(course168_4,course168_4).
samecourse(course169_4,course169_4).
samecourse(course170_4,course170_4).
samecourse(course172_4,course172_4).
samecourse(course173_4,course173_4).
samecourse(course174_4,course174_4).
samecourse(course18_4,course18_4).
samecourse(course19_4,course19_4).
samecourse(course20_4,course20_4).
samecourse(course21_4,course21_4).
samecourse(course23_4,course23_4).
samecourse(course24_4,course24_4).
samecourse(course2_4,course2_4).
samecourse(course27_4,course27_4).
samecourse(course28_4,course28_4).
samecourse(course29_4,course29_4).
samecourse(course30_4,course30_4).
samecourse(course32_4,course32_4).
samecourse(course34_4,course34_4).
samecourse(course3_4,course3_4).
samecourse(course35_4,course35_4).
samecourse(course36_4,course36_4).
samecourse(course38_4,course38_4).
samecourse(course39_4,course39_4).
samecourse(course40_4,course40_4).
samecourse(course41_4,course41_4).
samecourse(course44_4,course44_4).
samecourse(course4_4,course4_4).
samecourse(course45_4,course45_4).
samecourse(course46_4,course46_4).
samecourse(course48_4,course48_4).
samecourse(course49_4,course49_4).
samecourse(course50_4,course50_4).
samecourse(course51_4,course51_4).
samecourse(course52_4,course52_4).
samecourse(course53_4,course53_4).
samecourse(course54_4,course54_4).
samecourse(course5_4,course5_4).
samecourse(course56_4,course56_4).
samecourse(course57_4,course57_4).
samecourse(course61_4,course61_4).
samecourse(course62_4,course62_4).
samecourse(course63_4,course63_4).
samecourse(course64_4,course64_4).
samecourse(course65_4,course65_4).
samecourse(course66_4,course66_4).
samecourse(course67_4,course67_4).
samecourse(course68_4,course68_4).
samecourse(course71_4,course71_4).
samecourse(course74_4,course74_4).
samecourse(course7_4,course7_4).
samecourse(course75_4,course75_4).
samecourse(course76_4,course76_4).
samecourse(course77_4,course77_4).
samecourse(course79_4,course79_4).
samecourse(course80_4,course80_4).
samecourse(course82_4,course82_4).
samecourse(course83_4,course83_4).
samecourse(course84_4,course84_4).
samecourse(course8_4,course8_4).
samecourse(course85_4,course85_4).
samecourse(course86_4,course86_4).
samecourse(course87_4,course87_4).
samecourse(course88_4,course88_4).
samecourse(course89_4,course89_4).
samecourse(course91_4,course91_4).
samecourse(course93_4,course93_4).
samecourse(course9_4,course9_4).
samecourse(course97_4,course97_4).
samecourse(course98_4,course98_4).


sameperson(person34_1,person34_1).
sameperson(person338_1,person338_1).
sameperson(person145_1,person145_1).
sameperson(person210_1,person210_1).
sameperson(person366_1,person366_1).
sameperson(person413_1,person413_1).
sameperson(person184_1,person184_1).
sameperson(person192_1,person192_1).
sameperson(person209_1,person209_1).
sameperson(person133_1,person133_1).
sameperson(person117_1,person117_1).
sameperson(person285_1,person285_1).
sameperson(person323_1,person323_1).
sameperson(person360_1,person360_1).
sameperson(person219_1,person219_1).
sameperson(person224_1,person224_1).
sameperson(person264_1,person264_1).
sameperson(person387_1,person387_1).
sameperson(person355_1,person355_1).
sameperson(person127_1,person127_1).
sameperson(person33_1,person33_1).
sameperson(person48_1,person48_1).
sameperson(person110_1,person110_1).
sameperson(person121_1,person121_1).
sameperson(person199_1,person199_1).
sameperson(person44_1,person44_1).
sameperson(person386_1,person386_1).
sameperson(person28_1,person28_1).
sameperson(person295_1,person295_1).
sameperson(person177_1,person177_1).
sameperson(person50_1,person50_1).
sameperson(person430_1,person430_1).
sameperson(person24_1,person24_1).
sameperson(person289_1,person289_1).
sameperson(person308_1,person308_1).
sameperson(person147_1,person147_1).
sameperson(person12_1,person12_1).
sameperson(person337_1,person337_1).
sameperson(person53_1,person53_1).
sameperson(person109_1,person109_1).
sameperson(person405_1,person405_1).
sameperson(person250_1,person250_1).
sameperson(person252_1,person252_1).
sameperson(person414_1,person414_1).
sameperson(person54_1,person54_1).
sameperson(person1_1,person1_1).
sameperson(person197_1,person197_1).
sameperson(person291_1,person291_1).
sameperson(person281_1,person281_1).
sameperson(person433_1,person433_1).
sameperson(person341_1,person341_1).
sameperson(person236_1,person236_1).
sameperson(person302_1,person302_1).
sameperson(person30_1,person30_1).
sameperson(person316_1,person316_1).
sameperson(person112_1,person112_1).
sameperson(person225_1,person225_1).
sameperson(person32_1,person32_1).
sameperson(person245_1,person245_1).
sameperson(person238_1,person238_1).
sameperson(person389_1,person389_1).
sameperson(person47_1,person47_1).
sameperson(person305_1,person305_1).
sameperson(person334_1,person334_1).
sameperson(person97_1,person97_1).
sameperson(person268_1,person268_1).
sameperson(person11_1,person11_1).
sameperson(person59_1,person59_1).
sameperson(person313_1,person313_1).
sameperson(person202_1,person202_1).
sameperson(person247_1,person247_1).
sameperson(person143_1,person143_1).
sameperson(person336_1,person336_1).
sameperson(person134_1,person134_1).
sameperson(person221_1,person221_1).
sameperson(person216_1,person216_1).
sameperson(person8_1,person8_1).
sameperson(person344_1,person344_1).
sameperson(person369_1,person369_1).
sameperson(person227_1,person227_1).
sameperson(person132_1,person132_1).
sameperson(person151_1,person151_1).
sameperson(person17_1,person17_1).
sameperson(person423_1,person423_1).
sameperson(person339_1,person339_1).
sameperson(person304_1,person304_1).
sameperson(person26_1,person26_1).
sameperson(person120_1,person120_1).
sameperson(person65_1,person65_1).
sameperson(person43_1,person43_1).
sameperson(person399_1,person399_1).
sameperson(person152_1,person152_1).
sameperson(person2_1,person2_1).
sameperson(person16_1,person16_1).
sameperson(person10_1,person10_1).
sameperson(person173_1,person173_1).
sameperson(person220_1,person220_1).
sameperson(person95_1,person95_1).
sameperson(person128_1,person128_1).
sameperson(person196_1,person196_1).
sameperson(person25_1,person25_1).
sameperson(person260_1,person260_1).
sameperson(person372_1,person372_1).
sameperson(person174_1,person174_1).
sameperson(person359_1,person359_1).
sameperson(person194_1,person194_1).
sameperson(person273_1,person273_1).
sameperson(person93_1,person93_1).
sameperson(person409_1,person409_1).
sameperson(person256_1,person256_1).
sameperson(person301_1,person301_1).
sameperson(person66_1,person66_1).
sameperson(person254_1,person254_1).
sameperson(person425_1,person425_1).
sameperson(person69_1,person69_1).
sameperson(person170_1,person170_1).
sameperson(person156_1,person156_1).
sameperson(person106_1,person106_1).
sameperson(person244_1,person244_1).
sameperson(person160_1,person160_1).
sameperson(person135_1,person135_1).
sameperson(person330_1,person330_1).
sameperson(person215_1,person215_1).
sameperson(person282_1,person282_1).
sameperson(person319_1,person319_1).
sameperson(person284_1,person284_1).
sameperson(person311_1,person311_1).
sameperson(person14_1,person14_1).
sameperson(person275_1,person275_1).
sameperson(person259_1,person259_1).
sameperson(person139_1,person139_1).
sameperson(person176_1,person176_1).
sameperson(person400_1,person400_1).
sameperson(person318_1,person318_1).
sameperson(person161_1,person161_1).
sameperson(person347_1,person347_1).
sameperson(person292_1,person292_1).
sameperson(person293_1,person293_1).
sameperson(person240_1,person240_1).
sameperson(person211_1,person211_1).
sameperson(person150_1,person150_1).
sameperson(person415_1,person415_1).
sameperson(person79_1,person79_1).
sameperson(person349_1,person349_1).
sameperson(person7_1,person7_1).
sameperson(person185_1,person185_1).
sameperson(person171_1,person171_1).
sameperson(person168_1,person168_1).
sameperson(person407_1,person407_1).
sameperson(person408_1,person408_1).
sameperson(person265_1,person265_1).
sameperson(person70_1,person70_1).
sameperson(person381_1,person381_1).
sameperson(person382_1,person382_1).
sameperson(person333_1,person333_1).
sameperson(person94_1,person94_1).
sameperson(person272_1,person272_1).
sameperson(person37_1,person37_1).
sameperson(person353_1,person353_1).
sameperson(person432_1,person432_1).
sameperson(person377_1,person377_1).
sameperson(person239_1,person239_1).
sameperson(person13_1,person13_1).
sameperson(person286_1,person286_1).
sameperson(person412_1,person412_1).
sameperson(person418_1,person418_1).
sameperson(person320_1,person320_1).
sameperson(person42_1,person42_1).
sameperson(person20_1,person20_1).
sameperson(person352_1,person352_1).
sameperson(person276_1,person276_1).
sameperson(person45_1,person45_1).
sameperson(person233_1,person233_1).
sameperson(person148_1,person148_1).
sameperson(person193_1,person193_1).
sameperson(person314_1,person314_1).
sameperson(person21_1,person21_1).
sameperson(person262_1,person262_1).
sameperson(person257_1,person257_1).
sameperson(person73_1,person73_1).
sameperson(person380_1,person380_1).
sameperson(person384_1,person384_1).
sameperson(person406_1,person406_1).
sameperson(person266_1,person266_1).
sameperson(person312_1,person312_1).
sameperson(person208_1,person208_1).
sameperson(person63_1,person63_1).
sameperson(person83_1,person83_1).
sameperson(person271_1,person271_1).
sameperson(person392_1,person392_1).
sameperson(person420_1,person420_1).
sameperson(person86_1,person86_1).
sameperson(person40_1,person40_1).
sameperson(person279_1,person279_1).
sameperson(person394_1,person394_1).
sameperson(person38_1,person38_1).
sameperson(person261_1,person261_1).
sameperson(person149_1,person149_1).
sameperson(person306_1,person306_1).
sameperson(person410_1,person410_1).
sameperson(person157_1,person157_1).
sameperson(person200_1,person200_1).
sameperson(person404_1,person404_1).
sameperson(person122_1,person122_1).
sameperson(person322_1,person322_1).
sameperson(person131_1,person131_1).
sameperson(person85_1,person85_1).
sameperson(person342_1,person342_1).
sameperson(person111_1,person111_1).
sameperson(person115_1,person115_1).
sameperson(person351_1,person351_1).
sameperson(person72_1,person72_1).
sameperson(person393_1,person393_1).
sameperson(person241_1,person241_1).
sameperson(person217_1,person217_1).
sameperson(person270_1,person270_1).
sameperson(person206_1,person206_1).
sameperson(person81_1,person81_1).
sameperson(person228_1,person228_1).
sameperson(person51_1,person51_1).
sameperson(person41_1,person41_1).
sameperson(person163_1,person163_1).
sameperson(person435_1,person435_1).
sameperson(person363_1,person363_1).
sameperson(person427_1,person427_1).
sameperson(person142_1,person142_1).
sameperson(person431_1,person431_1).
sameperson(person283_1,person283_1).
sameperson(person300_1,person300_1).
sameperson(person113_1,person113_1).
sameperson(person296_1,person296_1).
sameperson(person36_1,person36_1).
sameperson(person328_1,person328_1).
sameperson(person31_1,person31_1).
sameperson(person61_1,person61_1).
sameperson(person119_1,person119_1).
sameperson(person3_1,person3_1).
sameperson(person317_1,person317_1).
sameperson(person230_1,person230_1).
sameperson(person258_1,person258_1).
sameperson(person188_1,person188_1).
sameperson(person327_1,person327_1).
sameperson(person140_1,person140_1).
sameperson(person321_1,person321_1).
sameperson(person428_1,person428_1).
sameperson(person158_1,person158_1).
sameperson(person102_1,person102_1).
sameperson(person90_1,person90_1).
sameperson(person214_1,person214_1).
sameperson(person146_1,person146_1).
sameperson(person88_1,person88_1).
sameperson(person178_1,person178_1).
sameperson(person195_1,person195_1).
sameperson(person248_1,person248_1).
sameperson(person64_1,person64_1).
sameperson(person166_1,person166_1).
sameperson(person370_1,person370_1).
sameperson(person335_1,person335_1).
sameperson(person46_1,person46_1).
sameperson(person189_1,person189_1).
sameperson(person5_1,person5_1).
sameperson(person18_1,person18_1).
sameperson(person9_1,person9_1).
sameperson(person429_1,person429_1).
sameperson(person27_1,person27_1).
sameperson(person362_1,person362_1).
sameperson(person96_1,person96_1).
sameperson(person361_1,person361_1).
sameperson(person263_1,person263_1).
sameperson(person183_1,person183_1).
sameperson(person118_1,person118_1).
sameperson(person105_1,person105_1).
sameperson(person108_1,person108_1).
sameperson(person203_1,person203_1).
sameperson(person287_1,person287_1).
sameperson(person87_1,person87_1).
sameperson(person39_1,person39_1).
sameperson(person35_1,person35_1).
sameperson(person325_1,person325_1).
sameperson(person76_1,person76_1).
sameperson(person232_1,person232_1).
sameperson(person22_1,person22_1).
sameperson(person124_1,person124_1).
sameperson(person375_1,person375_1).
sameperson(person179_1,person179_1).
sameperson(person297_1,person297_1).
sameperson(person326_1,person326_1).
sameperson(person267_1,person267_1).
sameperson(person234_1,person234_1).
sameperson(person101_1,person101_1).
sameperson(person180_1,person180_1).
sameperson(person98_1,person98_1).
sameperson(person107_1,person107_1).
sameperson(person235_1,person235_1).
sameperson(person82_1,person82_1).
sameperson(person213_1,person213_1).
sameperson(person373_1,person373_1).
sameperson(person104_1,person104_1).
sameperson(person290_1,person290_1).
sameperson(person19_1,person19_1).
sameperson(person398_1,person398_1).
sameperson(person368_1,person368_1).
sameperson(person130_1,person130_1).
sameperson(person299_1,person299_1).
sameperson(person175_1,person175_1).
sameperson(person255_1,person255_1).
sameperson(person411_1,person411_1).
sameperson(person426_1,person426_1).
sameperson(person99_1,person99_1).
sameperson(person212_1,person212_1).
sameperson(person403_1,person403_1).
sameperson(person402_1,person402_1).
sameperson(person391_1,person391_1).
sameperson(person253_1,person253_1).
sameperson(person280_1,person280_1).
sameperson(person417_1,person417_1).
sameperson(person92_1,person92_1).
sameperson(person419_1,person419_1).
sameperson(person357_1,person357_1).
sameperson(person67_1,person67_1).
sameperson(person222_1,person222_1).
sameperson(person89_1,person89_1).
sameperson(person277_1,person277_1).
sameperson(person15_1,person15_1).
sameperson(person80_1,person80_1).
sameperson(person376_1,person376_1).
sameperson(person62_1,person62_1).
sameperson(person218_1,person218_1).
sameperson(person186_1,person186_1).
sameperson(person187_1,person187_1).
sameperson(person343_1,person343_1).
sameperson(person154_1,person154_1).
sameperson(person204_1,person204_1).
sameperson(person126_1,person126_1).
sameperson(person129_1,person129_1).
sameperson(person374_1,person374_1).
sameperson(person155_1,person155_1).
sameperson(person100_1,person100_1).
sameperson(person116_1,person116_1).
sameperson(person274_1,person274_1).
sameperson(person4_1,person4_1).
sameperson(person71_1,person71_1).
sameperson(person207_1,person207_1).
sameperson(person190_1,person190_1).
sameperson(person198_1,person198_1).
sameperson(person269_1,person269_1).
sameperson(person358_1,person358_1).
sameperson(person354_1,person354_1).
sameperson(person167_1,person167_1).
sameperson(person123_1,person123_1).
sameperson(person223_1,person223_1).
sameperson(person84_1,person84_1).
sameperson(person340_1,person340_1).
sameperson(person378_1,person378_1).
sameperson(person298_1,person298_1).
sameperson(person52_1,person52_1).
sameperson(person57_1,person57_1).
sameperson(person231_1,person231_1).
sameperson(person181_1,person181_1).
sameperson(person364_1,person364_1).
sameperson(person191_1,person191_1).
sameperson(person397_1,person397_1).
sameperson(person138_1,person138_1).
sameperson(person303_1,person303_1).
sameperson(person77_1,person77_1).
sameperson(person141_1,person141_1).
sameperson(person331_1,person331_1).
sameperson(person103_1,person103_1).
sameperson(person165_1,person165_1).
sameperson(person29_1,person29_1).
sameperson(person201_1,person201_1).
sameperson(person324_1,person324_1).
sameperson(person309_1,person309_1).
sameperson(person383_1,person383_1).
sameperson(person422_1,person422_1).
sameperson(person390_1,person390_1).
sameperson(person288_1,person288_1).
sameperson(person159_1,person159_1).
sameperson(person172_1,person172_1).
sameperson(person226_1,person226_1).
sameperson(person242_1,person242_1).
sameperson(person416_1,person416_1).
sameperson(person348_1,person348_1).
sameperson(person278_1,person278_1).
sameperson(person6_1,person6_1).
sameperson(person75_1,person75_1).
sameperson(person249_1,person249_1).
sameperson(person68_1,person68_1).
sameperson(person205_1,person205_1).
sameperson(person182_1,person182_1).
sameperson(person23_1,person23_1).
sameperson(person310_1,person310_1).
sameperson(person424_1,person424_1).
sameperson(person401_1,person401_1).
sameperson(person237_1,person237_1).
sameperson(person58_1,person58_1).
sameperson(person144_1,person144_1).
sameperson(person125_1,person125_1).
sameperson(person350_1,person350_1).
sameperson(person356_1,person356_1).
sameperson(person294_1,person294_1).
sameperson(person315_1,person315_1).
sameperson(person100_1,person100_1).
sameperson(person101_1,person101_1).
sameperson(person102_1,person102_1).
sameperson(person103_1,person103_1).
sameperson(person104_1,person104_1).
sameperson(person105_1,person105_1).
sameperson(person107_1,person107_1).
sameperson(person108_1,person108_1).
sameperson(person111_1,person111_1).
sameperson(person113_1,person113_1).
sameperson(person115_1,person115_1).
sameperson(person116_1,person116_1).
sameperson(person118_1,person118_1).
sameperson(person119_1,person119_1).
sameperson(person122_1,person122_1).
sameperson(person123_1,person123_1).
sameperson(person124_1,person124_1).
sameperson(person125_1,person125_1).
sameperson(person126_1,person126_1).
sameperson(person129_1,person129_1).
sameperson(person130_1,person130_1).
sameperson(person131_1,person131_1).
sameperson(person13_1,person13_1).
sameperson(person138_1,person138_1).
sameperson(person139_1,person139_1).
sameperson(person140_1,person140_1).
sameperson(person141_1,person141_1).
sameperson(person14_1,person14_1).
sameperson(person142_1,person142_1).
sameperson(person144_1,person144_1).
sameperson(person146_1,person146_1).
sameperson(person148_1,person148_1).
sameperson(person149_1,person149_1).
sameperson(person150_1,person150_1).
sameperson(person15_1,person15_1).
sameperson(person154_1,person154_1).
sameperson(person155_1,person155_1).
sameperson(person157_1,person157_1).
sameperson(person158_1,person158_1).
sameperson(person159_1,person159_1).
sameperson(person161_1,person161_1).
sameperson(person163_1,person163_1).
sameperson(person165_1,person165_1).
sameperson(person166_1,person166_1).
sameperson(person167_1,person167_1).
sameperson(person168_1,person168_1).
sameperson(person171_1,person171_1).
sameperson(person172_1,person172_1).
sameperson(person175_1,person175_1).
sameperson(person176_1,person176_1).
sameperson(person178_1,person178_1).
sameperson(person179_1,person179_1).
sameperson(person180_1,person180_1).
sameperson(person181_1,person181_1).
sameperson(person18_1,person18_1).
sameperson(person182_1,person182_1).
sameperson(person183_1,person183_1).
sameperson(person185_1,person185_1).
sameperson(person186_1,person186_1).
sameperson(person187_1,person187_1).
sameperson(person188_1,person188_1).
sameperson(person189_1,person189_1).
sameperson(person190_1,person190_1).
sameperson(person191_1,person191_1).
sameperson(person19_1,person19_1).
sameperson(person193_1,person193_1).
sameperson(person195_1,person195_1).
sameperson(person198_1,person198_1).
sameperson(person200_1,person200_1).
sameperson(person201_1,person201_1).
sameperson(person20_1,person20_1).
sameperson(person203_1,person203_1).
sameperson(person204_1,person204_1).
sameperson(person205_1,person205_1).
sameperson(person206_1,person206_1).
sameperson(person207_1,person207_1).
sameperson(person208_1,person208_1).
sameperson(person211_1,person211_1).
sameperson(person21_1,person21_1).
sameperson(person212_1,person212_1).
sameperson(person213_1,person213_1).
sameperson(person214_1,person214_1).
sameperson(person217_1,person217_1).
sameperson(person218_1,person218_1).
sameperson(person22_1,person22_1).
sameperson(person222_1,person222_1).
sameperson(person223_1,person223_1).
sameperson(person226_1,person226_1).
sameperson(person228_1,person228_1).
sameperson(person230_1,person230_1).
sameperson(person231_1,person231_1).
sameperson(person23_1,person23_1).
sameperson(person232_1,person232_1).
sameperson(person233_1,person233_1).
sameperson(person234_1,person234_1).
sameperson(person235_1,person235_1).
sameperson(person237_1,person237_1).
sameperson(person239_1,person239_1).
sameperson(person240_1,person240_1).
sameperson(person241_1,person241_1).
sameperson(person242_1,person242_1).
sameperson(person248_1,person248_1).
sameperson(person249_1,person249_1).
sameperson(person253_1,person253_1).
sameperson(person255_1,person255_1).
sameperson(person257_1,person257_1).
sameperson(person258_1,person258_1).
sameperson(person259_1,person259_1).
sameperson(person261_1,person261_1).
sameperson(person262_1,person262_1).
sameperson(person263_1,person263_1).
sameperson(person265_1,person265_1).
sameperson(person266_1,person266_1).
sameperson(person267_1,person267_1).
sameperson(person269_1,person269_1).
sameperson(person270_1,person270_1).
sameperson(person271_1,person271_1).
sameperson(person27_1,person27_1).
sameperson(person272_1,person272_1).
sameperson(person274_1,person274_1).
sameperson(person275_1,person275_1).
sameperson(person276_1,person276_1).
sameperson(person277_1,person277_1).
sameperson(person278_1,person278_1).
sameperson(person279_1,person279_1).
sameperson(person280_1,person280_1).
sameperson(person283_1,person283_1).
sameperson(person284_1,person284_1).
sameperson(person286_1,person286_1).
sameperson(person287_1,person287_1).
sameperson(person288_1,person288_1).
sameperson(person290_1,person290_1).
sameperson(person29_1,person29_1).
sameperson(person292_1,person292_1).
sameperson(person293_1,person293_1).
sameperson(person294_1,person294_1).
sameperson(person296_1,person296_1).
sameperson(person297_1,person297_1).
sameperson(person298_1,person298_1).
sameperson(person299_1,person299_1).
sameperson(person300_1,person300_1).
sameperson(person303_1,person303_1).
sameperson(person306_1,person306_1).
sameperson(person309_1,person309_1).
sameperson(person310_1,person310_1).
sameperson(person311_1,person311_1).
sameperson(person31_1,person31_1).
sameperson(person312_1,person312_1).
sameperson(person314_1,person314_1).
sameperson(person315_1,person315_1).
sameperson(person317_1,person317_1).
sameperson(person318_1,person318_1).
sameperson(person319_1,person319_1).
sameperson(person3_1,person3_1).
sameperson(person320_1,person320_1).
sameperson(person321_1,person321_1).
sameperson(person322_1,person322_1).
sameperson(person324_1,person324_1).
sameperson(person325_1,person325_1).
sameperson(person326_1,person326_1).
sameperson(person327_1,person327_1).
sameperson(person328_1,person328_1).
sameperson(person331_1,person331_1).
sameperson(person333_1,person333_1).
sameperson(person335_1,person335_1).
sameperson(person340_1,person340_1).
sameperson(person342_1,person342_1).
sameperson(person343_1,person343_1).
sameperson(person347_1,person347_1).
sameperson(person348_1,person348_1).
sameperson(person349_1,person349_1).
sameperson(person350_1,person350_1).
sameperson(person351_1,person351_1).
sameperson(person35_1,person35_1).
sameperson(person352_1,person352_1).
sameperson(person353_1,person353_1).
sameperson(person354_1,person354_1).
sameperson(person356_1,person356_1).
sameperson(person357_1,person357_1).
sameperson(person358_1,person358_1).
sameperson(person361_1,person361_1).
sameperson(person36_1,person36_1).
sameperson(person362_1,person362_1).
sameperson(person363_1,person363_1).
sameperson(person364_1,person364_1).
sameperson(person368_1,person368_1).
sameperson(person370_1,person370_1).
sameperson(person37_1,person37_1).
sameperson(person373_1,person373_1).
sameperson(person374_1,person374_1).
sameperson(person375_1,person375_1).
sameperson(person376_1,person376_1).
sameperson(person377_1,person377_1).
sameperson(person378_1,person378_1).
sameperson(person380_1,person380_1).
sameperson(person381_1,person381_1).
sameperson(person38_1,person38_1).
sameperson(person382_1,person382_1).
sameperson(person383_1,person383_1).
sameperson(person384_1,person384_1).
sameperson(person390_1,person390_1).
sameperson(person391_1,person391_1).
sameperson(person39_1,person39_1).
sameperson(person392_1,person392_1).
sameperson(person393_1,person393_1).
sameperson(person394_1,person394_1).
sameperson(person397_1,person397_1).
sameperson(person398_1,person398_1).
sameperson(person400_1,person400_1).
sameperson(person401_1,person401_1).
sameperson(person40_1,person40_1).
sameperson(person402_1,person402_1).
sameperson(person403_1,person403_1).
sameperson(person404_1,person404_1).
sameperson(person406_1,person406_1).
sameperson(person407_1,person407_1).
sameperson(person408_1,person408_1).
sameperson(person410_1,person410_1).
sameperson(person411_1,person411_1).
sameperson(person41_1,person41_1).
sameperson(person412_1,person412_1).
sameperson(person415_1,person415_1).
sameperson(person416_1,person416_1).
sameperson(person417_1,person417_1).
sameperson(person418_1,person418_1).
sameperson(person419_1,person419_1).
sameperson(person4_1,person4_1).
sameperson(person420_1,person420_1).
sameperson(person42_1,person42_1).
sameperson(person422_1,person422_1).
sameperson(person424_1,person424_1).
sameperson(person426_1,person426_1).
sameperson(person427_1,person427_1).
sameperson(person428_1,person428_1).
sameperson(person429_1,person429_1).
sameperson(person431_1,person431_1).
sameperson(person432_1,person432_1).
sameperson(person435_1,person435_1).
sameperson(person45_1,person45_1).
sameperson(person46_1,person46_1).
sameperson(person51_1,person51_1).
sameperson(person5_1,person5_1).
sameperson(person52_1,person52_1).
sameperson(person57_1,person57_1).
sameperson(person58_1,person58_1).
sameperson(person61_1,person61_1).
sameperson(person6_1,person6_1).
sameperson(person62_1,person62_1).
sameperson(person63_1,person63_1).
sameperson(person64_1,person64_1).
sameperson(person67_1,person67_1).
sameperson(person68_1,person68_1).
sameperson(person70_1,person70_1).
sameperson(person71_1,person71_1).
sameperson(person7_1,person7_1).
sameperson(person72_1,person72_1).
sameperson(person73_1,person73_1).
sameperson(person75_1,person75_1).
sameperson(person76_1,person76_1).
sameperson(person77_1,person77_1).
sameperson(person79_1,person79_1).
sameperson(person80_1,person80_1).
sameperson(person81_1,person81_1).
sameperson(person82_1,person82_1).
sameperson(person83_1,person83_1).
sameperson(person84_1,person84_1).
sameperson(person85_1,person85_1).
sameperson(person86_1,person86_1).
sameperson(person87_1,person87_1).
sameperson(person88_1,person88_1).
sameperson(person89_1,person89_1).
sameperson(person90_1,person90_1).
sameperson(person9_1,person9_1).
sameperson(person92_1,person92_1).
sameperson(person94_1,person94_1).
sameperson(person96_1,person96_1).
sameperson(person98_1,person98_1).
sameperson(person99_1,person99_1).


student(person209_1).
student(person133_1).
student(person117_1).
student(person285_1).
student(person323_1).
student(person360_1).
student(person219_1).
student(person224_1).
student(person264_1).
student(person387_1).
student(person355_1).
student(person127_1).
student(person33_1).
student(person48_1).
student(person110_1).
student(person199_1).
student(person44_1).
student(person386_1).
student(person28_1).
student(person295_1).
student(person177_1).
student(person50_1).
student(person430_1).
student(person24_1).
student(person289_1).
student(person308_1).
student(person147_1).
student(person12_1).
student(person337_1).
student(person53_1).
student(person109_1).
student(person405_1).
student(person250_1).
student(person252_1).
student(person414_1).
student(person54_1).
student(person1_1).
student(person197_1).
student(person291_1).
student(person281_1).
student(person433_1).
student(person341_1).
student(person236_1).
student(person302_1).
student(person30_1).
student(person316_1).
student(person112_1).
student(person225_1).
student(person32_1).
student(person245_1).
student(person238_1).
student(person389_1).
student(person47_1).
student(person305_1).
student(person334_1).
student(person97_1).
student(person268_1).
student(person11_1).
student(person59_1).
student(person313_1).
student(person202_1).
student(person247_1).
student(person143_1).
student(person336_1).
student(person134_1).
student(person221_1).
student(person216_1).
student(person8_1).
student(person344_1).
student(person369_1).
student(person227_1).
student(person132_1).
student(person215_1).
student(person284_1).
student(person311_1).
student(person14_1).
student(person275_1).
student(person259_1).
student(person139_1).
student(person176_1).
student(person400_1).
student(person318_1).
student(person161_1).
student(person347_1).
student(person408_1).
student(person265_1).
student(person70_1).
student(person381_1).
student(person382_1).
student(person333_1).
student(person94_1).
student(person272_1).
student(person37_1).
student(person353_1).
student(person432_1).
student(person377_1).
student(person239_1).
student(person13_1).
student(person286_1).
student(person412_1).
student(person418_1).
student(person320_1).
student(person42_1).
student(person20_1).
student(person352_1).
student(person276_1).
student(person45_1).
student(person233_1).
student(person148_1).
student(person193_1).
student(person314_1).
student(person21_1).
student(person262_1).
student(person257_1).
student(person73_1).
student(person380_1).
student(person384_1).
student(person406_1).
student(person266_1).
student(person312_1).
student(person208_1).
student(person63_1).
student(person83_1).
student(person271_1).
student(person392_1).
student(person420_1).
student(person86_1).
student(person38_1).
student(person261_1).
student(person149_1).
student(person306_1).
student(person410_1).
student(person157_1).
student(person200_1).
student(person404_1).
student(person122_1).
student(person322_1).
student(person131_1).
student(person85_1).
student(person241_1).
student(person217_1).
student(person270_1).
student(person206_1).
student(person81_1).
student(person228_1).
student(person51_1).
student(person41_1).
student(person163_1).
student(person435_1).
student(person363_1).
student(person427_1).
student(person142_1).
student(person431_1).
student(person283_1).
student(person300_1).
student(person113_1).
student(person296_1).
student(person36_1).
student(person328_1).
student(person31_1).
student(person61_1).
student(person119_1).
student(person3_1).
student(person317_1).
student(person230_1).
student(person258_1).
student(person188_1).
student(person327_1).
student(person140_1).
student(person321_1).
student(person428_1).
student(person158_1).
student(person102_1).
student(person90_1).
student(person214_1).
student(person146_1).
student(person88_1).
student(person178_1).
student(person195_1).
student(person18_1).
student(person9_1).
student(person429_1).
student(person27_1).
student(person362_1).
student(person96_1).
student(person361_1).
student(person263_1).
student(person183_1).
student(person118_1).
student(person105_1).
student(person108_1).
student(person203_1).
student(person287_1).
student(person87_1).
student(person39_1).
student(person35_1).
student(person325_1).
student(person76_1).
student(person232_1).
student(person19_1).
student(person398_1).
student(person368_1).
student(person130_1).
student(person299_1).
student(person175_1).
student(person255_1).
student(person411_1).
student(person426_1).
student(person99_1).
student(person212_1).
student(person403_1).
student(person402_1).
student(person391_1).
student(person253_1).
student(person280_1).
student(person417_1).
student(person92_1).
student(person419_1).
student(person357_1).
student(person67_1).
student(person222_1).
student(person89_1).
student(person277_1).
student(person15_1).
student(person80_1).
student(person376_1).
student(person62_1).
student(person218_1).
student(person186_1).
student(person187_1).
student(person343_1).
student(person154_1).
student(person204_1).
student(person126_1).
student(person129_1).
student(person374_1).
student(person155_1).
student(person100_1).
student(person116_1).
student(person274_1).
student(person4_1).
student(person71_1).
student(person207_1).
student(person190_1).
student(person198_1).
student(person269_1).
student(person358_1).
student(person354_1).
student(person167_1).
student(person123_1).
student(person223_1).
student(person84_1).
student(person340_1).
student(person191_1).
student(person397_1).
student(person138_1).
student(person303_1).
student(person77_1).
student(person141_1).
student(person309_1).
student(person383_1).
student(person422_1).
student(person390_1).
student(person288_1).
student(person159_1).
student(person172_1).
student(person226_1).
student(person242_1).
student(person416_1).
student(person348_1).
student(person278_1).
student(person6_1).
student(person75_1).
student(person249_1).
student(person68_1).
student(person205_1).
student(person182_1).
student(person23_1).
student(person310_1).
student(person424_1).
student(person401_1).
student(person237_1).
student(person58_1).
student(person144_1).
student(person125_1).
student(person350_1).
student(person356_1).
student(person294_1).
student(person315_1).
student(person100_1).
student(person102_1).
student(person105_1).
student(person108_1).
student(person113_1).
student(person116_1).
student(person118_1).
student(person119_1).
student(person122_1).
student(person123_1).
student(person125_1).
student(person126_1).
student(person129_1).
student(person130_1).
student(person13_1).
student(person131_1).
student(person138_1).
student(person139_1).
student(person140_1).
student(person14_1).
student(person141_1).
student(person142_1).
student(person144_1).
student(person146_1).
student(person148_1).
student(person149_1).
student(person15_1).
student(person154_1).
student(person155_1).
student(person157_1).
student(person158_1).
student(person159_1).
student(person161_1).
student(person163_1).
student(person167_1).
student(person172_1).
student(person175_1).
student(person176_1).
student(person178_1).
student(person18_1).
student(person182_1).
student(person183_1).
student(person186_1).
student(person187_1).
student(person188_1).
student(person190_1).
student(person19_1).
student(person191_1).
student(person193_1).
student(person195_1).
student(person198_1).
student(person200_1).
student(person20_1).
student(person203_1).
student(person204_1).
student(person205_1).
student(person206_1).
student(person207_1).
student(person208_1).
student(person21_1).
student(person212_1).
student(person214_1).
student(person217_1).
student(person218_1).
student(person222_1).
student(person223_1).
student(person226_1).
student(person228_1).
student(person230_1).
student(person23_1).
student(person232_1).
student(person233_1).
student(person237_1).
student(person239_1).
student(person241_1).
student(person242_1).
student(person249_1).
student(person253_1).
student(person255_1).
student(person257_1).
student(person258_1).
student(person259_1).
student(person261_1).
student(person262_1).
student(person263_1).
student(person265_1).
student(person266_1).
student(person269_1).
student(person270_1).
student(person27_1).
student(person271_1).
student(person272_1).
student(person274_1).
student(person275_1).
student(person276_1).
student(person277_1).
student(person278_1).
student(person280_1).
student(person283_1).
student(person284_1).
student(person286_1).
student(person287_1).
student(person288_1).
student(person294_1).
student(person296_1).
student(person299_1).
student(person300_1).
student(person303_1).
student(person306_1).
student(person309_1).
student(person3_1).
student(person310_1).
student(person31_1).
student(person311_1).
student(person312_1).
student(person314_1).
student(person315_1).
student(person317_1).
student(person318_1).
student(person320_1).
student(person321_1).
student(person322_1).
student(person325_1).
student(person327_1).
student(person328_1).
student(person333_1).
student(person340_1).
student(person343_1).
student(person347_1).
student(person348_1).
student(person350_1).
student(person35_1).
student(person352_1).
student(person353_1).
student(person354_1).
student(person356_1).
student(person357_1).
student(person358_1).
student(person36_1).
student(person361_1).
student(person362_1).
student(person363_1).
student(person368_1).
student(person37_1).
student(person374_1).
student(person376_1).
student(person377_1).
student(person380_1).
student(person38_1).
student(person381_1).
student(person382_1).
student(person383_1).
student(person384_1).
student(person390_1).
student(person39_1).
student(person391_1).
student(person392_1).
student(person397_1).
student(person398_1).
student(person400_1).
student(person401_1).
student(person402_1).
student(person403_1).
student(person404_1).
student(person406_1).
student(person408_1).
student(person4_1).
student(person410_1).
student(person41_1).
student(person411_1).
student(person412_1).
student(person416_1).
student(person417_1).
student(person418_1).
student(person419_1).
student(person420_1).
student(person42_1).
student(person422_1).
student(person424_1).
student(person426_1).
student(person427_1).
student(person428_1).
student(person429_1).
student(person431_1).
student(person432_1).
student(person435_1).
student(person45_1).
student(person51_1).
student(person58_1).
student(person6_1).
student(person61_1).
student(person62_1).
student(person63_1).
student(person67_1).
student(person68_1).
student(person70_1).
student(person71_1).
student(person73_1).
student(person75_1).
student(person76_1).
student(person77_1).
student(person80_1).
student(person81_1).
student(person83_1).
student(person84_1).
student(person85_1).
student(person86_1).
student(person87_1).
student(person88_1).
student(person89_1).
student(person90_1).
student(person9_1).
student(person92_1).
student(person94_1).
student(person96_1).
student(person99_1).


professor(person34_1).
professor(person338_1).
professor(person145_1).
professor(person210_1).
professor(person366_1).
professor(person413_1).
professor(person184_1).
professor(person192_1).
professor(person423_1).
professor(person339_1).
professor(person304_1).
professor(person26_1).
professor(person120_1).
professor(person65_1).
professor(person43_1).
professor(person399_1).
professor(person152_1).
professor(person2_1).
professor(person16_1).
professor(person10_1).
professor(person173_1).
professor(person220_1).
professor(person95_1).
professor(person128_1).
professor(person196_1).
professor(person25_1).
professor(person260_1).
professor(person372_1).
professor(person174_1).
professor(person359_1).
professor(person194_1).
professor(person273_1).
professor(person93_1).
professor(person409_1).
professor(person256_1).
professor(person301_1).
professor(person66_1).
professor(person254_1).
professor(person425_1).
professor(person69_1).
professor(person170_1).
professor(person156_1).
professor(person106_1).
professor(person244_1).
professor(person160_1).
professor(person135_1).
professor(person330_1).
professor(person319_1).
professor(person292_1).
professor(person293_1).
professor(person240_1).
professor(person211_1).
professor(person150_1).
professor(person415_1).
professor(person79_1).
professor(person349_1).
professor(person7_1).
professor(person185_1).
professor(person171_1).
professor(person168_1).
professor(person407_1).
professor(person40_1).
professor(person279_1).
professor(person394_1).
professor(person342_1).
professor(person111_1).
professor(person115_1).
professor(person351_1).
professor(person72_1).
professor(person393_1).
professor(person248_1).
professor(person64_1).
professor(person166_1).
professor(person370_1).
professor(person335_1).
professor(person46_1).
professor(person189_1).
professor(person5_1).
professor(person22_1).
professor(person124_1).
professor(person375_1).
professor(person179_1).
professor(person297_1).
professor(person326_1).
professor(person267_1).
professor(person234_1).
professor(person101_1).
professor(person180_1).
professor(person98_1).
professor(person107_1).
professor(person235_1).
professor(person82_1).
professor(person213_1).
professor(person373_1).
professor(person104_1).
professor(person290_1).
professor(person378_1).
professor(person298_1).
professor(person52_1).
professor(person57_1).
professor(person231_1).
professor(person181_1).
professor(person364_1).
professor(person331_1).
professor(person103_1).
professor(person165_1).
professor(person29_1).
professor(person201_1).
professor(person324_1).
professor(person101_1).
professor(person103_1).
professor(person104_1).
professor(person107_1).
professor(person111_1).
professor(person115_1).
professor(person124_1).
professor(person150_1).
professor(person165_1).
professor(person166_1).
professor(person168_1).
professor(person171_1).
professor(person179_1).
professor(person180_1).
professor(person181_1).
professor(person185_1).
professor(person189_1).
professor(person201_1).
professor(person211_1).
professor(person213_1).
professor(person22_1).
professor(person231_1).
professor(person234_1).
professor(person235_1).
professor(person240_1).
professor(person248_1).
professor(person267_1).
professor(person279_1).
professor(person290_1).
professor(person29_1).
professor(person292_1).
professor(person293_1).
professor(person297_1).
professor(person298_1).
professor(person319_1).
professor(person324_1).
professor(person326_1).
professor(person331_1).
professor(person335_1).
professor(person342_1).
professor(person349_1).
professor(person351_1).
professor(person364_1).
professor(person370_1).
professor(person373_1).
professor(person375_1).
professor(person378_1).
professor(person393_1).
professor(person394_1).
professor(person40_1).
professor(person407_1).
professor(person415_1).
professor(person46_1).
professor(person5_1).
professor(person52_1).
professor(person57_1).
professor(person64_1).
professor(person7_1).
professor(person72_1).
professor(person79_1).
professor(person82_1).
professor(person98_1).


ta(course73_4,person199_1,winter_0304_6).
ta(course73_4,person44_1,winter_0304_6).
ta(course73_4,person386_1,winter_0304_6).
ta(course145_4,person48_1,winter_0304_6).
ta(course145_4,person219_1,winter_0304_6).
ta(course145_4,person28_1,winter_0304_6).
ta(course145_4,person295_1,winter_0304_6).
ta(course145_4,person117_1,winter_0304_6).
ta(course145_4,person177_1,winter_0304_6).
ta(course145_4,person355_1,winter_0304_6).
ta(course145_4,person50_1,winter_0304_6).
ta(course145_4,person264_1,winter_0304_6).
ta(course17_4,person209_1,winter_0304_6).
ta(course17_4,person360_1,winter_0304_6).
ta(course17_4,person110_1,winter_0304_6).
ta(course17_4,person224_1,winter_0304_6).
ta(course17_4,person430_1,winter_0304_6).
ta(course17_4,person24_1,winter_0304_6).
ta(course81_4,person308_1,winter_0304_6).
ta(course145_4,person199_1,autumn_0304_6).
ta(course145_4,person289_1,autumn_0304_6).
ta(course145_4,person360_1,autumn_0304_6).
ta(course145_4,person28_1,autumn_0304_6).
ta(course145_4,person117_1,autumn_0304_6).
ta(course145_4,person110_1,autumn_0304_6).
ta(course145_4,person147_1,autumn_0304_6).
ta(course145_4,person224_1,autumn_0304_6).
ta(course145_4,person12_1,autumn_0304_6).
ta(course145_4,person386_1,autumn_0304_6).
ta(course145_4,person355_1,autumn_0304_6).
ta(course145_4,person264_1,autumn_0304_6).
ta(course17_4,person48_1,autumn_0304_6).
ta(course17_4,person219_1,autumn_0304_6).
ta(course17_4,person177_1,autumn_0304_6).
ta(course17_4,person24_1,autumn_0304_6).
ta(course69_4,person209_1,autumn_0304_6).
ta(course145_4,person289_1,summer_0203_6).
ta(course145_4,person53_1,summer_0203_6).
ta(course145_4,person295_1,summer_0203_6).
ta(course145_4,person109_1,summer_0203_6).
ta(course145_4,person386_1,summer_0203_6).
ta(course145_4,person127_1,summer_0203_6).
ta(course17_4,person28_1,summer_0203_6).
ta(course17_4,person405_1,summer_0203_6).
ta(course17_4,person12_1,summer_0203_6).
ta(course17_4,person24_1,summer_0203_6).
ta(course73_4,person28_1,spring_0203_6).
ta(course73_4,person250_1,spring_0203_6).
ta(course145_4,person252_1,spring_0203_6).
ta(course145_4,person414_1,spring_0203_6).
ta(course145_4,person54_1,spring_0203_6).
ta(course145_4,person1_1,spring_0203_6).
ta(course145_4,person197_1,spring_0203_6).
ta(course145_4,person291_1,spring_0203_6).
ta(course145_4,person281_1,spring_0203_6).
ta(course145_4,person433_1,spring_0203_6).
ta(course145_4,person341_1,spring_0203_6).
ta(course145_4,person127_1,spring_0203_6).
ta(course145_4,person50_1,spring_0203_6).
ta(course145_4,person24_1,spring_0203_6).
ta(course17_4,person236_1,spring_0203_6).
ta(course17_4,person302_1,spring_0203_6).
ta(course17_4,person30_1,spring_0203_6).
ta(course17_4,person316_1,spring_0203_6).
ta(course102_4,person112_1,spring_0203_6).
ta(course102_4,person225_1,spring_0203_6).
ta(course92_4,person32_1,spring_0203_6).
ta(course73_4,person54_1,winter_0203_6).
ta(course73_4,person50_1,winter_0203_6).
ta(course145_4,person1_1,winter_0203_6).
ta(course145_4,person245_1,winter_0203_6).
ta(course145_4,person238_1,winter_0203_6).
ta(course145_4,person197_1,winter_0203_6).
ta(course145_4,person28_1,winter_0203_6).
ta(course145_4,person302_1,winter_0203_6).
ta(course145_4,person44_1,winter_0203_6).
ta(course145_4,person30_1,winter_0203_6).
ta(course145_4,person389_1,winter_0203_6).
ta(course145_4,person47_1,winter_0203_6).
ta(course145_4,person281_1,winter_0203_6).
ta(course145_4,person305_1,winter_0203_6).
ta(course145_4,person433_1,winter_0203_6).
ta(course145_4,person341_1,winter_0203_6).
ta(course145_4,person285_1,winter_0203_6).
ta(course145_4,person133_1,winter_0203_6).
ta(course145_4,person24_1,winter_0203_6).
ta(course17_4,person334_1,winter_0203_6).
ta(course17_4,person97_1,winter_0203_6).
ta(course17_4,person225_1,winter_0203_6).
ta(course17_4,person268_1,winter_0203_6).
ta(course17_4,person11_1,winter_0203_6).
ta(course17_4,person59_1,winter_0203_6).
ta(course73_4,person250_1,autumn_0203_6).
ta(course73_4,person341_1,autumn_0203_6).
ta(course145_4,person54_1,autumn_0203_6).
ta(course145_4,person238_1,autumn_0203_6).
ta(course145_4,person197_1,autumn_0203_6).
ta(course145_4,person44_1,autumn_0203_6).
ta(course145_4,person313_1,autumn_0203_6).
ta(course145_4,person202_1,autumn_0203_6).
ta(course145_4,person247_1,autumn_0203_6).
ta(course145_4,person225_1,autumn_0203_6).
ta(course145_4,person387_1,autumn_0203_6).
ta(course145_4,person337_1,autumn_0203_6).
ta(course145_4,person133_1,autumn_0203_6).
ta(course17_4,person334_1,autumn_0203_6).
ta(course17_4,person97_1,autumn_0203_6).
ta(course17_4,person323_1,autumn_0203_6).
ta(course17_4,person143_1,autumn_0203_6).
ta(course17_4,person336_1,autumn_0203_6).
ta(course17_4,person11_1,autumn_0203_6).
ta(course102_4,person134_1,autumn_0203_6).
ta(course102_4,person221_1,autumn_0203_6).
ta(course145_4,person133_1,summer_0102_6).
ta(course17_4,person323_1,summer_0102_6).
ta(course17_4,person216_1,summer_0102_6).
ta(course17_4,person387_1,summer_0102_6).
ta(course145_4,person8_1,spring_0102_6).
ta(course145_4,person313_1,spring_0102_6).
ta(course145_4,person341_1,spring_0102_6).
ta(course145_4,person133_1,spring_0102_6).
ta(course145_4,person344_1,spring_0102_6).
ta(course17_4,person323_1,spring_0102_6).
ta(course17_4,person216_1,spring_0102_6).
ta(course17_4,person110_1,spring_0102_6).
ta(course17_4,person285_1,spring_0102_6).
ta(course102_4,person387_1,spring_0102_6).
ta(course73_4,person110_1,winter_0102_6).
ta(course145_4,person369_1,winter_0102_6).
ta(course145_4,person216_1,winter_0102_6).
ta(course145_4,person227_1,winter_0102_6).
ta(course145_4,person132_1,winter_0102_6).
ta(course145_4,person133_1,winter_0102_6).
ta(course145_4,person344_1,winter_0102_6).
ta(course17_4,person323_1,winter_0102_6).
ta(course17_4,person285_1,winter_0102_6).
ta(course102_4,person387_1,winter_0102_6).
ta(course52_4,person70_1,winter_0304_6).
ta(course44_4,person193_1,winter_0304_6).
ta(course128_4,person271_1,winter_0304_6).
ta(course128_4,person392_1,winter_0304_6).
ta(course44_4,person377_1,autumn_0304_6).
ta(course24_4,person70_1,autumn_0304_6).
ta(course156_4,person257_1,autumn_0304_6).
ta(course132_4,person94_1,autumn_0304_6).
ta(course24_4,person21_1,spring_0203_6).
ta(course44_4,person420_1,winter_0203_6).
ta(course44_4,person382_1,winter_0203_6).
ta(course141_4,person14_1,winter_0203_6).
ta(course12_4,person21_1,winter_0203_6).
ta(course44_4,person286_1,autumn_0203_6).
ta(course52_4,person318_1,spring_0102_6).
ta(course44_4,person382_1,spring_0102_6).
ta(course44_4,person86_1,spring_0102_6).
ta(course50_4,person314_1,spring_0102_6).
ta(course39_4,person73_1,spring_0102_6).
ta(course82_4,person381_1,winter_0102_6).
ta(course89_4,person228_1,winter_0304_6).
ta(course41_4,person296_1,winter_0304_6).
ta(course41_4,person36_1,winter_0304_6).
ta(course13_4,person431_1,winter_0304_6).
ta(course157_4,person328_1,autumn_0304_6).
ta(course157_4,person31_1,autumn_0304_6).
ta(course110_4,person61_1,autumn_0304_6).
ta(course110_4,person36_1,autumn_0304_6).
ta(course79_4,person157_1,autumn_0304_6).
ta(course79_4,person119_1,autumn_0304_6).
ta(course118_4,person296_1,summer_0203_6).
ta(course118_4,person317_1,summer_0203_6).
ta(course157_4,person119_1,spring_0203_6).
ta(course157_4,person230_1,spring_0203_6).
ta(course157_4,person3_1,spring_0203_6).
ta(course157_4,person258_1,spring_0203_6).
ta(course101_4,person241_1,spring_0203_6).
ta(course89_4,person188_1,winter_0203_6).
ta(course89_4,person41_1,winter_0203_6).
ta(course148_4,person327_1,winter_0203_6).
ta(course148_4,person140_1,winter_0203_6).
ta(course13_4,person51_1,winter_0203_6).
ta(course157_4,person321_1,autumn_0203_6).
ta(course157_4,person428_1,autumn_0203_6).
ta(course157_4,person3_1,autumn_0203_6).
ta(course157_4,person158_1,autumn_0203_6).
ta(course110_4,person327_1,autumn_0203_6).
ta(course110_4,person317_1,autumn_0203_6).
ta(course3_4,person431_1,autumn_0203_6).
ta(course150_4,person327_1,summer_0102_6).
ta(course150_4,person102_1,summer_0102_6).
ta(course157_4,person90_1,spring_0102_6).
ta(course157_4,person214_1,spring_0102_6).
ta(course157_4,person146_1,spring_0102_6).
ta(course157_4,person88_1,spring_0102_6).
ta(course93_4,person228_1,spring_0102_6).
ta(course93_4,person31_1,spring_0102_6).
ta(course93_4,person178_1,spring_0102_6).
ta(course153_4,person195_1,spring_0102_6).
ta(course153_4,person428_1,spring_0102_6).
ta(course148_4,person31_1,winter_0102_6).
ta(course159_4,person113_1,winter_0102_6).
ta(course13_4,person217_1,winter_0102_6).
ta(course49_4,person361_1,winter_0304_6).
ta(course46_4,person429_1,winter_0304_6).
ta(course124_4,person105_1,autumn_0304_6).
ta(course51_4,person27_1,autumn_0304_6).
ta(course138_4,person18_1,autumn_0304_6).
ta(course49_4,person361_1,summer_0203_6).
ta(course124_4,person108_1,spring_0203_6).
ta(course124_4,person203_1,spring_0203_6).
ta(course51_4,person96_1,spring_0203_6).
ta(course49_4,person287_1,spring_0203_6).
ta(course49_4,person87_1,spring_0203_6).
ta(course124_4,person18_1,winter_0203_6).
ta(course124_4,person35_1,winter_0203_6).
ta(course49_4,person287_1,winter_0203_6).
ta(course49_4,person87_1,winter_0203_6).
ta(course46_4,person429_1,winter_0203_6).
ta(course124_4,person108_1,autumn_0203_6).
ta(course124_4,person203_1,autumn_0203_6).
ta(course53_4,person287_1,autumn_0203_6).
ta(course172_4,person325_1,autumn_0203_6).
ta(course49_4,person361_1,summer_0102_6).
ta(course51_4,person39_1,spring_0102_6).
ta(course124_4,person76_1,winter_0102_6).
ta(course124_4,person9_1,winter_0102_6).
ta(course49_4,person96_1,winter_0102_6).
ta(course19_4,person232_1,winter_0102_6).
ta(course18_4,person398_1,winter_0304_6).
ta(course18_4,person274_1,winter_0304_6).
ta(course151_4,person4_1,winter_0304_6).
ta(course151_4,person299_1,winter_0304_6).
ta(course151_4,person71_1,winter_0304_6).
ta(course38_4,person222_1,winter_0304_6).
ta(course38_4,person207_1,winter_0304_6).
ta(course20_4,person368_1,winter_0304_6).
ta(course129_4,person67_1,winter_0304_6).
ta(course23_4,person116_1,winter_0304_6).
ta(course88_4,person130_1,winter_0304_6).
ta(course18_4,person277_1,autumn_0304_6).
ta(course18_4,person67_1,autumn_0304_6).
ta(course151_4,person4_1,autumn_0304_6).
ta(course151_4,person129_1,autumn_0304_6).
ta(course38_4,person190_1,autumn_0304_6).
ta(course38_4,person222_1,autumn_0304_6).
ta(course38_4,person207_1,autumn_0304_6).
ta(course45_4,person155_1,autumn_0304_6).
ta(course45_4,person71_1,autumn_0304_6).
ta(course48_4,person155_1,autumn_0304_6).
ta(course18_4,person274_1,spring_0203_6).
ta(course21_4,person198_1,spring_0203_6).
ta(course151_4,person269_1,spring_0203_6).
ta(course80_4,person358_1,spring_0203_6).
ta(course61_4,person155_1,spring_0203_6).
ta(course18_4,person116_1,winter_0203_6).
ta(course151_4,person155_1,winter_0203_6).
ta(course38_4,person62_1,winter_0203_6).
ta(course18_4,person354_1,autumn_0203_6).
ta(course18_4,person155_1,autumn_0203_6).
ta(course151_4,person167_1,autumn_0203_6).
ta(course151_4,person186_1,autumn_0203_6).
ta(course38_4,person154_1,autumn_0203_6).
ta(course45_4,person358_1,autumn_0203_6).
ta(course74_4,person255_1,autumn_0203_6).
ta(course18_4,person67_1,spring_0102_6).
ta(course151_4,person299_1,spring_0102_6).
ta(course30_4,person116_1,spring_0102_6).
ta(course174_4,person123_1,spring_0102_6).
ta(course74_4,person204_1,spring_0102_6).
ta(course14_4,person15_1,spring_0102_6).
ta(course18_4,person15_1,winter_0102_6).
ta(course18_4,person280_1,winter_0102_6).
ta(course151_4,person223_1,winter_0102_6).
ta(course151_4,person299_1,winter_0102_6).
ta(course38_4,person357_1,winter_0102_6).
ta(course38_4,person255_1,winter_0102_6).
ta(course38_4,person92_1,winter_0102_6).
ta(course20_4,person84_1,winter_0102_6).
ta(course62_4,person126_1,winter_0102_6).
ta(course129_4,person340_1,winter_0102_6).
ta(course166_4,person100_1,winter_0102_6).
ta(course147_4,person23_1,winter_0304_6).
ta(course165_4,person141_1,winter_0304_6).
ta(course104_4,person424_1,winter_0304_6).
ta(course68_4,person416_1,winter_0304_6).
ta(course161_4,person191_1,winter_0304_6).
ta(course137_4,person383_1,winter_0304_6).
ta(course40_4,person390_1,winter_0304_6).
ta(course11_4,person205_1,autumn_0304_6).
ta(course11_4,person172_1,autumn_0304_6).
ta(course147_4,person310_1,autumn_0304_6).
ta(course165_4,person416_1,autumn_0304_6).
ta(course104_4,person401_1,autumn_0304_6).
ta(course103_4,person182_1,autumn_0304_6).
ta(course149_4,person390_1,autumn_0304_6).
ta(course11_4,person58_1,spring_0203_6).
ta(course11_4,person144_1,spring_0203_6).
ta(course147_4,person390_1,spring_0203_6).
ta(course147_4,person310_1,spring_0203_6).
ta(course27_4,person249_1,spring_0203_6).
ta(course40_4,person303_1,spring_0203_6).
ta(course36_4,person278_1,spring_0203_6).
ta(course147_4,person125_1,winter_0203_6).
ta(course147_4,person6_1,winter_0203_6).
ta(course165_4,person58_1,winter_0203_6).
ta(course165_4,person422_1,winter_0203_6).
ta(course104_4,person237_1,winter_0203_6).
ta(course161_4,person390_1,winter_0203_6).
ta(course161_4,person350_1,winter_0203_6).
ta(course84_4,person141_1,winter_0203_6).
ta(course11_4,person125_1,autumn_0203_6).
ta(course11_4,person390_1,autumn_0203_6).
ta(course11_4,person310_1,autumn_0203_6).
ta(course165_4,person191_1,autumn_0203_6).
ta(course104_4,person278_1,autumn_0203_6).
ta(course104_4,person237_1,autumn_0203_6).
ta(course68_4,person356_1,autumn_0203_6).
ta(course155_4,person226_1,autumn_0203_6).
ta(course11_4,person422_1,spring_0102_6).
ta(course147_4,person309_1,spring_0102_6).
ta(course147_4,person356_1,spring_0102_6).
ta(course165_4,person294_1,spring_0102_6).
ta(course104_4,person191_1,spring_0102_6).
ta(course104_4,person182_1,spring_0102_6).
ta(course27_4,person75_1,spring_0102_6).
ta(course40_4,person303_1,spring_0102_6).
ta(course147_4,person75_1,winter_0102_6).
ta(course147_4,person356_1,winter_0102_6).
ta(course165_4,person315_1,winter_0102_6).
ta(course68_4,person191_1,winter_0102_6).
ta(course68_4,person309_1,winter_0102_6).
ta(course161_4,person249_1,winter_0102_6).
ta(course137_4,person288_1,winter_0102_6).
ta(course98_4,person303_1,winter_0102_6).
ta(course101_4,person241_1,spring_0203_6).
ta(course103_4,person182_1,autumn_0304_6).
ta(course104_4,person182_1,spring_0102_6).
ta(course104_4,person191_1,spring_0102_6).
ta(course104_4,person237_1,autumn_0203_6).
ta(course104_4,person237_1,winter_0203_6).
ta(course104_4,person278_1,autumn_0203_6).
ta(course104_4,person401_1,autumn_0304_6).
ta(course104_4,person424_1,winter_0304_6).
ta(course110_4,person317_1,autumn_0203_6).
ta(course110_4,person327_1,autumn_0203_6).
ta(course110_4,person36_1,autumn_0304_6).
ta(course110_4,person61_1,autumn_0304_6).
ta(course11_4,person125_1,autumn_0203_6).
ta(course11_4,person144_1,spring_0203_6).
ta(course11_4,person172_1,autumn_0304_6).
ta(course11_4,person205_1,autumn_0304_6).
ta(course11_4,person310_1,autumn_0203_6).
ta(course11_4,person390_1,autumn_0203_6).
ta(course11_4,person422_1,spring_0102_6).
ta(course11_4,person58_1,spring_0203_6).
ta(course118_4,person296_1,summer_0203_6).
ta(course118_4,person317_1,summer_0203_6).
ta(course124_4,person105_1,autumn_0304_6).
ta(course124_4,person108_1,autumn_0203_6).
ta(course124_4,person108_1,spring_0203_6).
ta(course124_4,person18_1,winter_0203_6).
ta(course124_4,person203_1,autumn_0203_6).
ta(course124_4,person203_1,spring_0203_6).
ta(course124_4,person35_1,winter_0203_6).
ta(course124_4,person76_1,winter_0102_6).
ta(course124_4,person9_1,winter_0102_6).
ta(course12_4,person21_1,winter_0203_6).
ta(course128_4,person271_1,winter_0304_6).
ta(course128_4,person392_1,winter_0304_6).
ta(course129_4,person340_1,winter_0102_6).
ta(course129_4,person67_1,winter_0304_6).
ta(course132_4,person94_1,autumn_0304_6).
ta(course13_4,person217_1,winter_0102_6).
ta(course13_4,person431_1,winter_0304_6).
ta(course13_4,person51_1,winter_0203_6).
ta(course137_4,person288_1,winter_0102_6).
ta(course137_4,person383_1,winter_0304_6).
ta(course138_4,person18_1,autumn_0304_6).
ta(course141_4,person14_1,winter_0203_6).
ta(course14_4,person15_1,spring_0102_6).
ta(course147_4,person125_1,winter_0203_6).
ta(course147_4,person23_1,winter_0304_6).
ta(course147_4,person309_1,spring_0102_6).
ta(course147_4,person310_1,autumn_0304_6).
ta(course147_4,person310_1,spring_0203_6).
ta(course147_4,person356_1,spring_0102_6).
ta(course147_4,person356_1,winter_0102_6).
ta(course147_4,person390_1,spring_0203_6).
ta(course147_4,person6_1,winter_0203_6).
ta(course147_4,person75_1,winter_0102_6).
ta(course148_4,person140_1,winter_0203_6).
ta(course148_4,person31_1,winter_0102_6).
ta(course148_4,person327_1,winter_0203_6).
ta(course149_4,person390_1,autumn_0304_6).
ta(course150_4,person102_1,summer_0102_6).
ta(course150_4,person327_1,summer_0102_6).
ta(course151_4,person129_1,autumn_0304_6).
ta(course151_4,person155_1,winter_0203_6).
ta(course151_4,person167_1,autumn_0203_6).
ta(course151_4,person186_1,autumn_0203_6).
ta(course151_4,person223_1,winter_0102_6).
ta(course151_4,person269_1,spring_0203_6).
ta(course151_4,person299_1,spring_0102_6).
ta(course151_4,person299_1,winter_0102_6).
ta(course151_4,person299_1,winter_0304_6).
ta(course151_4,person4_1,autumn_0304_6).
ta(course151_4,person4_1,winter_0304_6).
ta(course151_4,person71_1,winter_0304_6).
ta(course153_4,person195_1,spring_0102_6).
ta(course153_4,person428_1,spring_0102_6).
ta(course155_4,person226_1,autumn_0203_6).
ta(course156_4,person257_1,autumn_0304_6).
ta(course157_4,person119_1,spring_0203_6).
ta(course157_4,person146_1,spring_0102_6).
ta(course157_4,person158_1,autumn_0203_6).
ta(course157_4,person214_1,spring_0102_6).
ta(course157_4,person230_1,spring_0203_6).
ta(course157_4,person258_1,spring_0203_6).
ta(course157_4,person31_1,autumn_0304_6).
ta(course157_4,person3_1,autumn_0203_6).
ta(course157_4,person3_1,spring_0203_6).
ta(course157_4,person321_1,autumn_0203_6).
ta(course157_4,person328_1,autumn_0304_6).
ta(course157_4,person428_1,autumn_0203_6).
ta(course157_4,person88_1,spring_0102_6).
ta(course157_4,person90_1,spring_0102_6).
ta(course159_4,person113_1,winter_0102_6).
ta(course161_4,person191_1,winter_0304_6).
ta(course161_4,person249_1,winter_0102_6).
ta(course161_4,person350_1,winter_0203_6).
ta(course161_4,person390_1,winter_0203_6).
ta(course165_4,person141_1,winter_0304_6).
ta(course165_4,person191_1,autumn_0203_6).
ta(course165_4,person294_1,spring_0102_6).
ta(course165_4,person315_1,winter_0102_6).
ta(course165_4,person416_1,autumn_0304_6).
ta(course165_4,person422_1,winter_0203_6).
ta(course165_4,person58_1,winter_0203_6).
ta(course166_4,person100_1,winter_0102_6).
ta(course172_4,person325_1,autumn_0203_6).
ta(course174_4,person123_1,spring_0102_6).
ta(course18_4,person116_1,winter_0203_6).
ta(course18_4,person15_1,winter_0102_6).
ta(course18_4,person155_1,autumn_0203_6).
ta(course18_4,person274_1,spring_0203_6).
ta(course18_4,person274_1,winter_0304_6).
ta(course18_4,person277_1,autumn_0304_6).
ta(course18_4,person280_1,winter_0102_6).
ta(course18_4,person354_1,autumn_0203_6).
ta(course18_4,person398_1,winter_0304_6).
ta(course18_4,person67_1,autumn_0304_6).
ta(course18_4,person67_1,spring_0102_6).
ta(course19_4,person232_1,winter_0102_6).
ta(course20_4,person368_1,winter_0304_6).
ta(course20_4,person84_1,winter_0102_6).
ta(course21_4,person198_1,spring_0203_6).
ta(course23_4,person116_1,winter_0304_6).
ta(course24_4,person21_1,spring_0203_6).
ta(course24_4,person70_1,autumn_0304_6).
ta(course27_4,person249_1,spring_0203_6).
ta(course27_4,person75_1,spring_0102_6).
ta(course30_4,person116_1,spring_0102_6).
ta(course3_4,person431_1,autumn_0203_6).
ta(course36_4,person278_1,spring_0203_6).
ta(course38_4,person154_1,autumn_0203_6).
ta(course38_4,person190_1,autumn_0304_6).
ta(course38_4,person207_1,autumn_0304_6).
ta(course38_4,person207_1,winter_0304_6).
ta(course38_4,person222_1,autumn_0304_6).
ta(course38_4,person222_1,winter_0304_6).
ta(course38_4,person255_1,winter_0102_6).
ta(course38_4,person357_1,winter_0102_6).
ta(course38_4,person62_1,winter_0203_6).
ta(course38_4,person92_1,winter_0102_6).
ta(course39_4,person73_1,spring_0102_6).
ta(course40_4,person303_1,spring_0102_6).
ta(course40_4,person303_1,spring_0203_6).
ta(course40_4,person390_1,winter_0304_6).
ta(course41_4,person296_1,winter_0304_6).
ta(course41_4,person36_1,winter_0304_6).
ta(course44_4,person193_1,winter_0304_6).
ta(course44_4,person286_1,autumn_0203_6).
ta(course44_4,person377_1,autumn_0304_6).
ta(course44_4,person382_1,spring_0102_6).
ta(course44_4,person382_1,winter_0203_6).
ta(course44_4,person420_1,winter_0203_6).
ta(course44_4,person86_1,spring_0102_6).
ta(course45_4,person155_1,autumn_0304_6).
ta(course45_4,person358_1,autumn_0203_6).
ta(course45_4,person71_1,autumn_0304_6).
ta(course46_4,person429_1,winter_0203_6).
ta(course46_4,person429_1,winter_0304_6).
ta(course48_4,person155_1,autumn_0304_6).
ta(course49_4,person287_1,spring_0203_6).
ta(course49_4,person287_1,winter_0203_6).
ta(course49_4,person361_1,summer_0102_6).
ta(course49_4,person361_1,summer_0203_6).
ta(course49_4,person361_1,winter_0304_6).
ta(course49_4,person87_1,spring_0203_6).
ta(course49_4,person87_1,winter_0203_6).
ta(course49_4,person96_1,winter_0102_6).
ta(course50_4,person314_1,spring_0102_6).
ta(course51_4,person27_1,autumn_0304_6).
ta(course51_4,person39_1,spring_0102_6).
ta(course51_4,person96_1,spring_0203_6).
ta(course52_4,person318_1,spring_0102_6).
ta(course52_4,person70_1,winter_0304_6).
ta(course53_4,person287_1,autumn_0203_6).
ta(course61_4,person155_1,spring_0203_6).
ta(course62_4,person126_1,winter_0102_6).
ta(course68_4,person191_1,winter_0102_6).
ta(course68_4,person309_1,winter_0102_6).
ta(course68_4,person356_1,autumn_0203_6).
ta(course68_4,person416_1,winter_0304_6).
ta(course74_4,person204_1,spring_0102_6).
ta(course74_4,person255_1,autumn_0203_6).
ta(course79_4,person119_1,autumn_0304_6).
ta(course79_4,person157_1,autumn_0304_6).
ta(course80_4,person358_1,spring_0203_6).
ta(course82_4,person381_1,winter_0102_6).
ta(course84_4,person141_1,winter_0203_6).
ta(course88_4,person130_1,winter_0304_6).
ta(course89_4,person188_1,winter_0203_6).
ta(course89_4,person228_1,winter_0304_6).
ta(course89_4,person41_1,winter_0203_6).
ta(course93_4,person178_1,spring_0102_6).
ta(course93_4,person228_1,spring_0102_6).
ta(course93_4,person31_1,spring_0102_6).
ta(course98_4,person303_1,winter_0102_6).


yearsinprogram(person209_1,1).
yearsinprogram(person133_1,3).
yearsinprogram(person117_1,1).
yearsinprogram(person285_1,3).
yearsinprogram(person323_1,3).
yearsinprogram(person360_1,1).
yearsinprogram(person219_1,1).
yearsinprogram(person224_1,1).
yearsinprogram(person264_1,1).
yearsinprogram(person387_1,3).
yearsinprogram(person355_1,1).
yearsinprogram(person127_1,4).
yearsinprogram(person33_1,5).
yearsinprogram(person48_1,1).
yearsinprogram(person110_1,3).
yearsinprogram(person215_1,5).
yearsinprogram(person408_1,2).
yearsinprogram(person265_1,9).
yearsinprogram(person70_1,1).
yearsinprogram(person381_1,10).
yearsinprogram(person139_1,3).
yearsinprogram(person382_1,3).
yearsinprogram(person333_1,2).
yearsinprogram(person94_1,1).
yearsinprogram(person176_1,2).
yearsinprogram(person272_1,2).
yearsinprogram(person37_1,1).
yearsinprogram(person353_1,4).
yearsinprogram(person432_1,5).
yearsinprogram(person377_1,1).
yearsinprogram(person239_1,4).
yearsinprogram(person13_1,7).
yearsinprogram(person286_1,3).
yearsinprogram(person412_1,3).
yearsinprogram(person418_1,3).
yearsinprogram(person14_1,10).
yearsinprogram(person320_1,3).
yearsinprogram(person42_1,1).
yearsinprogram(person20_1,1).
yearsinprogram(person352_1,5).
yearsinprogram(person276_1,3).
yearsinprogram(person45_1,5).
yearsinprogram(person233_1,1).
yearsinprogram(person148_1,5).
yearsinprogram(person193_1,1).
yearsinprogram(person314_1,4).
yearsinprogram(person275_1,5).
yearsinprogram(person21_1,5).
yearsinprogram(person262_1,7).
yearsinprogram(person257_1,7).
yearsinprogram(person73_1,4).
yearsinprogram(person380_1,6).
yearsinprogram(person384_1,3).
yearsinprogram(person406_1,5).
yearsinprogram(person266_1,5).
yearsinprogram(person312_1,4).
yearsinprogram(person208_1,4).
yearsinprogram(person311_1,3).
yearsinprogram(person63_1,5).
yearsinprogram(person318_1,5).
yearsinprogram(person83_1,5).
yearsinprogram(person161_1,7).
yearsinprogram(person284_1,3).
yearsinprogram(person241_1,3).
yearsinprogram(person217_1,5).
yearsinprogram(person270_1,1).
yearsinprogram(person206_1,6).
yearsinprogram(person81_1,6).
yearsinprogram(person122_1,4).
yearsinprogram(person228_1,3).
yearsinprogram(person51_1,2).
yearsinprogram(person41_1,5).
yearsinprogram(person163_1,4).
yearsinprogram(person435_1,4).
yearsinprogram(person404_1,4).
yearsinprogram(person363_1,3).
yearsinprogram(person427_1,4).
yearsinprogram(person142_1,9).
yearsinprogram(person431_1,2).
yearsinprogram(person283_1,1).
yearsinprogram(person149_1,5).
yearsinprogram(person300_1,8).
yearsinprogram(person200_1,4).
yearsinprogram(person157_1,4).
yearsinprogram(person113_1,4).
yearsinprogram(person18_1,3).
yearsinprogram(person9_1,5).
yearsinprogram(person429_1,5).
yearsinprogram(person27_1,1).
yearsinprogram(person362_1,3).
yearsinprogram(person96_1,5).
yearsinprogram(person361_1,6).
yearsinprogram(person263_1,6).
yearsinprogram(person183_1,4).
yearsinprogram(person118_1,4).
yearsinprogram(person19_1,1).
yearsinprogram(person398_1,1).
yearsinprogram(person368_1,4).
yearsinprogram(person130_1,8).
yearsinprogram(person299_1,3).
yearsinprogram(person175_1,2).
yearsinprogram(person255_1,5).
yearsinprogram(person411_1,6).
yearsinprogram(person426_1,5).
yearsinprogram(person99_1,2).
yearsinprogram(person212_1,7).
yearsinprogram(person403_1,12).
yearsinprogram(person402_1,2).
yearsinprogram(person391_1,4).
yearsinprogram(person253_1,5).
yearsinprogram(person280_1,3).
yearsinprogram(person417_1,1).
yearsinprogram(person92_1,5).
yearsinprogram(person419_1,7).
yearsinprogram(person357_1,4).
yearsinprogram(person67_1,6).
yearsinprogram(person222_1,1).
yearsinprogram(person89_1,5).
yearsinprogram(person277_1,1).
yearsinprogram(person15_1,3).
yearsinprogram(person80_1,6).
yearsinprogram(person376_1,4).
yearsinprogram(person62_1,2).
yearsinprogram(person218_1,12).
yearsinprogram(person186_1,1).
yearsinprogram(person187_1,1).
yearsinprogram(person343_1,1).
yearsinprogram(person154_1,4).
yearsinprogram(person204_1,6).
yearsinprogram(person126_1,5).
yearsinprogram(person129_1,6).
yearsinprogram(person374_1,12).
yearsinprogram(person155_1,2).
yearsinprogram(person100_1,5).
yearsinprogram(person116_1,3).
yearsinprogram(person309_1,3).
yearsinprogram(person141_1,6).
yearsinprogram(person383_1,2).
yearsinprogram(person422_1,3).
yearsinprogram(person390_1,2).
yearsinprogram(person288_1,5).
yearsinprogram(person159_1,2).
yearsinprogram(person172_1,1).
yearsinprogram(person226_1,4).
yearsinprogram(person242_1,5).
yearsinprogram(person191_1,4).
yearsinprogram(person416_1,1).
yearsinprogram(person348_1,3).
yearsinprogram(person278_1,2).
yearsinprogram(person6_1,2).
yearsinprogram(person75_1,6).
yearsinprogram(person303_1,4).
yearsinprogram(person249_1,7).
yearsinprogram(person68_1,5).
yearsinprogram(person205_1,1).
yearsinprogram(person182_1,3).
yearsinprogram(person100_1,5).
yearsinprogram(person113_1,4).
yearsinprogram(person116_1,3).
yearsinprogram(person118_1,4).
yearsinprogram(person122_1,4).
yearsinprogram(person126_1,5).
yearsinprogram(person129_1,6).
yearsinprogram(person130_1,8).
yearsinprogram(person13_1,7).
yearsinprogram(person139_1,3).
yearsinprogram(person14_1,10).
yearsinprogram(person141_1,6).
yearsinprogram(person142_1,9).
yearsinprogram(person148_1,5).
yearsinprogram(person149_1,5).
yearsinprogram(person15_1,3).
yearsinprogram(person154_1,4).
yearsinprogram(person155_1,2).
yearsinprogram(person157_1,4).
yearsinprogram(person159_1,2).
yearsinprogram(person161_1,7).
yearsinprogram(person163_1,4).
yearsinprogram(person172_1,1).
yearsinprogram(person175_1,2).
yearsinprogram(person176_1,2).
yearsinprogram(person18_1,3).
yearsinprogram(person182_1,3).
yearsinprogram(person183_1,4).
yearsinprogram(person186_1,1).
yearsinprogram(person187_1,1).
yearsinprogram(person19_1,1).
yearsinprogram(person191_1,4).
yearsinprogram(person193_1,1).
yearsinprogram(person200_1,4).
yearsinprogram(person20_1,1).
yearsinprogram(person204_1,6).
yearsinprogram(person205_1,1).
yearsinprogram(person206_1,6).
yearsinprogram(person208_1,4).
yearsinprogram(person21_1,5).
yearsinprogram(person212_1,7).
yearsinprogram(person217_1,5).
yearsinprogram(person218_1,12).
yearsinprogram(person222_1,1).
yearsinprogram(person226_1,4).
yearsinprogram(person228_1,3).
yearsinprogram(person233_1,1).
yearsinprogram(person239_1,4).
yearsinprogram(person241_1,3).
yearsinprogram(person242_1,5).
yearsinprogram(person249_1,7).
yearsinprogram(person253_1,5).
yearsinprogram(person255_1,5).
yearsinprogram(person257_1,7).
yearsinprogram(person262_1,7).
yearsinprogram(person263_1,6).
yearsinprogram(person265_1,9).
yearsinprogram(person266_1,5).
yearsinprogram(person270_1,1).
yearsinprogram(person27_1,1).
yearsinprogram(person272_1,2).
yearsinprogram(person275_1,5).
yearsinprogram(person276_1,3).
yearsinprogram(person277_1,1).
yearsinprogram(person278_1,2).
yearsinprogram(person280_1,3).
yearsinprogram(person283_1,1).
yearsinprogram(person284_1,3).
yearsinprogram(person286_1,3).
yearsinprogram(person288_1,5).
yearsinprogram(person299_1,3).
yearsinprogram(person300_1,8).
yearsinprogram(person303_1,4).
yearsinprogram(person309_1,3).
yearsinprogram(person311_1,3).
yearsinprogram(person312_1,4).
yearsinprogram(person314_1,4).
yearsinprogram(person318_1,5).
yearsinprogram(person320_1,3).
yearsinprogram(person333_1,2).
yearsinprogram(person343_1,1).
yearsinprogram(person348_1,3).
yearsinprogram(person352_1,5).
yearsinprogram(person353_1,4).
yearsinprogram(person357_1,4).
yearsinprogram(person361_1,6).
yearsinprogram(person362_1,3).
yearsinprogram(person363_1,3).
yearsinprogram(person368_1,4).
yearsinprogram(person37_1,1).
yearsinprogram(person374_1,12).
yearsinprogram(person376_1,4).
yearsinprogram(person377_1,1).
yearsinprogram(person380_1,6).
yearsinprogram(person381_1,10).
yearsinprogram(person382_1,3).
yearsinprogram(person383_1,2).
yearsinprogram(person384_1,3).
yearsinprogram(person390_1,2).
yearsinprogram(person391_1,4).
yearsinprogram(person398_1,1).
yearsinprogram(person402_1,2).
yearsinprogram(person403_1,12).
yearsinprogram(person404_1,4).
yearsinprogram(person406_1,5).
yearsinprogram(person408_1,2).
yearsinprogram(person411_1,6).
yearsinprogram(person41_1,5).
yearsinprogram(person412_1,3).
yearsinprogram(person416_1,1).
yearsinprogram(person417_1,1).
yearsinprogram(person418_1,3).
yearsinprogram(person419_1,7).
yearsinprogram(person42_1,1).
yearsinprogram(person422_1,3).
yearsinprogram(person426_1,5).
yearsinprogram(person427_1,4).
yearsinprogram(person429_1,5).
yearsinprogram(person431_1,2).
yearsinprogram(person432_1,5).
yearsinprogram(person435_1,4).
yearsinprogram(person45_1,5).
yearsinprogram(person51_1,2).
yearsinprogram(person6_1,2).
yearsinprogram(person62_1,2).
yearsinprogram(person63_1,5).
yearsinprogram(person67_1,6).
yearsinprogram(person68_1,5).
yearsinprogram(person70_1,1).
yearsinprogram(person73_1,4).
yearsinprogram(person75_1,6).
yearsinprogram(person80_1,6).
yearsinprogram(person81_1,6).
yearsinprogram(person83_1,5).
yearsinprogram(person89_1,5).
yearsinprogram(person9_1,5).
yearsinprogram(person92_1,5).
yearsinprogram(person94_1,1).
yearsinprogram(person96_1,5).
yearsinprogram(person99_1,2).


phase(person209_1,pre_quals_9).
phase(person133_1,pre_quals_9).
phase(person117_1,pre_quals_9).
phase(person285_1,pre_quals_9).
phase(person323_1,pre_quals_9).
phase(person360_1,pre_quals_9).
phase(person219_1,pre_quals_9).
phase(person224_1,pre_quals_9).
phase(person264_1,pre_quals_9).
phase(person387_1,pre_quals_9).
phase(person355_1,pre_quals_9).
phase(person127_1,post_quals_9).
phase(person33_1,post_generals_9).
phase(person48_1,pre_quals_9).
phase(person110_1,pre_quals_9).
phase(person215_1,post_quals_9).
phase(person408_1,pre_quals_9).
phase(person265_1,post_generals_9).
phase(person70_1,pre_quals_9).
phase(person381_1,post_generals_9).
phase(person139_1,post_quals_9).
phase(person382_1,post_quals_9).
phase(person333_1,pre_quals_9).
phase(person94_1,pre_quals_9).
phase(person176_1,post_quals_9).
phase(person272_1,post_quals_9).
phase(person37_1,pre_quals_9).
phase(person353_1,post_quals_9).
phase(person432_1,post_quals_9).
phase(person377_1,pre_quals_9).
phase(person239_1,post_quals_9).
phase(person13_1,post_generals_9).
phase(person286_1,post_quals_9).
phase(person412_1,post_quals_9).
phase(person418_1,post_quals_9).
phase(person14_1,post_generals_9).
phase(person320_1,post_quals_9).
phase(person42_1,pre_quals_9).
phase(person20_1,pre_quals_9).
phase(person352_1,post_generals_9).
phase(person276_1,pre_quals_9).
phase(person45_1,post_generals_9).
phase(person233_1,pre_quals_9).
phase(person148_1,post_quals_9).
phase(person193_1,pre_quals_9).
phase(person314_1,post_generals_9).
phase(person275_1,post_generals_9).
phase(person21_1,post_generals_9).
phase(person262_1,post_generals_9).
phase(person257_1,post_generals_9).
phase(person73_1,post_quals_9).
phase(person380_1,post_generals_9).
phase(person384_1,post_quals_9).
phase(person406_1,post_generals_9).
phase(person266_1,post_quals_9).
phase(person312_1,pre_quals_9).
phase(person208_1,post_quals_9).
phase(person311_1,post_quals_9).
phase(person63_1,post_generals_9).
phase(person318_1,pre_quals_9).
phase(person83_1,post_quals_9).
phase(person161_1,post_generals_9).
phase(person284_1,post_quals_9).
phase(person241_1,post_quals_9).
phase(person217_1,post_generals_9).
phase(person270_1,pre_quals_9).
phase(person206_1,post_generals_9).
phase(person81_1,post_generals_9).
phase(person122_1,post_quals_9).
phase(person228_1,post_quals_9).
phase(person51_1,pre_quals_9).
phase(person41_1,post_quals_9).
phase(person163_1,post_quals_9).
phase(person435_1,post_quals_9).
phase(person404_1,post_generals_9).
phase(person363_1,pre_quals_9).
phase(person427_1,post_quals_9).
phase(person142_1,post_generals_9).
phase(person431_1,pre_quals_9).
phase(person283_1,pre_quals_9).
phase(person149_1,post_quals_9).
phase(person300_1,post_generals_9).
phase(person200_1,post_quals_9).
phase(person157_1,post_quals_9).
phase(person113_1,post_generals_9).
phase(person18_1,pre_quals_9).
phase(person9_1,post_generals_9).
phase(person429_1,post_quals_9).
phase(person27_1,pre_quals_9).
phase(person362_1,post_quals_9).
phase(person96_1,post_generals_9).
phase(person361_1,post_generals_9).
phase(person263_1,post_generals_9).
phase(person183_1,pre_quals_9).
phase(person118_1,post_generals_9).
phase(person19_1,pre_quals_9).
phase(person398_1,pre_quals_9).
phase(person368_1,post_generals_9).
phase(person130_1,post_generals_9).
phase(person299_1,pre_quals_9).
phase(person175_1,post_generals_9).
phase(person255_1,post_generals_9).
phase(person411_1,post_generals_9).
phase(person426_1,post_quals_9).
phase(person99_1,post_quals_9).
phase(person212_1,post_generals_9).
phase(person403_1,post_generals_9).
phase(person402_1,pre_quals_9).
phase(person391_1,post_quals_9).
phase(person253_1,post_generals_9).
phase(person280_1,pre_quals_9).
phase(person417_1,pre_quals_9).
phase(person92_1,post_generals_9).
phase(person419_1,post_generals_9).
phase(person357_1,post_quals_9).
phase(person67_1,post_generals_9).
phase(person222_1,pre_quals_9).
phase(person89_1,post_generals_9).
phase(person277_1,pre_quals_9).
phase(person15_1,post_quals_9).
phase(person80_1,post_generals_9).
phase(person376_1,post_quals_9).
phase(person62_1,pre_quals_9).
phase(person218_1,post_generals_9).
phase(person186_1,pre_quals_9).
phase(person187_1,pre_quals_9).
phase(person343_1,pre_quals_9).
phase(person154_1,post_quals_9).
phase(person204_1,post_generals_9).
phase(person126_1,post_quals_9).
phase(person129_1,post_generals_9).
phase(person374_1,post_generals_9).
phase(person155_1,pre_quals_9).
phase(person100_1,post_quals_9).
phase(person116_1,pre_quals_9).
phase(person309_1,post_quals_9).
phase(person141_1,post_generals_9).
phase(person383_1,pre_quals_9).
phase(person422_1,post_quals_9).
phase(person390_1,pre_quals_9).
phase(person288_1,post_generals_9).
phase(person159_1,post_quals_9).
phase(person172_1,pre_quals_9).
phase(person226_1,post_quals_9).
phase(person242_1,post_generals_9).
phase(person191_1,post_quals_9).
phase(person416_1,pre_quals_9).
phase(person348_1,post_quals_9).
phase(person278_1,pre_quals_9).
phase(person6_1,post_quals_9).
phase(person75_1,post_generals_9).
phase(person303_1,post_quals_9).
phase(person249_1,post_generals_9).
phase(person68_1,post_generals_9).
phase(person205_1,pre_quals_9).
phase(person182_1,post_quals_9).
phase(person100_1,post_quals_9).
phase(person113_1,post_generals_9).
phase(person116_1,pre_quals_9).
phase(person118_1,post_generals_9).
phase(person122_1,post_quals_9).
phase(person126_1,post_quals_9).
phase(person129_1,post_generals_9).
phase(person130_1,post_generals_9).
phase(person13_1,post_generals_9).
phase(person139_1,post_quals_9).
phase(person141_1,post_generals_9).
phase(person14_1,post_generals_9).
phase(person142_1,post_generals_9).
phase(person148_1,post_quals_9).
phase(person149_1,post_quals_9).
phase(person15_1,post_quals_9).
phase(person154_1,post_quals_9).
phase(person155_1,pre_quals_9).
phase(person157_1,post_quals_9).
phase(person159_1,post_quals_9).
phase(person161_1,post_generals_9).
phase(person163_1,post_quals_9).
phase(person172_1,pre_quals_9).
phase(person175_1,post_generals_9).
phase(person176_1,post_quals_9).
phase(person18_1,pre_quals_9).
phase(person182_1,post_quals_9).
phase(person183_1,pre_quals_9).
phase(person186_1,pre_quals_9).
phase(person187_1,pre_quals_9).
phase(person191_1,post_quals_9).
phase(person19_1,pre_quals_9).
phase(person193_1,pre_quals_9).
phase(person200_1,post_quals_9).
phase(person20_1,pre_quals_9).
phase(person204_1,post_generals_9).
phase(person205_1,pre_quals_9).
phase(person206_1,post_generals_9).
phase(person208_1,post_quals_9).
phase(person21_1,post_generals_9).
phase(person212_1,post_generals_9).
phase(person217_1,post_generals_9).
phase(person218_1,post_generals_9).
phase(person222_1,pre_quals_9).
phase(person226_1,post_quals_9).
phase(person228_1,post_quals_9).
phase(person233_1,pre_quals_9).
phase(person239_1,post_quals_9).
phase(person241_1,post_quals_9).
phase(person242_1,post_generals_9).
phase(person249_1,post_generals_9).
phase(person253_1,post_generals_9).
phase(person255_1,post_generals_9).
phase(person257_1,post_generals_9).
phase(person262_1,post_generals_9).
phase(person263_1,post_generals_9).
phase(person265_1,post_generals_9).
phase(person266_1,post_quals_9).
phase(person270_1,pre_quals_9).
phase(person27_1,pre_quals_9).
phase(person272_1,post_quals_9).
phase(person275_1,post_generals_9).
phase(person276_1,pre_quals_9).
phase(person277_1,pre_quals_9).
phase(person278_1,pre_quals_9).
phase(person280_1,pre_quals_9).
phase(person283_1,pre_quals_9).
phase(person284_1,post_quals_9).
phase(person286_1,post_quals_9).
phase(person288_1,post_generals_9).
phase(person299_1,pre_quals_9).
phase(person300_1,post_generals_9).
phase(person303_1,post_quals_9).
phase(person309_1,post_quals_9).
phase(person311_1,post_quals_9).
phase(person312_1,pre_quals_9).
phase(person314_1,post_generals_9).
phase(person318_1,pre_quals_9).
phase(person320_1,post_quals_9).
phase(person333_1,pre_quals_9).
phase(person343_1,pre_quals_9).
phase(person348_1,post_quals_9).
phase(person352_1,post_generals_9).
phase(person353_1,post_quals_9).
phase(person357_1,post_quals_9).
phase(person361_1,post_generals_9).
phase(person362_1,post_quals_9).
phase(person363_1,pre_quals_9).
phase(person368_1,post_generals_9).
phase(person37_1,pre_quals_9).
phase(person374_1,post_generals_9).
phase(person376_1,post_quals_9).
phase(person377_1,pre_quals_9).
phase(person380_1,post_generals_9).
phase(person381_1,post_generals_9).
phase(person382_1,post_quals_9).
phase(person383_1,pre_quals_9).
phase(person384_1,post_quals_9).
phase(person390_1,pre_quals_9).
phase(person391_1,post_quals_9).
phase(person398_1,pre_quals_9).
phase(person402_1,pre_quals_9).
phase(person403_1,post_generals_9).
phase(person404_1,post_generals_9).
phase(person406_1,post_generals_9).
phase(person408_1,pre_quals_9).
phase(person411_1,post_generals_9).
phase(person41_1,post_quals_9).
phase(person412_1,post_quals_9).
phase(person416_1,pre_quals_9).
phase(person417_1,pre_quals_9).
phase(person418_1,post_quals_9).
phase(person419_1,post_generals_9).
phase(person42_1,pre_quals_9).
phase(person422_1,post_quals_9).
phase(person426_1,post_quals_9).
phase(person427_1,post_quals_9).
phase(person429_1,post_quals_9).
phase(person431_1,pre_quals_9).
phase(person432_1,post_quals_9).
phase(person435_1,post_quals_9).
phase(person45_1,post_generals_9).
phase(person51_1,pre_quals_9).
phase(person6_1,post_quals_9).
phase(person62_1,pre_quals_9).
phase(person63_1,post_generals_9).
phase(person67_1,post_generals_9).
phase(person68_1,post_generals_9).
phase(person70_1,pre_quals_9).
phase(person73_1,post_quals_9).
phase(person75_1,post_generals_9).
phase(person80_1,post_generals_9).
phase(person81_1,post_generals_9).
phase(person83_1,post_quals_9).
phase(person89_1,post_generals_9).
phase(person9_1,post_generals_9).
phase(person92_1,post_generals_9).
phase(person94_1,pre_quals_9).
phase(person96_1,post_generals_9).
phase(person99_1,post_quals_9).


position(person34_1,faculty_adjunct_8).
position(person413_1,faculty_8).
position(person338_1,faculty_visiting_8).
position(person184_1,faculty_8).
position(person192_1,faculty_8).
position(person423_1,faculty_affiliate_8).
position(person339_1,faculty_affiliate_8).
position(person304_1,faculty_affiliate_8).
position(person26_1,faculty_adjunct_8).
position(person120_1,faculty_adjunct_8).
position(person65_1,faculty_adjunct_8).
position(person43_1,faculty_affiliate_8).
position(person399_1,faculty_affiliate_8).
position(person152_1,faculty_affiliate_8).
position(person2_1,faculty_emeritus_8).
position(person16_1,faculty_affiliate_8).
position(person10_1,faculty_8).
position(person173_1,faculty_adjunct_8).
position(person220_1,faculty_affiliate_8).
position(person95_1,faculty_adjunct_8).
position(person128_1,faculty_emeritus_8).
position(person196_1,faculty_affiliate_8).
position(person25_1,faculty_adjunct_8).
position(person260_1,faculty_adjunct_8).
position(person372_1,faculty_adjunct_8).
position(person174_1,faculty_adjunct_8).
position(person359_1,faculty_affiliate_8).
position(person194_1,faculty_adjunct_8).
position(person273_1,faculty_adjunct_8).
position(person93_1,faculty_affiliate_8).
position(person409_1,faculty_affiliate_8).
position(person256_1,faculty_affiliate_8).
position(person301_1,faculty_affiliate_8).
position(person66_1,faculty_affiliate_8).
position(person254_1,faculty_affiliate_8).
position(person425_1,faculty_affiliate_8).
position(person69_1,faculty_adjunct_8).
position(person170_1,faculty_emeritus_8).
position(person156_1,faculty_adjunct_8).
position(person106_1,faculty_affiliate_8).
position(person244_1,faculty_affiliate_8).
position(person160_1,faculty_adjunct_8).
position(person135_1,faculty_affiliate_8).
position(person330_1,faculty_emeritus_8).
position(person292_1,faculty_affiliate_8).
position(person293_1,faculty_affiliate_8).
position(person240_1,faculty_8).
position(person211_1,faculty_8).
position(person150_1,faculty_8).
position(person415_1,faculty_8).
position(person79_1,faculty_8).
position(person349_1,faculty_adjunct_8).
position(person7_1,faculty_adjunct_8).
position(person319_1,faculty_8).
position(person185_1,faculty_adjunct_8).
position(person171_1,faculty_8).
position(person168_1,faculty_8).
position(person407_1,faculty_8).
position(person40_1,faculty_8).
position(person342_1,faculty_8).
position(person111_1,faculty_adjunct_8).
position(person115_1,faculty_8).
position(person351_1,faculty_8).
position(person72_1,faculty_8).
position(person393_1,faculty_8).
position(person394_1,faculty_8).
position(person279_1,faculty_8).
position(person335_1,faculty_8).
position(person46_1,faculty_8).
position(person189_1,faculty_adjunct_8).
position(person5_1,faculty_8).
position(person124_1,faculty_8).
position(person375_1,faculty_emeritus_8).
position(person234_1,faculty_8).
position(person101_1,faculty_8).
position(person180_1,faculty_8).
position(person98_1,faculty_8).
position(person107_1,faculty_8).
position(person235_1,faculty_8).
position(person297_1,faculty_emeritus_8).
position(person82_1,faculty_8).
position(person179_1,faculty_8).
position(person213_1,faculty_8).
position(person22_1,faculty_emeritus_8).
position(person373_1,faculty_8).
position(person104_1,faculty_8).
position(person290_1,faculty_8).
position(person378_1,faculty_8).
position(person331_1,faculty_8).
position(person103_1,faculty_affiliate_8).
position(person52_1,faculty_8).
position(person298_1,faculty_8).
position(person165_1,faculty_8).
position(person29_1,faculty_adjunct_8).
position(person201_1,faculty_8).
position(person324_1,faculty_8).
position(person101_1,faculty_8).
position(person103_1,faculty_affiliate_8).
position(person104_1,faculty_8).
position(person107_1,faculty_8).
position(person111_1,faculty_adjunct_8).
position(person115_1,faculty_8).
position(person124_1,faculty_8).
position(person150_1,faculty_8).
position(person165_1,faculty_8).
position(person168_1,faculty_8).
position(person171_1,faculty_8).
position(person179_1,faculty_8).
position(person180_1,faculty_8).
position(person185_1,faculty_adjunct_8).
position(person189_1,faculty_adjunct_8).
position(person201_1,faculty_8).
position(person211_1,faculty_8).
position(person213_1,faculty_8).
position(person22_1,faculty_emeritus_8).
position(person234_1,faculty_8).
position(person235_1,faculty_8).
position(person240_1,faculty_8).
position(person279_1,faculty_8).
position(person290_1,faculty_8).
position(person29_1,faculty_adjunct_8).
position(person292_1,faculty_affiliate_8).
position(person293_1,faculty_affiliate_8).
position(person297_1,faculty_emeritus_8).
position(person298_1,faculty_8).
position(person319_1,faculty_8).
position(person324_1,faculty_8).
position(person331_1,faculty_8).
position(person335_1,faculty_8).
position(person342_1,faculty_8).
position(person349_1,faculty_adjunct_8).
position(person351_1,faculty_8).
position(person373_1,faculty_8).
position(person375_1,faculty_emeritus_8).
position(person378_1,faculty_8).
position(person393_1,faculty_8).
position(person394_1,faculty_8).
position(person40_1,faculty_8).
position(person407_1,faculty_8).
position(person415_1,faculty_8).
position(person46_1,faculty_8).
position(person5_1,faculty_8).
position(person52_1,faculty_8).
position(person7_1,faculty_adjunct_8).
position(person72_1,faculty_8).
position(person79_1,faculty_8).
position(person82_1,faculty_8).
position(person98_1,faculty_8).


introcourse(course73_4).
introcourse(course145_4).
introcourse(course17_4).


courselevel(course73_4,level_100_7).
courselevel(course145_4,level_100_7).
courselevel(course17_4,level_100_7).
courselevel(course102_4,level_300_7).
courselevel(course142_4,level_400_7).
courselevel(course81_4,level_400_7).
courselevel(course105_4,level_400_7).
courselevel(course90_4,level_400_7).
courselevel(course92_4,level_500_7).
courselevel(course140_4,level_500_7).
courselevel(course69_4,level_500_7).
courselevel(course94_4,level_500_7).
courselevel(course59_4,level_500_7).
courselevel(course26_4,level_500_7).
courselevel(course175_4,level_500_7).
courselevel(course58_4,level_500_7).
courselevel(course10_4,level_500_7).
courselevel(course42_4,level_500_7).
courselevel(course25_4,level_100_7).
courselevel(course100_4,level_400_7).
courselevel(course78_4,level_400_7).
courselevel(course106_4,level_400_7).
courselevel(course72_4,level_500_7).
courselevel(course127_4,level_500_7).
courselevel(course31_4,level_500_7).
courselevel(course163_4,level_500_7).
courselevel(course95_4,level_500_7).
courselevel(course171_4,level_500_7).
courselevel(course112_4,level_500_7).
courselevel(course111_4,level_500_7).
courselevel(course70_4,level_500_7).
courselevel(course33_4,level_500_7).
courselevel(course133_4,level_500_7).
courselevel(course130_4,level_500_7).
courselevel(course99_4,level_500_7).
courselevel(course113_4,level_500_7).
courselevel(course43_4,level_500_7).
courselevel(course55_4,level_500_7).
courselevel(course37_4,level_500_7).
courselevel(course60_4,level_500_7).
courselevel(course6_4,level_500_7).
courselevel(course52_4,level_400_7).
courselevel(course44_4,level_400_7).
courselevel(course24_4,level_400_7).
courselevel(course128_4,level_400_7).
courselevel(course57_4,level_400_7).
courselevel(course82_4,level_400_7).
courselevel(course143_4,level_400_7).
courselevel(course50_4,level_500_7).
courselevel(course156_4,level_500_7).
courselevel(course141_4,level_500_7).
courselevel(course12_4,level_500_7).
courselevel(course170_4,level_500_7).
courselevel(course65_4,level_500_7).
courselevel(course123_4,level_500_7).
courselevel(course173_4,level_500_7).
courselevel(course86_4,level_500_7).
courselevel(course131_4,level_500_7).
courselevel(course85_4,level_500_7).
courselevel(course64_4,level_500_7).
courselevel(course168_4,level_500_7).
courselevel(course158_4,level_500_7).
courselevel(course132_4,level_500_7).
courselevel(course76_4,level_500_7).
courselevel(course16_4,level_500_7).
courselevel(course15_4,level_500_7).
courselevel(course39_4,level_500_7).
courselevel(course32_4,level_500_7).
courselevel(course7_4,level_500_7).
courselevel(course134_4,level_500_7).
courselevel(course135_4,level_500_7).
courselevel(course89_4,level_400_7).
courselevel(course157_4,level_400_7).
courselevel(course110_4,level_400_7).
courselevel(course41_4,level_400_7).
courselevel(course148_4,level_400_7).
courselevel(course125_4,level_400_7).
courselevel(course93_4,level_400_7).
courselevel(course164_4,level_400_7).
courselevel(course159_4,level_400_7).
courselevel(course28_4,level_400_7).
courselevel(course154_4,level_400_7).
courselevel(course118_4,level_400_7).
courselevel(course107_4,level_400_7).
courselevel(course0_4,level_500_7).
courselevel(course13_4,level_500_7).
courselevel(course115_4,level_500_7).
courselevel(course101_4,level_500_7).
courselevel(course136_4,level_500_7).
courselevel(course150_4,level_500_7).
courselevel(course109_4,level_500_7).
courselevel(course3_4,level_500_7).
courselevel(course108_4,level_500_7).
courselevel(course56_4,level_500_7).
courselevel(course67_4,level_500_7).
courselevel(course153_4,level_500_7).
courselevel(course1_4,level_500_7).
courselevel(course83_4,level_500_7).
courselevel(course79_4,level_500_7).
courselevel(course114_4,level_500_7).
courselevel(course146_4,level_300_7).
courselevel(course124_4,level_300_7).
courselevel(course51_4,level_400_7).
courselevel(course49_4,level_400_7).
courselevel(course53_4,level_400_7).
courselevel(course46_4,level_500_7).
courselevel(course19_4,level_500_7).
courselevel(course172_4,level_500_7).
courselevel(course71_4,level_500_7).
courselevel(course63_4,level_500_7).
courselevel(course152_4,level_500_7).
courselevel(course54_4,level_500_7).
courselevel(course138_4,level_500_7).
courselevel(course35_4,level_500_7).
courselevel(course5_4,level_300_7).
courselevel(course18_4,level_300_7).
courselevel(course21_4,level_400_7).
courselevel(course151_4,level_400_7).
courselevel(course38_4,level_400_7).
courselevel(course45_4,level_400_7).
courselevel(course20_4,level_400_7).
courselevel(course48_4,level_400_7).
courselevel(course62_4,level_400_7).
courselevel(course80_4,level_400_7).
courselevel(course30_4,level_400_7).
courselevel(course174_4,level_400_7).
courselevel(course75_4,level_400_7).
courselevel(course8_4,level_400_7).
courselevel(course129_4,level_500_7).
courselevel(course116_4,level_500_7).
courselevel(course120_4,level_500_7).
courselevel(course166_4,level_500_7).
courselevel(course74_4,level_500_7).
courselevel(course2_4,level_500_7).
courselevel(course4_4,level_500_7).
courselevel(course34_4,level_500_7).
courselevel(course14_4,level_500_7).
courselevel(course167_4,level_500_7).
courselevel(course139_4,level_500_7).
courselevel(course162_4,level_500_7).
courselevel(course61_4,level_500_7).
courselevel(course23_4,level_500_7).
courselevel(course9_4,level_500_7).
courselevel(course87_4,level_500_7).
courselevel(course88_4,level_500_7).
courselevel(course11_4,level_300_7).
courselevel(course147_4,level_300_7).
courselevel(course165_4,level_300_7).
courselevel(course104_4,level_300_7).
courselevel(course68_4,level_400_7).
courselevel(course161_4,level_400_7).
courselevel(course27_4,level_400_7).
courselevel(course137_4,level_400_7).
courselevel(course126_4,level_400_7).
courselevel(course97_4,level_400_7).
courselevel(course122_4,level_400_7).
courselevel(course40_4,level_500_7).
courselevel(course29_4,level_500_7).
courselevel(course103_4,level_500_7).
courselevel(course77_4,level_500_7).
courselevel(course91_4,level_500_7).
courselevel(course160_4,level_500_7).
courselevel(course155_4,level_500_7).
courselevel(course66_4,level_500_7).
courselevel(course169_4,level_500_7).
courselevel(course119_4,level_500_7).
courselevel(course84_4,level_500_7).
courselevel(course121_4,level_500_7).
courselevel(course98_4,level_500_7).
courselevel(course117_4,level_500_7).
courselevel(course36_4,level_500_7).
courselevel(course144_4,level_500_7).
courselevel(course149_4,level_500_7).
courselevel(course0_4,level_500_7).
courselevel(course101_4,level_500_7).
courselevel(course103_4,level_500_7).
courselevel(course104_4,level_300_7).
courselevel(course107_4,level_400_7).
courselevel(course108_4,level_500_7).
courselevel(course109_4,level_500_7).
courselevel(course110_4,level_400_7).
courselevel(course114_4,level_500_7).
courselevel(course11_4,level_300_7).
courselevel(course115_4,level_500_7).
courselevel(course116_4,level_500_7).
courselevel(course117_4,level_500_7).
courselevel(course118_4,level_400_7).
courselevel(course119_4,level_500_7).
courselevel(course120_4,level_500_7).
courselevel(course121_4,level_500_7).
courselevel(course122_4,level_400_7).
courselevel(course123_4,level_500_7).
courselevel(course124_4,level_300_7).
courselevel(course12_4,level_500_7).
courselevel(course125_4,level_400_7).
courselevel(course126_4,level_400_7).
courselevel(course128_4,level_400_7).
courselevel(course129_4,level_500_7).
courselevel(course131_4,level_500_7).
courselevel(course132_4,level_500_7).
courselevel(course134_4,level_500_7).
courselevel(course13_4,level_500_7).
courselevel(course135_4,level_500_7).
courselevel(course136_4,level_500_7).
courselevel(course137_4,level_400_7).
courselevel(course138_4,level_500_7).
courselevel(course139_4,level_500_7).
courselevel(course141_4,level_500_7).
courselevel(course143_4,level_400_7).
courselevel(course144_4,level_500_7).
courselevel(course14_4,level_500_7).
courselevel(course146_4,level_300_7).
courselevel(course147_4,level_300_7).
courselevel(course148_4,level_400_7).
courselevel(course149_4,level_500_7).
courselevel(course1_4,level_500_7).
courselevel(course150_4,level_500_7).
courselevel(course151_4,level_400_7).
courselevel(course152_4,level_500_7).
courselevel(course153_4,level_500_7).
courselevel(course154_4,level_400_7).
courselevel(course15_4,level_500_7).
courselevel(course155_4,level_500_7).
courselevel(course156_4,level_500_7).
courselevel(course157_4,level_400_7).
courselevel(course158_4,level_500_7).
courselevel(course159_4,level_400_7).
courselevel(course160_4,level_500_7).
courselevel(course161_4,level_400_7).
courselevel(course162_4,level_500_7).
courselevel(course164_4,level_400_7).
courselevel(course16_4,level_500_7).
courselevel(course165_4,level_300_7).
courselevel(course166_4,level_500_7).
courselevel(course167_4,level_500_7).
courselevel(course168_4,level_500_7).
courselevel(course169_4,level_500_7).
courselevel(course170_4,level_500_7).
courselevel(course172_4,level_500_7).
courselevel(course173_4,level_500_7).
courselevel(course174_4,level_400_7).
courselevel(course18_4,level_300_7).
courselevel(course19_4,level_500_7).
courselevel(course20_4,level_400_7).
courselevel(course21_4,level_400_7).
courselevel(course23_4,level_500_7).
courselevel(course24_4,level_400_7).
courselevel(course2_4,level_500_7).
courselevel(course27_4,level_400_7).
courselevel(course28_4,level_400_7).
courselevel(course29_4,level_500_7).
courselevel(course30_4,level_400_7).
courselevel(course32_4,level_500_7).
courselevel(course34_4,level_500_7).
courselevel(course3_4,level_500_7).
courselevel(course35_4,level_500_7).
courselevel(course36_4,level_500_7).
courselevel(course38_4,level_400_7).
courselevel(course39_4,level_500_7).
courselevel(course40_4,level_500_7).
courselevel(course41_4,level_400_7).
courselevel(course44_4,level_400_7).
courselevel(course4_4,level_500_7).
courselevel(course45_4,level_400_7).
courselevel(course46_4,level_500_7).
courselevel(course48_4,level_400_7).
courselevel(course49_4,level_400_7).
courselevel(course50_4,level_500_7).
courselevel(course51_4,level_400_7).
courselevel(course52_4,level_400_7).
courselevel(course53_4,level_400_7).
courselevel(course54_4,level_500_7).
courselevel(course5_4,level_300_7).
courselevel(course56_4,level_500_7).
courselevel(course57_4,level_400_7).
courselevel(course61_4,level_500_7).
courselevel(course62_4,level_400_7).
courselevel(course63_4,level_500_7).
courselevel(course64_4,level_500_7).
courselevel(course65_4,level_500_7).
courselevel(course66_4,level_500_7).
courselevel(course67_4,level_500_7).
courselevel(course68_4,level_400_7).
courselevel(course71_4,level_500_7).
courselevel(course74_4,level_500_7).
courselevel(course7_4,level_500_7).
courselevel(course75_4,level_400_7).
courselevel(course76_4,level_500_7).
courselevel(course77_4,level_500_7).
courselevel(course79_4,level_500_7).
courselevel(course80_4,level_400_7).
courselevel(course82_4,level_400_7).
courselevel(course83_4,level_500_7).
courselevel(course84_4,level_500_7).
courselevel(course8_4,level_400_7).
courselevel(course85_4,level_500_7).
courselevel(course86_4,level_500_7).
courselevel(course87_4,level_500_7).
courselevel(course88_4,level_500_7).
courselevel(course89_4,level_400_7).
courselevel(course91_4,level_500_7).
courselevel(course93_4,level_400_7).
courselevel(course9_4,level_500_7).
courselevel(course97_4,level_400_7).
courselevel(course98_4,level_500_7).


taughtby(course145_4,person413_1,autumn_0001_6).
taughtby(course17_4,person192_1,autumn_0001_6).
taughtby(course69_4,person34_1,autumn_0001_6).
taughtby(course26_4,person413_1,autumn_0001_6).
taughtby(course145_4,person192_1,winter_0001_6).
taughtby(course17_4,person413_1,winter_0001_6).
taughtby(course102_4,person366_1,winter_0001_6).
taughtby(course145_4,person413_1,spring_0001_6).
taughtby(course17_4,person192_1,spring_0001_6).
taughtby(course102_4,person413_1,spring_0001_6).
taughtby(course145_4,person413_1,autumn_0102_6).
taughtby(course17_4,person192_1,autumn_0102_6).
taughtby(course102_4,person413_1,autumn_0102_6).
taughtby(course26_4,person33_1,autumn_0102_6).
taughtby(course73_4,person413_1,winter_0102_6).
taughtby(course145_4,person192_1,winter_0102_6).
taughtby(course145_4,person192_1,spring_0102_6).
taughtby(course17_4,person413_1,spring_0102_6).
taughtby(course145_4,person145_1,autumn_0203_6).
taughtby(course17_4,person413_1,autumn_0203_6).
taughtby(course26_4,person413_1,autumn_0203_6).
taughtby(course145_4,person192_1,winter_0203_6).
taughtby(course145_4,person33_1,winter_0203_6).
taughtby(course17_4,person413_1,winter_0203_6).
taughtby(course145_4,person413_1,spring_0203_6).
taughtby(course17_4,person192_1,spring_0203_6).
taughtby(course102_4,person184_1,spring_0203_6).
taughtby(course73_4,person121_1,autumn_0304_6).
taughtby(course145_4,person413_1,autumn_0304_6).
taughtby(course145_4,person338_1,autumn_0304_6).
taughtby(course17_4,person192_1,autumn_0304_6).
taughtby(course26_4,person192_1,autumn_0304_6).
taughtby(course145_4,person192_1,winter_0304_6).
taughtby(course102_4,person184_1,winter_0304_6).
taughtby(course73_4,person121_1,spring_0304_6).
taughtby(course145_4,person413_1,spring_0304_6).
taughtby(course145_4,person210_1,spring_0304_6).
taughtby(course17_4,person192_1,spring_0304_6).
taughtby(course58_4,person184_1,spring_0304_6).
taughtby(course17_4,person413_1,summer_0203_6).
taughtby(course73_4,person151_1,spring_0203_6).
taughtby(course73_4,person151_1,autumn_0203_6).
taughtby(course81_4,person17_1,winter_0102_6).
taughtby(course99_4,person10_1,autumn_0001_6).
taughtby(course55_4,person10_1,spring_0001_6).
taughtby(course113_4,person152_1,spring_0001_6).
taughtby(course99_4,person10_1,autumn_0102_6).
taughtby(course100_4,person282_1,autumn_0203_6).
taughtby(course99_4,person10_1,winter_0203_6).
taughtby(course44_4,person171_1,autumn_0001_6).
taughtby(course24_4,person240_1,autumn_0001_6).
taughtby(course12_4,person211_1,autumn_0001_6).
taughtby(course123_4,person150_1,autumn_0001_6).
taughtby(course44_4,person293_1,winter_0001_6).
taughtby(course143_4,person211_1,winter_0001_6).
taughtby(course50_4,person171_1,winter_0001_6).
taughtby(course170_4,person79_1,winter_0001_6).
taughtby(course15_4,person292_1,winter_0001_6).
taughtby(course32_4,person319_1,winter_0001_6).
taughtby(course158_4,person240_1,winter_0001_6).
taughtby(course24_4,person150_1,spring_0001_6).
taughtby(course52_4,person168_1,spring_0001_6).
taughtby(course16_4,person240_1,spring_0001_6).
taughtby(course173_4,person171_1,spring_0001_6).
taughtby(course64_4,person79_1,spring_0001_6).
taughtby(course44_4,person171_1,autumn_0102_6).
taughtby(course24_4,person211_1,autumn_0102_6).
taughtby(course156_4,person240_1,autumn_0102_6).
taughtby(course12_4,person79_1,autumn_0102_6).
taughtby(course143_4,person407_1,winter_0102_6).
taughtby(course170_4,person211_1,winter_0102_6).
taughtby(course44_4,person415_1,spring_0102_6).
taughtby(course24_4,person240_1,spring_0102_6).
taughtby(course52_4,person168_1,spring_0102_6).
taughtby(course50_4,person171_1,spring_0102_6).
taughtby(course39_4,person415_1,spring_0102_6).
taughtby(course123_4,person150_1,spring_0102_6).
taughtby(course76_4,person319_1,spring_0102_6).
taughtby(course44_4,person171_1,autumn_0203_6).
taughtby(course24_4,person240_1,autumn_0203_6).
taughtby(course44_4,person415_1,winter_0203_6).
taughtby(course52_4,person168_1,winter_0203_6).
taughtby(course141_4,person150_1,winter_0203_6).
taughtby(course12_4,person211_1,winter_0203_6).
taughtby(course16_4,person79_1,winter_0203_6).
taughtby(course24_4,person211_1,spring_0203_6).
taughtby(course170_4,person407_1,spring_0203_6).
taughtby(course15_4,person292_1,spring_0203_6).
taughtby(course168_4,person240_1,spring_0203_6).
taughtby(course64_4,person79_1,spring_0203_6).
taughtby(course44_4,person171_1,autumn_0304_6).
taughtby(course24_4,person79_1,autumn_0304_6).
taughtby(course156_4,person240_1,autumn_0304_6).
taughtby(course12_4,person407_1,autumn_0304_6).
taughtby(course76_4,person319_1,autumn_0304_6).
taughtby(course44_4,person415_1,winter_0304_6).
taughtby(course57_4,person150_1,winter_0304_6).
taughtby(course52_4,person168_1,winter_0304_6).
taughtby(course170_4,person79_1,winter_0304_6).
taughtby(course24_4,person407_1,spring_0304_6).
taughtby(course50_4,person171_1,spring_0304_6).
taughtby(course158_4,person240_1,spring_0304_6).
taughtby(course7_4,person415_1,spring_0304_6).
taughtby(course128,person150_1,winter_0304_6).
taughtby(course132,person319_1,autumn_0304_6).
taughtby(course134_4,person240_1,spring_0203_6).
taughtby(course82,person407_1,winter_0102_6).
taughtby(course157_4,person342_1,autumn_0001_6).
taughtby(course110_4,person351_1,winter_0001_6).
taughtby(course13_4,person72_1,winter_0001_6).
taughtby(course67_4,person394_1,winter_0001_6).
taughtby(course157_4,person72_1,spring_0001_6).
taughtby(course164_4,person351_1,spring_0001_6).
taughtby(course0_4,person40_1,spring_0001_6).
taughtby(course115_4,person342_1,spring_0001_6).
taughtby(course101_4,person279_1,spring_0001_6).
taughtby(course153_4,person394_1,spring_0001_6).
taughtby(course157_4,person72_1,autumn_0102_6).
taughtby(course110_4,person351_1,autumn_0102_6).
taughtby(course125_4,person351_1,winter_0102_6).
taughtby(course28_4,person394_1,winter_0102_6).
taughtby(course13_4,person342_1,winter_0102_6).
taughtby(course1_4,person40_1,winter_0102_6).
taughtby(course157_4,person394_1,spring_0102_6).
taughtby(course164_4,person351_1,spring_0102_6).
taughtby(course115_4,person72_1,spring_0102_6).
taughtby(course153_4,person342_1,spring_0102_6).
taughtby(course157_4,person72_1,autumn_0203_6).
taughtby(course110_4,person351_1,autumn_0203_6).
taughtby(course108_4,person279_1,autumn_0203_6).
taughtby(course89_4,person394_1,winter_0203_6).
taughtby(course125_4,person351_1,winter_0203_6).
taughtby(course13_4,person342_1,winter_0203_6).
taughtby(course157_4,person72_1,spring_0203_6).
taughtby(course164_4,person351_1,spring_0203_6).
taughtby(course115_4,person342_1,spring_0203_6).
taughtby(course101_4,person394_1,spring_0203_6).
taughtby(course110_4,person351_1,autumn_0304_6).
taughtby(course79_4,person72_1,autumn_0304_6).
taughtby(course89_4,person394_1,winter_0304_6).
taughtby(course125_4,person351_1,winter_0304_6).
taughtby(course13_4,person342_1,winter_0304_6).
taughtby(course157_4,person342_1,spring_0304_6).
taughtby(course164_4,person351_1,spring_0304_6).
taughtby(course101_4,person279_1,spring_0304_6).
taughtby(course136_4,person394_1,spring_0304_6).
taughtby(course41,person351_1,winter_0304_6).
taughtby(course118_4,person351_1,summer_0203_6).
taughtby(course148_4,person351_1,winter_0203_6).
taughtby(course3,person279_1,autumn_0203_6).
taughtby(course150,person351_1,summer_0102_6).
taughtby(course93_4,person351_1,spring_0102_6).
taughtby(course148_4,person351_1,winter_0102_6).
taughtby(course159_4,person394_1,winter_0102_6).
taughtby(course51_4,person5_1,autumn_0001_6).
taughtby(course172_4,person335_1,autumn_0001_6).
taughtby(course46_4,person335_1,winter_0001_6).
taughtby(course71_4,person5_1,winter_0001_6).
taughtby(course124_4,person335_1,spring_0001_6).
taughtby(course51_4,person166_1,autumn_0102_6).
taughtby(course49_4,person263_1,winter_0102_6).
taughtby(course19_4,person5_1,winter_0102_6).
taughtby(course63_4,person335_1,spring_0102_6).
taughtby(course51_4,person18_1,autumn_0203_6).
taughtby(course53_4,person248_1,autumn_0203_6).
taughtby(course172_4,person335_1,autumn_0203_6).
taughtby(course49_4,person248_1,winter_0203_6).
taughtby(course46_4,person335_1,winter_0203_6).
taughtby(course146_4,person335_1,spring_0203_6).
taughtby(course49_4,person248_1,spring_0203_6).
taughtby(course53_4,person189_1,autumn_0304_6).
taughtby(course172_4,person46_1,autumn_0304_6).
taughtby(course138_4,person335_1,autumn_0304_6).
taughtby(course124_4,person9_1,winter_0304_6).
taughtby(course49_4,person64_1,winter_0304_6).
taughtby(course46_4,person335_1,winter_0304_6).
taughtby(course146_4,person335_1,spring_0304_6).
taughtby(course124_4,person46_1,spring_0304_6).
taughtby(course49_4,person189_1,spring_0304_6).
taughtby(course19_4,person370_1,spring_0304_6).
taughtby(course53_4,person248_1,autumn_0304_6).
taughtby(course49_4,person64_1,summer_0203_6).
taughtby(course49_4,person64_1,summer_0102_6).
taughtby(course18_4,person373_1,autumn_0001_6).
taughtby(course151_4,person290_1,autumn_0001_6).
taughtby(course38_4,person204_1,autumn_0001_6).
taughtby(course48_4,person107_1,autumn_0001_6).
taughtby(course21_4,person99_1,autumn_0001_6).
taughtby(course18_4,person326_1,winter_0001_6).
taughtby(course151_4,person235_1,winter_0001_6).
taughtby(course38_4,person104_1,winter_0001_6).
taughtby(course20_4,person180_1,winter_0001_6).
taughtby(course62_4,person101_1,winter_0001_6).
taughtby(course129_4,person373_1,winter_0001_6).
taughtby(course2_4,person180_1,winter_0001_6).
taughtby(course18_4,person107_1,spring_0001_6).
taughtby(course151_4,person267_1,spring_0001_6).
taughtby(course80_4,person180_1,spring_0001_6).
taughtby(course30_4,person290_1,spring_0001_6).
taughtby(course8_4,person297_1,spring_0001_6).
taughtby(course120_4,person235_1,spring_0001_6).
taughtby(course74_4,person124_1,spring_0001_6).
taughtby(course18_4,person213_1,autumn_0102_6).
taughtby(course151_4,person179_1,autumn_0102_6).
taughtby(course38_4,person104_1,autumn_0102_6).
taughtby(course48_4,person375_1,autumn_0102_6).
taughtby(course4_4,person107_1,autumn_0102_6).
taughtby(course18_4,person107_1,winter_0102_6).
taughtby(course151_4,person290_1,winter_0102_6).
taughtby(course38_4,person124_1,winter_0102_6).
taughtby(course20_4,person180_1,winter_0102_6).
taughtby(course62_4,person101_1,winter_0102_6).
taughtby(course129_4,person213_1,winter_0102_6).
taughtby(course166_4,person235_1,winter_0102_6).
taughtby(course2_4,person180_1,winter_0102_6).
taughtby(course34_4,person179_1,winter_0102_6).
taughtby(course18_4,person326_1,spring_0102_6).
taughtby(course151_4,person234_1,spring_0102_6).
taughtby(course80_4,person98_1,spring_0102_6).
taughtby(course30_4,person290_1,spring_0102_6).
taughtby(course75_4,person267_1,spring_0102_6).
taughtby(course8_4,person297_1,spring_0102_6).
taughtby(course116_4,person375_1,spring_0102_6).
taughtby(course120_4,person235_1,spring_0102_6).
taughtby(course74_4,person104_1,spring_0102_6).
taughtby(course14_4,person124_1,spring_0102_6).
taughtby(course162_4,person213_1,spring_0102_6).
taughtby(course18_4,person107_1,autumn_0203_6).
taughtby(course151_4,person267_1,autumn_0203_6).
taughtby(course38_4,person104_1,autumn_0203_6).
taughtby(course48_4,person375_1,autumn_0203_6).
taughtby(course30_4,person290_1,autumn_0203_6).
taughtby(course129_4,person213_1,autumn_0203_6).
taughtby(course74_4,person124_1,autumn_0203_6).
taughtby(course18_4,person290_1,winter_0203_6).
taughtby(course151_4,person179_1,winter_0203_6).
taughtby(course38_4,person104_1,winter_0203_6).
taughtby(course75_4,person267_1,winter_0203_6).
taughtby(course139_4,person235_1,winter_0203_6).
taughtby(course167_4,person98_1,winter_0203_6).
taughtby(course18_4,person375_1,spring_0203_6).
taughtby(course151_4,person234_1,spring_0203_6).
taughtby(course80_4,person98_1,spring_0203_6).
taughtby(course30_4,person290_1,spring_0203_6).
taughtby(course21_4,person22_1,spring_0203_6).
taughtby(course120_4,person235_1,spring_0203_6).
taughtby(course4_4,person107_1,spring_0203_6).
taughtby(course151_4,person179_1,autumn_0304_6).
taughtby(course38_4,person124_1,autumn_0304_6).
taughtby(course48_4,person213_1,autumn_0304_6).
taughtby(course74_4,person104_1,autumn_0304_6).
taughtby(course18_4,person290_1,winter_0304_6).
taughtby(course151_4,person82_1,winter_0304_6).
taughtby(course38_4,person255_1,winter_0304_6).
taughtby(course20_4,person180_1,winter_0304_6).
taughtby(course75_4,person267_1,winter_0304_6).
taughtby(course129_4,person213_1,winter_0304_6).
taughtby(course23_4,person179_1,winter_0304_6).
taughtby(course9_4,person235_1,winter_0304_6).
taughtby(course18_4,person375_1,spring_0304_6).
taughtby(course151_4,person234_1,spring_0304_6).
taughtby(course80_4,person101_1,spring_0304_6).
taughtby(course30_4,person290_1,spring_0304_6).
taughtby(course120_4,person235_1,spring_0304_6).
taughtby(course120_4,person82_1,spring_0304_6).
taughtby(course88,person235_1,winter_0304_6).
taughtby(course61_4,person107_1,spring_0203_6).
taughtby(course174,person267_1,spring_0102_6).
taughtby(course11_4,person57_1,autumn_0001_6).
taughtby(course147_4,person201_1,autumn_0001_6).
taughtby(course77_4,person165_1,autumn_0001_6).
taughtby(course160_4,person331_1,autumn_0001_6).
taughtby(course66_4,person298_1,autumn_0001_6).
taughtby(course11_4,person298_1,winter_0001_6).
taughtby(course147_4,person165_1,winter_0001_6).
taughtby(course165_4,person364_1,winter_0001_6).
taughtby(course161_4,person201_1,winter_0001_6).
taughtby(course68_4,person331_1,winter_0001_6).
taughtby(course29_4,person298_1,winter_0001_6).
taughtby(course11_4,person331_1,spring_0001_6).
taughtby(course147_4,person57_1,spring_0001_6).
taughtby(course27_4,person165_1,spring_0001_6).
taughtby(course40_4,person378_1,spring_0001_6).
taughtby(course165_4,person231_1,autumn_0102_6).
taughtby(course104_4,person364_1,autumn_0102_6).
taughtby(course103_4,person201_1,autumn_0102_6).
taughtby(course77_4,person324_1,autumn_0102_6).
taughtby(course66_4,person165_1,autumn_0102_6).
taughtby(course147_4,person324_1,winter_0102_6).
taughtby(course161_4,person298_1,winter_0102_6).
taughtby(course126_4,person165_1,winter_0102_6).
taughtby(course68_4,person201_1,winter_0102_6).
taughtby(course11_4,person324_1,spring_0102_6).
taughtby(course147_4,person364_1,spring_0102_6).
taughtby(course165_4,person141_1,spring_0102_6).
taughtby(course27_4,person165_1,spring_0102_6).
taughtby(course40_4,person298_1,spring_0102_6).
taughtby(course104_4,person165_1,autumn_0203_6).
taughtby(course68_4,person331_1,autumn_0203_6).
taughtby(course77_4,person52_1,autumn_0203_6).
taughtby(course147_4,person165_1,winter_0203_6).
taughtby(course161_4,person331_1,winter_0203_6).
taughtby(course119_4,person324_1,winter_0203_6).
taughtby(course121_4,person52_1,winter_0203_6).
taughtby(course11_4,person324_1,spring_0203_6).
taughtby(course147_4,person52_1,spring_0203_6).
taughtby(course27_4,person331_1,spring_0203_6).
taughtby(course40_4,person165_1,spring_0203_6).
taughtby(course117_4,person181_1,spring_0203_6).
taughtby(course11_4,person298_1,autumn_0304_6).
taughtby(course147_4,person165_1,autumn_0304_6).
taughtby(course165_4,person75_1,autumn_0304_6).
taughtby(course104_4,person181_1,autumn_0304_6).
taughtby(course103_4,person201_1,autumn_0304_6).
taughtby(course77_4,person52_1,autumn_0304_6).
taughtby(course144_4,person331_1,autumn_0304_6).
taughtby(course147_4,person331_1,winter_0304_6).
taughtby(course165_4,person181_1,winter_0304_6).
taughtby(course161_4,person201_1,winter_0304_6).
taughtby(course126_4,person165_1,winter_0304_6).
taughtby(course68_4,person324_1,winter_0304_6).
taughtby(course40_4,person298_1,winter_0304_6).
taughtby(course11_4,person52_1,spring_0304_6).
taughtby(course27_4,person165_1,spring_0304_6).
taughtby(course97_4,person324_1,spring_0304_6).
taughtby(course91_4,person331_1,spring_0304_6).
taughtby(course137,person165_1,winter_0304_6).
taughtby(course122,person378_1,autumn_0304_6).
taughtby(course149,person331_1,autumn_0304_6).
taughtby(course144_4,person278_1,summer_0203_6).
taughtby(course122,person378_1,spring_0203_6).
taughtby(course36_4,person181_1,spring_0203_6).
taughtby(course84_4,person324_1,winter_0203_6).
taughtby(course137,person165_1,winter_0102_6).
taughtby(course98,person103_1,winter_0102_6).
taughtby(course0_4,person40_1,spring_0001_6).
taughtby(course101_4,person279_1,spring_0001_6).
taughtby(course101_4,person279_1,spring_0304_6).
taughtby(course101_4,person394_1,spring_0203_6).
taughtby(course103_4,person201_1,autumn_0102_6).
taughtby(course103_4,person201_1,autumn_0304_6).
taughtby(course104_4,person165_1,autumn_0203_6).
taughtby(course104_4,person181_1,autumn_0304_6).
taughtby(course104_4,person364_1,autumn_0102_6).
taughtby(course108_4,person279_1,autumn_0203_6).
taughtby(course110_4,person351_1,autumn_0102_6).
taughtby(course110_4,person351_1,autumn_0203_6).
taughtby(course110_4,person351_1,autumn_0304_6).
taughtby(course110_4,person351_1,winter_0001_6).
taughtby(course11_4,person298_1,autumn_0304_6).
taughtby(course11_4,person298_1,winter_0001_6).
taughtby(course11_4,person324_1,spring_0102_6).
taughtby(course11_4,person324_1,spring_0203_6).
taughtby(course11_4,person331_1,spring_0001_6).
taughtby(course11_4,person52_1,spring_0304_6).
taughtby(course11_4,person57_1,autumn_0001_6).
taughtby(course115_4,person342_1,spring_0001_6).
taughtby(course115_4,person342_1,spring_0203_6).
taughtby(course115_4,person72_1,spring_0102_6).
taughtby(course116_4,person375_1,spring_0102_6).
taughtby(course117_4,person181_1,spring_0203_6).
taughtby(course118_4,person351_1,summer_0203_6).
taughtby(course119_4,person324_1,winter_0203_6).
taughtby(course120_4,person235_1,spring_0001_6).
taughtby(course120_4,person235_1,spring_0102_6).
taughtby(course120_4,person235_1,spring_0203_6).
taughtby(course120_4,person235_1,spring_0304_6).
taughtby(course120_4,person82_1,spring_0304_6).
taughtby(course121_4,person52_1,winter_0203_6).
taughtby(course122,person378_1,autumn_0304_6).
taughtby(course122,person378_1,spring_0203_6).
taughtby(course123_4,person150_1,autumn_0001_6).
taughtby(course123_4,person150_1,spring_0102_6).
taughtby(course124_4,person335_1,spring_0001_6).
taughtby(course124_4,person46_1,spring_0304_6).
taughtby(course124_4,person9_1,winter_0304_6).
taughtby(course12_4,person211_1,autumn_0001_6).
taughtby(course12_4,person211_1,winter_0203_6).
taughtby(course12_4,person407_1,autumn_0304_6).
taughtby(course12_4,person79_1,autumn_0102_6).
taughtby(course125_4,person351_1,winter_0102_6).
taughtby(course125_4,person351_1,winter_0203_6).
taughtby(course125_4,person351_1,winter_0304_6).
taughtby(course126_4,person165_1,winter_0102_6).
taughtby(course126_4,person165_1,winter_0304_6).
taughtby(course128,person150_1,winter_0304_6).
taughtby(course129_4,person213_1,autumn_0203_6).
taughtby(course129_4,person213_1,winter_0102_6).
taughtby(course129_4,person213_1,winter_0304_6).
taughtby(course129_4,person373_1,winter_0001_6).
taughtby(course132,person319_1,autumn_0304_6).
taughtby(course134_4,person240_1,spring_0203_6).
taughtby(course13_4,person342_1,winter_0102_6).
taughtby(course13_4,person342_1,winter_0203_6).
taughtby(course13_4,person342_1,winter_0304_6).
taughtby(course13_4,person72_1,winter_0001_6).
taughtby(course136_4,person394_1,spring_0304_6).
taughtby(course137,person165_1,winter_0102_6).
taughtby(course137,person165_1,winter_0304_6).
taughtby(course138_4,person335_1,autumn_0304_6).
taughtby(course139_4,person235_1,winter_0203_6).
taughtby(course141_4,person150_1,winter_0203_6).
taughtby(course143_4,person211_1,winter_0001_6).
taughtby(course143_4,person407_1,winter_0102_6).
taughtby(course144_4,person278_1,summer_0203_6).
taughtby(course144_4,person331_1,autumn_0304_6).
taughtby(course14_4,person124_1,spring_0102_6).
taughtby(course146_4,person335_1,spring_0203_6).
taughtby(course146_4,person335_1,spring_0304_6).
taughtby(course147_4,person165_1,autumn_0304_6).
taughtby(course147_4,person165_1,winter_0001_6).
taughtby(course147_4,person165_1,winter_0203_6).
taughtby(course147_4,person201_1,autumn_0001_6).
taughtby(course147_4,person324_1,winter_0102_6).
taughtby(course147_4,person331_1,winter_0304_6).
taughtby(course147_4,person364_1,spring_0102_6).
taughtby(course147_4,person52_1,spring_0203_6).
taughtby(course147_4,person57_1,spring_0001_6).
taughtby(course148_4,person351_1,winter_0102_6).
taughtby(course148_4,person351_1,winter_0203_6).
taughtby(course149,person331_1,autumn_0304_6).
taughtby(course1_4,person40_1,winter_0102_6).
taughtby(course150,person351_1,summer_0102_6).
taughtby(course151_4,person179_1,autumn_0102_6).
taughtby(course151_4,person179_1,autumn_0304_6).
taughtby(course151_4,person179_1,winter_0203_6).
taughtby(course151_4,person234_1,spring_0102_6).
taughtby(course151_4,person234_1,spring_0203_6).
taughtby(course151_4,person234_1,spring_0304_6).
taughtby(course151_4,person235_1,winter_0001_6).
taughtby(course151_4,person267_1,autumn_0203_6).
taughtby(course151_4,person267_1,spring_0001_6).
taughtby(course151_4,person290_1,autumn_0001_6).
taughtby(course151_4,person290_1,winter_0102_6).
taughtby(course151_4,person82_1,winter_0304_6).
taughtby(course153_4,person342_1,spring_0102_6).
taughtby(course153_4,person394_1,spring_0001_6).
taughtby(course15_4,person292_1,spring_0203_6).
taughtby(course15_4,person292_1,winter_0001_6).
taughtby(course156_4,person240_1,autumn_0102_6).
taughtby(course156_4,person240_1,autumn_0304_6).
taughtby(course157_4,person342_1,autumn_0001_6).
taughtby(course157_4,person342_1,spring_0304_6).
taughtby(course157_4,person394_1,spring_0102_6).
taughtby(course157_4,person72_1,autumn_0102_6).
taughtby(course157_4,person72_1,autumn_0203_6).
taughtby(course157_4,person72_1,spring_0001_6).
taughtby(course157_4,person72_1,spring_0203_6).
taughtby(course158_4,person240_1,spring_0304_6).
taughtby(course158_4,person240_1,winter_0001_6).
taughtby(course159_4,person394_1,winter_0102_6).
taughtby(course160_4,person331_1,autumn_0001_6).
taughtby(course161_4,person201_1,winter_0001_6).
taughtby(course161_4,person201_1,winter_0304_6).
taughtby(course161_4,person298_1,winter_0102_6).
taughtby(course161_4,person331_1,winter_0203_6).
taughtby(course162_4,person213_1,spring_0102_6).
taughtby(course164_4,person351_1,spring_0001_6).
taughtby(course164_4,person351_1,spring_0102_6).
taughtby(course164_4,person351_1,spring_0203_6).
taughtby(course164_4,person351_1,spring_0304_6).
taughtby(course16_4,person240_1,spring_0001_6).
taughtby(course16_4,person79_1,winter_0203_6).
taughtby(course165_4,person141_1,spring_0102_6).
taughtby(course165_4,person181_1,winter_0304_6).
taughtby(course165_4,person231_1,autumn_0102_6).
taughtby(course165_4,person364_1,winter_0001_6).
taughtby(course165_4,person75_1,autumn_0304_6).
taughtby(course166_4,person235_1,winter_0102_6).
taughtby(course167_4,person98_1,winter_0203_6).
taughtby(course168_4,person240_1,spring_0203_6).
taughtby(course170_4,person211_1,winter_0102_6).
taughtby(course170_4,person407_1,spring_0203_6).
taughtby(course170_4,person79_1,winter_0001_6).
taughtby(course170_4,person79_1,winter_0304_6).
taughtby(course172_4,person335_1,autumn_0001_6).
taughtby(course172_4,person335_1,autumn_0203_6).
taughtby(course172_4,person46_1,autumn_0304_6).
taughtby(course173_4,person171_1,spring_0001_6).
taughtby(course174,person267_1,spring_0102_6).
taughtby(course18_4,person107_1,autumn_0203_6).
taughtby(course18_4,person107_1,spring_0001_6).
taughtby(course18_4,person107_1,winter_0102_6).
taughtby(course18_4,person213_1,autumn_0102_6).
taughtby(course18_4,person290_1,winter_0203_6).
taughtby(course18_4,person290_1,winter_0304_6).
taughtby(course18_4,person326_1,spring_0102_6).
taughtby(course18_4,person326_1,winter_0001_6).
taughtby(course18_4,person373_1,autumn_0001_6).
taughtby(course18_4,person375_1,spring_0203_6).
taughtby(course18_4,person375_1,spring_0304_6).
taughtby(course19_4,person370_1,spring_0304_6).
taughtby(course19_4,person5_1,winter_0102_6).
taughtby(course20_4,person180_1,winter_0001_6).
taughtby(course20_4,person180_1,winter_0102_6).
taughtby(course20_4,person180_1,winter_0304_6).
taughtby(course21_4,person22_1,spring_0203_6).
taughtby(course21_4,person99_1,autumn_0001_6).
taughtby(course23_4,person179_1,winter_0304_6).
taughtby(course24_4,person150_1,spring_0001_6).
taughtby(course24_4,person211_1,autumn_0102_6).
taughtby(course24_4,person211_1,spring_0203_6).
taughtby(course24_4,person240_1,autumn_0001_6).
taughtby(course24_4,person240_1,autumn_0203_6).
taughtby(course24_4,person240_1,spring_0102_6).
taughtby(course24_4,person407_1,spring_0304_6).
taughtby(course24_4,person79_1,autumn_0304_6).
taughtby(course2_4,person180_1,winter_0001_6).
taughtby(course2_4,person180_1,winter_0102_6).
taughtby(course27_4,person165_1,spring_0001_6).
taughtby(course27_4,person165_1,spring_0102_6).
taughtby(course27_4,person165_1,spring_0304_6).
taughtby(course27_4,person331_1,spring_0203_6).
taughtby(course28_4,person394_1,winter_0102_6).
taughtby(course29_4,person298_1,winter_0001_6).
taughtby(course30_4,person290_1,autumn_0203_6).
taughtby(course30_4,person290_1,spring_0001_6).
taughtby(course30_4,person290_1,spring_0102_6).
taughtby(course30_4,person290_1,spring_0203_6).
taughtby(course30_4,person290_1,spring_0304_6).
taughtby(course32_4,person319_1,winter_0001_6).
taughtby(course34_4,person179_1,winter_0102_6).
taughtby(course36_4,person181_1,spring_0203_6).
taughtby(course38_4,person104_1,autumn_0102_6).
taughtby(course38_4,person104_1,autumn_0203_6).
taughtby(course38_4,person104_1,winter_0001_6).
taughtby(course38_4,person104_1,winter_0203_6).
taughtby(course38_4,person124_1,autumn_0304_6).
taughtby(course38_4,person124_1,winter_0102_6).
taughtby(course38_4,person204_1,autumn_0001_6).
taughtby(course38_4,person255_1,winter_0304_6).
taughtby(course39_4,person415_1,spring_0102_6).
taughtby(course3,person279_1,autumn_0203_6).
taughtby(course40_4,person165_1,spring_0203_6).
taughtby(course40_4,person298_1,spring_0102_6).
taughtby(course40_4,person298_1,winter_0304_6).
taughtby(course40_4,person378_1,spring_0001_6).
taughtby(course41,person351_1,winter_0304_6).
taughtby(course44_4,person171_1,autumn_0001_6).
taughtby(course44_4,person171_1,autumn_0102_6).
taughtby(course44_4,person171_1,autumn_0203_6).
taughtby(course44_4,person171_1,autumn_0304_6).
taughtby(course44_4,person293_1,winter_0001_6).
taughtby(course44_4,person415_1,spring_0102_6).
taughtby(course44_4,person415_1,winter_0203_6).
taughtby(course44_4,person415_1,winter_0304_6).
taughtby(course4_4,person107_1,autumn_0102_6).
taughtby(course4_4,person107_1,spring_0203_6).
taughtby(course46_4,person335_1,winter_0001_6).
taughtby(course46_4,person335_1,winter_0203_6).
taughtby(course46_4,person335_1,winter_0304_6).
taughtby(course48_4,person107_1,autumn_0001_6).
taughtby(course48_4,person213_1,autumn_0304_6).
taughtby(course48_4,person375_1,autumn_0102_6).
taughtby(course48_4,person375_1,autumn_0203_6).
taughtby(course49_4,person189_1,spring_0304_6).
taughtby(course49_4,person248_1,spring_0203_6).
taughtby(course49_4,person248_1,winter_0203_6).
taughtby(course49_4,person263_1,winter_0102_6).
taughtby(course49_4,person64_1,summer_0102_6).
taughtby(course49_4,person64_1,summer_0203_6).
taughtby(course49_4,person64_1,winter_0304_6).
taughtby(course50_4,person171_1,spring_0102_6).
taughtby(course50_4,person171_1,spring_0304_6).
taughtby(course50_4,person171_1,winter_0001_6).
taughtby(course51_4,person166_1,autumn_0102_6).
taughtby(course51_4,person18_1,autumn_0203_6).
taughtby(course51_4,person5_1,autumn_0001_6).
taughtby(course52_4,person168_1,spring_0001_6).
taughtby(course52_4,person168_1,spring_0102_6).
taughtby(course52_4,person168_1,winter_0203_6).
taughtby(course52_4,person168_1,winter_0304_6).
taughtby(course53_4,person189_1,autumn_0304_6).
taughtby(course53_4,person248_1,autumn_0203_6).
taughtby(course53_4,person248_1,autumn_0304_6).
taughtby(course57_4,person150_1,winter_0304_6).
taughtby(course61_4,person107_1,spring_0203_6).
taughtby(course62_4,person101_1,winter_0001_6).
taughtby(course62_4,person101_1,winter_0102_6).
taughtby(course63_4,person335_1,spring_0102_6).
taughtby(course64_4,person79_1,spring_0001_6).
taughtby(course64_4,person79_1,spring_0203_6).
taughtby(course66_4,person165_1,autumn_0102_6).
taughtby(course66_4,person298_1,autumn_0001_6).
taughtby(course67_4,person394_1,winter_0001_6).
taughtby(course68_4,person201_1,winter_0102_6).
taughtby(course68_4,person324_1,winter_0304_6).
taughtby(course68_4,person331_1,autumn_0203_6).
taughtby(course68_4,person331_1,winter_0001_6).
taughtby(course71_4,person5_1,winter_0001_6).
taughtby(course74_4,person104_1,autumn_0304_6).
taughtby(course74_4,person104_1,spring_0102_6).
taughtby(course74_4,person124_1,autumn_0203_6).
taughtby(course74_4,person124_1,spring_0001_6).
taughtby(course7_4,person415_1,spring_0304_6).
taughtby(course75_4,person267_1,spring_0102_6).
taughtby(course75_4,person267_1,winter_0203_6).
taughtby(course75_4,person267_1,winter_0304_6).
taughtby(course76_4,person319_1,autumn_0304_6).
taughtby(course76_4,person319_1,spring_0102_6).
taughtby(course77_4,person165_1,autumn_0001_6).
taughtby(course77_4,person324_1,autumn_0102_6).
taughtby(course77_4,person52_1,autumn_0203_6).
taughtby(course77_4,person52_1,autumn_0304_6).
taughtby(course79_4,person72_1,autumn_0304_6).
taughtby(course80_4,person101_1,spring_0304_6).
taughtby(course80_4,person180_1,spring_0001_6).
taughtby(course80_4,person98_1,spring_0102_6).
taughtby(course80_4,person98_1,spring_0203_6).
taughtby(course82,person407_1,winter_0102_6).
taughtby(course84_4,person324_1,winter_0203_6).
taughtby(course8_4,person297_1,spring_0001_6).
taughtby(course8_4,person297_1,spring_0102_6).
taughtby(course88,person235_1,winter_0304_6).
taughtby(course89_4,person394_1,winter_0203_6).
taughtby(course89_4,person394_1,winter_0304_6).
taughtby(course91_4,person331_1,spring_0304_6).
taughtby(course93_4,person351_1,spring_0102_6).
taughtby(course9_4,person235_1,winter_0304_6).
taughtby(course97_4,person324_1,spring_0304_6).
taughtby(course98,person103_1,winter_0102_6).


load_bg(0) :-
   [graphics,language,systems,theory].
load_bg(1) :-
   [ai,language,systems,theory].
load_bg(2) :-
   [ai,graphics,systems,theory].
load_bg(3) :-
   [ai,graphics,language,theory].
load_bg(4) :-
   [ai,graphics,language,systems].


advisedby(person215_1,person26_1).
advisedby(person265_1,person168_1).
advisedby(person381_1,person168_1).
advisedby(person176_1,person407_1).
advisedby(person272_1,person7_1).
advisedby(person37_1,person79_1).
advisedby(person353_1,person319_1).
advisedby(person432_1,person240_1).
advisedby(person239_1,person171_1).
advisedby(person13_1,person240_1).
advisedby(person286_1,person171_1).
advisedby(person418_1,person171_1).
advisedby(person14_1,person150_1).
advisedby(person320_1,person150_1).
advisedby(person352_1,person415_1).
advisedby(person352_1,person292_1).
advisedby(person276_1,person407_1).
advisedby(person45_1,person415_1).
advisedby(person45_1,person211_1).
advisedby(person148_1,person171_1).
advisedby(person314_1,person415_1).
advisedby(person275_1,person79_1).
advisedby(person21_1,person211_1).
advisedby(person262_1,person415_1).
advisedby(person262_1,person292_1).
advisedby(person257_1,person240_1).
advisedby(person380_1,person79_1).
advisedby(person384_1,person240_1).
advisedby(person384_1,person407_1).
advisedby(person266_1,person7_1).
advisedby(person312_1,person319_1).
advisedby(person208_1,person319_1).
advisedby(person63_1,person415_1).
advisedby(person318_1,person185_1).
advisedby(person318_1,person319_1).
advisedby(person83_1,person349_1).
advisedby(person217_1,person342_1).
advisedby(person217_1,person72_1).
advisedby(person206_1,person342_1).
advisedby(person206_1,person72_1).
advisedby(person81_1,person342_1).
advisedby(person81_1,person393_1).
advisedby(person122_1,person72_1).
advisedby(person228_1,person342_1).
advisedby(person228_1,person393_1).
advisedby(person228_1,person394_1).
advisedby(person41_1,person394_1).
advisedby(person163_1,person393_1).
advisedby(person435_1,person279_1).
advisedby(person404_1,person72_1).
advisedby(person142_1,person342_1).
advisedby(person300_1,person342_1).
advisedby(person200_1,person72_1).
advisedby(person157_1,person72_1).
advisedby(person113_1,person394_1).
advisedby(person113_1,person342_1).
advisedby(person18_1,person335_1).
advisedby(person9_1,person335_1).
advisedby(person429_1,person335_1).
advisedby(person362_1,person5_1).
advisedby(person362_1,person335_1).
advisedby(person96_1,person5_1).
advisedby(person263_1,person5_1).
advisedby(person183_1,person5_1).
advisedby(person118_1,person5_1).
advisedby(person368_1,person180_1).
advisedby(person130_1,person124_1).
advisedby(person411_1,person373_1).
advisedby(person426_1,person179_1).
advisedby(person426_1,person235_1).
advisedby(person99_1,person104_1).
advisedby(person212_1,person180_1).
advisedby(person403_1,person234_1).
advisedby(person391_1,person235_1).
advisedby(person253_1,person101_1).
advisedby(person280_1,person101_1).
advisedby(person92_1,person101_1).
advisedby(person419_1,person101_1).
advisedby(person357_1,person124_1).
advisedby(person67_1,person375_1).
advisedby(person67_1,person98_1).
advisedby(person89_1,person104_1).
advisedby(person80_1,person234_1).
advisedby(person376_1,person179_1).
advisedby(person376_1,person107_1).
advisedby(person62_1,person104_1).
advisedby(person218_1,person101_1).
advisedby(person154_1,person124_1).
advisedby(person154_1,person235_1).
advisedby(person204_1,person104_1).
advisedby(person126_1,person213_1).
advisedby(person129_1,person179_1).
advisedby(person129_1,person234_1).
advisedby(person374_1,person179_1).
advisedby(person155_1,person101_1).
advisedby(person100_1,person104_1).
advisedby(person100_1,person235_1).
advisedby(person116_1,person124_1).
advisedby(person309_1,person378_1).
advisedby(person141_1,person331_1).
advisedby(person288_1,person165_1).
advisedby(person159_1,person201_1).
advisedby(person159_1,person57_1).
advisedby(person226_1,person324_1).
advisedby(person242_1,person29_1).
advisedby(person242_1,person165_1).
advisedby(person348_1,person324_1).
advisedby(person6_1,person29_1).
advisedby(person6_1,person165_1).
advisedby(person75_1,person331_1).
advisedby(person303_1,person165_1).
advisedby(person303_1,person29_1).
advisedby(person249_1,person331_1).
advisedby(person68_1,person201_1).
advisedby(person100_1,person104_1).
advisedby(person100_1,person235_1).
advisedby(person113_1,person342_1).
advisedby(person113_1,person394_1).
advisedby(person116_1,person124_1).
advisedby(person118_1,person5_1).
advisedby(person122_1,person72_1).
advisedby(person126_1,person213_1).
advisedby(person129_1,person179_1).
advisedby(person129_1,person234_1).
advisedby(person130_1,person124_1).
advisedby(person13_1,person240_1).
advisedby(person141_1,person331_1).
advisedby(person14_1,person150_1).
advisedby(person142_1,person342_1).
advisedby(person148_1,person171_1).
advisedby(person154_1,person124_1).
advisedby(person154_1,person235_1).
advisedby(person155_1,person101_1).
advisedby(person157_1,person72_1).
advisedby(person159_1,person201_1).
advisedby(person159_1,person57_1).
advisedby(person163_1,person393_1).
advisedby(person176_1,person407_1).
advisedby(person18_1,person335_1).
advisedby(person183_1,person5_1).
advisedby(person200_1,person72_1).
advisedby(person204_1,person104_1).
advisedby(person206_1,person342_1).
advisedby(person206_1,person72_1).
advisedby(person208_1,person319_1).
advisedby(person21_1,person211_1).
advisedby(person212_1,person180_1).
advisedby(person217_1,person342_1).
advisedby(person217_1,person72_1).
advisedby(person218_1,person101_1).
advisedby(person226_1,person324_1).
advisedby(person228_1,person342_1).
advisedby(person228_1,person393_1).
advisedby(person228_1,person394_1).
advisedby(person239_1,person171_1).
advisedby(person242_1,person165_1).
advisedby(person242_1,person29_1).
advisedby(person249_1,person331_1).
advisedby(person253_1,person101_1).
advisedby(person257_1,person240_1).
advisedby(person262_1,person292_1).
advisedby(person262_1,person415_1).
advisedby(person263_1,person5_1).
advisedby(person265_1,person168_1).
advisedby(person266_1,person7_1).
advisedby(person272_1,person7_1).
advisedby(person275_1,person79_1).
advisedby(person276_1,person407_1).
advisedby(person280_1,person101_1).
advisedby(person286_1,person171_1).
advisedby(person288_1,person165_1).
advisedby(person300_1,person342_1).
advisedby(person303_1,person165_1).
advisedby(person303_1,person29_1).
advisedby(person309_1,person378_1).
advisedby(person312_1,person319_1).
advisedby(person314_1,person415_1).
advisedby(person318_1,person185_1).
advisedby(person318_1,person319_1).
advisedby(person320_1,person150_1).
advisedby(person348_1,person324_1).
advisedby(person352_1,person292_1).
advisedby(person352_1,person415_1).
advisedby(person353_1,person319_1).
advisedby(person357_1,person124_1).
advisedby(person362_1,person335_1).
advisedby(person362_1,person5_1).
advisedby(person368_1,person180_1).
advisedby(person37_1,person79_1).
advisedby(person374_1,person179_1).
advisedby(person376_1,person107_1).
advisedby(person376_1,person179_1).
advisedby(person380_1,person79_1).
advisedby(person381_1,person168_1).
advisedby(person384_1,person240_1).
advisedby(person384_1,person407_1).
advisedby(person391_1,person235_1).
advisedby(person403_1,person234_1).
advisedby(person404_1,person72_1).
advisedby(person411_1,person373_1).
advisedby(person41_1,person394_1).
advisedby(person418_1,person171_1).
advisedby(person419_1,person101_1).
advisedby(person426_1,person179_1).
advisedby(person426_1,person235_1).
advisedby(person429_1,person335_1).
advisedby(person432_1,person240_1).
advisedby(person435_1,person279_1).
advisedby(person45_1,person211_1).
advisedby(person45_1,person415_1).
advisedby(person6_1,person165_1).
advisedby(person6_1,person29_1).
advisedby(person62_1,person104_1).
advisedby(person63_1,person415_1).
advisedby(person67_1,person375_1).
advisedby(person67_1,person98_1).
advisedby(person68_1,person201_1).
advisedby(person75_1,person331_1).
advisedby(person80_1,person234_1).
advisedby(person81_1,person342_1).
advisedby(person81_1,person393_1).
advisedby(person83_1,person349_1).
advisedby(person89_1,person104_1).
advisedby(person9_1,person335_1).
advisedby(person92_1,person101_1).
advisedby(person96_1,person5_1).
advisedby(person99_1,person104_1).


load_bg :-
   [misc],
   [unknown],
   [ai,graphics,language,systems,theory].


true(_,_,_).


write_profile_data([]).
write_profile_data([B-A|C]) :-
   prolog:format('~w: ~w~n',user:[A,B]),
   write_profile_data(C).


list_profile :-
   prolog:findall(B-A,prolog:profile_data(user:A,calls,B),C),
   sort(C,D),
   write_profile_data(D).


show_file(A) :-
   aleph_open(A,read,B),
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     writeq(C),
     write('.'),
     nl,
     fail
   ).


restorehyp :-
   retract(user:'$aleph_local'(pclause,pclause(A,B))),
   assertz(user:'$aleph_search'(pclause,pclause(A,B))),
   !.
restorehyp :-
   retract(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   !.
restorehyp.


setting_definition(A,B,C,D,E,G) :-
   set_def(A,B,C,D,E,F),
   ( F=noshow
   ->
     G=dontshow
   ;
     F=G
   ).


number((+inf),A) :-
   A is inf,
   !.
number((-inf),A) :-
   A is(-inf),
   !.
number(B,A) :-
   A is B,
   !.


check_legal(int(A)-int(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal(float(A)-float(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal([B|C],A) :-
   !,
   aleph_member1(A,[B|C]).
check_legal(read(filename),A) :-
   A\= ?,
   !,
   exists(A).
check_legal(_,_).


set_def(abduce,search-search_strategy,'Abduce Atoms and Generalise',[true,false],false,show).
set_def(best,search-search_space,'Label to beat',prolog_term,'',show).
set_def(best_clause_hook,miscellaneous,'Call before adding hypotesis: has 4 extra arguments, the Label, Clause, Positive Cover, and Negative Cover',prolog_term,true,noshow).
set_def(cache_clauselength,miscellaneous,'Maximum Length of Cached Clauses',int(1)-int((+inf)),3,show).
set_def(caching,miscellaneous,'Cache Clauses in Search',[true,false],false,show).
set_def(check_redundant,miscellaneous,'Check for Redundant Literals',[true,false],false,show).
set_def(check_good,miscellaneous,'Check good clauses for duplicates',[true,false],false,show).
set_def(check_useless,saturation,'Remove I/O unconnected Literals',[true,false],false,show).
set_def(classes,tree,'Class labels',prolog_term,'',show).
set_def(clause_rewrite_hook,miscellaneous,'Call User defined predicate before actually calling a clause, as call(P,Inp,Out)',prolog_term,true,noshow).
set_def(clauselength_distribution,search-search_strategy,'Probablity Distribution over Clauses',prolog_term,'',show).
set_def(clauselength,search-search_space,'Maximum Clause Length',int(1)-int((+inf)),4,show).
set_def(clauses,search-search_space,'Maximum Clauses per Theory',int(1)-int((+inf)),'',show).
set_def(condition,evaluation,'Condition SLP',[true,false],false,show).
set_def(confidence,tree,'Confidence for Rule Pruning',float(0)-float(1),0.95,show).
set_def(construct_bottom,saturation,'Build a bottom clause',[saturation,reduction,false],saturation,show).
set_def(depth,miscellaneous,'Theorem Proving Depth',int(1)-int((+inf)),10,show).
set_def(evalfn,evaluation,'Evaluation Function',[coverage,compression,posonly,pbayes,accuracy,laplace,auto_m,mestimate,mse,entropy,gini,sd,wracc,user],coverage,show).
set_def(explore,search-search_space,'Exhaustive Search of all alternatives',[true,false],false,show).
set_def(good,miscellaneous,'Store good clauses',[true,false],false,show).
set_def(goodfile,miscellaneous,'File of good clauses',write(filename),'',show).
set_def(gsamplesize,evaluation,'Size of random sample',int(1)-int((+inf)),100,show).
set_def(i,saturation,'bound layers of new variables',int(1)-int((+inf)),2,show).
set_def(interactive,search-search_strategy,'Interactive theory construction',[true,false],false,show).
set_def(language,search-search_space,'Maximum occurrence of any predicate symbol in a clause',int(1)-int((+inf)),(+inf),show).
set_def(lazy_negs,evaluation,'Lazy theorem proving on negative examples',[true,false],false,show).
set_def(lazy_on_contradiction,evaluation,'Lazy theorem proving on contradictions',[true,false],false,show).
set_def(lazy_on_cost,evaluation,'Lazy theorem proving on cost',[true,false],false,show).
set_def(lookahead,search-search_space,'Lookahead for automatic refinement operator',int(1)-int((+inf)),1,show).
set_def(m,evaluation,'M-estimate',float(0)-float((+inf)),'',show).
set_def(max_abducibles,search-search_space,'Maximum number of atoms in an abductive explanation',int(1)-int((+inf)),2,show).
set_def(match_bottom_hook,miscellaneous,'Call User defined predicate when generating a new refinement call(P,Rule)',prolog_term,true,noshow).
set_def(max_features,miscellaneous,'Maximum number of features to be constructed',int(1)-int((+inf)),(+inf),show).
set_def(minacc,evaluation,'Minimum clause accuracy',float(0)-float(1),0,show).
set_def(mingain,tree,'Minimum expected gain',float(1e-06)-float((+inf)),0.05,show).
set_def(minpos,evaluation,'Minimum pos covered by a clause',int(0)-int((+inf)),1,show).
set_def(minposfrac,evaluation,'Minimum proportion of positives covered by a clause',float(0)-float(1),0,show).
set_def(minscore,evaluation,'Minimum utility of an acceptable clause',float((-inf))-float((+inf)),(-inf),show).
set_def(moves,search-search_strategy,'Number of moves in a randomised local search',int(0)-int((+inf)),5,show).
set_def(newbest_hook,miscellaneous,'Call after finding a new best clause: has three extra arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(good_clause_hook,miscellaneous,'Call after finding a good clause: has two arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(newvars,search-search_space,'Existential variables in a clause',int(0)-int((+inf)),(+inf),show).
set_def(nodes,search-search_space,'Nodes to be explored in the search',int(1)-int((+inf)),5000,show).
set_def(noise,evaluation,'Maximum negatives covered',int(0)-int((+inf)),0,show).
set_def(nreduce_bottom,saturation,'Negative examples based reduction of bottom clause',[true,false],false,show).
set_def(openlist,search-search_space,'Beam width in a greedy search',int(1)-int((+inf)),(+inf),show).
set_def(optimise_clauses,miscellaneous,'Perform query Optimisation',[true,false],false,show).
set_def(permute_bottom,saturation,'Randomly permute order of negative literals in the bottom clause',[true,false],false,show).
set_def(portray_examples,miscellaneous,'Pretty print examples',[true,false],false,show).
set_def(portray_hypothesis,miscellaneous,'Pretty print hypotheses',[true,false],false,show).
set_def(portray_literals,miscellaneous,'Pretty print literals',[true,false],false,show).
set_def(portray_search,miscellaneous,'Pretty print search',[true,false],false,show).
set_def(prefix_trees,miscellaneous,'Prefix Tree Execution',[true,false],false,show).
set_def(print,miscellaneous,'Literals printed per line',int(1)-int((+inf)),4,show).
set_def(prior,miscellaneous,'Prior class distribution',prolog_term,'',show-ro).
set_def(proof_strategy,miscellaneous,'Current proof strategy',[restricted_sld,sld,user],restricted_sld,show).
set_def(prooftime,miscellaneous,'Theorem proving time',float(0)-float((+inf)),(+inf),show).
set_def(prune_tree,tree,'Tree pruning',[true,false],false,show).
set_def(recordfile,miscellaneous,'Log filename',write(filename),'',show).
set_def(record,miscellaneous,'Log to file',[true,false],false,show).
set_def(record_testclause_hook,miscellaneous,'Called just before you try to make the systemm use pclause database from Aleph search, has one argumeent F/A',prolog_term,true,noshow).
set_def(reduce_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_prelims_hook,miscellaneous,'User hook to call before starting a reduce',prolog_term,true,noshow).
set_def(refineop,search-search_strategy,'Current refinement operator',[user,auto,scs,false],'',show-ro).
set_def(refine,search-search_strategy,'Nature of customised refinement operator',[user,auto,scs,false],false,show).
set_def(resample,search-search_strategy,'Number of times to resample an example',int(1)-int((+inf)),1,show).
set_def(rls_type,search-search_strategy,'Type of randomised local search',[gsat,wsat,rrr,anneal],gsat,show).
set_def(rulefile,miscellaneous,'Rule file',write(filename),'',show).
set_def(samplesize,search-search_strategy,'Size of sample',int(0)-int((+inf)),0,show).
set_def(sat_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(sat_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(scs_percentile,search-search_strategy,'Percentile of good clauses for SCS search',float(0)-float(100),'',show).
set_def(scs_prob,search-search_strategy,'Probability of getting a good clause in SCS search',float(0)-float(1),'',show).
set_def(scs_sample,search-search_strategy,'Sample size in SCS search',int(1)-int((+inf)),'',show).
set_def(search,search-search_strategy,'Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar,false],bf,show).
set_def(searchstrat,search-search_strategy,'Current Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar],bf,show-ro).
set_def(recompute_cover,search-strategy,'do not store coverage with nodes',[true,false],false,show).
set_def(searchtime,search-search_strategy,'Search time in seconds',float(0)-float((+inf)),(+inf),show).
set_def(skolemvars,miscellaneous,'Counter for non-ground examples',int(1)-int((+inf)),10000,show).
set_def(skolem_examples,miscellaneous,'Skolemize Examples: usually true, but disabled by CLP(BN)',[true,false],true,noshow).
set_def(splitvars,saturation,'Split variable co-refencing',[true,false],false,show).
set_def(stage,miscellaneous,'Aleph processing mode',[saturation,reduction,command],command,show-ro).
set_def(store_bottom,saturation,'Store bottom',[true,false],false,show).
set_def(subsample,search-search_strategy,'Subsample for evaluating a clause',[true,false],false,show).
set_def(subsamplesize,search-search_strategy,'Size of subsample for evaluating a clause',int(1)-int((+inf)),(+inf),show).
set_def(temperature,search-search_strategy,'Temperature for randomised search annealing',float(0)-float((+inf)),'',show).
set_def(test_neg,miscellaneous,'Negative examples for testing theory',read(filename),'',show).
set_def(test_pos,miscellaneous,'Positive examples for testing theory',read(filename),'',show).
set_def(threads,miscellaneous,'Number of threads',int(1)-int((+inf)),1,show).
set_def(trace_memory_usage,miscellaneous,'Report on How Aleph is Using Memory',[true,false],false,show).
set_def(train_neg,miscellaneous,'Negative examples for training',read(filename),'',show).
set_def(train_pos,miscellaneous,'Positive examples for training',read(filename),'',show).
set_def(tree_type,tree,'Type of tree to construct',[classification,class_probability,regression,model],'',show).
set_def(tries,search-search_strategy,'Number of restarts for a randomised search',int(1)-int((+inf)),10,show).
set_def(typeoverlap,miscellaneous,'Type overlap for induce_modes',float(0)-float(1),0.95,show).
set_def(uniform_sample,search-search_strategy,'Distribution to draw clauses from randomly',[true,false],false,show).
set_def(updateback,miscellaneous,'Update background knowledge with clauses found on search',[true,false],true,noshow).
set_def(verbosity,miscellaneous,'Level of verbosity',int(0)-int((+inf)),1,show).
set_def(version,miscellaneous,'Aleph version',int(0)-int((+inf)),5,show-ro).
set_def(walk,search-search_strategy,'Random walk probability for Walksat',float(0)-float(1),'',show).


sumsq([],0).
sumsq([C|A],B) :-
   sumsq(A,D),
   B is C*C+D.


sum([],0).
sum([C|A],B) :-
   sum(A,D),
   B is C+D.


random(A,normal(B,C)) :-
   var(A),
   !,
   normal(B,C,A).
random(A,normal(_,_)) :-
   !,
   number(A).
random(B,A) :-
   A=[_|_],
   var(B),
   !,
   draw_element(A,C),
   B=C.
random(B,A) :-
   A=[_|_],
   nonvar(B),
   !,
   aleph_member(C-B,A),
   C> 0.


test_file(?,_) :-
   !.
test_file(A,F) :-
   setting(portray_examples,G),
   aleph_open(A,read,B),
   !,
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     retract(user:'$aleph_local'(total,D)),
     E is D+1,
     asserta(user:'$aleph_local'(total,E)),
     ( once(depth_bound_call(C))
     ->
       ( F=show
       ->
         p1_message(covered),
         aleph_portray(C,G),
         nl
       ;
         true
       )
     ;
       ( F=show
       ->
         p1_message('not covered'),
         aleph_portray(C,G),
         nl
       ;
         true
       ),
       fail
     ),
     retract(user:'$aleph_local'(covered,H)),
     I is H+1,
     asserta(user:'$aleph_local'(covered,I)),
     fail
   ),
   !.
test_file(A,_) :-
   p1_message('cannot open'),
   p_message(A).


test_files([],_).
test_files([A|C],B) :-
   test_file(A,B),
   test_files(C,B).


sd(A,C) :-
   length(A,B),
   ( B=1
   ->
     C= 0
   ;
     sum(A,E),
     sumsq(A,D),
     C is sqrt(D/ (B-1)-E*E/ (B* (B-1)))
   ).


mean(A,B) :-
   sum(A,C),
   length(A,D),
   B is C/D.


time_loop(0,_,[]) :-
   !.
time_loop(E,A,[B|G]) :-
   wallclock(D),
   call(user:A),
   wallclock(C),
   B is C-D,
   F is E-1,
   time_loop(F,A,G).


time(B,A,[D,E]) :-
   time_loop(A,B,C),
   mean(C,D),
   sd(C,E).


wallclock(A) :-
   statistics(real_time,[A|_]).


coversn(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(coversn,coverns(D,F))).


covers(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(covers,covers(D,F))).


coversn(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(coversn,coverns(D,E))).


covers(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(covers,covers(D,E))).


coversn :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(neg,B,C),
   examples(neg,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(coversn,_)),
   asserta(user:'$aleph_search'(coversn,coversn(C,D))).


get_hyp((A:-B)) :-
   '$aleph_search'(pclause,pclause(A,B)),
   !.
get_hyp(A) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)).


covers :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(pos,B,C),
   examples(pos,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(covers,_)),
   asserta(user:'$aleph_search'(covers,covers(C,D))).


rmhyp :-
   retract(user:'$aleph_search'(pclause,pclause(A,B))),
   asserta(user:'$aleph_local'(pclause,pclause(A,B))),
   !.
rmhyp :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   !.
rmhyp.


add_gcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   update_theory(_),
   fail.
add_gcws.


add_theory(B,A,D,E) :-
   aleph_member(C,A),
   add_hyp(B,C,D,E),
   update_theory(_),
   fail.
add_theory(_,_,A,B) :-
   rm_seeds(pos,A),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,B)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,C)),
   interval_count(C,D),
   p1_message('atoms left'),
   p_message(D),
   !.


rdhyp :-
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   read(A),
   add_hyp(A),
   nl,
   show(hypothesis).


get_hyp_label(_,A) :-
   var(A),
   !.
get_hyp_label((_:-A),[D,E,B]) :-
   nlits(A,C),
   B is C+1,
   ( '$aleph_search'(covers,covers(_,D))
   ->
     true
   ;
     covers(_),
     '$aleph_search'(covers,covers(_,D))
   ),
   ( '$aleph_search'(coversn,coverns(_,E))
   ->
     true
   ;
     coversn(_),
     '$aleph_search'(coversn,coversn(_,E))
   ).


hypothesis(A,C,E) :-
   '$aleph_search'(pclause,pclause(B,D)),
   !,
   A=B,
   C=D,
   get_hyp_label((B:-D),E).
hypothesis(C,E,G) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   ( A=[_|_]
   ->
     aleph_member(B,A)
   ;
     A=B
   ),
   split_clause(B,D,F),
   C=D,
   E=F,
   get_hyp_label((D:-F),G).


best_hypothesis(E,G,[A,B,C]) :-
   '$aleph_search'(selected,selected([A,B,C|_],D,_,_)),
   split_clause(D,F,H),
   !,
   E=F,
   G=H.


write_rule(A) :-
   aleph_member(B,A),
   '$aleph_global'(theory,theory(B,_,C,_,_)),
   pp_dclause(C),
   fail.
write_rule(_).


write_features(A) :-
   aleph_open(A,write,B),
   set_output(B),
   listing('$aleph_feature'/2),
   close(B),
   set_output(user_output).
write_features(_).


write_features :-
   setting(featurefile,A),
   write_features(A),
   !.
write_features.


write_rules(A) :-
   aleph_open(A,write,B),
   set_output(B),
   '$aleph_global'(rules,rules(C)),
   aleph_reverse(C,D),
   write_rule(D),
   flush_output(B),
   set_output(user_output).


write_rules :-
   setting(rulefile,A),
   write_rules(A),
   !.
write_rules.


posleft(B) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_to_list(A,B).


bottom(C) :-
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],B),
   list_to_clause(B,C).


settings :-
   show(settings).


show_global(A,B) :-
   '$aleph_global'(A,B),
   copy_term(B,C),
   numbervars(C,0,_),
   aleph_writeq(C),
   write('.'),
   nl,
   fail.
show_global(_,_).


feature(A,B) :-
   '$aleph_feature'(feature,feature(A,_,_,C,D)),
   B= (C:-D).


modes(C/D,A) :-
   A=modeh(_,B),
   '$aleph_global'(modeh,A),
   functor(B,C,D).
modes(C/D,A) :-
   A=modeb(_,B),
   '$aleph_global'(modeb,A),
   functor(B,C,D).


modeb(A,B) :-
   ( '$aleph_global'(modeb,modeb(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeb,modeb(A,B))),
     ( '$aleph_global'(mode,mode(A,B))
     ->
       true
     ;
       assertz(user:'$aleph_global'(mode,mode(A,B)))
     )
   ).


modeh(A,B) :-
   ( '$aleph_global'(mode,mode(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeh,modeh(A,B))),
     assertz(user:'$aleph_global'(mode,mode(A,B))),
     functor(B,C,D),
     update_backpreds(C/D)
   ).


mode(A,B) :-
   modeh(A,B),
   modeb(A,B).


positive_only(A/B) :-
   assertz(user:'$aleph_global'(positive_only,positive_only(A/B))).


model(A/B) :-
   assertz(user:'$aleph_global'(model,model(A/B))).


lazy_evaluate(A/B) :-
   assertz(user:'$aleph_global'(lazy_evaluate,lazy_evaluate(A/B))).


symmetric(A/B) :-
   assertz(user:'$aleph_global'(symmetric,symmetric(A/B))).


commutative(A/B) :-
   assertz(user:'$aleph_global'(commutative,commutative(A/B))).


abducible(A/B) :-
   assertz(user:'$aleph_global'(abducible,abducible(A/B))).


determination(A,B) :-
   nonvar(A),
   '$aleph_global'(determination,determination(A,B)),
   !.
determination(A,B) :-
   noset(autorefine),
   assertz(user:'$aleph_global'(determination,determination(A,B))),
   ( nonvar(A)
   ->
     update_backpreds(A)
   ;
     true
   ).


determinations(A,B) :-
   '$aleph_global'(determination,determination(A,B)).


man(A) :-
   aleph_manual(A).


set_default(A) :-
   default_setting(A,B),
   set(A,B),
   fail.
set_default(_).


rm_special_consideration(portray_literals,_) :-
   set_default(print),
   !.
rm_special_consideration(refine,_) :-
   set_default(refineop),
   !.
rm_special_consideration(record,_) :-
   noset(recordfile_stream),
   !.
rm_special_consideration(recordfile_stream,_) :-
   ( setting(recordfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(good,_) :-
   noset(goodfile_stream),
   !.
rm_special_consideration(goodfile_stream,_) :-
   ( setting(goodfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(_,_).


default_setting(A,B) :-
   set_def(A,_,_,_,B,_),
   B\=''.


special_consideration(search,ida) :-
   set(search,bf),
   set(evalfn,coverage),
   !.
special_consideration(search,compression) :-
   set(search,heuristic),
   set(evalfn,compression),
   !.
special_consideration(search,posonly) :-
   set(search,heuristic),
   set(evalfn,posonly),
   !.
special_consideration(search,user) :-
   set(search,heuristic),
   set(evalfn,user),
   !.
special_consideration(refine,A) :-
   set(refineop,A),
   !.
special_consideration(refineop,auto) :-
   gen_auto_refine,
   !.
special_consideration(portray_literals,true) :-
   set(print,1),
   !.
special_consideration(record,true) :-
   noset(recordfile_stream),
   ( setting(recordfile,A)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(record,false) :-
   noset(recordfile_stream),
   !.
special_consideration(recordfile,A) :-
   noset(recordfile_stream),
   ( setting(record,true)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,true) :-
   noset(goodfile_stream),
   ( setting(goodfile,A)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,false) :-
   noset(goodfile_stream),
   !.
special_consideration(goodfile,A) :-
   noset(goodfile_stream),
   ( setting(good,true)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(minscore,_) :-
   aleph_abolish('$aleph_feature'/2),
   !.
special_consideration(_,_).


check_setting(threads,B) :-
   set_def(threads,_,_,A,_,_),
   check_legal(A,B),
   prolog_type(C),
   ( B>1
   ->
     ( C=swi
     ->
       true
     ;
       err_message(set(threads,B)),
       fail
     )
   ;
     true
   ),
   !.
check_setting(A,C) :-
   set_def(A,_,_,B,_,_),
   !,
   ( check_legal(B,C)
   ->
     true
   ;
     err_message(set(A,C))
   ).
check_setting(_,_).


reinstate_file_streams :-
   setting(recordfile,A),
   set(recordfile,A),
   fail.
reinstate_file_streams :-
   setting(goodfile,A),
   set(goodfile,A),
   fail.
reinstate_file_streams.


reinstate_values :-
   reinstate_file_streams,
   '$aleph_global'(save,save(_,_)),
   repeat,
   retract(user:'$aleph_global'(save,save(B,A))),
   ( A=unknown
   ->
     noset(B)
   ;
     set(B,A)
   ),
   \+'$aleph_global'(save,save(_,_)),
   !.
reinstate_values :-
   reduce_end_hook.


store_bottom :-
   bottom_key(A,B,C,true),
   asserta(user:'$aleph_sat'(stored,stored(A,B,C))),
   '$aleph_sat'(lastterm,D),
   asserta(user:'$aleph_sat'(lasterm,C,D)),
   '$aleph_sat'(lastvar,E),
   asserta(user:'$aleph_sat'(lastvar,C,E)),
   '$aleph_sat'(botsize,F),
   asserta(user:'$aleph_sat'(botsize,C,F)),
   '$aleph_sat'(lastlit,G),
   asserta(user:'$aleph_sat'(lastlit,C,G)),
   '$aleph_sat'(hovars,H),
   asserta(user:'$aleph_sat'(hovars,C,H)),
   '$aleph_sat'(hivars,I),
   asserta(user:'$aleph_sat'(hivars,C,I)),
   '$aleph_sat'(eq,J),
   asserta(user:'$aleph_sat'(eq,C,J)),
   '$aleph_sat_ivars'(K,L),
   asserta(user:'$aleph_sat_ivars'(K,C,L)),
   '$aleph_sat_ovars'(K,M),
   asserta(user:'$aleph_sat_ovars'(K,C,M)),
   '$aleph_sat_litinfo'(K,N,O,P,Q,R),
   asserta(user:'$aleph_sat_litinfo'(K,C,N,O,P,Q,R)),
   fail.
store_bottom.


file_extension(pos,A) :-
   name('.f',A).
file_extension(neg,A) :-
   name('.n',A).
file_extension(background,A) :-
   name('.b',A).


read_examples_from_file(A,B,C) :-
   construct_name(A,B,C),
   ( aleph_open(C,read,E)
   ->
     concat(['consulting ',A,' examples'],D),
     p1_message(D),
     p_message(C)
   ;
     p1_message('cannot open'),
     p_message(C),
     fail
   ),
   repeat,
   read(E,F),
   ( F=end_of_file
   ->
     close(E)
   ;
     record_example(nocheck,A,F,_),
     fail
   ),
   !.
read_examples_from_file(_,_,?).


read_examples_from_files([],_,[]).
read_examples_from_files([B|D],A,[C|E]) :-
   read_examples_from_file(A,B,C),
   read_examples_from_files(D,A,E).


read_examples_files(A,B,C) :-
   clean_up_examples(A),
   asserta(user:'$aleph_global'(size,size(A,0))),
   ( B=[_|_]
   ->
     read_examples_from_files(B,A,C)
   ;
     read_examples_from_file(A,B,C)
   ),
   '$aleph_global'(size,size(A,D)),
   ( D>0
   ->
     E=[1-D]
   ;
     E= ([])
   ),
   asserta(user:'$aleph_global'(atoms,atoms(A,E))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(A,E))),
   asserta(user:'$aleph_global'(last_example,last_example(A,D))).


construct_name(_,A,A) :-
   setting(use_file_extensions,false),
   !.
construct_name(B,A,E) :-
   name(A,D),
   file_extension(B,C),
   aleph_append(C,D,F),
   name(E,F).


read_examples(B,D) :-
   ( setting(train_pos,A)
   ->
     set(use_file_extensions,false),
     read_examples_files(pos,A,_),
     noset(use_file_extensions)
   ;
     read_examples_files(pos,B,A),
     set(train_pos,A)
   ),
   ( setting(train_neg,C)
   ->
     set(use_file_extensions,false),
     read_examples_files(neg,C,_),
     noset(use_file_extensions)
   ;
     read_examples_files(neg,D,C),
     set(train_neg,C)
   ),
   '$aleph_global'(size,size(pos,E)),
   '$aleph_global'(size,size(neg,F)),
   set_lazy_recalls,
   ( setting(prior,_)
   ->
     true
   ;
     normalise_distribution([E-pos,F-neg],G),
     set(prior,G)
   ),
   reset_counts,
   asserta(user:'$aleph_global'(last_clause,last_clause(0))),
   broadcast(examples(loaded)).


read_background(A) :-
   construct_name(background,A,B),
   aleph_reconsult(B),
   broadcast(background(loaded)).


reset :-
   clean_up,
   clear_cache,
   aleph_abolish('$aleph_global'/2),
   aleph_abolish(example/3),
   prolog:assert_static(user:example(0,uspec,false)),
   set_default(_),
   !.


read_all(A,B) :-
   read_all(A,B,B).


read_all(A,B,C) :-
   clean_up,
   reset,
   read_background(A),
   read_examples(B,C),
   record_targetpred,
   check_recursive_calls,
   check_prune_defs,
   check_user_search,
   check_posonly,
   check_auto_refine,
   check_abducibles.


read_all(A) :-
   read_all(A,A,A).


extract_cover(_,[]).


eval_rule(0,B) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   !,
   label_create(A,B),
   p_message('Rule 0'),
   pp_dclause(A),
   extract_count(pos,B,C),
   extract_count(neg,B,D),
   extract_length(B,E),
   label_print_eval([C,D,E]),
   nl.
eval_rule(A,C) :-
   integer(A),
   A>0,
   '$aleph_global'(theory,theory(A,_,B,_,_)),
   !,
   label_create(B,C),
   extract_count(pos,C,D),
   extract_count(neg,C,E),
   concat(['Rule ',A],G),
   ( setting(evalfn,posonly)
   ->
     concat(['Pos cover = ',D,' Rand cover = ',E],F)
   ;
     concat(['Pos cover = ',D,' Neg cover = ',E],F)
   ),
   p1_message(G),
   p_message(F),
   pp_dclause(B),
   setting(verbosity,H),
   ( H>=2
   ->
     p_message('positive examples covered'),
     label_print_examples(pos,C),
     p_message('negative examples covered'),
     label_print_examples(neg,C)
   ;
     true
   ),
   nl.
eval_rule(_,_).


evalfn_name(compression,compression).
evalfn_name(coverage,'pos-neg').
evalfn_name(accuracy,accuracy).
evalfn_name(wracc,novelty).
evalfn_name(laplace,'laplace estimate').
evalfn_name(pbayes,'pseudo-bayes estimate').
evalfn_name(auto_m,'m estimate').
evalfn_name(mestimate,'m estimate').
evalfn_name(mse,mse).
evalfn_name(posonly,'posonly bayes estimate').
evalfn_name(entropy,entropy).
evalfn_name(gini,'gini value').
evalfn_name(sd,'standard deviation').
evalfn_name(user,'user defined cost').


label_print_eval([]) :-
   !.
label_print_eval(B) :-
   A=coverage,
   evalfn(A,B,C),
   print_eval(A,C).


examples(A,C) :-
   setting(portray_literals,E),
   example(B,A,D),
   aleph_member1(B,C),
   aleph_portray(D,E),
   write('.'),
   nl,
   fail.
examples(_,_).


label_print_examples(A,B) :-
   extract_cover(A,B,C),
   examples(A,C).


extract_length([_,_,A|_],A).


label_union([],A,A) :-
   !.
label_union(A,[],A) :-
   !.
label_union(A,B,N) :-
   extract_cover(pos,A,D),
   extract_cover(pos,B,C),
   extract_cover(neg,A,F),
   extract_cover(neg,B,E),
   extract_length(A,G),
   extract_length(B,H),
   update_list(C,D,I),
   update_list(E,F,J),
   M is G+H,
   list_to_intervals(I,K),
   list_to_intervals(J,L),
   assemble_label(K,L,M,N).


label_ncover(A,B) :-
   extract_cover(neg,A,B).


extract_cover(pos,[A,_,_],B) :-
   intervals_to_list(A,B),
   !.
extract_cover(neg,[_,A,_],B) :-
   intervals_to_list(A,B),
   !.


label_pcover(A,B) :-
   extract_cover(pos,A,B).


assemble_label(A,B,C,[A,B,C]).


label_create(A,G,H,J) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,I,_),
   retractall(user:'$aleph_search'(pclause,_)),
   ( G=pos
   ->
     assemble_label(I,unknown,unknown,J)
   ;
     assemble_label(unknown,I,unknown,J)
   ).


label_create(A,G,H,I,J,N) :-
   split_clause(A,B,C),
   nlits((B,C),M),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,K,_),
   prove(D/E/F,I,(B:-C),J,L,_),
   retractall(user:'$aleph_search'(pclause,_)),
   assemble_label(K,L,M,N),
   !.


get_normal(0,_,_,[]) :-
   !.
get_normal(A,B,C,[D|F]) :-
   A>0,
   normal(B,C,D),
   E is A-1,
   get_normal(E,B,C,F).


std_normal(F) :-
   aleph_random(A),
   aleph_random(B),
   C is 2*A-1,
   D is 2*B-1,
   E is C^2+D^2,
   ( E>1
   ->
     std_normal(F)
   ;
     G is sqrt(-2*log(E)/E),
     F is C*G
   ).


normal(B,C,A) :-
   std_normal(D),
   A is B+C*D.


random_select_from_intervals(D,A) :-
   interval_count(A,B),
   get_random(B,C),
   interval_select(C,A,D).


random_nselect(0,_,[]) :-
   !.
random_nselect(_,[],[]) :-
   !.
random_nselect(C,B,[A|F]) :-
   random_select(A,B,E),
   D is C-1,
   random_nselect(D,E,F).


key_sum([],0).
key_sum([C-_|A],B) :-
   key_sum(A,D),
   B is float(C+D).


draw_element([B-F|G],A,C,E) :-
   D is A+B,
   ( C=<D
   ->
     E=F
   ;
     draw_element(G,D,C,E)
   ).


select_example(A,B,[D-C|_],E) :-
   A=<B+C-D+1,
   !,
   E is A-B+D-1.
select_example(D,A,[C-B|F],G) :-
   E is A+B-C+1,
   select_example(D,E,F,G).


worse_coversets1(A-B,_,_,[]) :-
   A>B,
   !.
worse_coversets1(B-G,A,E,H) :-
   '$aleph_global'(max_set,max_set(A,B,C,_)),
   C=[_,_,_,D|_],
   D>=E,
   !,
   F is B+1,
   worse_coversets1(F-G,A,E,H),
   !.
worse_coversets1(A-C,D,E,[A|F]) :-
   B is A+1,
   worse_coversets1(B-C,D,E,F),
   !.


update_coversets([],_,_,_).
update_coversets([B|E],D,A,C) :-
   ( retract(user:'$aleph_global'(max_set,max_set(A,B,_,_)))
   ->
     true
   ;
     true
   ),
   asserta(user:'$aleph_global'(max_set,max_set(A,B,C,D))),
   update_coversets(E,D,A,C),
   !.


worse_coversets(_,_,_,[]) :-
   \+'$aleph_global'(maxcover,set(maxcover,true)),
   !.
worse_coversets([],_,_,[]).
worse_coversets([A|D],B,C,G) :-
   worse_coversets1(A,B,C,F),
   worse_coversets(D,B,C,E),
   aleph_append(E,F,G),
   !.


rm_interval(_,[],[]).
rm_interval(A,[B|D],G) :-
   interval_intersection(A,B,C),
   !,
   interval_subtract(B,C,F),
   rm_interval(A,D,E),
   aleph_append(E,F,G).
rm_interval(B,[A|C],[A|D]) :-
   rm_interval(B,C,D).


rm_seeds(pos,A) :-
   setting(construct_features,true),
   setting(feature_construction,exhaustive),
   !,
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,C))),
   ( '$aleph_global'(example_selected,example_selected(_,B))
   ->
     true
   ;
     A=[B-_|_]
   ),
   rm_seeds1([B-B],C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,D))).
rm_seeds(A,B) :-
   retract(user:'$aleph_global'(atoms_left,atoms_left(A,C))),
   rm_seeds1(B,C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(A,D))).


rm_seeds :-
   update_theory(A),
   !,
   '$aleph_global'(theory,theory(A,_,_,B,C)),
   rm_seeds(pos,B),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,C)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,D)),
   interval_count(D,E),
   p1_message('atoms left'),
   p_message(E),
   !.
rm_seeds.


add_clause_to_background(A) :-
   '$aleph_global'(theory,theory(A,C/_,I,_,_)),
   ( setting(minpos,B)
   ->
     true
   ;
     B=1
   ),
   C=[D,_,_,E|_],
   D>=B,
   setting(minscore,F),
   E>=F,
   !,
   ( retract(user:'$aleph_global'(rules,rules(G)))
   ->
     asserta(user:'$aleph_global'(rules,rules([A|G])))
   ;
     asserta(user:'$aleph_global'(rules,rules([A])))
   ),
   ( setting(updateback,H)
   ->
     true
   ;
     H=true
   ),
   user_clause_rewrite(I,J),
   ( H=true
   ->
     assertz(user:J)
   ;
     true
   ),
   !.
add_clause_to_background(_).


gen_lits([],[]).
gen_lits([B|C],[A|D]) :-
   gen_litnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,B,[],[],[])),
   gen_lits(C,D).


gen_featurenum(A) :-
   '$aleph_feature'(last_feature,B),
   !,
   A is B+1,
   setting(max_features,C),
   A=<C,
   retract(user:'$aleph_feature'(last_feature,B)),
   asserta(user:'$aleph_feature'(last_feature,A)).
gen_featurenum(1) :-
   asserta(user:'$aleph_feature'(last_feature,1)).


gen_litnum(A) :-
   retract(user:'$aleph_sat'(lastlit,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastlit,A)).
gen_litnum(0) :-
   asserta(user:'$aleph_sat'(lastlit,0)).


gen_var(A) :-
   retract(user:'$aleph_sat'(lastvar,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastvar,A)).
gen_var(0) :-
   asserta(user:'$aleph_sat'(lastvar,0)).


skolem_var(A) :-
   atomic(A),
   !,
   name(A,[36|_]).
skolem_var(B) :-
   gen_var(A),
   name(A,C),
   name(B,[36|C]).


index_clause((A:-true),B,A) :-
   !,
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).
index_clause(A,B,A) :-
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).


add_skolem_types2([],_).
add_skolem_types2([A/C|F],B) :-
   tparg(A,B,D),
   E=..[C,D],
   ( '$aleph_global'(back,back(E))
   ->
     true
   ;
     asserta(user:'$aleph_global'(back,back(E))),
     asserta(user:E)
   ),
   add_skolem_types2(F,B).


add_skolem_types1([],_).
add_skolem_types1([A|F],C) :-
   split_args(A,_,B,D,E),
   add_skolem_types2(B,C),
   add_skolem_types2(D,C),
   add_skolem_types2(E,C),
   add_skolem_types1(F,C).


add_skolem_types([]).
add_skolem_types([A|E]) :-
   functor(A,B,C),
   get_modes(B/C,D),
   add_skolem_types1(D,A),
   add_skolem_types(E).


add_skolem_types(10000,_,_) :-
   !.
add_skolem_types(_,A,B) :-
   add_skolem_types([A]),
   add_skolem_types(B).


add_backs([]).
add_backs([A|D]) :-
   asserta(user:'$aleph_global'(back,back(A))),
   functor(A,B,C),
   declare_dynamic(B/C),
   assertz(user:A),
   add_backs(D).


update_backpreds(A/B) :-
   '$aleph_local'(backpred,A/B),
   !.
update_backpreds(A/B) :-
   assertz(user:'$aleph_local'(backpred,A/B)).


skolemize(A,B) :-
   skolemize(A,B,[],0,_).


set_lazy_on_contradiction(_,_) :-
   '$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)),
   !.
set_lazy_on_contradiction(A,B) :-
   C is A+B,
   C>=100,
   !,
   set(lazy_on_contradiction,true).
set_lazy_on_contradiction(_,_).


set_lazy_recalls :-
   '$aleph_global'(lazy_evaluate,lazy_evaluate(A/B)),
   functor(C,A,B),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,0))),
   '$aleph_global'(mode,mode(D,C)),
   '$aleph_global'(lazy_recall,lazy_recall(A/B,F)),
   ( D= (*)
   ->
     E=100
   ;
     E=D
   ),
   E>F,
   retract(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,F))),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,E))),
   fail.
set_lazy_recalls.


record_abclause(A/B) :-
   functor(C,A,B),
   E= (C:-'$aleph_search'(abduced,pclause(C,D)),D,!),
   assertz(user:E).


check_abducibles :-
   '$aleph_global'(abducible,abducible(A/B)),
   record_testclause(A/B),
   record_abclause(A/B),
   fail.
check_abducibles.


cost_cover_required :-
   prolog:clause(user:cost(_,A,C),D),
   vars_in_term([A],[],B),
   (
     occurs_in(B,p(C))
   ;
     occurs_in(B,D)
   ),
   !.


check_user_search :-
   setting(evalfn,user),
   \+cost_cover_required,
   set(lazy_on_cost,true),
   !.
check_user_search.


check_prune_defs :-
   prolog:clause(user:prune(_),_),
   !,
   set(prune_defs,true).
check_prune_defs.


record_recursive_sat_call(A/B) :-
   functor(C,A,B),
   G= (C:-'$aleph_global'(stage,set(stage,saturation)),'$aleph_sat'(example,example(F,D)),example(E,D,C),E\=F,!),
   assertz(user:G).


check_recursive_calls :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   '$aleph_global'(determination,determination(A/B,A/B)),
   record_recursive_sat_call(A/B),
   set(recursion,true),
   fail.
check_recursive_calls.


record_testclause(A/B) :-
   setting(record_testclause_hook,true),
   !,
   functor(C,A,B),
   E= (C:-'$aleph_search'(pclause,pclause(C,D)),D,!),
   assertz(user:E).
record_testclause(B/C) :-
   setting(record_testclause_hook,A),
   prolog:call(call(user:A),B/C).


record_targetpred :-
   retract(user:'$aleph_local'(backpred,A/B)),
   once('$aleph_global'(determination,determination(A/B,_))),
   asserta(user:'$aleph_global'(targetpred,targetpred(A/B))),
   record_testclause(A/B),
   fail.
record_targetpred.


record_nskolemized(B,A,C,true) :-
   !,
   assertz(user:example(A,B,C)).
record_nskolemized(B,A,C,D) :-
   assertz(user: (example(A,B,C):-D)).


record_skolemized(B,A,G,C,F) :-
   assertz(user:example(A,B,C)),
   functor(C,D,E),
   update_backpreds(D/E),
   add_backs(F),
   add_skolem_types(G,C,F).


pfac(0,_,_,1).
pfac(1,_,_,1).
pfac(A,A,_,1).
pfac(A,D,B,F) :-
   C is A-1,
   E is B-1,
   pfac(C,D,E,G),
   H is A/B,
   F is G*H.


aleph_choose(A,B,D) :-
   C is A-B,
   ( C>B
   ->
     pfac(A,C,B,D)
   ;
     pfac(A,B,C,D)
   ).


binom(B,_,A,0) :-
   A>B,
   !.
binom(A,C,B,F) :-
   aleph_choose(A,B,G),
   H is C^B,
   D is 1-C,
   E is A-B,
   I is D^E,
   F is G*H*I,
   !.


call_with_depth_bound((A:-B),C) :-
   !,
   call_with_depth_bound((A,B),C).
call_with_depth_bound((A,C),B) :-
   !,
   prolog:depth_bound_call(call(user:A),B),
   call_with_depth_bound(C,B).
call_with_depth_bound(A,B) :-
   prolog:depth_bound_call(call(user:A),B).


clean_up_tree :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)).


clean_up_examples(A) :-
   retractall(user:'$aleph_global'(size,size(A,_))),
   retractall(user:'$aleph_global'(atoms,atoms(A,_))),
   retractall(user:'$aleph_global'(atoms_left,atoms_left(A,_))),
   retractall(user:'$aleph_global'(last_example,last_example(A,_))).


clean_up_examples :-
   clean_up_examples(pos),
   clean_up_examples(neg),
   clean_up_examples(rand).


clean_up_search :-
   retractall(user:'$aleph_search'(bad,_)),
   retractall(user:'$aleph_search'(best,_)),
   retractall(user:'$aleph_search'(best_label,_)),
   retractall(user:'$aleph_search'(clauseprior,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   retractall(user:'$aleph_search'(current,_)),
   retractall(user:'$aleph_search'(label,_)),
   retractall(user:'$aleph_search'(modes,_)),
   retractall(user:'$aleph_search'(nextnode,_)),
   destroy_open_list,
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(selected,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   retractall(user:'$aleph_search_expansion'(_,_,_,_)),
   retractall(user:'$aleph_search_gain'(_,_,_,_)),
   retractall_aleph_search_node.


clean_up_init :-
   aleph_abolish('$aleph_good'/3),
   retractall(user:'$aleph_search'(last_good,_)),
   aleph_abolish('$aleph_feature'/2).


declare_dynamic(A/B) :-
   dynamic A/B.


occurs1(E,C,A,B) :-
   A=<B,
   arg(A,C,D),
   vars_in_term([D],[],F),
   aleph_member(G,E),
   aleph_member(H,F),
   G==H,
   !.
occurs1(C,D,A,B) :-
   A<B,
   E is A+1,
   occurs1(C,D,E,B).


occurs_in(A,(B,_)) :-
   occurs_in(A,B),
   !.
occurs_in(A,(_,B)) :-
   !,
   occurs_in(A,B).
occurs_in(B,A) :-
   functor(A,_,C),
   occurs1(B,A,1,C).


aleph_ord_subset(=,_,A,_,B) :-
   aleph_ord_subset(A,B).
aleph_ord_subset(>,A,B,_,C) :-
   aleph_ord_subset([A|B],C).


aleph_ord_subset([],_) :-
   !.
aleph_ord_subset([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_subset(C,A,D,B,E).


aleph_ord_intersection(=,A,B,_,C,[A|D]) :-
   aleph_ord_intersection(B,C,D).
aleph_ord_intersection(<,_,A,B,C,D) :-
   aleph_ord_intersection(A,[B|C],D).
aleph_ord_intersection(>,A,B,_,C,D) :-
   aleph_ord_intersection([A|B],C,D).


aleph_ord_union(=,A,B,_,C,[A|D],E) :-
   aleph_ord_union(B,C,D,E).
aleph_ord_union(<,A,B,C,D,[A|E],F) :-
   aleph_ord_union(B,[C|D],E,F).
aleph_ord_union(>,B,C,A,D,[A|E],[A|F]) :-
   aleph_ord_union([B|C],D,E,F).


aleph_ord_union(A,[],A,[]) :-
   !.
aleph_ord_union([],A,A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F,G) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F,G).


aleph_ord_union(=,A,B,_,C,[A|D]) :-
   aleph_ord_union(B,C,D).
aleph_ord_union(<,A,B,C,D,[A|E]) :-
   aleph_ord_union(B,[C|D],E).
aleph_ord_union(>,B,C,A,D,[A|E]) :-
   aleph_ord_union([B|C],D,E).


aleph_ord_disjoint(<,_,A,B,C) :-
   aleph_ord_disjoint(A,[B|C]).
aleph_ord_disjoint(>,A,B,_,C) :-
   aleph_ord_disjoint([A|B],C).


aleph_ord_subtract(=,_,A,_,B,C) :-
   aleph_ord_subtract(A,B,C).
aleph_ord_subtract(<,A,B,C,D,[A|E]) :-
   aleph_ord_subtract(B,[C|D],E).
aleph_ord_subtract(>,A,B,_,C,D) :-
   aleph_ord_subtract([A|B],C,D).


interval_subtract(A-B,A-B,[]) :-
   !.
interval_subtract(A-B,A-D,[C-B]) :-
   !,
   C is D+1.
interval_subtract(B-A,D-A,[B-C]) :-
   !,
   C is D-1.
interval_subtract(A-B,D-F,[A-C,E-B]) :-
   C is D-1,
   E is F+1,
   C>=A,
   B>=E,
   !.


interval_subsumes(A-C,B-D) :-
   A=<B,
   C>=D.


interval_to_list(B-C,A,A) :-
   B>C,
   !.
interval_to_list(A-C,D,E) :-
   B is A+1,
   interval_to_list(B-C,[A|D],E).


intervals_to_list([],A,A).
intervals_to_list([A|C],B,E) :-
   interval_to_list(A,B,D),
   intervals_to_list(C,D,E).


list_to_interval(A,[],A,[]).
list_to_interval(A,[B|C],A,[B|C]) :-
   B-A>1,
   !.
list_to_interval(_,[A|B],C,D) :-
   list_to_interval(A,B,C,D).


list_to_intervals(A,C) :-
   sort(A,B),
   list_to_intervals1(B,C).


intervals_to_list(A,C) :-
   intervals_to_list(A,[],B),
   sort(B,C),
   !.


interval_select(A,[C-B|_],D) :-
   A=<B-C+1,
   !,
   D is C+A-1.
interval_select(A,[C-B|E],F) :-
   D is A- (B-C+1),
   interval_select(D,E,F).


interval_intersection(A-B,C-D,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(C-D,A-B,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(A-D,C-B,A-B) :-
   A>=C,
   B>=A,
   B=<D,
   !.
interval_intersection(C-B,A-D,A-B) :-
   A>=C,
   A=<B,
   B=<D,
   !.


intervals_intersects1(A,[B|_],C) :-
   interval_intersection(A,B,C),
   !.
intervals_intersects1(A,[_|B],C) :-
   intervals_intersects1(A,B,C).


intervals_intersects1(A-_,[B-C|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(B-C,[A-_|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(A-B,[_|C]) :-
   intervals_intersects1(A-B,C).


intervals_intersects([A-B|_],C) :-
   intervals_intersects1(A-B,C),
   !.
intervals_intersects([_|A],B) :-
   intervals_intersects(A,B).


partition(_,[],[],[]).
partition(B,[A|C],[A|D],E) :-
   B@>A,
   !,
   partition(B,C,D,E).
partition(B,[A|C],D,[A|E]) :-
   partition(B,C,D,E).


quicksort(_,[],[]).
quicksort(C,[A|B],H) :-
   partition(A,B,D,E),
   quicksort(C,D,G),
   quicksort(C,E,F),
   ( C=ascending
   ->
     aleph_append([A|F],G,H)
   ;
     aleph_append([A|G],F,H)
   ).


aleph_subset2([A|B],[A|C]) :-
   aleph_subset2(B,C).
aleph_subset2(A,[_|B]) :-
   aleph_subset2(A,B).
aleph_subset2([],[]).


get_pclause1([A],B,E,G,F,I,C) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,D,_,_,_),
   get_flatatom(D,E,F,G),
   functor(F,H,_),
   ( H= (=)
   ->
     I=0
   ;
     I=1
   ).
get_pclause1([A|F],B,D,H,(E,I),L,J) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,_,_),
   get_flatatom(C,D,E,G),
   get_pclause1(F,B,G,H,I,M,J),
   functor(E,K,_),
   ( K= (=)
   ->
     L=M
   ;
     L is M+1
   ).


get_pclause1([A],D,F,E,H,B) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,_,_,_),
   get_flatatom(C,D,E,F),
   functor(E,G,_),
   ( G= (=)
   ->
     H=0
   ;
     H=1
   ).
get_pclause1([A|E],C,G,(D,H),K,I) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   get_flatatom(B,C,D,F),
   get_pclause1(E,F,G,H,L,I),
   functor(D,J,_),
   ( J= (=)
   ->
     K=L
   ;
     K is L+1
   ).


flatten_args(0,_,_,A,A) :-
   !.
flatten_args(A,B,D,G,H) :-
   arg(A,B,C),
   F is A-1,
   ( C=aleph_const(E)
   ->
     arg(A,D,E),
     flatten_args(F,B,D,G,H)
   ;
     ( integer(C)
     ->
       update(G,C/I,J),
       arg(A,D,I),
       flatten_args(F,B,D,J,H)
     )
   ;
     functor(C,K,L),
     functor(M,K,L),
     arg(A,D,M),
     flatten_args(L,C,M,G,J),
     flatten_args(F,B,D,J,H)
   ).


get_flatatom(not A,B,not C,D) :-
   !,
   get_flatatom(A,B,C,D).
get_flatatom(A,E,B,F) :-
   functor(A,C,D),
   functor(B,C,D),
   flatten_args(D,A,B,E,F).


get_clause(A,B,_,[]) :-
   A>B,
   !.
get_clause(A,F,C,[D|H]) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   !,
   get_flatatom(B,C,D,G),
   E is A+1,
   get_clause(E,F,G,H).
get_clause(A,C,D,E) :-
   B is A+1,
   get_clause(B,C,D,E).


revzap([B|A],C,D) :-
   revzap(A,[B|C],D).
revzap([],A,A).


aleph_member3(A,A-B) :-
   A=<B.
aleph_member3(C,A-B) :-
   A<B,
   D is A+1,
   aleph_member3(C,D-B).


alphabetic_variant(A,B) :-
   copy_term(A/B,C/D),
   numbervars(C,0,_),
   numbervars(D,0,_),
   C=D.


min_in_list([A],A) :-
   !.
min_in_list([B|A],D) :-
   min_in_list(A,C),
   ( B@>C
   ->
     D=C
   ;
     D=B
   ).


max_in_list([A],A) :-
   !.
max_in_list([B|A],D) :-
   max_in_list(A,C),
   ( B@>C
   ->
     D=B
   ;
     D=C
   ).


get_first_n(0,_,[]) :-
   !.
get_first_n(_,[],[]) :-
   !.
get_first_n(B,[A|D],[A|E]) :-
   C is B-1,
   get_first_n(C,D,E).


aleph_rsample(B,C,A,A) :-
   B>=C,
   !.
aleph_rsample(D,B,[A|G],[A|H]) :-
   get_random(B,C),
   C=<D,
   !,
   E is D-1,
   F is B-1,
   aleph_rsample(E,F,G,H).
aleph_rsample(B,A,[_|D],E) :-
   C is A-1,
   aleph_rsample(B,C,D,E).


aleph_rsample(B,A,D) :-
   length(A,C),
   aleph_rsample(B,C,A,D).


aleph_rpermute([],0,[]) :-
   !.
aleph_rpermute(C,A,[D|G]) :-
   get_random(A,B),
   aleph_remove_nth(B,C,D,E),
   F is A-1,
   aleph_rpermute(E,F,G).


aleph_delete0(_,[],[]).
aleph_delete0(A,[A|B],B) :-
   !.
aleph_delete0(B,[A|C],[A|D]) :-
   aleph_delete0(B,C,D).


aleph_delete1(A,[A|B],B) :-
   !.
aleph_delete1(B,[A|C],[A|D]) :-
   aleph_delete1(B,C,D).


print_lit(B,C,A,E,D,F) :-
   ( A=1
   ->
     tab(3)
   ;
     true
   ),
   aleph_portray(B,C),
   write(D),
   ( A=E
   ->
     nl,
     F=1
   ;
     F is A+1
   ).


print_litlist([],_,_,_).
print_litlist([A],B,C,_) :-
   !,
   print_lit(A,B,C,C,'.',_).
print_litlist([A|E],B,C,D) :-
   print_lit(A,B,C,D,', ',F),
   print_litlist(E,B,F,D).


pp_dlist(A,D) :-
   copy_term(A,[B|C]),
   numbervars([B|C],0,_),
   aleph_portray(B,D),
   ( C= ([])
   ->
     write('.'),
     nl
   ;
     ( D=true
     ->
       write(' if:')
     ;
       write(' :-')
     ),
     nl,
     '$aleph_global'(print,set(print,E)),
     print_litlist(C,D,1,E)
   ).


pp_dlist([]) :-
   !.
pp_dlist(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dlist(A,true)
   ;
     pp_dlist(A,false)
   ).


print_lits((C,F),A,D,E) :-
   !,
   ( A=true
   ->
     B=' and '
   ;
     B=', '
   ),
   print_lit(C,A,D,E,B,G),
   print_lits(F,A,G,E).
print_lits(A,B,C,_) :-
   print_lit(A,B,C,C,'.',_).


aleph_portray(hypothesis,true) :-
   aleph_portray(hypothesis),
   !.
aleph_portray(hypothesis,false) :-
   p_message(hypothesis),
   hypothesis(A,B,_),
   pp_dclause((A:-B)),
   !.
aleph_portray(_,hypothesis) :-
   !.
aleph_portray(search,true) :-
   aleph_portray(search),
   !.
aleph_portray(search,_) :-
   !.
aleph_portray(train_pos,true) :-
   aleph_portray(train_pos),
   !.
aleph_portray(train_pos,_) :-
   !,
   setting(train_pos,A),
   show_file(A).
aleph_portray(train_neg,true) :-
   aleph_portray(train_neg),
   !.
aleph_portray(train_neg,_) :-
   !,
   setting(train_neg,A),
   show_file(A).
aleph_portray(test_pos,true) :-
   aleph_portray(test_pos),
   !.
aleph_portray(test_pos,_) :-
   !,
   setting(test_pos,A),
   show_file(A).
aleph_portray(test_neg,true) :-
   aleph_portray(test_neg),
   !.
aleph_portray(test_neg,_) :-
   !,
   setting(test_neg,A),
   show_file(A).
aleph_portray(A,true) :-
   aleph_portray(A),
   !.
aleph_portray(A,_) :-
   aleph_writeq(A).


pp_dclause((A:-true),B) :-
   !,
   pp_dclause(A,B).
pp_dclause((A:-B),E) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),0,_),
   aleph_portray(C,E),
   ( E=true
   ->
     write(' if:')
   ;
     write(' :-')
   ),
   nl,
   '$aleph_global'(print,set(print,F)),
   print_lits(D,E,1,F).
pp_dclause(A,C) :-
   copy_term(A,B),
   numbervars(B,0,_),
   aleph_portray(B,C),
   write('.'),
   nl.


strip_true((A:-true),A) :-
   !.
strip_true(A,A).


extract_clauses_with_length([],[]).
extract_clauses_with_length([A-[_,_,_,B] |C],[A-B|D]) :-
   extract_clauses_with_length(C,D).


theory_move(delete_clause,A,B) :-
   aleph_delete(_,A,B),
   B\= ([]).
theory_move(add_clause,A,E) :-
   setting(clauses,C),
   length(A,B),
   B<C,
   sample_clauses(1,[D]),
   aleph_append([D],A,E).
theory_move(delete_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(delete_lit,B,C),
   aleph_append([C],D,E).
theory_move(add_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(add_lit,B,C),
   aleph_append([C],D,E).


clause_move(delete_lit,A,P) :-
   A=J-[F,G,B,L],
   ( B=[D|C]
   ->
     aleph_delete(_,C,E),
     H=[D|E],
     bottom_key(F,G,I,_),
     clause_status(H,I,[],legal,legal),
     O is J-1,
     ( I=false
     ->
       get_pclause(H,[],K,_,_,_)
     ;
       get_pclause(H,I,[],K,_,_,_)
     ),
     \+prune(K)
   ;
     clause_to_list(L,[N|M]),
     aleph_delete(_,M,E),
     aleph_mode_linked([N|E]),
     list_to_clause([N|E],K),
     \+prune(K),
     O is J-1,
     H= ([])
   ),
   P=O-[F,G,H,K].
clause_move(add_lit,A,P) :-
   A=B-[F,G,D,E],
   setting(clauselength,C),
   B<C,
   ( D= ([])
   ->
     auto_refine(E,O),
     N is B+1,
     M= ([])
   ;
     aleph_delete(I,D,L),
     bottom_key(F,G,H,_),
     ( H=false
     ->
       '$aleph_sat_litinfo'(I,_,_,_,_,J)
     ;
       '$aleph_sat_litinfo'(I,H,_,_,_,_,J)
     ),
     aleph_member(K,J),
     \+aleph_member(K,L),
     aleph_append([K],D,M),
     clause_status(M,H,[],legal,legal),
     N is B+1,
     ( H=false
     ->
       get_pclause(M,[],O,_,_,_)
     ;
       get_pclause(M,H,[],O,_,_,_)
     ),
     \+prune(O)
   ),
   P=N-[F,G,M,O].


old_move(clauses,B-[_,_,C,D]) :-
   ( setting(cache_clauselength,A)
   ->
     true
   ;
     A=3
   ),
   B=<A,
   ( C= ([])
   ->
     clause_to_list(D,E),
     sort(E,F),
     numbervars(F,0,_)
   ;
     sort(C,F)
   ),
   ( '$aleph_search_seen'(B,F)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,F)),
     !,
     fail
   ).
old_move(theories,A) :-
   numbervars(A,0,_),
   length(A,B),
   ( '$aleph_search_seen'(B,C)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,C)),
     !,
     fail
   ).


num_to_length1(B,A,_,_,A) :-
   B>=A,
   !.
num_to_length1(A,H,D,B,F) :-
   '$aleph_sat'(random,number_of_clauses(A,C)),
   E is B+C,
   ( D=<E
   ->
     ( C< 1
     ->
       F is A-1
     ;
       F=A
     )
   ;
     G is A+1,
     num_to_length1(G,H,D,E,F)
   ).


get_rand_lit(A,C,B) :-
   repeat,
   get_random(A,B),
   B>1,
   ( C=false
   ->
     '$aleph_sat_litinfo'(B,_,_,_,_,_)
   ;
     '$aleph_sat_litinfo'(B,C,_,_,_,_,_)
   ),
   !.


get_rand_lit(A,B,D,C) :-
   repeat,
   get_rand_lit(A,B,C),
   \+aleph_member(C,D),
   !.


clause_status(A,C,D,E) :-
   bottom_key(_,_,B,_),
   clause_status(A,B,C,D,E).


randselect(0,_,_,_,[]) :-
   !.
randselect(_,C,_,A,[]) :-
   length(A,B),
   B is C-1,
   !.
randselect(E,A,B,C,[D|G]) :-
   get_rand_lit(A,B,C,D),
   F is E-1,
   randselect(F,A,B,[D|C],G).


clause_status([],_,_,A,A) :-
   !.
clause_status([C|F],B,A,H,I) :-
   get_ovars(A,B,[],E),
   get_ivars([C],B,[],D),
   aleph_subset1(D,E),
   !,
   aleph_append([C],A,G),
   clause_status(F,B,G,H,I).
clause_status(_,_,_,_,illegal).


randselect1(0,_,_,_,[]) :-
   !.
randselect1(_,_,[],_,[]) :-
   !.
randselect1(H,C,B,F,[A|K]) :-
   random_select(A,B,E),
   ( C=false
   ->
     '$aleph_sat_litinfo'(A,_,_,_,_,D)
   ;
     '$aleph_sat_litinfo'(A,C,_,_,_,_,D)
   ),
   update_list(D,E,G),
   aleph_delete_list([A|F],G,J),
   I is H-1,
   randselect1(I,C,J,[A|F],K).


get_pclause([A],B,C,E,D,F,G) :-
   !,
   get_pclause1([A],B,C,D,E,F,G).
get_pclause([A|D],B,C,H,F,K,G) :-
   get_pclause1([A],B,C,E,I,L,_),
   get_pclause1(D,B,E,F,J,M,G),
   H= (I:-J),
   K is L+M.


bottom_key(A,B,C,D) :-
   ( var(A),
     var(B)
   ->
     '$aleph_sat'(example,example(A,B))
   ;
     true
   ),
   ( setting(store_bottom,true)
   ->
     ( '$aleph_sat'(stored,stored(A,B,C))
     ->
       D=false
     ;
       concat([B,'_',A],C),
       D=true
     )
   ;
     C=false,
     D=false
   ).


randclause(1,B,legal,[1]) :-
   !,
   bottom_key(_,_,A,_),
   ( A=false
   ->
     get_pclause([1],[],B,_,_,_)
   ;
     get_pclause([1],A,[],B,_,_,_)
   ).
randclause(B,E,A,F) :-
   A==legal,
   '$aleph_sat'(example,example(C,D)),
   retract(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F))).
randclause(D,H,A,F) :-
   A==legal,
   !,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat_litinfo'(1,_,_,_,_,C)
   ;
     '$aleph_sat_litinfo'(1,B,_,_,_,_,C)
   ),
   E is D-1,
   repeat,
   randselect1(E,B,C,[1],G),
   F=[1|G],
   clause_status(F,B,[],legal,legal),
   !,
   ( B=false
   ->
     get_pclause(F,[],H,_,_,_)
   ;
     get_pclause(F,B,[],H,_,_,_)
   ).
randclause(A,I,H,F) :-
   D is A-1,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat'(lastlit,C)
   ;
     '$aleph_sat'(lastlit,B,C)
   ),
   repeat,
   randselect(D,C,B,[],E),
   aleph_append(E,[1],F),
   clause_status(F,B,[],legal,G),
   G=H,
   !,
   ( B=false
   ->
     get_pclause(F,[],I,_,_,_)
   ;
     get_pclause(F,B,[],I,_,_,_)
   ).


randclause_wo_repl(A,B,C,D,E) :-
   A>0,
   randclause(B,C,D,E),
   \+prune(C),
   split_clause(C,G,H),
   ( setting(language,F)
   ->
     lang_ok(F,G,H)
   ;
     true
   ),
   ( setting(newvars,I)
   ->
     newvars_ok(I,G,H)
   ;
     true
   ),
   \+'$aleph_sat'(random,rselect(E)),
   !,
   asserta(user:'$aleph_sat'(random,rselect(E))).
randclause_wo_repl(A,C,D,E,F) :-
   A>0,
   B is A-1,
   randclause_wo_repl(B,C,D,E,F),
   !.
randclause_wo_repl(_,1,A,B,C) :-
   randclause(1,A,B,C).


count_clause_status1([],_,0,0) :-
   !.
count_clause_status1([C/_|A],B,D,F) :-
   count_clause_status1(A,B,E,G),
   ( B==C
   ->
     D is E+1,
     F is G
   ;
     D is E,
     F is G+1
   ).


print_distribution :-
   write('Clause Length'),
   tab(8),
   write('Estimated number of clauses'),
   nl,
   write('_____________'),
   tab(8),
   write('___________________________'),
   nl,
   prolog:findall(A-B,'$aleph_sat'(random,number_of_clauses(A,B)),C),
   sort(C,D),
   aleph_member(A-B,D),
   write(A),
   tab(20),
   write(B),
   nl,
   fail.
print_distribution :-
   nl,
   write('Estimated size of hypothesis space = '),
   ( '$aleph_sat'(random,hypothesis_space(A))
   ->
     true
   ;
     A=0
   ),
   write(A),
   write(' clauses'),
   nl.


store_legal_clauses([],_,_,_).
store_legal_clauses([A/[E,F] |G],B,C,D) :-
   ( A==legal
   ->
     asserta(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F)))
   ;
     true
   ),
   store_legal_clauses(G,B,C,D).


count_clause_status(_,A,_,0) :-
   var(A),
   !.
count_clause_status(A,B,C,D) :-
   count_clause_status1(A,B,C,D).


get_random_wo_repl(0,_,[]) :-
   !.
get_random_wo_repl(E,A,[C/[B,D] |G]) :-
   randclause_wo_repl(A,B,C,D),
   !,
   F is E-1,
   get_random_wo_repl(F,A,G).
get_random_wo_repl(_,_,[]).


total_clauses(1,_,1) :-
   !.
total_clauses(A,B,E) :-
   C is A-1,
   D is B-1,
   total_clauses(C,D,F),
   E is F*D.


estimate_proportion(0,_,_,0,[]) :-
   !.
estimate_proportion(B,A,D,F,C) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   retractall(user:'$aleph_sat'(random,rselect_legal(A,_,_,_,_))),
   get_random_wo_repl(B,A,C),
   length(C,E),
   count_clause_status(C,D,G,_),
   ( E=0
   ->
     F=0
   ;
     F is G/E
   ),
   '$aleph_sat'(example,example(H,I)),
   retractall(user:'$aleph_sat'(random,rselect(_))),
   store_legal_clauses(C,A,H,I).


estimate_number(1,_,1) :-
   !.
estimate_number(B,A,D) :-
   estimate_proportion(A,B,legal,E,_),
   '$aleph_sat'(lastlit,C),
   total_clauses(B,C,F),
   D is float(E*F).


estimate_number(1,B,D,A,C) :-
   !,
   estimate_number(A,B,E),
   C is D+E.
estimate_number(E,B,C,A,H) :-
   p_message('New Trial'),
   estimate_number(A,B,D),
   G is C+D,
   F is E-1,
   estimate_number(F,B,G,A,H).


estimate_number(_,_,B,0) :-
   '$aleph_sat'(lastlit,A),
   A<B,
   !.
estimate_number(A,C,B,D) :-
   A>0,
   p1_message('Estimate legal clauses with length'),
   p_message(B),
   estimate_number(A,C,0,B,E),
   D is float(E/A),
   concat(['trials=',A,' sample=',C,' estimate=',D],F),
   p_message(F).


estimate_numbers(0,_,_,A,A) :-
   !.
estimate_numbers(A,B,C,E,H) :-
   retractall(user:'$aleph_sat'(random,number_of_clauses(A,_))),
   estimate_number(B,C,A,D),
   asserta(user:'$aleph_sat'(random,number_of_clauses(A,D))),
   F is A-1,
   G is D+E,
   estimate_numbers(F,B,C,G,H).


count_frequency([],_,0).
count_frequency([C|A],B,D) :-
   count_frequency(A,B,E),
   ( C=_-B
   ->
     D is E+1
   ;
     D is E
   ).


select_good_clauses([],_,A,B,A,B,[]) :-
   !.
select_good_clauses([A-E|C],A,B,F,G,H,I) :-
   !,
   D is B-1,
   select_good_clauses(C,A,D,[A-E|F],G,H,I).
select_good_clauses(C,_,A,B,A,B,C).


select_good_clauses([],_,A,A) :-
   !.
select_good_clauses(_,B,A,A) :-
   B=<0,
   !.
select_good_clauses([B-D|A],C,E,J) :-
   select_good_clauses(A,B,C,[B-D|E],F,I,G),
   H is F-1,
   select_good_clauses(G,H,I,J).


extract_count(pos,[A,_,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,[_,A,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,_,0).


label_create(C,F) :-
   '$aleph_global'(last_example,last_example(pos,E)),
   D=pos,
   ( setting(evalfn,posonly)
   ->
     '$aleph_global'(last_example,last_example(rand,A)),
     B=rand
   ;
     '$aleph_global'(last_example,last_example(neg,A)),
     B=neg
   ),
   label_create(C,D,[1-E],B,[1-A],F).


estimate_scores([],_,A,A) :-
   !.
estimate_scores([F-[_,_,_,A] |G],C,I,J) :-
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   complete_label(C,A,[D,E,F],[_,_,_,H|_]),
   estimate_scores(G,C,[-H-F|I],J).


normalise_distribution(A,C) :-
   key_sum(A,B),
   ( 0 is float(B)
   ->
     C=A
   ;
     normalise_distribution(A,B,D),
     keysort(D,C)
   ).


estimate_frequency(0,_,[]).
estimate_frequency(A,B,[C-A|E]) :-
   count_frequency(B,A,C),
   D is A-1,
   estimate_frequency(D,B,E).


select_good_clauses(A,C,F) :-
   keysort(A,B),
   length(B,D),
   E is integer(C*D/100),
   select_good_clauses(B,E,[],F).


estimate_clauselength_scores(0,_,_,A,A) :-
   !.
estimate_clauselength_scores(A,B,D,E,H) :-
   set(clauselength_distribution,[1-A]),
   p1_message('Estimate scores of clauses with length'),
   p_message(A),
   sample_clauses(B,C),
   estimate_scores(C,D,E,G),
   F is A-1,
   estimate_clauselength_scores(F,B,D,G,H).


randclause_wo_repl(A,B,C,D) :-
   randclause_wo_repl(100,A,B,C,D).


draw_legalclause_wo_repl(A,B,C,D) :-
   A=<B,
   randclause_wo_repl(A,C,legal,D),
   !.
draw_legalclause_wo_repl(A,B,D,E) :-
   A<B,
   C is A+1,
   draw_legalclause_wo_repl(C,B,D,E).


num_to_length(A,_,1) :-
   A=< 1,
   !.
num_to_length(B,A,C) :-
   num_to_length1(2,A,B,1,C).


get_rrandom(C,A) :-
   aleph_random(B),
   A is B*C.


draw_element(A,D) :-
   normalise_distribution(A,B),
   aleph_random(C),
   draw_element(B,0,C,D).


random_select(A,[A],[]) :-
   !.
random_select(D,A,E) :-
   length(A,B),
   B>0,
   get_random(B,C),
   aleph_remove_nth(C,A,D,E).


sample_clause_using_modes(C,D,E) :-
   prolog:findall(A,auto_refine(false,A),B),
   B\= ([]),
   random_select(F,B,_),
   draw_element(C,D),
   ( D=1
   ->
     E=F
   ;
     G is D-1,
     sample_clause_using_modes(G,F,E)
   ).
sample_clause_using_modes(D,A,E) :-
   prolog:findall(B,auto_refine(A,B),C),
   C\= ([]),
   !,
   ( D=1
   ->
     random_select(E,C,_)
   ;
     random_select(G,C,_),
     F is D-1,
     sample_clause_using_modes(F,G,E)
   ).
sample_clause_using_modes(_,A,A).


legal_clause_using_modes(A,B,C-[0,0,[],D]) :-
   A>0,
   sample_clause_using_modes(B,C,D),
   \+prune(D),
   split_clause(D,F,G),
   ( setting(language,E)
   ->
     lang_ok(E,F,G)
   ;
     true
   ),
   ( setting(newvars,H)
   ->
     newvars_ok(H,F,G)
   ;
     true
   ),
   !.
legal_clause_using_modes(A,C,D) :-
   A>1,
   B is A-1,
   legal_clause_using_modes(B,C,D),
   !.
legal_clause_using_modes(_,_,1-[0,0,[],A]) :-
   sample_clause_using_modes([1-1],1,A).


get_clause_sample(0,_,_,[]) :-
   !.
get_clause_sample(J,A,C,[D-[H,I,G,F] |L]) :-
   ( number(A)
   ->
     get_rrandom(A,B),
     num_to_length(B,C,D),
     E is C
   ;
     draw_element(A,D),
     E is D
   ),
   draw_legalclause_wo_repl(D,E,F,G),
   !,
   '$aleph_sat'(example,example(H,I)),
   K is J-1,
   get_clause_sample(K,A,C,L).
get_clause_sample(A,C,D,E) :-
   B is A-1,
   get_clause_sample(B,C,D,E).


estimate_numbers(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,sample(A,B,C,D,E)),
   '$aleph_sat'(random,hypothesis_space(F)),
   !.
estimate_numbers(A,B,C,D) :-
   retractall(user:'$aleph_sat'(random,sample(_,_,_,_,_))),
   retractall(user:'$aleph_sat'(random,hypothesis_space(_))),
   estimate_numbers(A,B,C,0,D),
   asserta(user:'$aleph_sat'(random,hypothesis_space(D))),
   '$aleph_sat'(example,example(E,F)),
   asserta(user:'$aleph_sat'(random,sample(E,F,A,B,C))).


remove_alpha_variants([],[]).
remove_alpha_variants([B|A],D) :-
   aleph_member(C,A),
   alphabetic_variant(B,C),
   !,
   remove_alpha_variants(A,D).
remove_alpha_variants([A|B],[A|C]) :-
   remove_alpha_variants(B,C).


sample_nclauses_using_modes(0,_,[]) :-
   !.
sample_nclauses_using_modes(C,A,[B|E]) :-
   legal_clause_using_modes(100,A,B),
   D is C-1,
   sample_nclauses_using_modes(D,A,E).


distrib(A-B,_,[]) :-
   A>B,
   !.
distrib(B-D,A,[A-B|E]) :-
   C is B+1,
   distrib(C-D,A,E).


sample_nclauses(false,D,G) :-
   !,
   gen_auto_refine,
   ( setting(clauselength_distribution,C)
   ->
     true
   ;
     setting(clauselength,A),
     B is  1/A,
     distrib(1-A,B,C)
   ),
   sample_nclauses_using_modes(D,C,E),
   remove_alpha_variants(E,F),
   keysort(F,G).
sample_nclauses(_,A,F) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,B),
   ( setting(clauselength_distribution,C)
   ->
     D is A
   ;
     estimate_numbers(B,1,400,C),
     ( A>C
     ->
       D is C
     ;
       D is A
     )
   ),
   get_clause_sample(D,C,B,E),
   keysort(E,F).


sample_clauses(B,C) :-
   setting(construct_bottom,A),
   sample_nclauses(A,B,C).


grounding_equality(+A= #A) :-
   '$aleph_search'(modes,typemapped(B,_,B)),
   concat([type,B],A).


pairwise_equality(+D= +E) :-
   '$aleph_search'(modes,typemapped(_,A,B)),
   '$aleph_search'(modes,typemapped(A,_,C)),
   B\==C,
   concat([type,B],D),
   concat([type,C],E).


infer_mode1([],_,_,_,[]).
infer_mode1([B|J],D,I,A,[G|K]) :-
   best_overlap(A,B,E,C),
   ( C>=D
   ->
     '$aleph_search'(modes,typemapped(E,_,F)),
     asserta(user:'$aleph_search'(modes,typemapped(B,E,F))),
     concat([type,F],H),
     G= +H
   ;
     ( C> 0
     ->
       asserta(user:'$aleph_search'(modes,typemapped(B,E,B)))
     ;
       asserta(user:'$aleph_search'(modes,typemapped(B,B,B)))
     ),
     concat([type,B],H),
     ( I=head
     ->
       G= +H
     ;
       G= -H
     )
   ),
   infer_mode1(J,D,I,A,K).


type_overlap(A,B,C) :-
   A>B,
   !,
   ( '$aleph_search'(modes,typeoverlap(B,A,_,C))
   ->
     true
   ;
     C= 0
   ).
type_overlap(A,B,C) :-
   ( '$aleph_search'(modes,typeoverlap(A,B,C,_))
   ->
     true
   ;
     C= 0
   ).


estimate_forward1([],_,_,0).
estimate_forward1([A|F],D,B,G) :-
   type_overlap(A,B,C),
   ( C>=D
   ->
     E is  1
   ;
     E is  0
   ),
   estimate_forward1(F,D,B,H),
   G is E+H.


best_overlap([A],B,A,C) :-
   !,
   type_overlap(B,A,C).
best_overlap([B|C],A,G,F) :-
   type_overlap(A,B,E),
   best_overlap(C,A,H,D),
   ( D>E
   ->
     F is D,
     G=H
   ;
     F is E,
     G=B
   ).
best_overlap([],A,A,0).


estimate_forward([],_,_,0).
estimate_forward([C|D],B,A,E) :-
   estimate_forward1(A,B,C,F),
   estimate_forward(D,B,A,G),
   E is F+G.


evaluate_backward([],_,_,0).
evaluate_backward([B|F],D,A,G) :-
   best_overlap(A,B,_,C),
   ( C>=D
   ->
     E= 1
   ;
     E= 0
   ),
   evaluate_backward(F,D,A,H),
   G is E+H.


score_modes([],_,_,_,[]).
score_modes([A|M],C,D,E,[K-A|N]) :-
   A=..[_|B],
   evaluate_backward(B,C,D,L),
   aleph_delete_list(B,E,F),
   estimate_forward(D,C,F,H),
   estimate_forward(B,C,F,G),
   I is G-H,
   ( I<0
   ->
     J is 0
   ;
     J is I
   ),
   K is- (L+J),
   score_modes(M,C,D,E,N).


infer_ordered_modes([],_,_,_,_,[]) :-
   !.
infer_ordered_modes(A,B,G,C,D,[H|L]) :-
   score_modes(A,B,C,D,E),
   keysort(E,[_-F|_]),
   infer_mode(F,B,G,C,H,I),
   aleph_delete(F,A,J),
   aleph_delete_list(I,D,K),
   infer_ordered_modes(J,B,G,I,K,L).


infer_mode(A,C,D,E,I,K) :-
   A=..[F|B],
   infer_mode1(B,C,D,E,G),
   J=..[F|G],
   length(B,H),
   ( '$aleph_global'(targetpred,targetpred(F/H))
   ->
     I=modeh(*,J)
   ;
     I=mode(*,J)
   ),
   aleph_ord_union(E,B,K).


aleph_ord_intersection(_,[],[]) :-
   !.
aleph_ord_intersection([],_,[]) :-
   !.
aleph_ord_intersection([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_intersection(C,A,D,B,E,F).


store_type_overlaps([],_,_,_).
store_type_overlaps([A|K],H,C,F) :-
   '$aleph_search'(modes,type(A,G,B)),
   aleph_ord_intersection(B,C,D),
   length(D,E),
   I is E/F,
   J is E/G,
   asserta(user:'$aleph_search'(modes,typeoverlap(H,A,I,J))),
   store_type_overlaps(K,H,C,F).


store_type_equivalence([],_,_).
store_type_equivalence([A|B],E,F) :-
   retract(user:'$aleph_search'(modes,type(A,D,C))),
   store_type_overlaps(B,A,C,D),
   asserta(user:'$aleph_search'(modes,type(A,E,F,D,C))),
   store_type_equivalence(B,E,F).


class_equivalent(A,B) :-
   aleph_member(C,A),
   type_equivalent(B,C),
   !.


type_equivalent([A|_],B) :-
   '$aleph_search'(modes,type(A,_,C)),
   '$aleph_search'(modes,type(B,_,D)),
   intersects(C,D),
   !.
type_equivalent([_|A],B) :-
   type_equivalent(A,B).


get_type_equivalence([],A,B,[]) :-
   sort(A,B).
get_type_equivalence([B|C],A,D,E) :-
   type_equivalent(A,B),
   !,
   get_type_equivalence(C,[B|A],D,E).
get_type_equivalence([A|B],C,D,[A|E]) :-
   get_type_equivalence(B,C,D,E).


get_type_elements(B,D,F,A) :-
   aleph_member(C,A),
   prolog:findall(E,(call(user:B),ground(B),arg(C,D,E)),G),
   arg(C,F,H),
   sort(G,I),
   ( retract(user:'$aleph_search'(modes,type(H,_,J)))
   ->
     aleph_ord_union(I,J,K)
   ;
     K=I
   ),
   length(K,L),
   asserta(user:'$aleph_search'(modes,type(H,L,K))),
   fail.
get_type_elements(_,_,_,_).


number_types(0,_,_) :-
   !.
number_types(A,C,B) :-
   arg(A,B,C),
   D is A-1,
   E is C-1,
   number_types(D,E,B).


add_inferred_modes([],_).
add_inferred_modes([A|C],B) :-
   write(A),
   nl,
   ( B=true
   ->
     call(user:A)
   ;
     true
   ),
   add_inferred_modes(C,B).


infer_negations([],[]).
infer_negations([mode(_,A) |C],D) :-
   A=..[_|B],
   aleph_member1(-_,B),
   !,
   infer_negations(C,D).
infer_negations([mode(_,A) |B],[mode(1,not A) |C]) :-
   infer_negations(B,C).


infer_equalities(C) :-
   prolog:findall(mode(1,A),(pairwise_equality(A);grounding_equality(A)),B),
   sort(B,C).


infer_modes([A|F],B,E,[C|H]) :-
   infer_mode(A,B,head,[],C,D),
   aleph_delete_list(D,E,G),
   infer_ordered_modes(F,B,body,D,G,H).


store_type_equivalences([]).
store_type_equivalences([[A|B] |D]) :-
   length([A|B],C),
   store_type_equivalence([A|B],A,C),
   store_type_equivalences(D).


merge_equivalence_classes([A],[A]) :-
   !.
merge_equivalence_classes(A,G) :-
   aleph_delete(C,A,B),
   aleph_delete(D,B,F),
   class_equivalent(C,D),
   !,
   aleph_ord_union(C,D,E),
   merge_equivalence_classes([E|F],G).
merge_equivalence_classes(A,A).


get_type_equivalences([],[]).
get_type_equivalences([B|A],[C|E]) :-
   get_type_equivalence(A,[B],C,D),
   get_type_equivalences(D,E).


interval_to_list(A-B,[]) :-
   A>B,
   !.
interval_to_list(A-C,[A|D]) :-
   B is A+1,
   interval_to_list(B-C,D).


get_type_elements([]).
get_type_elements([A|F]) :-
   functor(A,B,C),
   functor(D,B,C),
   interval_to_list(1-C,E),
   get_type_elements(example(_,_,D),D,A,E),
   get_type_elements(D,D,A,E),
   get_type_elements(F).


number_types([],A,[],A).
number_types([B/C|F],D,[A|G],H) :-
   functor(A,B,C),
   E is D+C,
   number_types(C,E,A),
   number_types(F,E,G,H).


in((A,B),A,B).
in((A,B),C,(A,D)) :-
   !,
   in(B,C,D).
in(A,A,true).


tautology((false:-A)) :-
   !,
   in(A,C,B),
   in(B,not D),
   C==D.
tautology((B:-A)) :-
   in(A,C),
   B==C,
   !.


aleph_mode_linked([],_) :-
   !.
aleph_mode_linked([A|C],B) :-
   '$aleph_link_vars'(A,B),
   aleph_append([A],B,D),
   aleph_mode_linked(C,D).


aleph_get_lit(B,[A|E]) :-
   functor(A,C,D),
   aleph_get_lit(B,C/D),
   '$aleph_link_vars'(B,[A|E]),
   \+aleph_member2(B,[A|E]).
aleph_get_lit(B,A) :-
   '$aleph_determination'(A,B).


aleph_get_hlit(B/C,A) :-
   functor(A,B,C),
   find_mode(modeh,B/C,D),
   once(split_args(D,D,_,_,E)),
   copy_modeterms(D,A,C),
   get_c_links(E,A,true,F),
   call(user:F).


aleph_member2(A,[B|_]) :-
   A==B,
   !.
aleph_member2(A,[_|B]) :-
   aleph_member2(A,B).


inconsistent_vartypes([B/D|_],A) :-
   aleph_member(C/E,A),
   B==C,
   D\==E,
   !.
inconsistent_vartypes([_|A],B) :-
   inconsistent_vartypes(A,B).


consistent_vartypes([],_).
consistent_vartypes([A/B|D],C) :-
   aleph_member2(A/B,C),
   consistent_vartypes(D,C).


bvar_types([],A,A).
bvar_types([A|E],C,G) :-
   '$aleph_has_vars'(A,B,D),
   consistent_vartypes(B,C),
   \+inconsistent_vartypes(D,C),
   aleph_append(D,C,F),
   bvar_types(E,F,G).


hvar_types(A,D) :-
   '$aleph_has_vars'(A,B,C),
   aleph_append(B,C,D).


var_types([A|B],F) :-
   hvar_types(A,C),
   bvar_types(B,C,D),
   aleph_append(D,C,E),
   sort(E,F).


aleph_output_var(B,C,A,E) :-
   '$aleph_has_ovar'(A,B,C,D),
   D@<E.


aleph_output_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.
aleph_output_var(_,_,_).


aleph_input_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.


prefix_lits(A,true,A) :-
   !.
prefix_lits(A,B,(A,B)).


get_var_types([],_,[]).
get_var_types([B/A|E],C,[D/A|F]) :-
   tparg(B,C,D),
   get_var_types(E,C,F).


get_c_links([],_,A,A).
get_c_links([A/C|I],B,H,K) :-
   tparg(A,B,E),
   D=..[C,F],
   G= (D,E=F),
   prefix_lits(G,H,J),
   get_c_links(I,B,J,K).


get_i_links([],_,_,A,A).
get_i_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F=aleph_input_var(C,D,E),
   prefix_lits(F,G,I),
   get_i_links(H,B,E,I,J).


get_o_links([],_,_,A,A).
get_o_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F= (aleph_output_var(C,D,E);aleph_output_var(C,D,B,A)),
   prefix_lits(F,G,I),
   get_o_links(H,B,E,I,J).


add_ioc_links(A,E,C,G) :-
   J= ('$aleph_link_vars'(A,B):-var_types(B,D),I),
   get_o_links(C,A,D,true,F),
   get_i_links(E,A,D,F,H),
   get_c_links(G,A,H,I),
   assert(user:J).


add_vars(B,A,C) :-
   get_var_types(A,B,D),
   get_var_types(C,B,E),
   ( '$aleph_has_vars'(B,D,E)
   ->
     true
   ;
     assert(user:'$aleph_has_vars'(B,D,E))
   ).


add_ovars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ovar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ovar'(C,D,E,B))
   ),
   fail.
add_ovars(_,_).


add_ivars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ivar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ivar'(C,D,E,B))
   ),
   fail.
add_ivars(_,_).


process_mode(A) :-
   functor(A,B,C),
   split_args(A,A,E,F,G),
   functor(D,B,C),
   copy_modeterms(A,D,C),
   add_ioc_links(D,E,F,G),
   add_ovars(D,F),
   add_vars(D,E,F).


process_determs :-
   once(aleph_abolish('$aleph_determination'/2)),
   '$aleph_global'(determination,determination(E/F,A/B)),
   functor(D,A,B),
   find_mode(modeb,A/B,C),
   copy_modeterms(C,D,B),
   G='$aleph_determination'(E/F,D),
   ( call(user:G)
   ->
     true
   ;
     assert(user:G)
   ),
   fail.
process_determs.


process_modes :-
   once(aleph_abolish('$aleph_link_vars'/2)),
   once(aleph_abolish('$aleph_has_vars'/3)),
   once(aleph_abolish('$aleph_has_ovar'/4)),
   once(aleph_abolish('$aleph_has_ivar'/4)),
   '$aleph_global'(modeb,modeb(_,A)),
   process_mode(A),
   fail.
process_modes :-
   '$aleph_global'(determination,determination(A/B,_)),
   find_mode(modeh,A/B,C),
   split_args(C,C,E,F,_),
   functor(D,A,B),
   copy_modeterms(C,D,B),
   add_ivars(D,E),
   add_ovars(D,F),
   add_vars(D,E,F),
   fail.
process_modes.


gen_auto_refine :-
   ( setting(autorefine,true)
   ->
     true
   ;
     set(autorefine,true),
     process_modes,
     process_determs
   ),
   !.
gen_auto_refine.


has_good_clause_hook(B,C,D) :-
   setting(good_clause_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.
has_good_clause_hook(_,_,_).


execute(A) :-
   system(A),
   !.
execute(_).


find_count(A,C) :-
   copy_term(A,B),
   '$aleph_global'(slp_count,B,C),
   !.
find_count(_,1).


renormalise([],_,[]).
renormalise([C/A|E],D,[B/A|F]) :-
   B is C/D,
   renormalise(E,D,F).


sum_counts([],0).
sum_counts([C/_|A],B) :-
   sum_counts(A,D),
   B is C+D.


inc_count(A) :-
   retract(user:'$aleph_global'(slp_count,A,B)),
   !,
   C is B+1,
   asserta(user:'$aleph_global'(slp_count,A,C)).
inc_count(A) :-
   asserta(user:'$aleph_global'(slp_count,A,2)).


rselect_clause(B,[C/A|_],A) :-
   B=<C,
   !.
rselect_clause(A,[B/_|D],E) :-
   C is A-B,
   rselect_clause(C,D,E).


renormalise(A,C) :-
   sum_counts(A,B),
   B>0,
   renormalise(A,B,C).


update_gsample(A/B,_) :-
   functor(E,A,B),
   make_sname(A,C),
   functor(D,C,B),
   retractall(user:'$aleph_global'(gsample,gsample(_))),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   D=..[_|F],
   E=..[_|F],
   prolog:clause(user:D,G),
   ground((D:-G)),
   record_example(check,rand,(E:-G),H),
   retract(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   fail.
update_gsample(_,A) :-
   '$aleph_local'(slp_samplenum,A),
   A>0,
   !,
   retract(user:'$aleph_local'(slp_samplenum,A)),
   set(gsamplesize,A),
   retract(user:'$aleph_global'(atoms,atoms(rand,_))),
   retract(user:'$aleph_global'(atoms_left,atoms_left(rand,_))),
   retract(user:'$aleph_global'(last_example,last_example(rand,_))),
   assert(user:'$aleph_global'(atoms,atoms(rand,[1-A]))),
   assert(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-A]))),
   assert(user:'$aleph_global'(last_example,last_example(rand,A))).
update_gsample(_,_).


gsample(A/C,_) :-
   make_sname(A,B),
   functor(D,B,C),
   prolog:clause(user:D,E),
   ground((D:-E)),
   !,
   update_gsample(A/C,_).
gsample(_,0) :-
   !.
gsample(A/B,I) :-
   functor(D,A,B),
   make_sname(A,C),
   functor(E,C,B),
   D=..[_|F],
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   repeat,
   slprove(stochastic,E),
   E=..[_|F],
   retract(user:'$aleph_local'(slp_samplenum,G)),
   H is G+1,
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   assertz(user:example(H,rand,D)),
   H>=I,
   !,
   retract(user:'$aleph_local'(slp_samplenum,H)),
   asserta(user:'$aleph_global'(size,size(rand,I))),
   asserta(user:'$aleph_global'(last_example,last_example(rand,I))),
   asserta(user:'$aleph_global'(atoms,atoms(rand,[1-I]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-I]))).


sample(_,0,[]) :-
   !.
sample(A/B,F,H) :-
   functor(C,A,B),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   asserta(user:'$aleph_local'(slp_samplenum,1)),
   repeat,
   slprove(stochastic,C),
   asserta(user:'$aleph_local'(slp_sample,C)),
   retract(user:'$aleph_local'(slp_samplenum,D)),
   E is D+1,
   asserta(user:'$aleph_local'(slp_samplenum,E)),
   E>F,
   !,
   retract(user:'$aleph_local'(slp_samplenum,E)),
   functor(G,A,B),
   prolog:findall(G,retract(user:'$aleph_local'(slp_sample,G)),H).


slprove(_,true) :-
   !.
slprove(A,not B) :-
   slprove(A,B),
   !,
   fail.
slprove(A,(B,C)) :-
   !,
   slprove(A,B),
   slprove(A,C).
slprove(A,(B;C)) :-
   (
     !,
     slprove(A,B)
   ;
     slprove(A,C)
   ).
slprove(_,A) :-
   prolog:predicate_property(user:A,built_in),
   !,
   call(user:A).
slprove(stochastic,A) :-
   prolog:findall(D/B,(prolog:clause(user:A,C),B= (A:-C),find_count(B,D)),E),
   renormalise(E,G),
   aleph_random(F),
   rselect_clause(F,G,(A:-C)),
   slprove(stochastic,C).
slprove(condition,A) :-
   functor(A,B,C),
   functor(D,B,C),
   prolog:clause(user:D,E),
   \+ \+ (D=A,slprove(condition,E)),
   inc_count((D:-E)).


range_restrict([],_,A,A).
range_restrict([B/A|F],C,G,H) :-
   functor(D,A,1),
   tparg(B,C,E),
   arg(1,D,E),
   range_restrict(F,C,[D|G],H).


add_generator(A/C) :-
   make_sname(A,B),
   functor(E,B,C),
   find_mode(modeh,A/C,D),
   once(copy_modeterms(D,E,C)),
   split_args(D,D,F,G,I),
   range_restrict(F,E,[],H),
   range_restrict(G,E,H,J),
   range_restrict(I,E,J,K),
   list_to_goals(K,L),
   \+prolog:clause(user:E,L),
   asserta(user: (E:-L)),
   fail.
add_generator(_).


condition(A) :-
   slprove(condition,A),
   !.
condition(_).


make_sname(A,B) :-
   concat([*,A],B).


add_generator :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   make_sname(B,C),
   functor(E,C,D),
   ( prolog:clause(user:E,_)
   ->
     true
   ;
     add_generator(B/D),
     p1_message('included generator'),
     p_message(C/D)
   ),
   fail.
add_generator.


condition_target :-
   '$aleph_global'(condition,set(condition,true)),
   add_generator,
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   p_message(conditioning),
   make_sname(B,C),
   functor(E,C,D),
   E=..[_|G],
   functor(F,B,D),
   example(_,_,F),
   F=..[_|G],
   condition(E),
   fail.
condition_target :-
   \+'$aleph_global'(condition,set(condition,true)),
   add_generator,
   !.
condition_target.


lazy_index_prove1(B,E,C,D,A) :-
   depth_bound_call((example(A,B,C),D)),
   \+'$aleph_local'(lazy_evaluate,eval(B,E)),
   asserta(user:'$aleph_local'(lazy_evaluate,eval(B,E))),
   fail.
lazy_index_prove1(_,_,_,_,_).


lazy_index_prove(A-B,_,_,_,_) :-
   A>B,
   !.
lazy_index_prove(E-G,A,B,C,D) :-
   lazy_index_prove1(A,B,C,D,E),
   F is E+1,
   lazy_index_prove(F-G,A,B,C,D).


lazy_prove([],_,_,_,_).
lazy_prove([A|F],B,C,D,E) :-
   lazy_index_prove(A,B,C,D,E),
   lazy_prove(F,B,C,D,E).


copy_modeterm(A,D) :-
   functor(A,B,C),
   find_mode(mode,B/C,E),
   functor(D,B,C),
   copy_modeterms(E,D,C),
   \+ \+A=D.


copy_consts(_,_,0) :-
   !.
copy_consts(B,C,A) :-
   arg(A,B,E),
   arg(A,C,D),
   var(D),
   !,
   D=aleph_const(E),
   F is A-1,
   copy_consts(B,C,F).
copy_consts(B,C,A) :-
   D is A-1,
   copy_consts(B,C,D).


evaluate(A,_,D,F,G,H) :-
   functor(A,B,C),
   functor(E,B,C),
   call(user:D),
   copy_args(A,E,F),
   copy_args(A,E,G),
   copy_consts(D,E,C),
   update_lit(I,false,E,F,G,H),
   \+'$aleph_local'(lazy_evaluated,I),
   asserta(user:'$aleph_local'(lazy_evaluated,I)),
   !.
evaluate(_,_,_,_,_,_).


call_library_pred(A,D,E,F,G,H) :-
   functor(A,B,C),
   '$aleph_global'(lazy_recall,lazy_recall(B/C,K)),
   asserta(user:'$aleph_local'(callno,1)),
   p1_message('lazy evaluation'),
   p_message(B),
   repeat,
   evaluate(A,D,E,F,G,H),
   retract(user:'$aleph_local'(callno,I)),
   J is I+1,
   asserta(user:'$aleph_local'(callno,J)),
   J>K,
   !,
   p_message(completed),
   retract(user:'$aleph_local'(callno,J)).


copy_io_args([],_,_,_).
copy_io_args([B|E],A,C,D) :-
   copy_args(A,B,C),
   copy_args(A,B,D),
   copy_io_args(E,A,C,D).


lazy_evaluate1(false,A,_,H,I,F,_,E,G) :-
   functor(A,B,C),
   p1_message('lazy evaluation'),
   p_message(B),
   functor(D,B,C),
   prolog:findall(D,(call(user:E),copy_args(E,D,F)),G),
   copy_io_args(G,A,H,I).
lazy_evaluate1(true,A,B,D,E,_,F,C,H) :-
   call_library_pred(A,B,C,D,E,F),
   prolog:findall(G,retract(user:'$aleph_local'(lazy_evaluated,G)),H).


collect_args([],_).
collect_args([A/_|G],D) :-
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(pos,B)),tparg(A,B,C)),E),
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(neg,B)),tparg(A,B,C)),F),
   tparg(A,D,[E,F]),
   collect_args(G,D).


lazy_prove_negs(A,B,_) :-
   '$aleph_global'(lazy_negs,set(lazy_negs,true)),
   !,
   '$aleph_global'(atoms,atoms(neg,C)),
   lazy_prove(neg,A,B,C).
lazy_prove_negs(A,B,C) :-
   lazy_prove(neg,A,B,C).


lazy_prove(C,D,A,B) :-
   ( A= (E:-F)
   ->
     lazy_prove(B,C,D,E,F)
   ;
     lazy_prove(B,C,D,A,true)
   ).


goals_to_clause((A,B),(A:-B)) :-
   !.
goals_to_clause(A,A).


lazy_evaluate_refinement([],_,A,_,_,A) :-
   !.
lazy_evaluate_refinement([A|G],B,C,D,E,I) :-
   lazy_evaluate([A],B,C,D,E,[F]),
   aleph_append([F],C,H),
   !,
   lazy_evaluate_refinement(G,B,H,D,E,I).


clause_to_list((A:-true),[A]) :-
   !.
clause_to_list((A:-B),[A|C]) :-
   !,
   goals_to_list(B,C).
clause_to_list(A,[A]).


skippable(A) :-
   functor(A,B,C),
   '$aleph_global'(abducible,abducible(B/C)).


soldnf_clause(A,_) :-
   soldnf_builtin(A),
   !,
   fail.
soldnf_clause(A,B) :-
   prolog:clause(user:A,B).


soldnfcall(A,true) :-
   call(user:A),
   !.
soldnfcall(_,false).


soldnf_builtin(not  _) :-
   !,
   fail.
soldnf_builtin(A) :-
   prolog:predicate_property(user:A,built_in).


conj_status(true,true,true) :-
   !.
conj_status(_,_,false).


soldnf_solve((A,C),H,B,E) :-
   !,
   soldnf_solve(A,F,B,D),
   soldnf_solve(C,G,D,E),
   conj_status(F,G,H).
soldnf_solve(not A,true,B,C) :-
   soldnf_solve(A,false,B,C).
soldnf_solve(not A,false,B,C) :-
   !,
   soldnf_solve(A,true,B,C).
soldnf_solve(B,C,A,A) :-
   soldnf_builtin(B),
   !,
   soldnfcall(B,C).
soldnf_solve(A,C,D,E) :-
   soldnf_clause(A,B),
   soldnf_solve(B,C,D,E).
soldnf_solve(A,true,B,[A|B]) :-
   skippable(A).


soldnf_solve(A,B) :-
   soldnf_solve(A,true,[],B).


remove_explained([],_,[]).
remove_explained([A|D],(B:-C),E) :-
   \+ \+ (A=B,call(user:C)),
   !,
   remove_explained(D,(B:-C),E).
remove_explained([A|B],(C:-D),[A|E]) :-
   remove_explained(B,(C:-D),E).


remove_abduced_atoms([]).
remove_abduced_atoms([A|B]) :-
   retract(user:'$aleph_search'(abduced,pclause(A,true))),
   remove_abduced_atoms(B).


erase_refs([]).
erase_refs([A|B]) :-
   erase(A),
   erase_refs(B).


gen_abduced_atoms([],[]).
gen_abduced_atoms([A|E],[D|G]) :-
   functor(A,B,C),
   add_determinations(B/C,true),
   sat(A),
   reduce,
   '$aleph_global'(hypothesis,hypothesis(_,D,_,_)),
   remove_explained(E,D,F),
   gen_abduced_atoms(F,G).


store_abduced_atoms([]).
store_abduced_atoms([A|B]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true))),
   store_abduced_atoms(B).


store_abduced_atoms([],[]).
store_abduced_atoms([A|C],[B|D]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true)),B),
   store_abduced_atoms(C,D).


sold_prove(A,C) :-
   soldnf_solve(A,B),
   sort(B,C).


abgen(A,D,F) :-
   sold_prove(A,B),
   ground(B),
   length(B,C),
   C=<D,
   prolog_type(E),
   ( E=yap
   ->
     store_abduced_atoms(B,G)
   ;
     store_abduced_atoms(B)
   ),
   store(proof_strategy),
   set(proof_strategy,sld),
   gen_abduced_atoms(B,F),
   reinstate(proof_strategy),
   ( E=yap
   ->
     erase_refs(G)
   ;
     remove_abduced_atoms(B)
   ).


abgen(A) :-
   abgen(A,_).


write_entry(C,A) :-
   name(A,B),
   length(B,D),
   E is integer((C-D)/2),
   tab(E),
   write(A),
   tab(E).


find_max_width([],A,A).
find_max_width([A|E],D,F) :-
   name(A,B),
   length(B,C),
   ( C>D
   ->
     find_max_width(E,C,F)
   ;
     find_max_width(E,D,F)
   ).


write_cmatrix([A,C,B,D]) :-
   I is A+B,
   J is C+D,
   E is A+C,
   F is B+D,
   G is E+F,
   ( G=0
   ->
     H is  0.5
   ;
     H is (A+D)/G
   ),
   find_max_width([A,C,B,D,I,J,E,F,G],0,K),
   L is K+2,
   tab(5),
   write(' '),
   tab(L),
   write('Actual'),
   nl,
   tab(5),
   write(' '),
   write_entry(L,+),
   tab(6),
   write_entry(L,-),
   nl,
   tab(5),
   write(+),
   write_entry(L,A),
   tab(6),
   write_entry(L,C),
   tab(6),
   write_entry(L,E),
   nl,
   write('Pred '),
   nl,
   tab(5),
   write(-),
   write_entry(L,B),
   tab(6),
   write_entry(L,D),
   tab(6),
   write_entry(L,F),
   nl,
   nl,
   tab(5),
   write(' '),
   write_entry(L,I),
   tab(6),
   write_entry(L,J),
   tab(6),
   write_entry(L,G),
   nl,
   nl,
   write('Accuracy = '),
   write(H),
   nl.


test(A,B,C,D) :-
   retractall(user:'$aleph_local'(covered,_)),
   retractall(user:'$aleph_local'(total,_)),
   asserta(user:'$aleph_local'(covered,0)),
   asserta(user:'$aleph_local'(total,0)),
   ( A=[_|_]
   ->
     test_files(A,B)
   ;
     test_file(A,B)
   ),
   retract(user:'$aleph_local'(covered,C)),
   retract(user:'$aleph_local'(total,D)).


update_theory(B) :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(M,A,N,O))),
   index_clause(A,B,D),
   ( '$aleph_global'(example_selected,example_selected(_,C))
   ->
     true
   ;
     F=[C-_|_]
   ),
   ( setting(lazy_on_cost,true)
   ->
     nlits(D,K),
     label_create(D,E),
     extract_pos(E,F),
     extract_neg(E,G),
     interval_count(F,I),
     interval_count(G,J),
     setting(evalfn,H),
     complete_label(H,D,[I,J,K],L),
     assertz(user:'$aleph_global'(theory,theory(B,L/C,D,F,G)))
   ;
     assertz(user:'$aleph_global'(theory,theory(B,M/C,D,N,O)))
   ),
   add_clause_to_background(B).


process_hypothesis(end_of_file) :-
   nl,
   nl,
   !.
process_hypothesis(none) :-
   nl,
   nl,
   !.
process_hypothesis(ok) :-
   !,
   update_theory(_),
   nl,
   p_message('added new clause').
process_hypothesis(prune) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(D,A,_),goals_to_list(A,E),clause_to_list(B,C),aleph_subsumes(C,[D|E])),
   assertz(user: (prune(B):-F)),
   nl,
   p_message('added new prune statement').
process_hypothesis(overgeneral) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(C,A,_),goals_to_list(A,D),clause_to_list(B,E),aleph_subsumes([C|D],E)),
   assertz(user: (false:-F)),
   nl,
   p_message('added new constraint').
process_hypothesis(overgeneral because not A) :-
   !,
   record_example(check,neg,A,_),
   nl,
   p_message('added new negative example').
process_hypothesis(overspecific) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,A,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(overspecific because A) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(A) :-
   call(user:A).


show_options(example_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept default example'),
   nl,
   tab(8),
   write('-> Enter an example'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.
show_options(hypothesis_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept clause'),
   nl,
   tab(8),
   write('-> "prune." to prune clause and its refinements from the search'),
   nl,
   tab(8),
   write('-> "overgeneral." to add clause as a constraint'),
   nl,
   tab(8),
   write('-> "overgeneral because not(E)." to add E as a negative example'),
   nl,
   tab(8),
   write('-> "overspecific." to add clause as a positive example'),
   nl,
   tab(8),
   write('-> "overspecific because E." to add E as a positive example'),
   nl,
   tab(8),
   write('-> any Aleph command'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.


has_class(A,B,_,C) :-
   arg(A,B,C),
   ground(C),
   !.
has_class(A,B,E,D) :-
   arg(A,B,C),
   in(C=D,E),
   ground(D),
   !.


gen_feature(A,C,D) :-
   nonvar(A),
   !,
   ( var(B)
   ->
     gen_featurenum(B)
   ;
     true
   ),
   split_clause(A,E,F),
   assertz(user:'$aleph_feature'(feature,feature(B,C,D,E,F))).


get_feature_class(A,B,C,D) :-
   has_class(A,B,C,D),
   !.
get_feature_class(_,_,_,_).


copy_iargs(0,_,_,_) :-
   !.
copy_iargs(A,C,D,A) :-
   !,
   B is A-1,
   copy_iargs(B,C,D,A).
copy_iargs(A,B,C,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A-1,
   copy_iargs(E,B,C,F).


aleph_abolish(A/B) :-
   functor(C,A,B),
   ( prolog:predicate_property(user:C,dynamic)
   ->
     retractall(user:C)
   ;
     prolog:abolish(user:A/B)
   ).


abgen(B,D) :-
   retractall(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_))),
   A is(-inf),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis([A,0,1,A],[false],[],[]))),
   setting(max_abducibles,C),
   abgen(B,C,D),
   '$aleph_global'(hypothesis,hypothesis(E,_,K,L)),
   E=[_,_,I,G|_],
   '$aleph_search'(abgenhyp,hypothesis(F,_,_,_)),
   F=[_,_,J,H|_],
   once((G>H;G=:=H,I<J)),
   once(retract(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_)))),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis(E,D,K,L))),
   fail.
abgen(_,A) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   '$aleph_search'(abgenhyp,hypothesis(B,A,C,D)),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(B,A,C,D))).


update_besthyp(G) :-
   '$aleph_global'(hypothesis,hypothesis(A,H,I,J)),
   '$aleph_global'(besthyp,besthyp(B,_,_,_,_)),
   A=[_,_,E,C|_],
   B=[_,_,F,D|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_global'(besthyp,besthyp(B,_,_,_,_))),
   assertz(user:'$aleph_global'(besthyp,besthyp(A,G,H,I,J))).
update_besthyp(_).


reset_best_label :-
   '$aleph_global'(besthyp,besthyp(B,_,G,H,I)),
   '$aleph_search'(best_label,A/_),
   A=[_,_,F,D|_],
   B=[_,_,E,C|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_search'(best_label,A/_)),
   asserta(user:'$aleph_search'(best_label,B/0)),
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(B,G,H,I))).
reset_best_label.


rsat(0) :-
   !.
rsat(B) :-
   gen_sample(pos,1),
   '$aleph_global'(example_selected,example_selected(pos,A)),
   ( \+'$aleph_sat'(stored,stored(A,pos,_))
   ->
     !,
     retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
     sat(pos,A)
   ;
     C is B-1,
     rsat(C)
   ).


rsat :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(resample),
   set(resample,1),
   rsat(100),
   reinstate(resample).


induce_tree :-
   clean_up,
   setting(tree_type,B),
   store_values([refine]),
   set(refine,auto),
   setting(mingain,A),
   ( A=< 0
   ->
     err_message('inappropriate setting for mingain'),
     fail
   ;
     true
   ),
   record_settings,
   stopwatch(D),
   construct_tree(B),
   stopwatch(C),
   E is C-D,
   show(theory),
   record_theory(E),
   reinstate_values([refine]),
   !.
induce_tree.


record_features(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(features),
   p1_message('time taken'),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_features(_).


gen_features :-
   aleph_abolish('$aleph_feature'/2),
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   ( setting(minscore,B)
   ->
     true
   ;
     B=(-inf)
   ),
   '$aleph_good'(_,C,E),
   C=[_,_,_,D|_],
   D>=B,
   split_clause(E,G,F),
   F\=true,
   functor(G,H,I),
   functor(J,H,I),
   copy_iargs(I,G,J,A),
   get_feature_class(A,G,F,K),
   gen_feature((J:-F),C,K),
   fail.
gen_features :-
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   setting(good,true),
   setting(goodfile,B),
   aleph_open(B,read,D),
   ( setting(minscore,C)
   ->
     true
   ;
     C=(-inf)
   ),
   repeat,
   read(D,E),
   ( E='$aleph_good'(_,F,H)
   ->
     F=[_,_,_,G|_],
     G>=C,
     split_clause(H,J,I),
     I\=true,
     functor(J,K,L),
     functor(M,K,L),
     copy_iargs(L,J,M,A),
     get_feature_class(A,J,I,N),
     gen_feature((M:-I),F,N),
     fail
   ;
     close(D),
     !
   ).
gen_features.


induce_features :-
   clean_up,
   store_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   set(good,true),
   set(check_good,true),
   set(updateback,false),
   set(construct_features,true),
   set(lazy_on_contradiction,true),
   ( setting(feature_construction,exhaustive)
   ->
     set(explore,true)
   ;
     true
   ),
   setting(max_features,B),
   record_settings,
   stopwatch(D),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   repeat,
   gen_sample(pos,0),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(false),
   addhyp,
   show_atoms_left,
   record_atoms_left,
   (
     '$aleph_search'(last_good,A),
     A>=B
   ;
     '$aleph_global'(atoms_left,atoms_left(pos,[]))
   ),
   !,
   gen_features,
   stopwatch(C),
   E is C-D,
   show(features),
   record_features(E),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,_))),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   reinstate_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   !.
induce_features.


search_modes :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   prolog:findall(C/D,determinations(A/B,C/D),E),
   number_types([A/B|E],0,F,G),
   get_type_elements(F),
   interval_to_list(1-G,H),
   get_type_equivalences(H,I),
   merge_equivalence_classes(I,J),
   store_type_equivalences(J),
   setting(typeoverlap,K),
   infer_modes(F,K,H,L),
   infer_equalities(O),
   L=[_|M],
   infer_negations(M,P),
   ( setting(updateback,N)
   ->
     true
   ;
     N=true
   ),
   p_message('found modes'),
   add_inferred_modes(L,N),
   add_inferred_modes(O,N),
   add_inferred_modes(P,N),
   fail.
search_modes.


induce_modes :-
   clean_up,
   store_values([typeoverlap]),
   search_modes,
   reinstate_values([typeoverlap]),
   show(modes).


induce_constraints :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([portray_search,search,construct_bottom,good,goodfile]),
   noset(goodfile),
   set(portray_search,false),
   set(construct_bottom,false),
   set(search,ic),
   set(good,true),
   sat(uspec,0),
   reduce,
   show(constraints),
   reinstate_values([portray_search,search,construct_bottom,good,goodfile]),
   show_total_stats,
   record_total_stats,
   !.
induce_constraints.


induce_theory(rls) :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store(evalfn),
   set(evalfn,accuracy),
   record_settings,
   find_theory(rls),
   reinstate(evalfn),
   show_total_stats,
   record_total_stats,
   !.
induce_theory(_).


induce_theory :-
   setting(search,A),
   induce_theory(A).


process_hypothesis :-
   show(hypothesis),
   repeat,
   show_options(hypothesis_selection),
   tab(4),
   write('Response?'),
   nl,
   read(A),
   process_hypothesis(A),
   (
     A=end_of_file
   ;
     A=none
   ),
   !.


ask_example(D) :-
   ( '$aleph_global'(example_selected,example_selected(pos,A))
   ->
     example(A,pos,B)
   ;
     B=none
   ),
   !,
   show_options(example_selection),
   tab(4),
   write('Response '),
   p1_message(default:B),
   write(?),
   nl,
   read(C),
   ( C=ok
   ->
     D=B
   ;
     D=C
   ).


induce_cover :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   addhyp,
   trace_memory_usage,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce_cover.


update_coverset(C,_) :-
   '$aleph_global'(hypothesis,hypothesis(A,_,B,_)),
   A=[_,_,_,D|_],
   worse_coversets(B,C,D,E),
   ( E= ([])
   ->
     true
   ;
     update_theory(F),
     update_coversets(E,F,C,A)
   ).


gen_sample(0,_,_) :-
   !.
gen_sample(C,A,B) :-
   assertz(user:'$aleph_global'(example_selected,example_selected(A,B))),
   D is C-1,
   gen_sample(D,A,B).


induce_max1(B) :-
   '$aleph_local'(counter,A),
   A=<B,
   !,
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   repeat,
   retract(user:'$aleph_local'(counter,D)),
   gen_sample(C,pos,D),
   get_besthyp(false),
   update_coverset(pos,D),
   E is D+1,
   assertz(user:'$aleph_local'(counter,E)),
   E>B,
   !,
   retract(user:'$aleph_local'(counter,E)).
induce_max1(_).


induce_max([]).
induce_max([A-B|C]) :-
   asserta(user:'$aleph_local'(counter,A)),
   induce_max1(B),
   induce_max(C).


induce_max :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   record_settings,
   stopwatch(C),
   set(maxcover,true),
   induce_max(A),
   trace_memory_usage,
   stopwatch(B),
   D is B-C,
   show(theory),
   record_theory(D),
   noset(maxcover),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(D),
   show_total_stats,
   record_total_stats,
   !.
induce_max.


record_total_stats :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_total_stats,
   flush_output(A),
   set_output(user_output).
record_total_stats.


show_total_stats :-
   '$aleph_global'(search_stats,search_stats(A,_)),
   !,
   p1_message('total clauses constructed'),
   p_message(A).
show_total_stats.


record_theory(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(theory),
   p1_message('time taken'),
   p_message(B),
   nl,
   ( '$aleph_global'(maxcover,set(maxcover,true))
   ->
     show(aleph,theory/5),
     nl,
     show(aleph,max_set/4),
     nl,
     show(aleph,rules/1)
   ;
     true
   ),
   flush_output(A),
   set_output(user_output).
record_theory(_).


record_atoms_left :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_atoms_left,
   flush_output(A),
   set_output(user_output).
record_atoms_left.


show_atoms_left :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   interval_count(A,C),
   '$aleph_global'(size,size(pos,D)),
   '$aleph_global'(search_stats,search_stats(_,B)),
   E is B*C/ (D-C),
   p1_message('positive examples left'),
   p_message(C),
   p1_message('estimated time to finish (secs)'),
   p_message(E),
   !.
show_atoms_left.


addgcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   !,
   asserta(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   addhyp,
   add_gcws.


sphyp :-
   retractall(user:'$aleph_search'(sphyp,hypothesis(_,_,_,_))),
   retractall(user:'$aleph_search'(gcwshyp,hypothesis(_,_,_,_))),
   retract(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   asserta(user:'$aleph_search'(sphyp,hypothesis([A,B,C|D],E,F,G))),
   store(searchstate),
   gcws,
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   reinstate(searchstate).


trace_memory_usage :-
   setting(trace_memory_usage,false),
   !.
trace_memory_usage :-
   dbusage:db_usage,
   dbusage:db_static(128*1024),
   dbusage:db_dynamic(128*1024).


get_besthyp(B) :-
   retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
   reset_best_label,
   sat(A),
   reduce,
   update_besthyp(A),
   ( B=true
   ->
     example(A,pos,C),
     abgen(C,E),
     once(retract(user:'$aleph_global'(hypothesis,hypothesis(D,_,F,G)))),
     assert(user:'$aleph_global'(hypothesis,hypothesis(D,E,F,G))),
     update_besthyp(A)
   ;
     true
   ),
   fail.
get_besthyp(_) :-
   retract(user:'$aleph_global'(besthyp,besthyp(C,G,A,E,F))),
   A\=false,
   !,
   ( setting(samplesize,B),
     B>1
   ->
     setting(nodes,D),
     show_clause(sample,C,A,D),
     record_clause(sample,C,A,D)
   ;
     true
   ),
   add_hyp(C,A,E,F),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,G))),
   !.
get_besthyp(_).


gen_sample(A,0) :-
   !,
   '$aleph_global'(atoms_left,atoms_left(A,[B-_|_])),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   p1_message('select example'),
   p_message(B),
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   gen_sample(C,A,B).
gen_sample(A,D) :-
   '$aleph_global'(atoms_left,atoms_left(A,B)),
   interval_count(B,C),
   H is min(C,D),
   assertz(user:'$aleph_local'(sample_num,0)),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   ( setting(resample,E)
   ->
     true
   ;
     E=1
   ),
   repeat,
   '$aleph_local'(sample_num,F),
   G is F+1,
   ( G=<H
   ->
     get_random(C,I),
     select_example(I,0,B,J),
     \+'$aleph_global'(example_selected,example_selected(A,J)),
     p1_message('select example'),
     p_message(J),
     retract(user:'$aleph_local'(sample_num,F)),
     assertz(user:'$aleph_local'(sample_num,G)),
     gen_sample(E,A,J),
     fail
   ;
     retract(user:'$aleph_local'(sample_num,F))
   ),
   !.


record_settings :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   ( '$aleph_global'(os,set(os,unix))
   ->
     execute(date),
     execute(hostname)
   ;
     true
   ),
   show(settings),
   flush_output(A),
   set_output(user_output).
record_settings.


induce :-
   clean_up,
   set(greedy,true),
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   trace_memory_usage,
   ( setting(gcws,true)
   ->
     sphyp,
     addgcws
   ;
     addhyp
   ),
   show_atoms_left,
   record_atoms_left,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   noset(greedy),
   reinstate(portray_search),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce.


induce_incremental :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([interactive,portray_search,proof_strategy,mode]),
   set(portray_search,false),
   set(proof_strategy,sld),
   set(interactive,true),
   record_settings,
   stopwatch(D),
   repeat,
   ask_example(A),
   (
     (
       A=end_of_file
     ;
       A=none
     )
   ->
     true
   ;
     once(record_example(check,pos,A,B)),
     retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
     asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
     once(sat(B)),
     once(reduce),
     once(process_hypothesis),
     fail
   ),
   !,
   stopwatch(C),
   E is C-D,
   show(theory),
   show(pos),
   show(neg),
   show(false/0),
   show(prune/1),
   record_theory(E),
   reinstate_values([interactive,portray_search,proof_strategy,mode]),
   p1_message('time taken'),
   p_message(E).


induce_clauses :-
   setting(interactive,true),
   !,
   induce_incremental.
induce_clauses :-
   induce.


collect(rls_restart,done(C,K,selected(E,H,I,J)),[D,A],[B,A],O) :-
   B is C+D,
   E=[_,_,_,G|_],
   '$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_)),
   ( F>=G
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(E,H,I,J))),
     set(best,E)
   ),
   setting(best,N),
   retract(user:'$aleph_search'(rls_nodes,L)),
   M is K+L,
   asserta(user:'$aleph_search'(rls_nodes,M)),
   ( discontinue_search(A,N/_,M)
   ->
     O=true
   ;
     O=false
   ).


collect_results(D,G,A,C,I) :-
   thread_get_message(B),
   collect(A,B,C,H,E),
   F is D+1,
   ( E==false,
     F<G
   ->
     collect_results(F,G,A,H,I)
   ;
     I=H
   ).


work(rls_restart(A,B,C),F) :-
   statistics(cputime,E),
   rls_thread(A,B,C,H,I),
   statistics(cputime,D),
   G is D-E,
   thread_send_message(F,done(G,H,I)).
work(all_done,_) :-
   thread_exit(done).


worker(A,C) :-
   thread_get_message(A,B),
   work(B,C),
   worker(A,C).


kill_worker(A,B) :-
   thread_send_message(A,all_done),
   prolog:thread_signal(B,throw(surplus_to_requirements)).


create_worker_pool(A,B,_,_,[]) :-
   A>B,
   !.
create_worker_pool(A,G,C,B,[D|H]) :-
   atom_concat(worker_,A,E),
   prolog:thread_create(worker(B,C),D,user:[alias(E)]),
   F is A+1,
   create_worker_pool(F,G,C,B,H).


kill_worker_pool(B,A) :-
   p_message('Killing workers'),
   forall(aleph_member(C,A),kill_worker(B,C)),
   p_message('Waiting for workers'),
   forall(aleph_member(C,A),thread_join(C,_)),
   message_queue_destroy(B),
   p_message('Ok, all done').


collect_results(rls_restart,A,B,C) :-
   collect_results(0,A,rls_restart,B,C).


create_worker_pool(A,B,C,D) :-
   create_worker_pool(1,A,B,C,D).


rls_thread(B,C,A,D,selected(E,F,G,H)) :-
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(A,[],[]))),
   p1_message(restart),
   p_message(B),
   find_clause(C),
   '$aleph_search'(current,current(_,D,_)),
   '$aleph_search'(selected,selected(E,F,G,H)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)).


estimate_numbers(B) :-
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,A),
   estimate_numbers(A,1,400,B).


check_auto_refine :-
   (
     setting(construct_bottom,reduction)
   ;
     setting(construct_bottom,false)
   ),
   \+setting(autorefine,true),
   !,
   ( setting(refine,user)
   ->
     true
   ;
     set(refine,auto)
   ).
check_auto_refine.


check_posonly :-
   '$aleph_global'(size,size(rand,A)),
   A>0,
   !.
check_posonly :-
   setting(evalfn,posonly),
   \+'$aleph_global'(modeh,modeh(_,_)),
   p1_message(error),
   p_message('missing modeh declaration in posonly mode'),
   !,
   fail.
check_posonly :-
   retractall(user:'$aleph_global'(slp_count,_,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   setting(evalfn,posonly),
   setting(gsamplesize,C),
   condition_target,
   '$aleph_global'(targetpred,targetpred(A/B)),
   gsample(A/B,C),
   !.
check_posonly.


set_up_builtins :-
   gen_nlitnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,!,[],[],[])).


reset_counts :-
   retractall(user:'$aleph_sat'(lastterm,_)),
   retractall(user:'$aleph_sat'(lastvar,_)),
   asserta(user:'$aleph_sat'(lastterm,0)),
   asserta(user:'$aleph_sat'(lastvar,0)),
   !.


clean_up_hypothesis :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))).


clean_up_sat :-
   aleph_abolish('$aleph_sat'/2),
   aleph_abolish('$aleph_local'/2),
   aleph_abolish('$aleph_sat_atom'/2),
   aleph_abolish('$aleph_sat_ovars'/2),
   aleph_abolish('$aleph_sat_ivars'/2),
   aleph_abolish('$aleph_sat_varscopy'/3),
   aleph_abolish('$aleph_sat_varequiv'/3),
   aleph_abolish('$aleph_sat_terms'/4),
   aleph_abolish('$aleph_sat_vars'/4),
   aleph_abolish('$aleph_sat_litinfo'/6),
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


zap_rest(B) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,C)),
   ( aleph_member1(A,B)
   ->
     intersect1(B,C,H,_),
     asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H))
   ;
     true
   ),
   fail.
zap_rest(_).


binom_lte(_,_,A,0) :-
   A<0,
   !.
binom_lte(A,B,C,E) :-
   binom(A,B,C,F),
   D is C-1,
   binom_lte(A,B,D,G),
   E is F+G,
   !.


record_tsearch_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('theories constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best theory'),
   pp_dclauses(D),
   flush_output(A),
   set_output(user_output).
record_tsearch_stats(_,_,_).


clean_up_reduce :-
   aleph_abolish('$aleph_local'/2),
   clean_up_search,
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


find_theory1(_) :-
   clean_up_reduce,
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   init_open_list,
   asserta(user:'$aleph_search'(nextnode,none)),
   stopwatch(K),
   get_search_settings(A),
   arg(4,A,_/D),
   interval_count(B,E),
   interval_count(C,F),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(selected,selected(G,[0-[0,0,[],false]],B,C))),
   get_theory_gain(A,0,G/0,[0-[0,0,[],false]],B,C,E,F,I,H),
   asserta(user:'$aleph_search'(current,current(0,H,I))),
   get_nextbest(A,_),
   tsearch(A,P),
   stopwatch(J),
   Q is J-K,
   '$aleph_search'(selected,selected(L,M,N,O)),
   destroy_open_list,
   add_hyp(L,M,N,O),
   p1_message('theories constructed'),
   p_message(P),
   p1_message('search time'),
   p_message(Q),
   p_message('best theory'),
   pp_dclauses(M),
   show_stats(D,L),
   update_search_stats(P,Q),
   record_tsearch_stats(M,P,Q).


find_theory(rls) :-
   !,
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(tries,A),
   A>=1,
   store_values([caching,store_bottom]),
   set(caching,false),
   set(store_bottom,true),
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   interval_count(B,E),
   interval_count(C,F),
   setting(evalfn,D),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(rls_selected,selected(G,[0-[0,0,[],false]],B,C))),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   get_search_settings(V),
   set(best,G),
   stopwatch(Y),
   repeat,
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(G,B,C))),
   '$aleph_search'(rls_restart,H),
   p1_message(restart),
   p_message(H),
   find_theory1(rls),
   '$aleph_search'(current,current(_,J,_)),
   retract(user:'$aleph_search'(rls_nodes,K)),
   '$aleph_search'(selected,selected([O,P,Q,N|R],S,T,U)),
   '$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_)),
   retract(user:'$aleph_search'(rls_restart,H)),
   I is H+1,
   asserta(user:'$aleph_search'(rls_restart,I)),
   L is J+K,
   asserta(user:'$aleph_search'(rls_nodes,L)),
   ( M>=N
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected([O,P,Q,N|R],S,T,U))),
     set(best,[O,P,Q,N|R])
   ),
   setting(best,W),
   (
     I>A
   ;
     discontinue_search(V,W/_,L)
   ),
   !,
   stopwatch(X),
   E1 is X-Y,
   '$aleph_search'(rls_nodes,D1),
   '$aleph_search'(rls_selected,selected(Z,A1,B1,C1)),
   add_hyp(Z,A1,B1,C1),
   p1_message('nodes constructed'),
   p_message(D1),
   p1_message('search time'),
   p_message(E1),
   p_message('best theory'),
   pp_dclauses(A1),
   show_stats(D,Z),
   record_search_stats(A1,D1,E1),
   noset(best),
   reinstate_values([caching,refine,refineop,store_bottom]).


update_search_stats(B,D) :-
   ( retract(user:'$aleph_global'(search_stats,search_stats(A,C)))
   ->
     E is A+B,
     F is C+D
   ;
     E is B,
     F is D
   ),
   asserta(user:'$aleph_global'(search_stats,search_stats(E,F))).


reduce_prelims(B,C,D) :-
   clean_up_reduce,
   check_posonly,
   check_auto_refine,
   ( A=true
   ->
     true
   ;
     prolog:call(call(user:A),B,C,D)
   ),
   setting(reduce_prelims_hook,A),
   ( '$aleph_sat'(lastlit,B)
   ->
     true
   ;
     B=0,
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   ( '$aleph_sat'(botsize,E)
   ->
     true
   ;
     E=0,
     asserta(user:'$aleph_sat'(botsize,E))
   ),
   (
     (
       '$aleph_global'(lazy_evaluate,lazy_evaluate(_))
     ;
       setting(greedy,true)
     )
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   setting(evalfn,F),
   ( F=posonly
   ->
     G=rand
   ;
     G=neg
   ),
   '$aleph_global'(atoms_left,atoms_left(G,D)),
   asserta(user:'$aleph_search'(nextnode,none)).


estimate_clauselength_distribution(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,clauselength_distribution(A,B,C,D,E,F)),
   !.
estimate_clauselength_distribution(A,B,E,H) :-
   setting(evalfn,C),
   estimate_clauselength_scores(A,B,C,[],D),
   select_good_clauses(D,E,F),
   estimate_frequency(A,F,G),
   normalise_distribution(G,H),
   ( '$aleph_sat'(example,example(I,J))
   ->
     asserta(user:'$aleph_sat'(random,clauselength_distribution(I,J,A,B,E,H)))
   ;
     true
   ).


rls_search(1,S,U,X,Y) :-
   !,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,I/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   stopwatch(W),
   estimate_numbers(_),
   repeat,
   retract(user:'$aleph_search'(rls_restart,G)),
   H is G+1,
   asserta(user:'$aleph_search'(rls_restart,H)),
   rls_thread(G,I,B,P,selected(J,M,N,O)),
   J=[_,_,_,L|_],
   '$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(J,M,N,O))),
     set(best,J)
   ),
   setting(best,T),
   retract(user:'$aleph_search'(rls_nodes,Q)),
   R is P+Q,
   asserta(user:'$aleph_search'(rls_nodes,R)),
   (
     H>S
   ;
     discontinue_search(C,T/_,R)
   ),
   !,
   stopwatch(V),
   U is V-W,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,X)),
   retract(user:'$aleph_search'(rls_selected,Y)).
rls_search(G,J,M,O,P) :-
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,L/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   estimate_numbers(_),
   thread_self(H),
   message_queue_create(I),
   create_worker_pool(G,H,I,N),
   forall(between(1,J,K),thread_send_message(I,rls_restart(K,L,B))),
   collect_results(rls_restart,J,[0,C],[M|_]),
   kill_worker_pool(I,N),
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,O)),
   retract(user:'$aleph_search'(rls_selected,P)).


reinstate_values([]).
reinstate_values([A|B]) :-
   reinstate(A),
   reinstate_values(B).


record_search_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('clauses constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best clause'),
   pp_dclause(D),
   flush_output(A),
   set_output(user_output).
record_search_stats(_,_,_).


show_stats(A,[D,E,_,B|_]) :-
   (
     (
       A=user
     ;
       A=entropy
     ;
       A=gini
     )
   ->
     C is-B
   ;
     C is B
   ),
   concat(['pos cover = ',D,' neg cover = ',E],F),
   p1_message(F),
   print_eval(A,C).


add_hyp(A,B,C,D) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))).


best_clause_hook(_,_,_,_) :-
   setting(best_clause_hook,true),
   !.
best_clause_hook(B,C,D,E) :-
   setting(best_clause_hook,A),
   call(A,B,C,D,E),
   !.


estimate_error_rate(B,A,D,E,F) :-
   C is 1-exp(log(1-A)/B),
   estimate_error(1/ 0,0/ 1,C,D,E,F).


find_clause(A) :-
   set(stage,reduction),
   set(searchstrat,A),
   p_message(reduce),
   reduce_prelims(T,H,U),
   init_open_list,
   get_search_settings(B),
   arg(4,B,_/C),
   get_start_label(C,F),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,G),
     asserta(user:'$aleph_search'(selected,selected(F,(G:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(selected,selected(F,(false:-true),[],[])))
   ),
   arg(13,B,J),
   interval_count(H,I),
   I>=J,
   '$aleph_search'(selected,selected(K,L,M,N)),
   add_hyp(K,L,M,N),
   ( '$aleph_global'(max_set,max_set(E,D,O,P))
   ->
     Q=O/P
   ;
     ( '$aleph_global'(best,set(best,R))
     ->
       Q=R/0
     )
   ;
     Q=F/0
   ),
   asserta(user:'$aleph_search'(best_label,Q)),
   p1_message('best label so far'),
   p_message(Q),
   arg(3,B,S),
   stopwatch(A1),
   ( S=false
   ->
     get_gains(B,0,Q,[],false,[],0,T,[1],H,U,[],1,V,Y),
     update_max_head_count(0,V)
   ;
     clear_cache,
     interval_count(H,W),
     asserta(user:'$aleph_local'(max_head_count,W)),
     X=0-[D,E,[],false],
     get_gains(B,0,Q,X,_,_,_,T,[X],H,U,[],1,V,Y)
   ),
   asserta(user:'$aleph_search_expansion'(1,0,1,V)),
   get_nextbest(B,_),
   asserta(user:'$aleph_search'(current,current(1,V,Y))),
   search(B,F1),
   stopwatch(Z),
   G1 is Z-A1,
   '$aleph_search'(selected,selected(B1,C1,D1,E1)),
   destroy_open_list,
   best_clause_hook(B1,C1,D1,E1),
   add_hyp(B1,C1,D1,E1),
   p1_message('clauses constructed'),
   p_message(F1),
   p1_message('search time'),
   p_message(G1),
   p_message('best clause'),
   pp_dclause(C1),
   show_stats(C,B1),
   update_search_stats(F1,G1),
   record_search_stats(C1,F1,G1),
   noset(stage),
   !.
find_clause(_) :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   destroy_open_list,
   best_clause_hook(A,B,C,D),
   add_hyp(A,B,C,D),
   p_message('best clause'),
   pp_dclause(B),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,A),
   noset(stage),
   !.


get_start_label(_,[0,0,0,A]) :-
   (
     setting(interactive,true)
   ;
     setting(search,ic)
   ),
   !,
   A is(-inf).
get_start_label(user,[1,0,2,A]) :-
   !,
   A is(-inf).
get_start_label(entropy,[1,0,2,-0.5]) :-
   !.
get_start_label(gini,[1,0,2,-0.5]) :-
   !.
get_start_label(wracc,[1,0,2,-0.25]) :-
   !.
get_start_label(A,[1,0,2,B]) :-
   evalfn(A,[1,0,2],B).


store_values([]).
store_values([A|B]) :-
   store(A),
   store_values(B).


add_bottom :-
   retractall(user:'$aleph_search'(selected,selected(_,_,_,_))),
   bottom(A),
   add_hyp(A),
   '$aleph_global'(hypothesis,hypothesis(C,B,_,_)),
   ( clause_ok(B,C)
   ->
     true
   ;
     '$aleph_sat'(example,example(D,E)),
     example(D,E,G),
     retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
     setting(evalfn,F),
     complete_label(F,G,[1,0,1],H),
     asserta(user:'$aleph_global'(hypothesis,hypothesis(H,(G:-true),[D-D],[])))
   ).


reduce_end_hook :-
   setting(reduce_end_hook,true),
   !.
reduce_end_hook :-
   setting(reduce_end_hook,A),
   prolog:call(call(user:A)),
   !.


reduce(false) :-
   !,
   add_bottom.
reduce(ibs) :-
   !,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retractall(user:'$aleph_search'(ibs_nodes,_)),
   retractall(user:'$aleph_search'(ibs_selected,_)),
   store_values([openlist,caching,explore]),
   set(openlist,1),
   set(caching,true),
   set(explore,true),
   asserta(user:'$aleph_search'(ibs_rval,1)),
   asserta(user:'$aleph_search'(ibs_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(openlist,F),
   p1_message('ibs beam width'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,I,[H,G|_]/_)),
   J is G+H,
   estimate_error_rate(I,0.5,J,G,K),
   p1_message('ibs estimated error'),
   p_message(K),
   retract(user:'$aleph_search'(ibs_rval,O)),
   retract(user:'$aleph_search'(ibs_nodes,L)),
   '$aleph_search'(selected,selected(P,Q,R,S)),
   M is 2*F,
   N is I+L,
   set(openlist,M),
   asserta(user:'$aleph_search'(ibs_rval,K)),
   asserta(user:'$aleph_search'(ibs_nodes,N)),
   (
     (
       K>=O
     ;
       M>512
     )
   ->
     true
   ;
     retract(user:'$aleph_search'(ibs_selected,selected(_,_,_,_))),
     asserta(user:'$aleph_search'(ibs_selected,selected(P,Q,R,S))),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retract(user:'$aleph_search'(ibs_nodes,Z)),
   retract(user:'$aleph_search'(ibs_selected,selected(V,W,X,Y))),
   best_clause_hook(V,W,X,Y),
   add_hyp(V,W,X,Y),
   p1_message('ibs clauses constructed'),
   p_message(Z),
   p1_message('ibs search time'),
   p_message(A1),
   p_message('ibs best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   reinstate_values([openlist,caching,explore]).
reduce(id) :-
   !,
   retractall(user:'$aleph_search'(id_nodes,_)),
   retractall(user:'$aleph_search'(id_selected,_)),
   store_values([caching,clauselength]),
   setting(clauselength,T),
   set(clauselength,1),
   set(caching,true),
   asserta(user:'$aleph_search'(id_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(id_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(id_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(V),
   repeat,
   setting(clauselength,F),
   p1_message('id clauselength setting'),
   p_message(F),
   find_clause(df),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(id_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(clauselength,I),
   '$aleph_search'(id_nodes,J),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(id_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P])
   ),
   I>T,
   !,
   stopwatch(U),
   B1 is U-V,
   retract(user:'$aleph_search'(id_nodes,A1)),
   retract(user:'$aleph_search'(id_selected,selected(W,X,Y,Z))),
   best_clause_hook(W,X,Y,Z),
   add_hyp(W,X,Y,Z),
   p1_message('id clauses constructed'),
   p_message(A1),
   p1_message('id search time'),
   p_message(B1),
   p_message('id best clause'),
   pp_dclause(X),
   show_stats(A,W),
   record_search_stats(X,A1,B1),
   noset(best),
   reinstate_values([caching,clauselength]).
reduce(ils) :-
   !,
   retractall(user:'$aleph_search'(ils_nodes,_)),
   retractall(user:'$aleph_search'(ils_selected,_)),
   store_values([caching,language]),
   set(searchstrat,bf),
   set(language,1),
   set(caching,true),
   asserta(user:'$aleph_search'(ils_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ils_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ils_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(language,F),
   p1_message('ils language setting'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(ils_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(language,I),
   asserta(user:'$aleph_search'(ils_nodes,J)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(ils_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P]),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retract(user:'$aleph_search'(ils_nodes,Z)),
   retract(user:'$aleph_search'(ils_selected,selected(V,W,X,Y))),
   add_hyp(V,W,X,Y),
   p1_message('ils clauses constructed'),
   p_message(Z),
   p1_message('ils search time'),
   p_message(A1),
   p_message('ils best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   noset(best),
   reinstate_values([caching,language]).
reduce(rls) :-
   !,
   setting(tries,A),
   A>=1,
   store_values([caching,refine,refineop]),
   set(searchstrat,heuristic),
   set(caching,true),
   setting(refine,B),
   ( B\=false
   ->
     true
   ;
     set(refineop,rls)
   ),
   setting(threads,C),
   rls_search(C,A,I,H,selected(D,E,F,G)),
   add_hyp(D,E,F,G),
   p1_message('rls nodes constructed'),
   p_message(H),
   p1_message('rls search time'),
   p_message(I),
   p_message('rls best result'),
   pp_dclause(E),
   setting(evalfn,J),
   show_stats(J,D),
   record_search_stats(E,H,I),
   noset(best),
   reinstate_values([caching,refine,refineop]).
reduce(scs) :-
   !,
   store_values([tries,moves,rls_type,clauselength_distribution]),
   stopwatch(G),
   ( setting(scs_sample,C)
   ->
     true
   ;
     setting(scs_percentile,A),
     A> 0,
     setting(scs_prob,B),
     B< 1,
     C is integer(log(1-B)/log(1-A/100)+1)
   ),
   ( setting(scs_type,informed)
   ->
     ( setting(clauselength_distribution,E)
     ->
       true
     ;
       setting(clauselength,D),
       estimate_clauselength_distribution(D,100,A,E),
       p1_message('using clauselength distribution'),
       p_message(E),
       set(clauselength_distribution,E)
     )
   ;
     true
   ),
   set(tries,C),
   set(moves,0),
   set(rls_type,gsat),
   reduce(rls),
   stopwatch(F),
   I is F-G,
   '$aleph_search'(rls_nodes,H),
   '$aleph_search'(rls_selected,selected(L,J,_,_)),
   p1_message('scs nodes constructed'),
   p_message(H),
   p1_message('scs search time'),
   p_message(I),
   p_message('scs best result'),
   pp_dclause(J),
   setting(evalfn,K),
   show_stats(K,L),
   record_search_stats(J,H,I),
   p1_message('scs search time'),
   p_message(I),
   reinstate_values([tries,moves,rls_type,clauselength_distribution]).
reduce(ar) :-
   !,
   clear_cache,
   ( setting(pos_fraction,B)
   ->
     true
   ;
     p_message('value required for pos_fraction parameter'),
     fail
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   interval_count(A,C),
   D is B*C,
   store_values([minpos,evalfn,explore,caching,minacc,good]),
   set(searchstrat,bf),
   set(minpos,D),
   set(evalfn,coverage),
   set(explore,true),
   set(minacc,0),
   set(good,true),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   find_clause(bf),
   show(good),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   reinstate_values([minpos,evalfn,explore,caching,minacc,good]).
reduce(ic) :-
   !,
   store_values([minpos,minscore,evalfn,explore,refineop]),
   setting(refineop,A),
   ( A=false
   ->
     set(refineop,auto)
   ;
     true
   ),
   set(minpos,0),
   set(searchstrat,bf),
   set(evalfn,coverage),
   set(explore,true),
   setting(noise,B),
   C is-B,
   set(minscore,C),
   find_clause(bf),
   reinstate_values([minpos,minscore,evalfn,explore,refineop]).
reduce(bf) :-
   !,
   find_clause(bf).
reduce(df) :-
   !,
   find_clause(df).
reduce(heuristic) :-
   !,
   find_clause(heuristic).


reduce_start_hook(_) :-
   setting(reduce_start_hook,true),
   !.
reduce_start_hook(B) :-
   setting(reduce_start_hook,A),
   prolog:call(call(user:A),B),
   !.


doreduce(A) :-
   reduce_start_hook(A),
   reduce(A),
   reduce_end_hook.


noset(A) :-
   nonvar(A),
   retract(user:'$aleph_global'(A,set(A,B))),
   !,
   rm_special_consideration(A,B),
   set_default(A).
noset(_).


sat_end_hook(_,_) :-
   setting(sat_end_hook,true),
   !.
sat_end_hook(B,C) :-
   setting(sat_end_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_sat_example(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message(sat),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_sat_example(_).


sat_prelims :-
   clean_up_sat,
   clean_up_hypothesis,
   reset_counts,
   set_up_builtins.


sat_start_hook(_,_) :-
   setting(sat_start_hook,true),
   !.
sat_start_hook(B,C) :-
   setting(sat_start_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_example(check,B,C,A) :-
   ( once(example(A,B,C))
   ->
     true
   ;
     record_example(nocheck,B,C,A),
     ( retract(user:'$aleph_global'(atoms,atoms(B,D)))
     ->
       true
     ;
       D= ([])
     ),
     ( retract(user:'$aleph_global'(atoms_left,atoms_left(B,E)))
     ->
       true
     ;
       E= ([])
     ),
     ( retract(user:'$aleph_global'(last_example,last_example(B,_)))
     ->
       true
     ;
       true
     ),
     update(D,A-A,F),
     update(E,A-A,G),
     asserta(user:'$aleph_global'(atoms,atoms(B,F))),
     asserta(user:'$aleph_global'(atoms_left,atoms_left(B,G))),
     asserta(user:'$aleph_global'(last_example,last_example(B,A)))
   ),
   !.
record_example(nocheck,A,D,C) :-
   ( retract(user:'$aleph_global'(size,size(A,B)))
   ->
     true
   ;
     B is 0
   ),
   C is B+1,
   asserta(user:'$aleph_global'(size,size(A,C))),
   ( A\=neg,
     setting(skolem_examples,true)
   ->
     setting(skolemvars,E),
     skolemize(D,G,H,E,F),
     record_skolemized(A,C,F,G,H),
     ( E=F
     ->
       true
     ;
       set(skolemvars,F)
     )
   ;
     split_clause(D,I,H),
     record_nskolemized(A,C,I,H)
   ),
   !.


aleph_subsumes(A,B) :-
   \+ \+ (numbervars(A,0,_),numbervars(B,0,_),aleph_subset1(A,B)).


redundant(C,E,[A|B]) :-
   copy_term([A|B],F),
   aleph_member(D,B),
   C=D,
   aleph_subsumes(E,F).


glist_to_goals([g(_,_,A)],A) :-
   !.
glist_to_goals([g(_,_,A) |B],(A,C)) :-
   glist_to_goals(B,C).


compile_clause2([[_|A]],B) :-
   !,
   glist_to_goals(A,B).
compile_clause2([[_|A] |C],(B,!,D)) :-
   glist_to_goals(A,B),
   compile_clause2(C,D).


join_goals([],A,A) :-
   !.
join_goals(A,[],A) :-
   !.
join_goals([g(A,D,E) |F],[g(B,G,H) |I],C) :-
   A<B,
   !,
   C=[g(A,D,E) |J],
   join_goals(F,[g(B,G,H) |I],J).
join_goals([F|E],[g(B,C,D) |G],A) :-
   A=[g(B,C,D) |H],
   join_goals(E,[F|G],H).


aleph_ord_union(A,[],A) :-
   !.
aleph_ord_union([],A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F).


aleph_ord_disjoint([],_) :-
   !.
aleph_ord_disjoint(_,[]) :-
   !.
aleph_ord_disjoint([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_disjoint(C,A,D,B,E).


add_to_sets([],A,B,[[A|B]]).
add_to_sets([[A|B] |D],C,E,[[A|B] |F]) :-
   aleph_ord_disjoint(A,C),
   !,
   add_to_sets(D,C,E,F).
add_to_sets([[A|C] |E],B,D,H) :-
   aleph_ord_union(A,B,F),
   join_goals(C,D,G),
   add_to_sets(E,F,G,H).


add_goal_to_set(g(C,B,D),A,E) :-
   add_to_sets(A,B,[g(C,B,D)],E).


get_goal_vars(A,C,D,A) :-
   vars_in_term([A],[],B),
   aleph_ord_subtract(B,C,D).


compile_clause(B,A,(A:-C)) :-
   compile_clause2(B,C).


calculate_independent_sets([],A,A).
calculate_independent_sets([A|C],B,E) :-
   add_goal_to_set(A,B,D),
   calculate_independent_sets(C,D,E).


number_goals_and_get_vars((B,F),C,A,H,I,[g(A,D,E) |J]) :-
   !,
   G is A+1,
   get_goal_vars(B,C,D,E),
   number_goals_and_get_vars(F,C,G,H,I,J).
number_goals_and_get_vars(C,D,A,A,B,[g(A,E,F) |B]) :-
   get_goal_vars(C,D,E,F).


remove_subsumed([C|A],E) :-
   aleph_delete(B,A,D),
   \+ \+redundant(B,[C|A],[C|D]),
   !,
   remove_subsumed([C|D],E).
remove_subsumed(A,A).


reorder_clause((A:-B),F) :-
   vars_in_term([A],[],C),
   number_goals_and_get_vars(B,C,1,_,[],D),
   calculate_independent_sets(D,[],E),
   compile_clause(E,A,F).


remove_redundant((A:-B),(D:-F)) :-
   goals_to_list((A,B),C),
   remove_subsumed(C,[D|E]),
   ( E= ([])
   ->
     F=true
   ;
     list_to_goals(E,F)
   ).


concat([A],A) :-
   !.
concat([C|A],F) :-
   concat(A,B),
   name(B,D),
   name(C,E),
   aleph_append(D,E,G),
   name(F,G).


aleph_writeq(A) :-
   write_term(A,[numbervars(true),quoted(true)]).


create_copy(B,C,_,_,_,A,A) :-
   B>C,
   !.
create_copy(A,K,B,H,D,F,L) :-
   example(A,B,C),
   C=..[_|E],
   I=..[D|E],
   G is F+1,
   aleph_writeq(example(G,H,I)),
   write('.'),
   nl,
   J is A+1,
   create_copy(J,K,B,H,D,G,L).


create_copy([],_,_,_,A,A).
create_copy([A-B|G],C,D,E,F,I) :-
   create_copy(A,B,C,D,E,F,H),
   create_copy(G,C,D,E,H,I).


aleph_open(A,read,B) :-
   !,
   ( exists(A)
   ->
     open(A,read,B)
   ;
     fail
   ).
aleph_open(A,B,C) :-
   open(A,B,C).


create_examples(B,F,E,D,A,[I-H]) :-
   '$aleph_global'(last_example,last_example(A,G)),
   aleph_open(B,write,C),
   set_output(C),
   create_copy(D,E,A,F,G,H),
   close(C),
   set_output(user_output),
   H>G,
   !,
   retract(user:'$aleph_global'(last_example,last_example(A,G))),
   I is G+1,
   asserta(user:'$aleph_global'(last_example,last_example(A,H))).
create_examples(_,_,_,_,_,[]).


rm_seeds1([],A,A).
rm_seeds1([A-B|D],C,F) :-
   rm_interval(A-B,C,E),
   !,
   rm_seeds1(D,E,F).


app_lit(B,(A,C),(A,D)) :-
   !,
   app_lit(B,C,D).
app_lit(B,A,(A,B)).


cwinduce :-
   store(greedy),
   set(greedy,true),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   repeat,
   '$aleph_global'(atoms_left,atoms_left(pos,[B-G|H])),
   sat(B),
   reduce,
   retract(user:'$aleph_global'(hypothesis,hypothesis(C,D,E,F))),
   asserta(user:'$aleph_search'(sphyp,hypothesis(C,D,E,F))),
   rm_seeds1(E,[B-G|H],I),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,[B-G|H]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   I= ([]),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   reinstate(greedy),
   !.
cwinduce.


gen_ab_examples(B/_,E,C) :-
   A='.alephtmp.f',
   D='.alephtmp.n',
   create_examples(A,B,neg,C,pos,F),
   create_examples(D,B,pos,E,neg,G),
   aleph_consult(A),
   aleph_consult(D),
   retractall(user:'$aleph_global'(atoms_left,_)),
   retractall(user:'$aleph_global'(size,_)),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,G))),
   interval_count(F,H),
   interval_count(G,I),
   asserta(user:'$aleph_global'(size,size(pos,H))),
   asserta(user:'$aleph_global'(size,size(neg,I))),
   delete_file(A),
   delete_file(D).


add_modes(D/_) :-
   '$aleph_global'(targetpred,targetpred(A)),
   modes(A,B),
   B=..[F,G,C],
   C=..[_|E],
   H=..[D|E],
   I=..[F,G,H],
   prolog:call(call(user:I)),
   fail.
add_modes(_).


add_determinations(D,B) :-
   '$aleph_global'(targetpred,targetpred(A)),
   determinations(A,C),
   ( B=true
   ->
     C\=A
   ;
     true
   ),
   determination(D,C),
   fail.
add_determinations(_,_).


gen_absym(C) :-
   ( retract(user:'$aleph_global'(last_ab,last_ab(A)))
   ->
     B is A+1
   ;
     B is 0
   ),
   asserta(user:'$aleph_global'(last_ab,last_ab(B))),
   concat([ab,B],C).


gcws(A,E,F,K) :-
   gen_absym(C),
   split_clause(A,B,H),
   functor(B,_,D),
   add_determinations(C/D,true),
   add_modes(C/D),
   gen_ab_examples(C/D,E,F),
   cwinduce,
   B=..[_|G],
   I=..[C|G],
   ( H=true
   ->
     J= (not I)
   ;
     app_lit(not I,H,J)
   ),
   K= (B:-J).


label_create(A,B,D) :-
   '$aleph_global'(last_example,last_example(A,C)),
   label_create(B,A,[1-C],D).


gcws :-
   setting(evalfn,P),
   repeat,
   retract(user:'$aleph_search'(sphyp,hypothesis([F,K,L|M],B,A,G))),
   ( A=_/_
   ->
     label_create(pos,B,C),
     extract_pos(C,D),
     interval_count(D,E)
   ;
     D=A,
     E=F
   ),
   ( G=_/_
   ->
     label_create(neg,B,H),
     extract_neg(H,I),
     interval_count(I,J)
   ;
     I=G,
     J=K
   ),
   ( J=0
   ->
     O=B,
     R=[E,J,L|M]
   ;
     N is E/ (2*E-1),
     set(minacc,N),
     set(noise,J),
     gcws(B,D,I,O),
     Q is L+1,
     complete_label(P,O,[F,0,Q],R)
   ),
   assertz(user:'$aleph_search'(gcwshyp,hypothesis(R,O,D,[]))),
   \+'$aleph_search'(sphyp,hypothesis(_,_,_,_)),
   !.


err_message(A) :-
   p1_message(error),
   p_message(A).


sum_gini([],_,0).
sum_gini([A-_|B],C,D) :-
   A>0,
   !,
   sum_gini(B,C,F),
   E is A/C,
   D is E* (1-E)+F.
sum_gini([_|A],B,C) :-
   sum_gini(A,B,C).


sum_entropy([],_,0).
sum_entropy([A-_|B],C,D) :-
   A>0,
   !,
   sum_entropy(B,C,E),
   D is A*log(A/C)+E.
sum_entropy([_|A],B,C) :-
   sum_entropy(A,B,C).


cont_distribution(B,C,_,A,A) :-
   B>C,
   !.
cont_distribution(A,I,B,D-[E,G],M) :-
   example(A,pos,C),
   tparg(B,C,F),
   H is A+1,
   J is D+1,
   K is E+F,
   L is G+F*F,
   cont_distribution(H,I,B,J-[K,L],M).


discr_distribution(B,C,_,A,A) :-
   B>C,
   !.
discr_distribution(A,I,B,D-F,M) :-
   example(A,pos,C),
   tparg(B,C,E),
   H is A+1,
   J is D+1,
   ( aleph_delete(G-E,F,L)
   ->
     K is G+1,
     discr_distribution(H,I,B,J-[K-E|L],M)
   ;
     discr_distribution(H,I,B,J-[1-E|F],M)
   ).


discr_distribution([],_,A,A).
discr_distribution([A-B|F],C,D-E,I) :-
   discr_distribution(A,B,C,D-E,G-H),
   discr_distribution(F,C,G-H,I).


cont_distribution([],_,A-[D,E],A-[B,C]) :-
   ( A=0
   ->
     B=0,
     C=0
   ;
     B is D/A,
     C is sqrt(E/A-B*B)
   ).
cont_distribution([A-B|F],C,D-E,I) :-
   cont_distribution(A,B,C,D-E,G-H),
   cont_distribution(F,C,G-H,I).


impurity(regression,sd,_-[_,A],A) :-
   !.
impurity(classification,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(classification,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(class_probability,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(class_probability,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(_,_,_,_) :-
   err_message('inappropriate settings for tree_type and/or evalfn'),
   fail.


treenode_cost(model,A,B,D,C,E,F) :-
   !,
   add_model(A,B,C,D,_,E,F).
treenode_cost(A,E,_,B,C,D,G) :-
   node_stats(A,B,C,D-F),
   D>0,
   impurity(A,E,D-F,G).


in(false,_) :-
   !,
   fail.
in(bottom,B) :-
   !,
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],C),
   aleph_member(B,C).
in((A:-true),A) :-
   !.
in((A:-B),C) :-
   !,
   in((A,B),C).
in((A,_),A).
in((_,A),B) :-
   !,
   in(A,B).
in(A,A).


show_split_list([],_,_).
show_split_list([H-[[_,_,L,_],[C,_,K,_]] |N],I,A) :-
   copy_term(A,B),
   split_clause(B,E,F),
   copy_term(C,D),
   numbervars(D,0,_),
   split_clause(D,E,G),
   get_goaldiffs(F,G,J),
   M is -1*H,
   tab(4),
   write(I),
   tab(4),
   write(J),
   nl,
   tab(12),
   write('Succeeded (Right Branch): '),
   write(K),
   nl,
   tab(12),
   write('Failed    (Left Branch) : '),
   write(L),
   nl,
   tab(12),
   write('Cost Reduction          : '),
   write(M),
   nl,
   nl,
   O is I+1,
   show_split_list(N,O,A).


ask_best_split(F,B,C,D) :-
   repeat,
   tab(4),
   write('-> '),
   write('Select Split Number (or "none.")'),
   nl,
   read(A),
   ( A=none
   ->
     B is(-inf),
     C= ([]),
     D= ([])
   ;
     E is integer(A),
     aleph_remove_nth(E,F,G-[C,D],_),
     B is -1*G
   ),
   !.


show_split_list(B,A) :-
   tab(4),
   write('Split Information'),
   nl,
   tab(4),
   write(-----------------),
   nl,
   nl,
   tab(4),
   write('No.'),
   tab(4),
   write('Split'),
   nl,
   tab(4),
   write(---),
   tab(4),
   write(-----),
   nl,
   show_split_list(A,1,B).


get_best_split(A,B,C,D,E) :-
   show_split_list(A,B),
   ask_best_split(B,C,D,E).


get_best_subtree(false,_,A,B,C) :-
   retract(user:'$aleph_search'(tree_gain,tree_gain(A,B,C))),
   !.
get_best_subtree(true,A,H,B,C) :-
   nl,
   write('Extending path: '),
   nl,
   write(---------------),
   nl,
   pp_dclause(A),
   prolog:findall(D-[B,C],('$aleph_search'(tree_gain,tree_gain(E,B,C)),D is -1*E),F),
   keysort(F,G),
   get_best_split(A,G,H,B,C),
   retractall(user:'$aleph_search'(tree_gain,_)).


eval_treenode(A,B,D,F,E,G,H) :-
   arg(4,A,_/C),
   treenode_cost(B,C,D,E,F,G,H).


get_goaldiffs((A,B),(A,C),D) :-
   !,
   get_goaldiffs(B,C,D).
get_goaldiffs(true,A,A) :-
   !.
get_goaldiffs(A,(A,B),B).


rm_intervals([],A,A).
rm_intervals([A|C],B,E) :-
   rm_interval(A,B,D),
   rm_intervals(C,D,E),
   !.


tree_refine_ok(model,C) :-
   '$aleph_global'(model,model(A/B)),
   functor(D,A,B),
   in(C,D),
   !,
   fail.
tree_refine_ok(_,_).


print_eval(A,C) :-
   evalfn_name(A,B),
   p1_message(B),
   p_message(C).


get_best_subtree(A,F,H,[D,W,V],I,B1,C1,D1) :-
   arg(42,A,B),
   arg(43,A,E),
   retractall(user:'$aleph_search'(tree_gain,_)),
   C is(-inf),
   ( B=false
   ->
     asserta(user:'$aleph_search'(tree_gain,tree_gain(C,[],[])))
   ;
     true
   ),
   split_clause(D,M,N),
   arg(4,A,_/Y),
   arg(13,A,K),
   auto_refine(E,D,G),
   tree_refine_ok(F,G),
   eval_treenode(A,F,G,H,I,L,J,T),
   J>=K,
   rm_intervals(L,I,R),
   split_clause(G,M,O),
   get_goaldiffs(N,O,P),
   extend_clause(D,not P,Q),
   eval_treenode(A,F,Q,H,R,S,U),
   S>=K,
   X is (J*T+S*U)/V,
   Z is W-X,
   ( B=false
   ->
     pp_dclause(G),
     print_eval(Y,T),
     pp_dclause(Q),
     print_eval(Y,U),
     p1_message('expected cost reduction'),
     p_message(Z),
     '$aleph_search'(tree_gain,tree_gain(A1,_,_)),
     Z>A1,
     retract(user:'$aleph_search'(tree_gain,tree_gain(A1,_,_))),
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ;
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ),
   X=< 0,
   !,
   get_best_subtree(B,D,B1,C1,D1).
get_best_subtree(A,_,_,[C|_],_,D,E,F) :-
   arg(42,A,B),
   get_best_subtree(B,C,D,E,F).


normalise_distribution([],_,[]).
normalise_distribution([C-A|E],D,[B-A|F]) :-
   B is C/D,
   normalise_distribution(E,D,F).


find_maj_class([A],A) :-
   !.
find_maj_class([B-E|A],D) :-
   find_maj_class(A,C-F),
   ( B>C
   ->
     D=B-E
   ;
     D=C-F
   ).


get_model_error(mse,B,C,A) :-
   A is (B-C)^2.
get_model_error(accuracy,A,B,C) :-
   ( A=B
   ->
     C is  0
   ;
     C is  1
   ).


sum_model_errors([],_,A,B,A,B).
sum_model_errors([B-C|G],A,F,D,J,K) :-
   get_model_error(A,B,C,E),
   I is D+E,
   H is F+1,
   sum_model_errors(G,A,H,I,J,K).


find_model_error(L,B,(A:-H),[G],M,N) :-
   functor(A,_,E),
   prolog:findall(J-I,(aleph_member(C,B),aleph_member3(D,C),example(D,pos,F),copy_iargs(E,F,A,G),once(call(user:H)),arg(G,A,I),arg(G,F,J)),K),
   sum_model_errors(K,L,0,0,M,N),
   !.


leaf_predicts(0,_,_) :-
   !,
   fail.
leaf_predicts(A,B,D) :-
   arg(A,B,C),
   var(C),
   C==D,
   !.
leaf_predicts(A,C,D) :-
   B is A-1,
   leaf_predicts(B,C,D).


auto_extend((A:-B),F,(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ),
   \+tautology((H:-I)),
   \+prune((H:-I)).


add_prediction(classification,A,B,C,_,D) :-
   extend_clause(A,B=C,D).
add_prediction(class_probability,A,B,C,_,D) :-
   extend_clause(A,random(B,C),D).
add_prediction(regression,A,B,C,D,E) :-
   extend_clause(A,random(B,normal(C,D)),E).


add_model(K,A,B,J,_,_,_) :-
   retractall(user:'$aleph_local'(tree_model,_,_,_)),
   D is inf,
   split_clause(A,C,_),
   tparg(B,C,H),
   asserta(user:'$aleph_local'(tree_model,false,0,D)),
   '$aleph_global'(model,model(E/F)),
   functor(G,E,F),
   auto_extend(A,G,I),
   leaf_predicts(F,G,H),
   lazy_evaluate_refinement([],I,[E/F],J,[],[],L),
   find_model_error(K,J,L,B,O,M),
   '$aleph_local'(tree_model,_,_,N),
   ( M<N
   ->
     retract(user:'$aleph_local'(tree_model,_,_,_)),
     asserta(user:'$aleph_local'(tree_model,L,O,M))
   ;
     true
   ),
   fail.
add_model(_,_,_,_,A,B,C) :-
   retract(user:'$aleph_local'(tree_model,A,B,C)).


addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,A,C,D)),
   A=[_|_],
   !,
   add_theory(B,A,C,D).
addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,_,A,_)),
   !,
   rm_seeds,
   worse_coversets(A,pos,B,C),
   ( C= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(D)),
     update_coversets(C,D,pos,B)
   ),
   !.
addhyp :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   !,
   add_hyp(A,B,C,D),
   rm_seeds,
   worse_coversets(C,pos,A,E),
   ( E= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(F)),
     update_coversets(E,F,pos,A)
   ),
   !.


add_prediction(B,A,D,E,F) :-
   split_clause(A,H,_),
   ( B=model
   ->
     setting(evalfn,C),
     add_model(C,A,D,E,F,_,_)
   ;
     node_stats(B,E,D,G),
     leaf_prediction(B,G,J,K),
     tparg(D,H,I),
     add_prediction(B,A,I,J,K,F)
   ).


aleph_mode_linked([B|A]) :-
   aleph_mode_linked(A,[B]).


strip_negs([],[]).
strip_negs([not A|B],[A|C]) :-
   !,
   strip_negs(B,C).
strip_negs([A|B],[A|C]) :-
   strip_negs(B,C).


greedy_prune_rule1(I,F,K,[A|B],C,_,_) :-
   retractall(user:'$aleph_search'(tree_besterror,_)),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|B],C))),
   '$aleph_global'(atoms_left,atoms_left(pos,H)),
   aleph_delete(_,B,D),
   strip_negs(D,E),
   aleph_mode_linked([A|E]),
   list_to_clause([A|D],G),
   prove(F,pos,G,H,J,_),
   node_stats(I,J,K,L-M),
   leaf_prediction(I,L-M,_,N),
   estimate_error(I,N,L,O),
   '$aleph_search'(tree_besterror,besterror(_,P)),
   O=<P,
   retract(user:'$aleph_search'(tree_besterror,besterror(_,P))),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|D],O))),
   fail.
greedy_prune_rule1(_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(tree_besterror,besterror(A,B))).


approx_z(A,2.58) :-
   A>= 0.99,
   !.
approx_z(A,B) :-
   A>= 0.98,
   !,
   B is  2.33+ (A- 0.98)* (2.58- 2.33)/ (0.99- 0.98).
approx_z(A,B) :-
   A>= 0.95,
   !,
   B is  1.96+ (A- 0.95)* (2.33- 1.96)/ (0.98- 0.95).
approx_z(A,B) :-
   A>= 0.9,
   !,
   B is  1.64+ (A- 0.9)* (1.96- 1.64)/ (0.95- 0.9).
approx_z(A,B) :-
   A>= 0.8,
   !,
   B is  1.28+ (A- 0.8)* (1.64- 1.28)/ (0.9- 0.8).
approx_z(A,B) :-
   A>= 0.68,
   !,
   B is  1+ (A- 0.68)* (1.28- 1)/ (0.8- 0.68).
approx_z(A,B) :-
   A>= 0.5,
   !,
   B is  0.67+ (A- 0.5)* (1- 0.67)/ (0.68- 0.5).
approx_z(_,0.67).


bound_error(classification,C,E,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   approx_z(A,D),
   B is C-D*sqrt(C* (1-C)/E),
   F is C+D*sqrt(C* (1-C)/E).


chi_square(A,F,K) :-
   A>0,
   C is 1-2/ (9*A),
   D is sqrt(2/ (9*A)),
   B is 1000,
   get_normal(B,C,D,E),
   sort(E,I),
   G is  1-F,
   H is integer(G*B),
   ( H>B
   ->
     aleph_remove_nth(B,I,J,_)
   ;
     aleph_remove_nth(H,I,J,_)
   ),
   K is A*J^3.


estimate_error(A/J,B/K,F,C,E,I) :-
   D is (A+B)/2,
   binom_lte(C,D,E,G),
   H is abs(F-G),
   ( H< 1e-05
   ->
     I is D
   ;
     ( G>F
     ->
       estimate_error(A/J,D/G,F,C,E,I)
     )
   ;
     estimate_error(D/G,B/K,F,C,E,I)
   ).


list_to_clause([A],(A:-true)) :-
   !.
list_to_clause([A|B],(A:-C)) :-
   list_to_goals(B,C).


greedy_prune_rule(A,B,C,D,E,H,I) :-
   greedy_prune_rule1(A,B,C,D,E,F,G),
   D\=F,
   !,
   greedy_prune_rule(A,B,C,F,G,H,I).
greedy_prune_rule(_,_,_,A,B,A,B).


estimate_error(classification,C,B,D) :-
   setting(confidence,A),
   estimate_error(1/ 0,0/ 1,A,B,C,D).
estimate_error(regression,A,1,A) :-
   !.
estimate_error(regression,G,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   C is  1-A,
   D is B-1,
   E is 1-C/2,
   chi_square(D,E,H),
   F is G*sqrt((B-1)/H).


leaf_prediction(classification,D-A,B,C) :-
   find_maj_class(A,E-B),
   C is D-E.
leaf_prediction(class_probability,B-A,F,0) :-
   length(A,C),
   laplace_correct(A,D),
   E is B+C,
   normalise_distribution(D,E,F).
leaf_prediction(regression,_-[A,B],A,B).


node_stats(A,B,C,E) :-
   '$aleph_search'(tree_startdistribution,d(A,D)),
   ( A=regression
   ->
     cont_distribution(B,C,D,E)
   ;
     discr_distribution(B,C,D,E)
   ).


prune_rule(A,I,C,[G,_,V],B,[R,P,U],T) :-
   node_stats(A,B,C,D-E),
   leaf_prediction(A,D-E,_,F),
   estimate_error(A,F,D,O),
   split_clause(G,M,H),
   goals_to_list(H,N),
   arg(14,I,J),
   arg(29,I,K),
   arg(34,I,L),
   greedy_prune_rule(A,J/K/L,C,[M|N],O,Q,P),
   list_to_clause(Q,R),
   ( P<O
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,S)),
     prove(J/K/L,pos,R,S,T,U)
   ;
     T=B,
     U=V
   ).


prune_rules1(class_probability,_,_) :-
   p_message('no pruning for class probability trees'),
   !.
prune_rules1(model,_,_) :-
   p_message('no pruning for model trees'),
   !.
prune_rules1(A,B,C) :-
   p_message('pruning clauses'),
   '$aleph_search'(tree_leaf,l(F,G,D,E)),
   prune_rule(A,B,C,D,E,H,I),
   retract(user:'$aleph_search'(tree_leaf,l(F,G,D,E))),
   asserta(user:'$aleph_search'(tree_newleaf,l(F,G,H,I))),
   fail.
prune_rules1(_,_,_) :-
   retract(user:'$aleph_search'(tree_newleaf,l(A,B,C,D))),
   asserta(user:'$aleph_search'(tree_leaf,l(A,B,C,D))),
   fail.
prune_rules1(_,_,_).


split_leaf(A,D,E,[B,C]) :-
   retract(user:'$aleph_search'(tree_leaf,l(A,F,[G,H,I],J))),
   gen_leaf(B),
   gen_leaf(C),
   D=[K,L,M,N],
   E=[O,P,Q,R],
   asserta(user:'$aleph_search'(tree,t(A,F,[G,H,I],J,B,C))),
   asserta(user:'$aleph_search'(tree_leaf,l(B,A,[K,L,M],N))),
   asserta(user:'$aleph_search'(tree_leaf,l(C,A,[O,P,Q],R))).


can_split(A,E,F,B,J,K) :-
   arg(21,A,D),
   '$aleph_search'(tree_leaf,l(B,_,[G,C,H],I)),
   C>=D,
   get_best_subtree(A,E,F,[G,C,H],I,L,J,K),
   L>=D,
   p_message('found clauses'),
   J=[P,Q|_],
   K=[M,O|_],
   arg(4,A,_/N),
   pp_dclause(M),
   print_eval(N,O),
   pp_dclause(P),
   print_eval(N,Q),
   p1_message('expected cost reduction'),
   p_message(L).


laplace_correct([],[]).
laplace_correct([C-A|D],[B-A|E]) :-
   B is C+1,
   laplace_correct(D,E).


initialise_distribution([],[]).
initialise_distribution([A|B],[0-A|C]) :-
   initialise_distribution(B,C).


add_tree(_,B,D) :-
   retract(user:'$aleph_search'(tree_leaf,l(_,_,A,E))),
   A=[C,G,H],
   add_prediction(B,C,D,E,F),
   p_message('best clause'),
   pp_dclause(F),
   nlits(C,I),
   J is-G,
   asserta(user:'$aleph_global'(hypothesis,hypothesis([H,0,I,J],F,E,[]))),
   addhyp,
   fail.
add_tree(_,_,_).


prune_rules(B,A,C) :-
   setting(prune_tree,true),
   prune_rules1(A,B,C),
   !.
prune_rules(_,_,_).


find_tree1([],_,_,_).
find_tree1([D|H],A,B,C) :-
   can_split(A,B,C,D,E,F),
   !,
   split_leaf(D,E,F,G),
   aleph_append(G,H,I),
   find_tree1(I,A,B,C).
find_tree1([_|A],B,C,D) :-
   find_tree1(A,B,C,D).


eval_treenode(A,J,E,L,F,G,M,N) :-
   arg(4,A,_/K),
   arg(13,A,I),
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,pos,E,F,G,H),
   H>=I,
   treenode_cost(J,K,E,G,L,M,N).


gen_leaf(A) :-
   retract(user:'$aleph_search'(tree_lastleaf,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_search'(tree_lastleaf,A)).
gen_leaf(0) :-
   asserta(user:'$aleph_search'(tree_lastleaf,0)).


auto_refine(false,D) :-
   example_saturated(A),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine(false,D) :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine((A:-B),(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   \+prune((H:-I)),
   \+tautology((H:-I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ).
auto_refine(A,B) :-
   auto_refine((A:-true),B).


stopwatch(A) :-
   A is cputime.


get_start_distribution(regression,0-[0,0]) :-
   !.
get_start_distribution(model,0-[0,0]) :-
   setting(evalfn,mse),
   !.
get_start_distribution(model,0-B) :-
   setting(evalfn,accuracy),
   !,
   ( setting(classes,A)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(A,B),
   !.
get_start_distribution(A,0-C) :-
   (
     A=classification
   ;
     A=class_probability
   ),
   ( setting(classes,B)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(B,C),
   !.
get_start_distribution(_,_) :-
   p_message('incorrect/missing setting for tree_type or evalfn'),
   fail.


find_tree(A) :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   get_start_distribution(A,B),
   asserta(user:'$aleph_search'(tree_startdistribution,d(A,B))),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   setting(dependent,E),
   p_message('constructing tree'),
   stopwatch(L),
   get_search_settings(C),
   auto_refine(false,D),
   gen_leaf(G),
   eval_treenode(C,A,(D:-true),[E],F,J,I,H),
   asserta(user:'$aleph_search'(tree_leaf,l(G,G,[D,H,I],J))),
   find_tree1([G],C,A,[E]),
   prune_rules(C,A,[E]),
   stopwatch(K),
   add_tree(C,A,[E]),
   M is K-L,
   p1_message('construction time'),
   p_message(M).


construct_tree(D) :-
   setting(searchtime,A),
   B is inf,
   A=\=B,
   C is integer(A),
   C>0,
   !,
   catch(time_bound_call(C,searchlimit,find_tree(D)),searchlimit,p_message('Time limit reached')).
construct_tree(A) :-
   find_tree(A).


aleph_hash_term([J,A,B,C,D|K],E) :-
   !,
   functor(A,I,_),
   functor(B,G,_),
   functor(C,H,_),
   functor(D,F,_),
   functor(E,F,6),
   arg(1,E,G),
   arg(2,E,H),
   arg(3,E,I),
   arg(4,E,[J,A,B,C,D|K]).
aleph_hash_term([H,A,B,C],D) :-
   !,
   functor(A,G,_),
   functor(B,F,_),
   functor(C,E,_),
   functor(D,E,5),
   arg(1,D,F),
   arg(2,D,G),
   arg(3,D,[H,A,B,C]).
aleph_hash_term([F,A,B],C) :-
   !,
   functor(A,E,_),
   functor(B,D,_),
   functor(C,D,4),
   arg(1,C,E),
   arg(2,C,[F,A,B]).
aleph_hash_term([D,A],B) :-
   !,
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[D,A]).
aleph_hash_term([A],B) :-
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[A]).


copy_args(_,_,A,B) :-
   A>B,
   !.
copy_args(B,C,A,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A+1,
   copy_args(B,C,E,F).


clear_cache :-
   retractall(user:'$aleph_search_cache'(_)),
   retractall(user:'$aleph_search_prunecache'(_)).


time_bound_call(A,B,C) :-
   prolog:alarm(A,throw(B),D),
   ( call(user:C)
   ->
     remove_alarm(D)
   ;
     remove_alarm(D),
     fail
   ).


index_prove1(false/_,_,_,_,_,_,A,B,_) :-
   A>B,
   !,
   fail.
index_prove1(_,_,_,_,A,B,_,_,A) :-
   A>B,
   !.
index_prove1(true/_,_,_,_,B,_,A,A,B) :-
   !.
index_prove1(K/I,D/E/C,B,G,A,M,H,O,P) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   L is A+1,
   N is H+1,
   ( I=true
   ->
     ( retract(user:'$aleph_local'(example_cache,J))
     ->
       asserta(user:'$aleph_local'(example_cache,[A|J]))
     ;
       asserta(user:'$aleph_local'(example_cache,[A]))
     )
   ;
     true
   ),
   index_prove1(K/I,D/E/C,B,G,L,M,N,O,P).
index_prove1(_,_,_,_,A,_,_,_,A).


index_prove(_,_,_,_,A-B,_,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D,E-F,G,N,O) :-
   index_prove1(A,B,C,D,E,F,0,G,H),
   I is H-1,
   K is H+1,
   ( I>=E
   ->
     J is G-H+E,
     ( J=0,
       A=true/_
     ->
       L= ([]),
       M=0
     ;
       index_prove(A,B,C,D,K-F,J,L,M)
     ),
     N=[E-I|L],
     O is H-E+M
   ;
     index_prove(A,B,C,D,K-F,G,N,O)
   ).


prove1(A) :-
   depth_bound_call(A),
   !.


index_prove1(_,_,_,A,B,A) :-
   A>B,
   !.
index_prove1(D/E/C,B,G,A,I,J) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   H is A+1,
   index_prove1(D/E/C,B,G,H,I,J).
index_prove1(_,_,_,A,_,A).


prove3([A-M|N],D/E/C,B,(G:-H),K,I,Q) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   J is A-1,
   I=[L-J|P],
   O is K+A-L,
   ( A>=M
   ->
     prove2(N,D/E/C,B,(G:-H),O,P,Q)
   ;
     R is A+1,
     !,
     prove2([R-M|N],D/E/C,B,(G:-H),O,P,Q)
   ).
prove3([A-B|F],G,H,I,D,C,L) :-
   ( A>=B
   ->
     C=[E-B|K],
     J is D+B-E+1,
     !,
     prove2(F,G,H,I,J,K,L)
   ;
     M is A+1,
     !,
     prove3([M-B|F],G,H,I,D,C,L)
   ).


prove1(user,_,B,A) :-
   prove(A,B),
   !.
prove1(restricted_sld,D/C,A,(B:-E)) :-
   \+ \+ (A=B,resource_bound_call(C,D,E)),
   !.
prove1(sld,B/A,C,_) :-
   \+ \+resource_bound_call(A,B,C),
   !.


prove2([],_,_,_,A,[],A).
prove2([A-I|J],D/E/C,B,(G:-H),K,L,M) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   ( A>=I
   ->
     prove2(J,D/E/C,B,(G:-H),K,L,M)
   ;
     N is A+1,
     !,
     prove2([N-I|J],D/E/C,B,(G:-H),K,L,M)
   ).
prove2([A-B|E],F,G,H,D,C,K) :-
   ( A>=B
   ->
     C=[A-A|J],
     I is D+1,
     !,
     prove2(E,F,G,H,I,J,K)
   ;
     L is A+1,
     C=[A-_|_],
     !,
     prove3([L-B|E],F,G,H,D,C,K)
   ).


index_prove(_,_,_,A-B,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D-E,I,K) :-
   index_prove1(A,B,C,D,E,F),
   G is F-1,
   H is F+1,
   ( G>=D
   ->
     index_prove(A,B,C,H-E,J,L),
     I=[D-G|J],
     K is F-D+L
   ;
     index_prove(A,B,C,H-E,I,K)
   ).


list_to_intervals1([],[]).
list_to_intervals1([A|B],[A-C|E]) :-
   list_to_interval(A,B,C,D),
   list_to_intervals1(D,E).


aleph_reverse(A,B) :-
   revzap(A,[],B).


collect_example_cache(D/G) :-
   retract(user:'$aleph_local'(example_cache,[A|B])),
   aleph_reverse([A|B],C),
   list_to_intervals1(C,D),
   E is A+1,
   '$aleph_global'(size,size(neg,F)),
   ( E>F
   ->
     G= ([])
   ;
     G=[E-F]
   ).


prove_intervals(A,I,J,C/B,L,M,N) :-
   !,
   arg(8,A,E),
   arg(12,A,D),
   arg(14,A,F),
   arg(29,A,G),
   arg(34,A,H),
   aleph_append(B,C,K),
   prove(D/E,F/G/H,I,J,K,L,M,N).
prove_intervals(A,G,H,I,J,K,L) :-
   arg(8,A,C),
   arg(12,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   prove(B/C,D/E/F,G,H,I,J,K,L).


prove_cached(A,K,S,B/M,L,_,C,O/R,P) :-
   !,
   arg(8,A,G),
   arg(12,A,F),
   arg(14,A,H),
   arg(29,A,I),
   arg(34,A,J),
   interval_count(B,D),
   E is C-D,
   E>=0,
   ( prove(F/G,H/I/J,K,L,M,E,N,Q)
   ->
     aleph_append(N,B,O),
     P is Q+D,
     find_lazy_left(A,K,O,R),
     update_cache(S,K,O/R),
     retractall(user:'$aleph_local'(example_cache,_))
   ;
     collect_example_cache(N/R),
     aleph_append(N,B,O),
     update_cache(S,K,O/R),
     fail
   ).
prove_cached(_,neg,_,A/B,_,_,_,A/B,C) :-
   !,
   interval_count(A,C).
prove_cached(C,_,_,A,_,_,E,A,B) :-
   interval_count(A,B),
   arg(12,C,D),
   ( D=true
   ->
     true
   ;
     B=<E
   ).


find_lazy_left(A,_,_,[]) :-
   arg(12,A,B),
   B=false,
   !.
find_lazy_left(_,_,[],[]).
find_lazy_left(C,B,[_-A],F) :-
   !,
   E is A+1,
   ( B=pos
   ->
     arg(16,C,D)
   ;
     ( B=neg
     ->
       arg(24,C,D)
     )
   ;
     ( B=rand
     ->
       arg(20,C,D)
     )
   ;
     D=A
   ),
   ( E>D
   ->
     F= ([])
   ;
     F=[E-D]
   ).
find_lazy_left(A,B,[_|C],D) :-
   find_lazy_left(A,B,C,D).


prove(_,_,_,_,[],_,[],0).
prove(A,B,C,D,[E|H],F,L,M) :-
   index_prove(A,B,C,D,E,F,K,G),
   !,
   I is F-G,
   prove(A,B,C,D,H,I,J,N),
   aleph_append(J,K,L),
   M is G+N.


update_cache(A,B,I) :-
   A\=false,
   functor(A,F,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   E=_/_,
   retract(user:'$aleph_search_cache'(A)),
   functor(G,F,C),
   H is D-1,
   copy_args(A,G,1,H),
   arg(D,G,I),
   J is D+1,
   copy_args(A,G,J,C),
   asserta(user:'$aleph_search_cache'(G)),
   !.
update_cache(_,_,_).


prove_intervals(C,D,E,B/A,G,H) :-
   !,
   aleph_append(A,B,F),
   prove(C,D,E,F,G,H).
prove_intervals(A,B,C,D,E,F) :-
   prove(A,B,C,D,E,F).


prove_cached(A,E,O,I/G,F,L,M,N) :-
   !,
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,E,F,G,H,_),
   aleph_append(H,I,K),
   ( E=pos
   ->
     arg(5,A,J),
     ( J=true
     ->
       intervals_intersection(K,L,M)
     ;
       M=K
     )
   ;
     M=K
   ),
   interval_count(M,N),
   update_cache(O,E,M).
prove_cached(B,A,H,D,_,E,F,G) :-
   ( A=pos
   ->
     arg(5,B,C),
     ( C=true
     ->
       intervals_intersection(D,E,F)
     ;
       F=D
     )
   ;
     F=D
   ),
   interval_count(F,G),
   update_cache(H,A,F).


potentially_good([1|_],[A|_]) :-
   !,
   A>1.
potentially_good([D,_,B|_],[C,_,A|_]) :-
   A=<B,
   !,
   C>D.
potentially_good([_,B|_],[_,A|_]) :-
   A<B.


potentially_good([],_,[]).
potentially_good([A|D],B,[A|E]) :-
   A=_-C,
   potentially_good(B,C),
   !,
   potentially_good(D,B,E).
potentially_good([_|A],B,C) :-
   potentially_good(A,B,C).


aleph_remove_nth(1,[A|B],A,B) :-
   !.
aleph_remove_nth(B,[A|D],E,[A|F]) :-
   C is B-1,
   aleph_remove_nth(C,D,E,F).


get_random(B,D) :-
   aleph_random(A),
   C is integer(A*B+ 0.5),
   ( C=0
   ->
     D=1
   ;
     ( C>B
     ->
       D=B
     )
   ;
     D=C
   ).


get_nextbest(D) :-
   peek_open_list(A),
   A=[B|C],
   retract(user:'$aleph_search_gain'(B,C,D,_)),
   assertz(user:'$aleph_search'(nextnode,D)).
get_nextbest(A) :-
   pop_open_list,
   get_nextbest(A),
   !.
get_nextbest(none).


rls_nextbest(rrr,_,A,_) :-
   get_nextbest(A).
rls_nextbest(gsat,_,H,I) :-
   peek_open_list(A),
   reset_open_list,
   A=[B|C],
   prolog:findall(D-E,'$aleph_search_gain'(B,C,D,E),F),
   length(F,G),
   get_random(G,D),
   aleph_remove_nth(D,F,H-I,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(wsat,C,D,E) :-
   setting(walk,B),
   aleph_random(A),
   A>=B,
   !,
   rls_nextbest(gsat,C,D,E).
rls_nextbest(wsat,D,G,H) :-
   p_message('random walk'),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   potentially_good(C,D,E),
   length(E,F),
   get_random(F,A),
   aleph_remove_nth(A,E,G-H,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(anneal,[J,A|_],F,G) :-
   setting(temperature,M),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   length(C,D),
   get_random(D,E),
   aleph_remove_nth(E,C,F-G,_),
   G=[H,I|_],
   K is H-I- (J-A),
   (
     J=1
   ;
     K>=0
   ;
     aleph_random(L),
     L<exp(K/M)
   ).


select_nextbest(rls,C) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   setting(rls_type,A),
   ( retract(user:'$aleph_search'(rls_parentstats,stats(B,_,_)))
   ->
     true
   ;
     true
   ),
   ( rls_nextbest(A,B,C,D)
   ->
     asserta(user:'$aleph_search'(rls_parentstats,stats(D,[],[]))),
     setting(rls_type,E),
     ( E=rrr
     ->
       true
     ;
       assertz(user:'$aleph_search'(nextnode,C))
     )
   ;
     C=none
   ),
   !.
select_nextbest(_,A) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   get_nextbest(A),
   !.
select_nextbest(_,none).


built_in_prune(coverage).
built_in_prune(compression).
built_in_prune(posonly).
built_in_prune(laplace).
built_in_prune(wracc).
built_in_prune(mestimate).
built_in_prune(auto_m).


get_node([[A|B] |_],[A|B],C) :-
   '$aleph_search_gain'(A,B,C,_).
get_node([_|A],B,C) :-
   get_node(A,B,C).


record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).
record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).


show_theory(A,D,B,E) :-
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good theory')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found theory')
   ),
   pp_dclauses(B),
   ( setting(evalfn,C)
   ->
     true
   ;
     C=accuracy
   ),
   show_stats(C,D),
   p1_message('theory label'),
   p_message(D),
   p1_message('theories constructed'),
   p_message(E),
   p_message(-------------------------------------).


update_good(_,_,_,_) :-
   setting(goodfile,_),
   !.
update_good(true,A,B,C) :-
   '$aleph_good'(A,B,C),
   !.
update_good(_,A,B,C) :-
   assertz(user:'$aleph_good'(A,B,C)),
   ( retract(user:'$aleph_search'(last_good,D))
   ->
     E is D+1
   ;
     E is 1
   ),
   assertz(user:'$aleph_search'(last_good,E)).


record_clause(good,B,D,_) :-
   setting(good,true),
   setting(goodfile_stream,A),
   !,
   set_output(A),
   B=[_,_,C|_],
   aleph_writeq('$aleph_good'(C,B,D)),
   write('.'),
   nl,
   flush_output(A),
   set_output(user_output).
record_clause(A,C,D,E) :-
   A\=good,
   setting(recordfile_stream,B),
   !,
   set_output(B),
   show_clause(A,C,D,E),
   flush_output(B),
   set_output(user_output).
record_clause(_,_,_,_).


show_clause(good,_,_,_) :-
   !.
show_clause(A,B,C,D) :-
   broadcast(clause(A,B,C,D)),
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good clause')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found clause')
   ),
   pp_dclause(C),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,B),
   has_good_clause_hook(B,C,D),
   p1_message('clause label'),
   p_message(B),
   p1_message('clauses constructed'),
   p_message(D),
   p_message(-------------------------------------).


newbest_hook(_,_,_) :-
   setting(newbest_hook,true),
   !.
newbest_hook(B,C,D) :-
   setting(newbest_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.


update_good(A,D) :-
   setting(good,true),
   !,
   A=[_,_,C|_],
   setting(check_good,B),
   update_good(B,C,A,D).
update_good(_,_).


best_value(gini,_,_,0) :-
   !.
best_value(entropy,_,_,0) :-
   !.
best_value(posonly,A,[C,_,E|_],B) :-
   arg(20,A,D),
   B is log(C)+log(D+ 2)- (E+1)/C,
   !.
best_value(wracc,_,[B|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B* (C-D)/C^2
   ;
     A is  0.25
   ),
   !.
best_value(B,_,[C,_,A|E],F) :-
   D is A+1,
   evalfn(B,[C,0,D|E],F).


add_prune_cache(false) :-
   !.
add_prune_cache(A) :-
   ( '$aleph_global'(caching,set(caching,true))
   ->
     functor(A,_,B),
     C is B-2,
     arg(C,A,D),
     asserta(user:'$aleph_search_prunecache'(D))
   ;
     true
   ).


uniq_insert(_,A,[],[A]).
uniq_insert(descending,A,[B|C],[A,B|C]) :-
   A@>B,
   !.
uniq_insert(ascending,A,[B|C],[A,B|C]) :-
   A@<B,
   !.
uniq_insert(_,A,[A|B],[A|B]) :-
   !.
uniq_insert(B,C,[A|D],[A|E]) :-
   !,
   uniq_insert(B,C,D,E).


pop_open_list :-
   ( recorded('$aleph_search_openlist',[_|B],A)
   ->
     true
   ;
     !,
     fail
   ),
   erase(A),
   recorda('$aleph_search_openlist',B,_),
   fail.
pop_open_list.


peek_open_list(A) :-
   recorded('$aleph_search_openlist',[A|_],_).


open_list(A) :-
   recorded('$aleph_search_openlist',A,_).


reset_open_list :-
   recorded('$aleph_search_openlist',_,A),
   erase(A),
   recorda('$aleph_search_openlist',[],_),
   fail.
reset_open_list.


destroy_open_list :-
   eraseall('$aleph_search_openlist').


init_open_list :-
   recorda('$aleph_search_openlist',[],_).


get_max_negs(D/B,A,C) :-
   number(A),
   ( B=:= 0
   ->
     C is D
   ;
     E is integer((1-B)*A/B),
     ( D<E
     ->
       C is D
     ;
       C is E
     )
   ),
   !.
get_max_negs(A/_,_,A).


prove_cache(exact,E,J,U,K,A,C,P,R) :-
   !,
   ( A=B/L
   ->
     interval_count(B,D),
     M is C-D,
     arg(12,E,F),
     arg(14,E,G),
     arg(29,E,H),
     arg(34,E,I),
     prove(F/false,G/H/I,J,K,L,M,N,S),
     aleph_append(N,B,O),
     find_lazy_left(E,J,O,Q),
     P=O/Q,
     R is D+S
   ;
     P=A,
     interval_count(A,R)
   ),
   arg(8,E,T),
   ( T=true
   ->
     add_cache(U,J,P)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I,J) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I,J)
   ;
     ( prove_intervals(A,D,F,G,H,K,J)
     ->
       find_lazy_left(A,D,K,L),
       add_cache(C,D,K/L),
       I=K/L,
       retractall(user:'$aleph_local'(example_cache,_))
     )
   ;
     collect_example_cache(I),
     add_cache(C,D,I),
     fail
   ).
prove_cache(upper,A,J,_,K,B,M,N/P,O) :-
   arg(8,A,F),
   arg(12,A,E),
   arg(14,A,G),
   arg(29,A,H),
   arg(34,A,I),
   ( B=D/C
   ->
     aleph_append(C,D,L),
     prove(E/F,G/H/I,J,K,L,M,N,O)
   ;
     prove(E/F,G/H/I,J,K,B,M,N,O)
   ),
   find_lazy_left(A,J,N,P).


lazy_prove_neg(B,D,E,[A,C|_],[A,_],F,G,I,J) :-
   arg(4,B,bf/coverage),
   !,
   H is C+1,
   prove_cache(D,B,neg,E,F,G,H,I,J),
   !.
lazy_prove_neg(A,F,G,_,[D,_],H,I,K,L) :-
   arg(17,A,B),
   arg(18,A,C),
   get_max_negs(B/C,D,E),
   J is E+1,
   prove_cache(F,A,neg,G,H,I,J,K,L),
   !.


prove_cache(exact,B,F,P,G,A,K,L) :-
   !,
   ( A=J/H
   ->
     arg(14,B,C),
     arg(29,B,D),
     arg(34,B,E),
     prove(C/D/E,F,G,H,I,N),
     aleph_append(I,J,K),
     interval_count(J,M),
     L is M+N
   ;
     K=A,
     interval_count(K,L)
   ),
   arg(8,B,O),
   ( O=true
   ->
     add_cache(P,F,K)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I) :-
   arg(8,A,B),
   B=true,
   !,
   arg(14,A,J),
   arg(29,A,K),
   arg(34,A,L),
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I)
   ;
     prove_intervals(J/K/L,D,F,G,H,I),
     add_cache(C,D,H)
   ).
prove_cache(upper,A,H,_,I,B,K,L) :-
   arg(14,A,E),
   arg(29,A,F),
   arg(34,A,G),
   ( B=D/C
   ->
     aleph_append(C,D,J),
     prove(E/F/G,H,I,J,K,L)
   ;
     prove(E/F/G,H,I,B,K,L)
   ).


pos_ok(A,_,_,_,_,_) :-
   arg(3,A,B),
   (
     B=rls
   ;
     B=user
   ),
   !.
pos_ok(A,E,_,[B,_],_,_) :-
   arg(13,A,C),
   B<C,
   !,
   arg(8,A,D),
   ( D=true
   ->
     add_prune_cache(E)
   ;
     true
   ),
   fail.
pos_ok(A,F,_,[C,_],_,_) :-
   arg(40,A,B),
   B> 0,
   '$aleph_search'(clauseprior,_-[D-pos,_]),
   C/D<B,
   !,
   arg(8,A,E),
   ( E=true
   ->
     add_prune_cache(F)
   ;
     true
   ),
   fail.
pos_ok(A,_,[_,_,_,H|_],[D,E],_,_) :-
   arg(4,A,_/B),
   arg(2,A,C),
   (
     (
       B=user
     ;
       C=true
     )
   ->
     true
   ;
     evalfn(B,[D,0,E],F),
     best_value(B,A,[D,0,E,F],G),
     G>H
   ),
   !.


evalfn(compression,[A,C,D|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C-D+1
   ),
   !.
evalfn(coverage,[A,C,_|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C
   ),
   !.
evalfn(laplace,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is (A+1)/ (A+C+2)
   ),
   !.
evalfn(wracc,[B,E|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B/C-D/C* ((B+E)/C)
   ;
     A is  -0.25
   ),
   !.
evalfn(entropy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     A is 0
   ;
     ( C is 0
     ->
       B is  0
     )
   ;
     D is A+C,
     E is A/D,
     F is 1-E,
     B is- (E*log(E)+F*log(F))/log(2)
   ),
   !.
evalfn(gini,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     D is A+C,
     E is A/D,
     B is 2*E* (1-E)
   ),
   !.
evalfn(accuracy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is A/ (A+C)
   ),
   !.
evalfn(pbayes,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     G is A/ (A+C),
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(F-pos,E),
     ( 0 is F-G
     ->
       B=F
     ;
       H is G* (1-G)/ (F-G)^2,
       B is (A+H*F)/ (A+C+H)
     )
   ),
   !.
evalfn(posonly,[B,0,D|_],A) :-
   '$aleph_global'(size,size(rand,C)),
   A is log(B)+log(C+ 2)- (D+1)/B,
   !.
evalfn(auto_m,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     F is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(H-pos,E),
     G is sqrt(F),
     B is (A+G*H)/ (F+G)
   ),
   !.
evalfn(mestimate,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     H is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(I-pos,E),
     ( setting(m,F)
     ->
       G=F
     ;
       G is sqrt(H)
     ),
     B is (A+G*I)/ (H+G)
   ),
   !.
evalfn(_,_,A) :-
   A is(-inf).


add_cache(false,_,_) :-
   !.
add_cache(A,B,E) :-
   ( retract(user:'$aleph_search_cache'(A))
   ->
     true
   ;
     true
   ),
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   ( arg(D,A,E)
   ->
     asserta(user:'$aleph_search_cache'(A))
   ;
     true
   ),
   !.


maxlength_neg_ok(B/D,E,C,A) :-
   (
     A>B
   ;
     C/ (C+A)<D
   ),
   !,
   add_prune_cache(E),
   fail.
maxlength_neg_ok(_,_,_,_).


prove_neg(A,_,C,_,_,_,[],[],0) :-
   arg(8,A,B),
   ( B=true
   ->
     add_cache(C,neg,[])
   ;
     true
   ),
   !.
prove_neg(A,C,D,_,_,E,F,G,H) :-
   arg(3,A,B),
   B=rls,
   !,
   prove_cache(C,A,neg,D,E,F,G,H).
prove_neg(_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(coversn,coversn(A,B)),
   !.
prove_neg(A,C,D,E,F,G,H,I,J) :-
   arg(12,A,B),
   B=true,
   !,
   lazy_prove_neg(A,C,D,E,F,G,H,I,J).
prove_neg(B,E,F,[A,0,D|_],[A,C],G,H,[],0) :-
   arg(4,B,bf/coverage),
   C is D-1,
   !,
   prove_cache(E,B,neg,F,G,H,0,[],0),
   !.
prove_neg(B,H,I,[A,F|_],[A,D],J,K,L,M) :-
   arg(4,B,bf/coverage),
   !,
   arg(7,B,C),
   ( C=D
   ->
     arg(2,B,E),
     ( E=true
     ->
       G is F
     ;
       G is F-1
     ),
     G>=0,
     prove_cache(H,B,neg,I,J,K,G,L,M),
     M=<G
   ;
     prove_cache(H,B,neg,I,J,K,L,M)
   ),
   !.
prove_neg(A,G,H,_,[F,C],I,J,L,M) :-
   arg(7,A,B),
   B=C,
   !,
   arg(17,A,D),
   arg(18,A,E),
   get_max_negs(D/E,F,K),
   prove_cache(G,A,neg,H,I,J,K,L,M),
   M=<K,
   !.
prove_neg(B,A,C,_,_,D,E,F,G) :-
   prove_cache(A,B,neg,C,D,E,F,G),
   !.


find_posgain(A,B) :-
   '$aleph_global'(greedy,set(greedy,true)),
   !,
   interval_count(A,B).
find_posgain(B,D) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_intersection(A,B,C),
   interval_count(C,D).


prove_rand(B,A,C,D,E,F,G) :-
   prove_cache(A,B,rand,C,D,E,F,G),
   !.


prove_pos(_,_,_,_,_,_,[],[],0) :-
   !.
prove_pos(C,_,D,E,F,G,_,A,B) :-
   '$aleph_search'(covers,covers(A,B)),
   !,
   pos_ok(C,D,E,F,G,A).
prove_pos(B,A,C,H,I,D,E,F,G) :-
   prove_cache(A,B,pos,C,D,E,F,G),
   pos_ok(B,C,H,I,D,F),
   !.


prove_lazy_cached(A,C,E,G,D,F) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,pos,D)
   ->
     true
   ;
     add_cache(C,pos,E),
     D=E
   ),
   ( check_cache(C,neg,F)
   ->
     true
   ;
     add_cache(C,neg,G),
     F=G
   ).
prove_lazy_cached(_,_,A,B,A,B).


resource_bound_call(A,D,C) :-
   B is inf,
   A=:=B,
   !,
   prolog:depth_bound_call(call(user:C),D).
resource_bound_call(A,C,B) :-
   catch(time_bound_call(A,prooflimit,depth_bound_call(B,C)),prooflimit,fail).


lazy_ccheck(A,D,E) :-
   arg(14,A,C),
   arg(17,A,G),
   arg(29,A,B),
   retractall(user:'$aleph_local'(subst_count,_)),
   asserta(user:'$aleph_local'(subst_count,0)),
   resource_bound_call(B,C,D),
   retract(user:'$aleph_local'(subst_count,F)),
   E is F+1,
   E>G,
   !.
lazy_ccheck(_,_,A) :-
   retract(user:'$aleph_local'(subst_count,A)).


get_aleph_lit(_,_,0) :-
   !.
get_aleph_lit(B,D,A) :-
   arg(A,B,C),
   ( var(C)
   ->
     arg(A,D,C)
   ;
     arg(A,D,aleph_const(C))
   ),
   E is A-1,
   get_aleph_lit(B,D,E),
   !.


get_aleph_lits((A,C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_lits(A,B) :-
   get_aleph_lit(A,B).


get_aleph_lit(A,B) :-
   functor(A,C,D),
   functor(B,C,D),
   get_aleph_lit(A,B,D).


integrate_head_lit(C) :-
   example_saturated(A),
   split_args(A,_,_,B,_),
   integrate_args(unknown,A,B),
   match_mode(head,A),
   flatten_matched_atoms(head),
   get_ivars1(false,1,C),
   !.
integrate_head_lit([]).


match_mode(_,true) :-
   !.
match_mode(D,A) :-
   functor(A,B,C),
   functor(E,B,C),
   ( D=head
   ->
     '$aleph_global'(modeh,modeh(_,E))
   ;
     '$aleph_global'(modeb,modeb(_,E))
   ),
   split_args(E,E,G,F,H),
   ( D=head
   ->
     update_atoms(A,mode(E,F,G,H))
   ;
     update_atoms(A,mode(E,G,F,H))
   ),
   fail.
match_mode(_,_).


flatten_matched_atoms(C) :-
   setting(i,D),
   ( retract(user:'$aleph_sat'(botsize,A))
   ->
     true
   ;
     A=0
   ),
   ( retract(user:'$aleph_sat'(lastlit,B))
   ->
     true
   ;
     B=0
   ),
   ( C=head
   ->
     flatten(0,D,A,E)
   ;
     flatten(0,D,B,E)
   ),
   asserta(user:'$aleph_sat'(botsize,E)),
   ( B<E
   ->
     asserta(user:'$aleph_sat'(lastlit,E))
   ;
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   !.
flatten_matched_atoms(_).


match_body_modes((A,B)) :-
   !,
   match_mode(body,A),
   match_body_modes(B).
match_body_modes(A) :-
   match_mode(body,A).


reinstate(searchstate) :-
   !,
   retractall(user:'$aleph_global'(atoms_left,atoms_left(_,_))),
   retractall(user:'$aleph_global'(size,size(_,_))),
   ( '$aleph_global'(save,save(searchstate,atoms_left(pos,A)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,A)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,atoms_left(neg,B)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,B)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(pos,C)))
   ->
     asserta(user:'$aleph_global'(size,size(pos,C)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(neg,D)))
   ->
     asserta(user:'$aleph_global'(size,size(neg,D)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(noise,E)))
   ->
     set(noise,E)
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(minacc,F)))
   ->
     set(minacc,F)
   ;
     true
   ),
   retractall(user:'$aleph_global'(save,save(searchstate,_))).
reinstate(A) :-
   retract(user:'$aleph_global'(save,save(A,B))),
   !,
   ( B=unknown
   ->
     noset(A)
   ;
     set(A,B)
   ).
reinstate(_).


match_lazy_bottom1(A) :-
   call(user:A),
   match_body_modes(A),
   fail.
match_lazy_bottom1(_) :-
   flatten_matched_atoms(body).


store(searchstate) :-
   !,
   retractall(user:'$aleph_global'(save,save(searchstate,_))),
   ( '$aleph_global'(atoms_left,atoms_left(pos,A))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(pos,A))))
   ;
     true
   ),
   ( '$aleph_global'(atoms_left,atoms_left(neg,B))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(neg,B))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(pos,C))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(pos,C))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(neg,D))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(neg,D))))
   ;
     true
   ),
   ( '$aleph_global'(noise,set(noise,E))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(noise,E))))
   ;
     true
   ),
   ( '$aleph_global'(minacc,set(minacc,F))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(minacc,F))))
   ;
     true
   ).
store(bottom) :-
   !,
   ( '$aleph_global'(store_bottom,set(store_bottom,true))
   ->
     store_bottom
   ;
     true
   ).
store(A) :-
   ( '$aleph_global'(A,set(A,B))
   ->
     true
   ;
     B=unknown
   ),
   retractall(user:'$aleph_global'(save,save(A,_))),
   asserta(user:'$aleph_global'(save,save(A,B))).


example_saturated(C) :-
   '$aleph_sat'(example,example(A,B)),
   example(A,B,C).


match_bot_lit(B,A) :-
   '$aleph_sat'(botsize,C),
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   A>=0,
   A=<C.


match_bot_lits((A,D),C,[B|E]) :-
   !,
   match_bot_lit(A,B),
   \+aleph_member(B,C),
   match_bot_lits(D,[B|C],E).
match_bot_lits(A,C,[B]) :-
   match_bot_lit(A,B),
   \+aleph_member(B,C).


get_aleph_clause((A:-true),B) :-
   !,
   get_aleph_lit(A,B).
get_aleph_clause((A:-C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_clause(A,B) :-
   get_aleph_lit(A,B).


match_lazy_bottom(A,F) :-
   once(get_aleph_clause(A,E)),
   copy_term(A,B),
   split_clause(B,C,D),
   example_saturated(C),
   store(stage),
   set(stage,saturation),
   match_lazy_bottom1(D),
   reinstate(stage),
   match_bot_lits(E,[],F).


match_bot(false,A,A,[]).
match_bot(reduction,A,C,B) :-
   match_lazy_bottom(A,B),
   get_pclause(B,[],C,_,_,_).
match_bot(saturation,A,D,C) :-
   once(get_aleph_clause(A,B)),
   match_bot_lits(B,[],C),
   get_pclause(C,[],D,_,_,_).


auto_refine(1,A,B) :-
   !,
   auto_refine(A,B).
auto_refine(A,C,D) :-
   B is A-1,
   auto_refine(B,C,E),
   (
     D=E
   ;
     auto_refine(E,D)
   ).


get_clause_prior(A,G,K-[H-pos,J-neg]) :-
   arg(5,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   '$aleph_global'(atoms_left,atoms_left(neg,I)),
   prove(D/E/F,pos,(G:-true),C,_,H),
   prove(D/E/F,neg,(G:-true),I,_,J),
   K is H+J.


optimise(A,C) :-
   remove_redundant(A,B),
   reorder_clause(B,C).


second_rewrite_clause(sld,_,_,(A:-A)) :-
   !.
second_rewrite_clause(restricted_sld,true,(A:-B),(C:-D)) :-
   !,
   optimise((A:-B),(C:-D)).
second_rewrite_clause(_,_,A,A).


user_clause_rewrite(A,A) :-
   setting(clause_rewrite_hook,true),
   !.
user_clause_rewrite(B,C) :-
   setting(clause_rewrite_hook,A),
   prolog:call(call(user:A),B,C),
   !.


aleph_delete_all(_,[],[]).
aleph_delete_all(A,[B|C],D) :-
   A==B,
   !,
   aleph_delete_all(A,C,D).
aleph_delete_all(B,[A|C],[A|D]) :-
   aleph_delete_all(B,C,D).


aleph_ord_subtract(A,[],A) :-
   !.
aleph_ord_subtract([],_,[]) :-
   !.
aleph_ord_subtract([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_subtract(C,A,D,B,E,F).


vars_in_term([],A,B) :-
   sort(A,B),
   !.
vars_in_term([A|B],C,D) :-
   var(A),
   !,
   vars_in_term(B,[A|C],D).
vars_in_term([A|D],C,F) :-
   A=..[_|B],
   !,
   vars_in_term(B,C,E),
   vars_in_term(D,E,F).
vars_in_term([_|A],B,C) :-
   vars_in_term(A,B,C).


newvars_ok(A,_,_) :-
   A is inf,
   !.
newvars_ok(H,A,B) :-
   vars_in_term([A],[],E),
   goals_to_list(B,C),
   vars_in_term(C,[],D),
   aleph_ord_subtract(D,E,F),
   length(F,G),
   G=<H.


lang_ok1([],_).
lang_ok1([B|A],G) :-
   length(A,D),
   aleph_delete_all(B,A,C),
   length(C,E),
   F is D-E+1,
   F=<G,
   lang_ok1(C,G).


get_psyms((A,D),[B/C|E]) :-
   !,
   functor(A,B,C),
   get_psyms(D,E).
get_psyms(true,[]) :-
   !.
get_psyms(A,[B/C]) :-
   functor(A,B,C).


lang_ok(A,_,_) :-
   A is inf,
   !.
lang_ok(D,A,B) :-
   get_psyms((A,B),C),
   lang_ok1(C,D).


execute_equality(A) :-
   functor(A,=,2),
   !,
   call(user:A).
execute_equality(_).


lit_redun(A,(B:-C)) :-
   !,
   lit_redun(A,(B,C)).
lit_redun(A,(B,_)) :-
   A==B,
   !.
lit_redun(B,(A,C)) :-
   !,
   execute_equality(A),
   lit_redun(B,C).
lit_redun(A,B) :-
   A==B.


check_cache(A,B,E) :-
   A\=false,
   '$aleph_search_cache'(A),
   !,
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   nonvar(E).


extract_neg([_,A|_],A).


extract_pos([A|_],A).


clause_ok(_,_) :-
   false,
   !,
   fail.
clause_ok(_,A) :-
   extract_pos(A,B),
   extract_neg(A,C),
   E is B/ (B+C),
   setting(noise,D),
   setting(minacc,F),
   setting(minpos,G),
   (
     C>D
   ;
     E<F
   ;
     B<G
   ),
   !,
   fail.
clause_ok(A,_) :-
   prune(A),
   !,
   fail.
clause_ok(A,_) :-
   setting(language,B),
   \+lang_ok(A,B),
   !,
   fail.
clause_ok(A,_) :-
   setting(newvars,B),
   \+newvars_ok(A,B),
   !,
   fail.
clause_ok(_,_).


update_best(B,_,_,_,A,[C,_,_,E|_]/_,A) :-
   arg(13,B,D),
   arg(19,B,F),
   (
     C<D
   ;
     E is(-inf)
   ;
     E<F
   ),
   !.
update_best(B,_,_,_,A,[D|_]/_,A) :-
   arg(40,B,C),
   C> 0,
   '$aleph_search'(clauseprior,_-[E-pos,_]),
   D/E<C,
   !.
update_best(B,_,_,_,A,[D,E,_,_|_]/_,A) :-
   arg(4,B,_/C),
   C\=posonly,
   arg(17,B,F),
   arg(18,B,I),
   arg(22,B,G),
   H is D+E,
   (
     E>F
   ;
     G\=ic,
     H>0,
     D/H<I
   ),
   !.
update_best(I,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   arg(35,I,J),
   ( J=true
   ->
     retractall(user:'$aleph_search'(best,_)),
     asserta(user:'$aleph_search'(best,B)),
     asserta(user:'$aleph_search'(good,B))
   ;
     true
   ),
   update_good(A,F),
   newbest_hook(A,F,B),
   show_clause(newbest,A,F,B),
   record_clause(newbest,A,F,B),
   record_clause(good,A,F,B).
update_best(C,G,_,_,A/B,F/E,A/B) :-
   arg(35,C,D),
   ( D=true
   ->
     asserta(user:'$aleph_search'(good,E))
   ;
     true
   ),
   update_good(F,G),
   record_clause(good,F,G,E).


clause_ok(false,A,B) :-
   aleph_subset1(A,B).


compression_ok(compression,[A,_,B|_]) :-
   !,
   A-B+1>0.
compression_ok(_,_).


estimate_label(E,[D,F|A],[G,J|A]) :-
   '$aleph_global'(atoms_left,atoms_left(pos,B)),
   '$aleph_global'(atoms_left,atoms_left(neg,C)),
   interval_count(B,I),
   interval_count(C,L),
   H is D/E,
   K is F/E,
   G is integer(H*I),
   J is integer(K*L).


reset_clause_prior(A,C) :-
   arg(3,A,B),
   B=false,
   !,
   ( '$aleph_search'(clauseprior,_)
   ->
     true
   ;
     get_clause_prior(A,C,D),
     assertz(user:'$aleph_search'(clauseprior,D))
   ).
reset_clause_prior(C,A) :-
   copy_term(A,B),
   numbervars(B,0,_),
   ( '$aleph_local'(clauseprior,prior(B,D))
   ->
     true
   ;
     get_clause_prior(C,A,D),
     assertz(user:'$aleph_local'(clauseprior,prior(B,D)))
   ),
   retractall(user:'$aleph_search'(clauseprior,_)),
   assertz(user:'$aleph_search'(clauseprior,D)).


prove_examples(B,K,E,F,L,A,N,_,O,G,H,I,J,[Q,S,A,W,U]) :-
   arg(4,B,_/C),
   C=posonly,
   !,
   arg(11,B,D),
   ( D=true,
     E=true
   ->
     prove_lazy_cached(B,F,G,H,I,J),
     interval_count(I,M),
     interval_count(J,P)
   ;
     prove_pos(B,K,F,L,[M,N],O,G,I,M),
     prove_rand(B,K,F,O,H,J,P)
   ),
   find_posgain(I,Q),
   arg(16,B,V),
   arg(20,B,R),
   T is (P+ 1)/ (R+ 2),
   X is log(Q),
   S is log(T),
   U is T*V/Q,
   Y is A/Q,
   W is X-S-Y.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   qpacks:qpacks(on),
   !,
   qpacks:qpack_add(D,E),
   F=10000,
   G=1000.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   setting(prefix_trees,true),
   !,
   trie_add(D,E),
   interval_count(A,F),
   interval_count(B,G).
prove_examples(D,_,_,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(10,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(D,_,true,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(11,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(B,F,_,G,H,A,Q,_,J,E,K,R,L,[P,M,A]) :-
   arg(3,B,C),
   (
     C=false
   ;
     C=auto
   ),
   arg(7,B,D),
   D=A,
   !,
   interval_count(E,I),
   prove_neg(B,F,G,H,[I,A],J,K,L,M),
   arg(17,B,N),
   arg(18,B,O),
   maxlength_neg_ok(N/O,G,I,M),
   prove_pos(B,F,G,H,[P,Q],J,E,R,P),
   maxlength_neg_ok(N/O,G,P,M),
   !.
prove_examples(B,C,_,D,E,A,G,_,H,I,K,J,L,[F,M,A]) :-
   prove_pos(B,C,D,E,[F,G],H,I,J,F),
   prove_neg(B,C,D,E,[F,A],H,K,L,M),
   !.


ccheck(C,(false:-A),[],[0,B|_]) :-
   ( A=true
   ->
     B is inf
   ;
     arg(11,C,D),
     ( D=false
     ->
       arg(14,C,F),
       arg(29,C,E),
       prolog:findall(G,(resource_bound_call(E,F,A),G=1),H),
       length(H,B)
     ;
       lazy_ccheck(C,A,B)
     )
   ).


rewrite_clause(C,D,A,F) :-
   user_clause_rewrite(A,B),
   discretization_rewrite(B,E),
   second_rewrite_clause(C,D,E,F).


newvars_ok((B:-C),A) :-
   !,
   ( newvars_ok(A,B,C)
   ->
     true
   ;
     p_message('outside newvars bound'),
     fail
   ).


lang_ok((B:-C),A) :-
   !,
   ( lang_ok(A,B,C)
   ->
     true
   ;
     p_message('outside language bound'),
     fail
   ).


refinement_ok(false,_) :-
   !.
refinement_ok(rls,_) :-
   !.
refinement_ok(_,false) :-
   !.
refinement_ok(_,A) :-
   (
     check_cache(A,pos,_)
   ;
     check_cache(A,neg,_)
   ),
   !,
   p_message('redundant refinement'),
   fail.
refinement_ok(_,_).


get_cache_entry(C,A,F) :-
   skolemize(A,E,B,0,_),
   length(B,D),
   C>=D+1,
   aleph_hash_term([E|B],F),
   !.
get_cache_entry(_,_,false).


skolemize((A:-B),C,G,E,F) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),E,F),
   goals_to_list(D,G).
skolemize(A,B,[],C,D) :-
   copy_term(A,B),
   numbervars(B,C,D).


abandon_branch(A,C) :-
   arg(9,A,B),
   B=true,
   prune(C),
   !,
   arg(6,A,D),
   ( D>=1
   ->
     p_message(pruned)
   ;
     true
   ).


update_best_theory(B,_,_,_,A,[E,C,_,G|_]/_,A) :-
   arg(17,B,D),
   arg(18,B,F),
   arg(19,B,H),
   (
     C>D
   ;
     E/ (E+C)<F
   ;
     G<H
   ),
   !.
update_best_theory(_,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   show_theory(newbest,A,F,B),
   record_theory(newbest,A,F,B),
   record_theory(good,A,F,B).
update_best_theory(_,C,_,_,A,B/_,A) :-
   show_theory(good,B,C,D),
   record_theory(good,B,C,D).


update_open_list([A|B],C,D) :-
   assertz(user:'$aleph_search_gain'(A,B,C,D)),
   recorded('$aleph_search_openlist',F,E),
   erase(E),
   uniq_insert(descending,[A|B],F,G),
   recorda('$aleph_search_openlist',G,_),
   fail.
update_open_list([_|_],_,_).


get_search_keys(bf,[_,_,C,A|_],[B|A]) :-
   !,
   B is -1*C.
get_search_keys(df,[_,_,A,B|_],[A|B]) :-
   !.
get_search_keys(_,[_,_,C,A|_],[A|B]) :-
   B is -1*C.


complete_label(posonly,_,A,A) :-
   !.
complete_label(user,D,[A,B,C],[A,B,C,E]) :-
   cost(D,[A,B,C],F),
   !,
   E is-F.
complete_label(entropy,_,[A,B,C],[A,B,C,D]) :-
   evalfn(entropy,[A,B,C],E),
   D is-E,
   !.
complete_label(gini,_,[A,B,C],[A,B,C,D]) :-
   evalfn(gini,[A,B,C],E),
   D is-E,
   !.
complete_label(D,_,[A,B,C],[A,B,C,E]) :-
   evalfn(D,[A,B,C],E),
   !.
complete_label(_,_,_,_) :-
   p_message1(error),
   p_message('incorrect evaluation/cost function'),
   fail.


theory_newvars_ok([],_).
theory_newvars_ok([_-[_,_,_,B] |C],A) :-
   newvars_ok(A,B),
   theory_newvars_ok(C,A).


theory_lang_ok([],_).
theory_lang_ok([_-[_,_,_,B] |C],A) :-
   lang_ok(A,B),
   theory_lang_ok(A,C).


nlits((_:-A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits((_,A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits(_,1).


lazy_evaluate_refinement([],A,C,D,E,[],G) :-
   clause_to_list(A,B),
   lazy_evaluate_refinement(B,C,[],D,E,F),
   list_to_clause(F,G),
   !.
lazy_evaluate_refinement(A,_,B,C,D,E,F) :-
   A\= ([]),
   lazy_evaluate_refinement(A,B,[],C,D,E),
   get_pclause(E,[],F,_,_,_),
   !.
lazy_evaluate_refinement(A,B,_,_,_,A,B).


get_theory_gain1(C,D,B,B1,K,L,P,N,C1) :-
   ( false
   ->
     p_message('constraint violated'),
     A=true
   ;
     A=false
   ),
   A=false,
   X is B+1,
   arg(32,C,E),
   theory_lang_ok(D,E),
   arg(38,C,F),
   theory_newvars_ok(D,F),
   arg(14,C,G),
   arg(29,C,H),
   arg(34,C,I),
   prove(G/H/I,pos,(J:-J),K,Y,M),
   prove(G/H/I,neg,(J:-J),L,Z,O),
   arg(4,C,_/T),
   Q is M+ (N-O),
   R is O+ (P-M),
   length(D,S),
   U=[Q,R,S],
   complete_label(T,D,U,V),
   get_search_keys(heuristic,V,A1),
   arg(6,C,W),
   ( W>=1
   ->
     p_message(Q/R)
   ;
     true
   ),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(X,(J:-J)))
   ;
     true
   ),
   asserta_aleph_search_node(X,D,[],0,Y,Z,[],0),
   update_open_list(A1,X,V),
   update_best_theory(C,D,Y,Z,B1,V/X,C1),
   !.
get_theory_gain1(_,_,_,A,_,_,_,_,A).


record_pclauses([]).
record_pclauses([_-[_,_,_,A] |D]) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   record_pclauses(D).


pp_dclauses(A) :-
   aleph_member(_-[_,_,_,B],A),
   pp_dclause(B),
   fail.
pp_dclauses(_) :-
   nl.


lazy_evaluate_theory([],_,_,_,[]).
lazy_evaluate_theory([A|M],D,E,F,[G|N]) :-
   A=H-[I,J,B,C],
   lazy_evaluate_refinement(B,C,D,E,F,K,L),
   G=H-[I,J,K,L],
   lazy_evaluate_theory(M,D,E,F,N).


user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,true),
   !,
   match_bot(A,B,C,D).
user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,E),
   match_bot(A,B,C,D),
   prolog:call(call(user:E),C).


get_user_refinement(auto,A,B,C,0) :-
   auto_refine(A,B,C).
get_user_refinement(user,_,A,B,0) :-
   refine(A,B).


get_refine_gain1(A,B,O,F,G,Y,Z,A1,C1) :-
   arg(23,A,C),
   B=J-[K,L,D,E],
   ( C= ([])
   ->
     H=D,
     I=E
   ;
     lazy_evaluate_refinement(D,E,C,F,G,H,I)
   ),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   X=J-[K,L,H,I],
   split_clause(I,Q,M),
   nlits(M,N),
   P is N+1,
   length_ok(A,O,P,0,T,U),
   arg(41,A,R),
   split_clause(I,Q,M),
   ( R=yap
   ->
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)),B1)
   ;
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)))
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(W))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(V))),
   arg(6,A,S),
   ( S>=1
   ->
     p_message('new refinement'),
     pp_dclause(I)
   ;
     true
   ),
   once(get_gain1(A,upper,I,P,T/U,V,W,X,[],F,G,Y,Z,A1)),
   ( R=yap
   ->
     erase(B1)
   ;
     retractall(user:'$aleph_search'(pclause,_))
   ),
   C1 is V+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(C1))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A1))),
   ( discontinue_search(A,A1,C1)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.


rls_refine(clauses,_-[_,_,_,false],A) :-
   !,
   sample_clauses(1,[A]),
   \+old_move(clauses,A).
rls_refine(clauses,E,F) :-
   setting(moves,A),
   C is A,
   once(retract(user:'$aleph_search'(rls_move,B))),
   B=<C,
   p1_message(move),
   p_message(B),
   D is B+1,
   asserta(user:'$aleph_search'(rls_move,D)),
   clause_move(G,E,F),
   p_message(G),
   \+old_move(clauses,F).
rls_refine(theories,[_-[_,_,_,false]],A) :-
   !,
   once(theory_move(add_clause,[],A)),
   \+old_move(theories,A).
rls_refine(theories,D,E) :-
   setting(moves,B),
   once(retract(user:'$aleph_search'(rls_move,A))),
   A=<B,
   p1_message(move),
   p_message(A),
   C is A+1,
   asserta(user:'$aleph_search'(rls_move,C)),
   theory_move(_,D,E),
   \+old_move(theories,E).


refine_prelims(A,B) :-
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A))),
   asserta(user:'$aleph_search'(last_refinement,last_refinement(B))).


get_gain1(B,_,C,G,_,D,A,I,_,J,K,_,L,A) :-
   abandon_branch(B,C),
   !,
   E is D+1,
   arg(3,B,H),
   arg(7,B,F),
   arg(35,B,M),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ),
   ( F=G
   ->
     true
   ;
     ( H=false
     ->
       asserta_aleph_search_node(E,0,I,0,J,K,[],L)
     )
   ;
     true
   ),
   ( M=true
   ->
     asserta(user:'$aleph_search'(bad,E)),
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ).
get_gain1(B,_,D,_,_,_,A,_,_,_,_,_,_,A) :-
   arg(8,B,C),
   C=true,
   skolemize(D,E,F,0,_),
   '$aleph_search_prunecache'([E|F]),
   !,
   arg(6,B,G),
   ( G>=1
   ->
     p_message('in prune cache')
   ;
     true
   ).
get_gain1(B,V,A,R,T1/X,E,W/Y1,S1,O1,Y,Z,Q1,V1,Z1) :-
   split_clause(A,L,M),
   arg(22,B,C),
   ( C\==ic,
     false
   ->
     p_message('constraint violated'),
     D=true
   ;
     D=false
   ),
   J is E+1,
   arg(8,B,F),
   ( F=true
   ->
     arg(15,B,G),
     get_cache_entry(G,A,H)
   ;
     H=false
   ),
   arg(35,B,I),
   (
     I=true
   ;
     ( setting(compact_node_representation,true)
     ->
       asserta(user:'$aleph_search_node'(J,A))
     )
   ;
     true
   ),
   arg(3,B,K),
   refinement_ok(K,H),
   arg(32,B,N),
   lang_ok((L:-M),N),
   arg(38,B,O),
   newvars_ok((L:-M),O),
   arg(34,B,P),
   arg(37,B,Q),
   rewrite_clause(P,Q,(L:-M),(S:-T)),
   ( C=ic
   ->
     A1= ([]),
     U=[_,_,R],
     ccheck(B,(S:-T),B1,U)
   ;
     prove_examples(B,V,D,H,W,R,X,(L:-M),(S:-T),Y,Z,A1,B1,U)
   ),
   arg(4,B,I1/D1),
   arg(40,B,C1),
   (
     (
       C1> 0
     ;
       D1=wracc
     )
   ->
     reset_clause_prior(B,S)
   ;
     true
   ),
   arg(46,B,E1),
   ( E1=true
   ->
     arg(47,B,F1),
     estimate_label(F1,U,G1)
   ;
     G1=U
   ),
   complete_label(D1,A,G1,H1),
   compression_ok(D1,H1),
   get_search_keys(I1,H1,W1),
   arg(6,B,J1),
   arg(10,B,L1),
   arg(11,B,K1),
   ( J1>=1,
     K1=false,
     L1=false
   ->
     U=[M1,N1|_],
     p_message(M1/N1)
   ;
     true
   ),
   arg(7,B,R1),
   ( K=false
   ->
     get_ovars1(false,O1,P1),
     aleph_append(P1,Q1,U1)
   ;
     true
   ),
   ( R1=R,
     K=false
   ->
     true
   ;
     ( K=false
     ->
       asserta_aleph_search_node(J,O1,S1,T1/X,A1,B1,U1,V1)
     ;
       asserta_aleph_search_node(J,0,S1,T1/X,A1,B1,[],V1)
     ),
     update_open_list(W1,J,H1)
   ),
   ( I=true
   ->
     asserta(user:'$aleph_search'(label,label(J,U)))
   ;
     true
   ),
   (
     (
       K\=false,
       D=false
     ;
       arg(28,B,X1),
       clause_ok(D,X1,U1)
     )
   ->
     update_best(B,A,A1,B1,W/Y1,H1/J,Z1)
   ;
     Z1=W/Y1
   ),
   !.
get_gain1(_,_,_,_,_,_,A,_,_,_,_,_,_,A).


split_clause((A:-true),A,true) :-
   !.
split_clause((A:-B),A,C) :-
   !,
   B=C.
split_clause([A|B],A,B) :-
   !.
split_clause([A],A,[true]) :-
   !.
split_clause(A,A,true).


length_ok(A,E,H,C,F,G) :-
   arg(3,A,B),
   ( B=false
   ->
     D=C
   ;
     D=0
   ),
   ( D<E
   ->
     F=D
   ;
     F=E
   ),
   G is H+F,
   arg(7,A,I),
   G=<I,
   !.


split_ok(false,_,_) :-
   !.
split_ok(_,C,A) :-
   functor(A,B,_),
   B\= (=),
   copy_term(C/A,E/D),
   lit_redun(D,E),
   !,
   p_message('redundant literal'),
   nl,
   fail.
split_ok(_,_,_).


get_refine_gain(A,E,C/D,F,H,I,J,K,L,M,N) :-
   arg(3,A,B),
   B=rls,
   refine_prelims(C/D,E),
   rls_refine(clauses,F,G),
   get_refine_gain1(A,G,H,I,J,K,L,M,N),
   !.
get_refine_gain(A,E,C/D,F,Q,R,S,T,U,V,W) :-
   arg(3,A,B),
   B\=rls,
   refine_prelims(C/D,E),
   F=K-[L,M,_,H],
   arg(30,A,I),
   arg(43,A,G),
   get_user_refinement(B,G,H,J,_),
   user_controlled_match_bot(I,J,O,N),
   P=K-[L,M,N,O],
   get_refine_gain1(A,P,Q,R,S,T,U,V,W),
   !.
get_refine_gain(_,_,_,_,_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(best_refinement,best_refinement(A))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(B))).


intervals_intersects([A-B|_],C,D) :-
   intervals_intersects1(A-B,C,D),
   !.
intervals_intersects([_|A],B,C) :-
   intervals_intersects(A,B,C).


intervals_intersection([],_,[]).
intervals_intersection([A-C|D],[G-B|E],F) :-
   !,
   ( A>B
   ->
     intervals_intersection([A-C|D],E,F)
   ;
     ( G>C
     ->
       intervals_intersection(D,[G-B|E],F)
     )
   ;
     ( C>B
     ->
       ( G>A
       ->
         F=[G-B|H]
       ;
         F=[A-B|H]
       ),
       intervals_intersection([A-C|D],E,H)
     )
   ;
     ( G>A
     ->
       F=[G-C|H]
     ;
       F=[A-C|H]
     ),
     intervals_intersection(D,[G-B|E],H)
   ).
intervals_intersection([_|_],[],[]).


calc_intersection(A/[D-I],B/[E-F],C/[K-M]) :-
   !,
   intervals_intersection(A,B,C),
   H is max(D,E),
   ( intervals_intersects(A,[E-F],G-_)
   ->
     true
   ;
     G=H
   ),
   ( intervals_intersects(B,[D-I],J-_)
   ->
     true
   ;
     J=H
   ),
   L is min(G,H),
   K is min(J,L),
   M is max(I,F).
calc_intersection(A/_,B,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B/_,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B,C) :-
   intervals_intersection(A,B,C).


get_sibgain(B,C,D,A,F,G,H,I,J,K,L,M,N,O,P,Q,R,S) :-
   E is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),
   !.


get_sibpncover(J,A,F,L,N,B,K,M) :-
   '$aleph_search_node'(A,B,_,_,C,D,_,_),
   ( var(C)
   ->
     recompute_cover(E,pos,C)
   ;
     true
   ),
   ( var(D)
   ->
     recompute_cover(E,neg,D)
   ;
     true
   ),
   '$aleph_sat_litinfo'(B,_,G,_,_,_),
   \+aleph_member1(B,F),
   functor(G,H,I),
   ( aleph_member1(H/I,J)
   ->
     K=L,
     M=N
   ;
     calc_intersection(L,C,K),
     calc_intersection(N,D,M)
   ).


get_sibgain(E,_,_,_,C,D,B,A,_,_,_,_,_,_,_,_,_,A,B) :-
   (
     C>D
   ;
     discontinue_search(E,A,B)
   ),
   !.
get_sibgain(A,M,X,D,C,Z,P,Q,H,R,S,T,U,E,F,V,W,C1,D1) :-
   arg(23,A,B),
   get_sibpncover(B,C,D,E,F,G,I,J),
   lazy_evaluate([G],B,H,I,J,[K]),
   get_ivars1(false,K,L),
   ( intersects(L,M)
   ->
     O=upper
   ;
     get_ovars1(false,K,N),
     ( intersects(N,M)
     ->
       O=upper
     ;
       O=exact
     )
   ),
   get_gain(A,O,P,Q,H,R,S,T,U,K,I,J,V,W,B1,A1),
   !,
   Y is C+1,
   get_sibgain(A,M,X,D,Y,Z,A1,B1,H,R,S,T,U,E,F,V,W,C1,D1),
   !.
get_sibgain(B,C,D,E,A,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) :-
   F is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),
   !.


get_gain(A,_,C,D,E,_,_,_,F,_,G,H,I,J,K,L) :-
   arg(3,A,B),
   B\=false,
   !,
   get_refine_gain(A,C,D,E,F,G,H,I,J,K,L).
get_gain(A,Q,T,U/V,W,E,C,I,K,B,X,Y,Z,A1,B1,C1) :-
   arg(26,A,G),
   arg(33,A,D),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   get_pclause([B],C,F,_,J,M),
   split_ok(D,E,F),
   !,
   extend_clause(E,F,H),
   ( G=true
   ->
     ( redundant(H,F)
     ->
       fail
     ;
       true
     )
   ;
     true
   ),
   L is I+J,
   length_ok(A,K,L,M,R,S),
   split_clause(H,N,O),
   assertz(user:'$aleph_search'(pclause,pclause(N,O))),
   arg(6,A,P),
   ( P>=1
   ->
     pp_dclause(H)
   ;
     true
   ),
   get_gain1(A,Q,H,L,R/S,T,U/V,W,B,X,Y,Z,A1,B1),
   retractall(user:'$aleph_search'(pclause,_)),
   C1 is T+1.
get_gain(_,_,B,A,_,_,_,_,_,_,_,_,_,_,A,B).


get_ivars([],_,A,A).
get_ivars([B|E],A,C,G) :-
   get_ivars1(A,B,D),
   aleph_append(C,D,F),
   get_ivars(E,A,F,G).


get_vars_in_term([],[]).
get_vars_in_term([A|B],[A|C]) :-
   integer(A),
   !,
   get_vars_in_term(B,C).
get_vars_in_term([A|C],F) :-
   A=..[_|B],
   get_vars_in_term(B,E),
   get_vars_in_term(C,D),
   update_list(D,E,F).


get_ovars([],_,A,A).
get_ovars([B|E],A,C,G) :-
   get_ovars1(A,B,D),
   aleph_append(C,D,F),
   get_ovars(E,A,F,G).


interval_sample(B,A,E) :-
   intervals_to_list(A,C),
   aleph_rsample(B,C,D),
   list_to_intervals(D,E).


check_parents([],_,[],[]).
check_parents([A|D],C,[A|E],F) :-
   get_ivars1(false,A,B),
   aleph_subset1(B,C),
   !,
   check_parents(D,C,E,F).
check_parents([A|B],C,D,[A|E]) :-
   check_parents(B,C,D,E),
   !.


get_sample_cover(A,I,J) :-
   arg(5,A,B),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     arg(16,A,D),
     C=[1-D]
   ),
   arg(4,A,_/E),
   ( E=posonly
   ->
     '$aleph_global'(atoms_left,atoms_left(rand,F))
   ;
     arg(24,A,G),
     F=[1-G]
   ),
   arg(46,A,H),
   ( H=false
   ->
     I=C,
     J=F
   ;
     arg(47,A,K),
     interval_sample(K,C,I),
     interval_sample(K,F,J)
   ).


update_max_head_count(A,0) :-
   retractall(user:'$aleph_local'(max_head_count,_)),
   asserta(user:'$aleph_local'(max_head_count,A)),
   !.
update_max_head_count(E,A) :-
   '$aleph_search_node'(A,C,_,_,B,_,_,_),
   !,
   ( var(B)
   ->
     recompute_cover(A,pos,B)
   ;
     true
   ),
   asserta(user:'$aleph_local'(head_lit,C)),
   interval_count(B,D),
   F is A-1,
   ( D>E
   ->
     update_max_head_count(D,F)
   ;
     update_max_head_count(E,F)
   ).
update_max_head_count(B,A) :-
   C is A-1,
   update_max_head_count(B,C).


get_ovars1(false,A,B) :-
   '$aleph_sat_ovars'(A,B),
   !.
get_ovars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,_,C,_),
   get_vars(B,C,D).
get_ovars1(B,A,C) :-
   '$aleph_sat_ovars'(A,B,C),
   !.
get_ovars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,D,_),
   get_vars(C,D,E).


get_search_settings(A) :-
   functor(A,set,47),
   setting(nodes,B),
   arg(1,A,B),
   setting(explore,C),
   arg(2,A,C),
   setting(refineop,D),
   arg(3,A,D),
   setting(searchstrat,E),
   setting(evalfn,F),
   arg(4,A,E/F),
   ( setting(greedy,G)
   ->
     arg(5,A,G)
   ;
     arg(5,A,false)
   ),
   setting(verbosity,H),
   arg(6,A,H),
   setting(clauselength,I),
   arg(7,A,I),
   setting(caching,J),
   arg(8,A,J),
   ( setting(prune_defs,K)
   ->
     arg(9,A,K)
   ;
     arg(9,A,false)
   ),
   setting(lazy_on_cost,L),
   arg(10,A,L),
   setting(lazy_on_contradiction,M),
   arg(11,A,M),
   setting(lazy_negs,N),
   arg(12,A,N),
   setting(minpos,O),
   arg(13,A,O),
   setting(depth,P),
   arg(14,A,P),
   setting(cache_clauselength,Q),
   arg(15,A,Q),
   ( '$aleph_global'(size,size(pos,R))
   ->
     arg(16,A,R)
   ;
     arg(16,A,0)
   ),
   setting(noise,S),
   arg(17,A,S),
   setting(minacc,T),
   arg(18,A,T),
   setting(minscore,U),
   arg(19,A,U),
   ( '$aleph_global'(size,size(rand,V))
   ->
     arg(20,A,V)
   ;
     arg(20,A,0)
   ),
   setting(mingain,W),
   arg(21,A,W),
   setting(search,X),
   arg(22,A,X),
   prolog:findall(Y/Z,'$aleph_global'(lazy_evaluate,lazy_evaluate(Y/Z)),A1),
   arg(23,A,A1),
   ( '$aleph_global'(size,size(neg,B1))
   ->
     arg(24,A,B1)
   ;
     arg(24,A,0)
   ),
   setting(openlist,C1),
   arg(25,A,C1),
   setting(check_redundant,D1),
   arg(26,A,D1),
   ( '$aleph_sat'(eq,E1)
   ->
     arg(27,A,E1)
   ;
     arg(27,A,false)
   ),
   ( '$aleph_sat'(hovars,F1)
   ->
     arg(28,A,F1)
   ;
     arg(28,A,F1)
   ),
   setting(prooftime,G1),
   arg(29,A,G1),
   setting(construct_bottom,H1),
   arg(30,A,H1),
   ( get_ovars1(false,1,I1)
   ->
     arg(31,A,I1)
   ;
     arg(31,A,[])
   ),
   setting(language,J1),
   arg(32,A,J1),
   setting(splitvars,K1),
   arg(33,A,K1),
   setting(proof_strategy,L1),
   arg(34,A,L1),
   setting(portray_search,M1),
   arg(35,A,M1),
   setting(searchtime,N1),
   arg(36,A,N1),
   setting(optimise_clauses,O1),
   arg(37,A,O1),
   setting(newvars,P1),
   arg(38,A,P1),
   ( setting(rls_type,Q1)
   ->
     arg(39,A,Q1)
   ;
     arg(39,A,false)
   ),
   setting(minposfrac,R1),
   arg(40,A,R1),
   ( setting(recursion,S1)
   ->
     true
   ;
     S1=false
   ),
   prolog_type(T1),
   arg(41,A,T1),
   setting(interactive,U1),
   arg(42,A,U1),
   setting(lookahead,V1),
   arg(43,A,V1),
   ( setting(construct_features,W1)
   ->
     arg(44,A,W1)
   ;
     arg(44,A,false)
   ),
   setting(max_features,X1),
   arg(45,A,X1),
   setting(subsample,Y1),
   arg(46,A,Y1),
   setting(subsamplesize,Z1),
   arg(47,A,Z1).


get_theory_gain(C,B,A,E,H,I,N,O,P,Q) :-
   refine_prelims(A,B),
   arg(3,C,D),
   ( D=rls
   ->
     rls_refine(theories,E,G)
   ;
     fail
   ),
   arg(23,C,F),
   ( F= ([])
   ->
     J=G
   ;
     lazy_evaluate_theory(G,F,H,I,J)
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(M))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(L))),
   arg(6,C,K),
   ( K>=1
   ->
     p_message('new refinement'),
     pp_dclauses(J)
   ;
     true
   ),
   record_pclauses(J),
   get_theory_gain1(C,J,L,M,H,I,N,O,P),
   retractall(user:'$aleph_search'(pclause,_)),
   Q is L+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(Q))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(P))),
   ( discontinue_search(C,P,Q)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.
get_theory_gain(_,_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(best_refinement,best_refinement(A)),
   '$aleph_search'(last_refinement,last_refinement(B)).


interval_count([],0).
interval_count([B-A|C],D) :-
   E is A-B+1,
   interval_count(C,F),
   D is E+F.
interval_count(A/_,B) :-
   interval_count(A,B).


get_nextbest(A,C) :-
   arg(22,A,B),
   select_nextbest(B,C).


prune_open(A,_,_) :-
   arg(25,A,B),
   C is inf,
   B=\=C,
   retractall(user:'$aleph_local'(in_beam,_)),
   asserta(user:'$aleph_local'(in_beam,0)),
   open_list(D),
   get_node(D,[G|H],I),
   '$aleph_local'(in_beam,E),
   ( E<B
   ->
     retract(user:'$aleph_local'(in_beam,E)),
     F is E+1,
     asserta(user:'$aleph_local'(in_beam,F))
   ;
     retract(user:'$aleph_search_gain'(G,H,I,_)),
     arg(6,A,J),
     ( J<1
     ->
       true
     ;
       p1_message('non-admissible removal'),
       p_message(I)
     )
   ),
   fail.
prune_open(A,_,_) :-
   arg(2,A,B),
   arg(3,A,C),
   (
     B=true
   ;
     C=rls
   ;
     C=user
   ),
   !.
prune_open(_,_/A,_/A) :-
   !.
prune_open(A,_,[_,_,_,E|_]/_) :-
   arg(4,A,_/B),
   built_in_prune(B),
   '$aleph_search_gain'(_,_,_,C),
   best_value(B,A,C,D),
   D=<E,
   retract(user:'$aleph_search_gain'(_,_,_,C)),
   fail.
prune_open(_,_,_).


discontinue_search(A,[C,_,_,E|_]/_,_) :-
   arg(39,A,B),
   B=rrr,
   arg(13,A,D),
   C>=D,
   arg(19,A,F),
   E>=F,
   !.
discontinue_search(A,_,B) :-
   arg(1,A,C),
   B>=C,
   !,
   p_message('node limit reached').
discontinue_search(A,_,_) :-
   arg(44,A,B),
   B=true,
   arg(45,A,D),
   '$aleph_search'(last_good,C),
   C>=D,
   !,
   p_message('feature limit reached').
discontinue_search(A,[_,_,_,C|_]/_,_) :-
   arg(4,A,_/B),
   B=accuracy,
   C= 1,
   !.
discontinue_search(A,E,_) :-
   arg(2,A,B),
   B=false,
   arg(4,A,_/C),
   C\=user,
   C\=posonly,
   arg(22,A,D),
   D\=ic,
   E=[F|_]/_,
   arg(16,A,F).


get_sibgains(D,A,K,L,M,N,O,P,Q,R,S,F,T,V,U) :-
   '$aleph_search_node'(A,C,_,_,_,_,_,B),
   '$aleph_search_expansion'(B,_,_,J),
   '$aleph_sat_litinfo'(C,_,_,_,_,H),
   I is A+1,
   arg(31,D,E),
   aleph_delete_list(E,F,G),
   get_sibgain(D,G,C,H,I,J,K,L,M,N,O,P,Q,R,S,F,T,U,V),
   !.


get_gains(C,A,B,_,_,_,_,_,_,_,_,_,_,A,B) :-
   discontinue_search(C,B,A),
   !.
get_gains(_,A,B,_,_,_,_,_,[],_,_,_,_,A,B) :-
   !.
get_gains(A,B,C,D,E,F,G,H,[I|P],J,K,L,M,Q,R) :-
   get_gain(A,upper,B,C,D,E,F,G,H,I,J,K,L,M,O,N),
   !,
   get_gains(A,N,O,D,E,F,G,H,P,J,K,L,M,Q,R).
get_gains(A,B,C,D,E,F,G,H,[_|I],J,K,L,M,N,O) :-
   get_gains(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),
   !.


lazy_evaluate(A,[],_,_,_,A) :-
   !.
lazy_evaluate([],_,_,_,_,[]) :-
   !.
lazy_evaluate([A|S],E,F,O,P,V) :-
   ( integer(A)
   ->
     G=true,
     '$aleph_sat_litinfo'(A,H,B,I,J,K),
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     get_pclause([A|F],[],(L:-M),_,_,_)
   ;
     G=false,
     B=A,
     H=0,
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     split_args(A,_,I,J,R),
     K= ([]),
     list_to_clause([A|F],(L:-M))
   ),
   goals_to_clause(M,N),
   lazy_prove(pos,L,N,O),
   ( '$aleph_global'(positive_only,positive_only(C/D))
   ->
     true
   ;
     lazy_prove_negs(L,N,P)
   ),
   functor(Q,C,D),
   collect_args(I,Q),
   collect_args(J,Q),
   lazy_evaluate1(G,B,H,I,J,R,K,Q,U),
   retractall(user:'$aleph_local'(lazy_evaluate,_)),
   lazy_evaluate(S,E,F,O,P,T),
   update_list(T,U,V).
lazy_evaluate([A|B],C,D,E,F,[A|G]) :-
   lazy_evaluate(B,C,D,E,F,G).


expand(false,F,A,A,L,B,R,H,I,C,M,N,O) :-
   !,
   '$aleph_search_node'(A,J,K,B/_,D,E,C,_),
   ( var(D)
   ->
     recompute_cover(A,pos,D)
   ;
     true
   ),
   ( var(E)
   ->
     recompute_cover(A,neg,E)
   ;
     true
   ),
   arg(46,F,G),
   ( G=false
   ->
     H=D,
     I=E
   ;
     get_sample_cover(F,H,I)
   ),
   aleph_append([J],K,L),
   get_pclause(L,[],M,N,O,_),
   '$aleph_sat_litinfo'(J,_,_,_,_,P),
   intersect1(P,L,_,Q),
   check_parents(Q,C,R,_).
expand(_,E,A,A,B,C,[_],F,G,D,_,_,_) :-
   retract_aleph_search_node(A,_,B,C/_,_,_,D,_),
   get_sample_cover(E,F,G).


next_node(A) :-
   once('$aleph_search'(nextnode,A)),
   !.


theorysearch(D,L) :-
   next_node(_),
   !,
   '$aleph_global'(atoms,atoms(pos,A)),
   '$aleph_global'(atoms,atoms(neg,B)),
   interval_count(A,H),
   interval_count(B,I),
   repeat,
   next_node(C),
   '$aleph_search_node'(C,G,_,_,_,_,_,_),
   once(retract(user:'$aleph_search'(current,current(_,E,F)))),
   get_theory_gain(D,E,F,G,A,B,H,I,K,J),
   asserta(user:'$aleph_search'(current,current(0,J,K))),
   ( discontinue_search(D,K,J)
   ->
     '$aleph_search'(current,current(_,L,_))
   ;
     prune_open(D,F,K),
     get_nextbest(D,M),
     M=none,
     '$aleph_search'(current,current(_,L,_))
   ),
   !.
theorysearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


tsearch(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   prolog:alarm(D,throw(searchlimit),F),
   catch(theorysearch(A,E),searchlimit,p_message('Time limit reached')),
   remove_alarm(F).
tsearch(A,B) :-
   theorysearch(A,B).


graphsearch(A,Y) :-
   next_node(_),
   !,
   arg(3,A,B),
   arg(23,A,D),
   repeat,
   next_node(C),
   once(retract(user:'$aleph_search'(current,current(J,K,L)))),
   expand(B,A,C,S,F,P,E,G,H,Q,M,N,O),
   (
     (
       D= ([])
     ;
       B\=false
     )
   ->
     I=E
   ;
     lazy_evaluate(E,D,F,G,H,I)
   ),
   R is J+1,
   get_gains(A,K,L,F,M,N,O,P,I,G,H,Q,R,T,U),
   ( B=false
   ->
     get_sibgains(A,S,T,U,F,M,N,O,P,G,H,Q,R,V,W)
   ;
     V=T,
     W=U
   ),
   asserta(user:'$aleph_search'(current,current(R,V,W))),
   X is K+1,
   asserta(user:'$aleph_search_expansion'(R,S,X,V)),
   ( discontinue_search(A,W,V)
   ->
     '$aleph_search'(current,current(_,Y,_))
   ;
     prune_open(A,L,W),
     get_nextbest(A,Z),
     Z=none,
     '$aleph_search'(current,current(_,Y,_))
   ),
   !.
graphsearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


search(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   catch(time_bound_call(D,searchlimit,graphsearch(A,_)),searchlimit,p_message('Time limit reached')),
   '$aleph_search'(current,current(_,E,_)).
search(A,B) :-
   graphsearch(A,B).


get_modes(A/B,D) :-
   functor(C,A,B),
   prolog:findall(C,'$aleph_global'(mode,mode(_,C)),D).


get_determs(A/B,D) :-
   prolog:findall(C,'$aleph_global'(determination,determination(A/B,C)),D).


unwrap_term(B,_,A,A) :-
   var(B),
   !.
unwrap_term(A,C,D,E) :-
   functor(A,_,B),
   tp_list(A,B,C,D,E).


tp_list(_,0,_,A,A) :-
   !.
tp_list(B,A,C,F,I) :-
   arg(A,B,D),
   aleph_append([A],C,E),
   unwrap_term(D,E,[D/E|F],H),
   G is A-1,
   tp_list(B,G,C,H,I).


split_tp([],[],[],[]).
split_tp([+B/A|C],[A/B|D],E,F) :-
   !,
   split_tp(C,D,E,F).
split_tp([-B/A|C],D,[A/B|E],F) :-
   !,
   split_tp(C,D,E,F).
split_tp([(#B)/A|C],D,E,[A/B|F]) :-
   !,
   split_tp(C,D,E,F).
split_tp([_|A],B,C,D) :-
   split_tp(A,B,C,D).


tp(A,C) :-
   functor(A,_,B),
   tp_list(A,B,[],[],C).


find_mode(mode,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(mode,mode(_,A)).
find_mode(modeh,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeh,modeh(_,A)).
find_mode(modeb,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeb,modeb(_,A)).


integrate_term(A,B/C) :-
   '$aleph_sat_terms'(D,A,B,C),
   '$aleph_sat_vars'(_,D,_,[_|_]),
   !.
integrate_term(E,A/B) :-
   '$aleph_sat_terms'(C,D,A,B),
   (
     B=unknown
   ;
     '$aleph_sat_vars'(_,C,_,[])
   ),
   !,
   ( D=unknown
   ->
     retract(user:'$aleph_sat_terms'(C,D,A,B)),
     asserta(user:'$aleph_sat_terms'(C,E,A,B))
   ;
     true
   ).
integrate_term(_,A/B) :-
   '$aleph_sat_terms'(_,_,A,B),
   B\=unknown,
   !.
integrate_term(E,F/G) :-
   retract(user:'$aleph_sat'(lastterm,A)),
   retract(user:'$aleph_sat'(lastvar,B)),
   C is A+1,
   D is B+1,
   asserta(user:'$aleph_sat'(lastterm,C)),
   asserta(user:'$aleph_sat'(lastvar,D)),
   asserta(user:'$aleph_sat_vars'(D,C,[],[])),
   asserta(user:'$aleph_sat_terms'(C,E,F,G)).


add_eqs([],_,_,_,A,A).
add_eqs([D|G],A,C,E,B,H) :-
   ( A=0
   ->
     add_lit(B,false,C=D,[1/E],[2/E],[C],[D],F)
   ;
     add_lit(B,false,C=D,[1/E,2/E],[],[C,D],[],F)
   ),
   add_eqs(G,A,C,E,F,H).


add_eqs([],_,_,A,A).
add_eqs([C|A],B,D,E,G) :-
   add_eqs(A,B,C,D,E,F),
   add_eqs(A,B,D,F,G).


copy_var(B,A,D) :-
   gen_var(A),
   '$aleph_sat_vars'(B,C,_,_),
   asserta(user:'$aleph_sat_vars'(A,C,[],[])),
   asserta(user:'$aleph_sat_varscopy'(A,B,D)).


add_equivalences([],_,[]).
add_equivalences([A|C],D,[A/B|E]) :-
   B=[A],
   add_equivalences(C,D,E).


get_repeats([],A,A).
get_repeats([A|B],C,E) :-
   aleph_member1(A,B),
   !,
   update(C,A,D),
   get_repeats(B,D,E).
get_repeats([_|A],B,C) :-
   get_repeats(A,B,C).


intersect1(A,[],[],A) :-
   !.
intersect1([],_,[],[]) :-
   !.
intersect1([A|C],B,[A|D],E) :-
   aleph_member1(A,B),
   !,
   intersect1(C,B,D,E).
intersect1([A|B],C,D,[A|E]) :-
   intersect1(B,C,D,E).


get_argterms(not A,B,C,D) :-
   !,
   get_argterms(A,B,C,D).
get_argterms(_,[],A,A).
get_argterms(C,[A|F],D,H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   update(D,E,G),
   get_argterms(C,F,G,H).


rename_ovars([],_,_,_,A,A).
rename_ovars([A|I],F,C,G,E,L) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   aleph_delete(D/J,E,K),
   !,
   copy_var(D,H,F),
   tparg(B,G,H),
   rename_ovars(I,F,C,G,[D/[H|J] |K],L).
rename_ovars([A|F],G,C,D,H,I) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   tparg(B,D,E),
   rename_ovars(F,G,C,D,H,I).


copy_args(_,_,[]).
copy_args(B,C,[A/_|E]) :-
   tparg(A,B,D),
   tparg(A,C,D),
   copy_args(B,C,E),
   !.


get_var_equivs(E,A,C,B,D,I) :-
   sort(A,B),
   sort(C,D),
   ( E=0
   ->
     intersect1(B,C,F,_),
     get_repeats(A,F,G)
   ;
     intersect1(B,C,G,_)
   ),
   get_repeats(C,G,H),
   add_equivalences(H,E,I).


get_args(not A,B,C,D) :-
   !,
   get_args(A,B,C,D).
get_args(_,[],A,A).
get_args(C,[A|D],F,G) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   get_args(C,D,[E|F],G).


legal_term(exact,A,C,B) :-
   '$aleph_sat_terms'(D,A,B,C),
   once('$aleph_sat_vars'(_,D,_,[_|_])).
legal_term(upper,D,B,A) :-
   '$aleph_sat_terms'(E,C,A,B),
   C\=unknown,
   C<D,
   once('$aleph_sat_vars'(_,E,_,[_|_])).


update_atoms_next(A,B) :-
   '$aleph_sat_atom'(A,B),
   !.
update_atoms_next(A,B) :-
   assertz(user:'$aleph_sat_atom'(A,B)).


get_nsuccesses(A,C,D) :-
   depth_bound_call(A),
   retract(user:'$aleph_local'(last_success,B)),
   B<C,
   E is B+1,
   update_atoms(A,D),
   asserta(user:'$aleph_local'(last_success,E)),
   ( E>=C
   ->
     !
   ;
     true
   ).


reset_succ :-
   retractall(user:'$aleph_local'(last_success,_)),
   asserta(user:'$aleph_local'(last_success,0)),
   !.


update_atoms(A,mode(B,D,E,F)) :-
   discretize(on),
   discretize_atom(A,B,C),
   !,
   update_atoms_next(C,mode(B,D,E,F)).
update_atoms(A,B) :-
   update_atoms_next(A,B).


depth_bound_call(A) :-
   '$aleph_global'(depth,set(depth,B)),
   call_with_depth_bound(A,B).


get_successes(A,1,B) :-
   depth_bound_call(A),
   update_atoms(A,B),
   !.
get_successes(A,*,B) :-
   depth_bound_call(A),
   update_atoms(A,B).
get_successes(B,A,C) :-
   integer(A),
   A>1,
   reset_succ,
   get_nsuccesses(B,A,C).


construct_call(_,_,[],true) :-
   !.
construct_call(not A,B,C,D) :-
   !,
   construct_call(A,B,C,D).
construct_call(E,B,[D/C],A) :-
   !,
   A=legal_term(upper,B,C,F),
   tparg(D,E,F).
construct_call(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(upper,D,E,F),
   construct_call(B,D,G,H).


construct_incall(_,_,[],true) :-
   !.
construct_incall(not A,B,C,D) :-
   !,
   construct_incall(A,B,C,D).
construct_incall(E,B,[D/C],A) :-
   !,
   A=legal_term(exact,B,C,F),
   tparg(D,E,F).
construct_incall(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(exact,D,E,F),
   ( var(D)
   ->
     construct_incall(B,_,G,H)
   ;
     construct_incall(B,D,G,H)
   ).


split_args(A,D,G,H,I) :-
   functor(A,B,C),
   find_mode(mode,B/C,D),
   functor(E,B,C),
   copy_modeterms(D,E,C),
   E=A,
   tp(D,F),
   split_tp(F,G,H,I).


rm_redundant(_,0) :-
   setting(check_redundant,false),
   !.
rm_redundant(A,C) :-
   mark_redundant_lits(1,A),
   get_marked(1,A,B),
   length(B,C),
   p1_message('redundant literals'),
   p_message(C/A),
   remove_lits(B).


get_unmarked(A,B,[]) :-
   A>B,
   !.
get_unmarked(A,C,D) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,[A|D]) :-
   retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,D) :-
   B is A+1,
   get_unmarked(B,C,D).


rm_uselesslits(_,0) :-
   setting(check_useless,false),
   !.
rm_uselesslits(D,F) :-
   '$aleph_sat'(hovars,A),
   A\= ([]),
   !,
   get_predecessors(A,[],B),
   '$aleph_sat'(hivars,C),
   mark_lits(B,C,0),
   get_unmarked(1,D,E),
   length(E,F),
   p1_message('useless literals'),
   p_message(F/D),
   remove_lits(E).
rm_uselesslits(_,0).


rm_commutative(_,_) :-
   '$aleph_global'(commutative,commutative(A/B)),
   p1_message('checking commutative literals'),
   p_message(A/B),
   functor(C,A,B),
   functor(G,A,B),
   '$aleph_sat_litinfo'(D,_,C,[E|F],I,_),
   \+'$aleph_local'(marked,D/0),
   get_vars(C,[E|F],M),
   '$aleph_sat_litinfo'(H,_,G,[K|L],J,_),
   D\=H,
   I=J,
   get_vars(G,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,H/0)),
   retract(user:'$aleph_sat_litinfo'(H,_,G,[K|L],_,_)),
   fail.
rm_commutative(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('commutative literals'),
   p_message(C/A),
   remove_lits(B).
rm_commutative(_,0).


equal_set([],[]).
equal_set([A|C],B) :-
   aleph_delete1(A,B,D),
   equal_set(C,D),
   !.


symmetric_match([],[]).
symmetric_match([aleph_const(A) |B],[aleph_const(A) |C]) :-
   !,
   symmetric_match(B,C).
symmetric_match([A|C],[B|D]) :-
   integer(A),
   integer(B),
   symmetric_match(C,D).


is_symmetric(not A,not B,C) :-
   !,
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).
is_symmetric(A,B,C) :-
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).


rm_symmetric(_,_) :-
   '$aleph_global'(symmetric,_),
   '$aleph_sat_litinfo'(D,_,A,[B|C],_,_),
   is_symmetric(A,G,H),
   get_vars(A,[B|C],M),
   '$aleph_sat_litinfo'(E,_,F,[K|L],_,_),
   D\=E,
   is_symmetric(F,G,H),
   A=..[_|I],
   F=..[_|J],
   symmetric_match(I,J),
   get_vars(F,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,E/0)),
   retract(user:'$aleph_sat_litinfo'(E,_,F,[K|L],_,_)),
   fail.
rm_symmetric(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('symmetric literals'),
   p_message(C/A),
   remove_lits(B).
rm_symmetric(_,0).


remove_lits(A) :-
   retract(user:'$aleph_sat_litinfo'(C,D,E,F,G,B)),
   aleph_delete_list(A,B,H),
   asserta(user:'$aleph_sat_litinfo'(C,D,E,F,G,H)),
   fail.
remove_lits(_).


rm_moderepeats(_,_) :-
   '$aleph_sat_litinfo'(B,_,A,_,_,_),
   '$aleph_sat_litinfo'(C,_,A,_,_,_),
   B>=1,
   C>B,
   retract(user:'$aleph_sat_litinfo'(C,_,A,_,_,_)),
   asserta(user:'$aleph_local'(marked,C/0)),
   fail.
rm_moderepeats(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('repeated literals'),
   p_message(C/A),
   remove_lits(B).
rm_moderepeats(_,0).


aleph_member1(A,[A|_]) :-
   !.
aleph_member1(A,[_|B]) :-
   aleph_member1(A,B).


find_last_ancestor([],_,A,_,A) :-
   !.
find_last_ancestor([A|E],B,_,D,G) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,C),
   aleph_member1(B,C),
   !,
   F is D+1,
   find_last_ancestor(E,B,D,F,G).
find_last_ancestor([_|B],C,D,A,F) :-
   E is A+1,
   find_last_ancestor(B,C,D,E,F).


extend_clause(false,A,A) :-
   !.
extend_clause((A:-C),B,(A:-D)) :-
   !,
   app_lit(B,C,D).
extend_clause(A,B,(A:-B)).


insert_lastlit(A,C,E) :-
   get_predecessors([A],B),
   aleph_delete_list(B,C,D),
   aleph_append([A|D],B,E).


aleph_remove_n(0,A,[],A) :-
   !.
aleph_remove_n(_,[],[],[]) :-
   !.
aleph_remove_n(B,[A|D],[A|E],F) :-
   C is B-1,
   aleph_remove_n(C,D,E,F).


neg_reduce([],_,_,A,_,_,_,A).
neg_reduce([A|K],C,B,J,G,E,I,O) :-
   get_pclause([A],B,D,L,_,_),
   extend_clause(C,D,F),
   prove(E,neg,F,G,N,H),
   H>I,
   !,
   M is J+1,
   neg_reduce(K,F,L,M,N,E,I,O).
neg_reduce(_,_,_,A,_,_,_,A).


p1_message(A) :-
   write('['),
   write(A),
   write('] ').


get_marked(A,B,[]) :-
   A>B,
   !.
get_marked(A,C,[A|D]) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   ( retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_))
   ->
     true
   ;
     true
   ),
   B is A+1,
   get_marked(B,C,D).
get_marked(A,C,D) :-
   B is A+1,
   get_marked(B,C,D).


neg_reduce([A|B],E,I,F,G) :-
   get_pclause([A],[],C,D,_,_),
   neg_reduce(B,C,D,2,E,F,G,H),
   H\=I,
   !,
   J is H-1,
   aleph_remove_n(J,[A|B],M,[L|K]),
   mark_lits(K),
   insert_lastlit(L,M,N),
   neg_reduce(N,E,H,F,G).
neg_reduce(_,_,_,_,_).


get_litnums(A,B,[]) :-
   A>B,
   !.
get_litnums(A,C,[A|D]) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,_),
   !,
   B is A+1,
   get_litnums(B,C,D).
get_litnums(A,C,D) :-
   B is A+1,
   get_litnums(B,C,D).


rm_nreduce(A,I) :-
   setting(nreduce_bottom,true),
   !,
   get_litnums(1,A,B),
   '$aleph_global'(atoms,atoms(neg,C)),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   setting(noise,G),
   neg_reduce(B,C,A,D/E/F,G),
   get_marked(1,A,H),
   length(H,I),
   p1_message('negative-based removal'),
   p_message(I/A).
rm_nreduce(_,0).


get_ivars1(false,A,B) :-
   '$aleph_sat_ivars'(A,B),
   !.
get_ivars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,C,_,_),
   get_vars(B,C,D).
get_ivars1(B,A,C) :-
   '$aleph_sat_ivars'(A,B,C),
   !.
get_ivars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,D,_,_),
   get_vars(C,D,E).


get_predecessors([],[]).
get_predecessors([A|E],H) :-
   ( A=1
   ->
     C= ([])
   ;
     get_ivars1(false,A,B),
     get_predecessors(B,[],C)
   ),
   get_predecessors(C,D),
   update_list(C,D,G),
   get_predecessors(E,F),
   update_list(F,G,H).


aleph_subset1([],_).
aleph_subset1([A|C],B) :-
   aleph_member1(A,B),
   !,
   aleph_subset1(C,B).


get_pclause([A],B,D,C,E,F) :-
   !,
   get_pclause1([A],B,C,D,E,F).
get_pclause([A|C],B,G,E,J,F) :-
   get_pclause1([A],B,D,H,K,_),
   get_pclause1(C,D,E,I,L,F),
   G= (H:-I),
   J is K+L.


mark_redundant_lits(A,B) :-
   A>B,
   !.
mark_redundant_lits(A,D) :-
   get_pclause([A],[],B,_,_,_),
   redundant(bottom,B),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   C is A+1,
   mark_redundant_lits(C,D).
mark_redundant_lits(A,C) :-
   B is A+1,
   mark_redundant_lits(B,C).


mark_floating_lits(A,B) :-
   A>B,
   !.
mark_floating_lits(A,E) :-
   '$aleph_sat_litinfo'(A,_,_,_,B,C),
   B\= ([]),
   (
     C= ([])
   ;
     C=[A]
   ),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   D is A+1,
   mark_floating_lits(D,E).
mark_floating_lits(A,C) :-
   B is A+1,
   mark_floating_lits(B,C).


get_predecessors([],A,A).
get_predecessors([A|D],C,F) :-
   '$aleph_sat_vars'(A,_,_,B),
   update_list(B,C,E),
   get_predecessors(D,E,F).


get_predicates([],_,[]).
get_predicates([A|F],E,[A|G]) :-
   '$aleph_sat_litinfo'(A,_,B,C,_,[]),
   get_vars(B,C,D),
   aleph_subset1(D,E),
   !,
   get_predicates(F,E,G).
get_predicates([_|A],B,C) :-
   get_predicates(A,B,C).


mark_lit(A,B,G,J,H,I) :-
   retract(user:'$aleph_sat_litinfo'(A,_,C,D,E,F)),
   asserta(user:'$aleph_local'(marked,A/B)),
   asserta(user:'$aleph_sat_litinfo'(A,B,C,D,E,F)),
   ( G=false
   ->
     H= ([]),
     I=J
   ;
     get_vars(C,E,K),
     update_list(K,J,I),
     get_predicates(F,I,L),
     mark_lits(L,B,false,[],_,J,_),
     get_vars(C,D,M),
     get_predecessors(M,[],H)
   ).


aleph_delete_list([],A,A).
aleph_delete_list([A|C],B,E) :-
   aleph_delete(A,B,D),
   !,
   aleph_delete_list(C,D,E).
aleph_delete_list([_|A],B,C) :-
   aleph_delete_list(A,B,C).


mark_lits([],_,_,A,A,B,B).
mark_lits([A|H],B,D,G,J,E,L) :-
   retract(user:'$aleph_local'(marked,A/C)),
   !,
   ( B<C
   ->
     mark_lit(A,B,D,E,F,K),
     update_list(F,G,I),
     mark_lits(H,B,D,I,J,K,L)
   ;
     asserta(user:'$aleph_local'(marked,A/C)),
     mark_lits(H,B,D,G,J,E,L)
   ).
mark_lits([A|G],B,C,F,I,D,K) :-
   mark_lit(A,B,C,D,E,J),
   !,
   update_list(E,F,H),
   mark_lits(G,B,C,H,I,J,K).
mark_lits([_|A],B,C,D,E,F,G) :-
   mark_lits(A,B,C,D,E,F,G).


mark_lits([],_,_).
mark_lits(A,C,B) :-
   mark_lits(A,B,true,[],D,C,F),
   aleph_delete_list(A,D,E),
   G is B+1,
   mark_lits(E,F,G).


mark_lits(A) :-
   aleph_member(B,A),
   asserta(user:'$aleph_local'(marked,B/0)),
   fail.
mark_lits(_).


aleph_append(A,[],A).
aleph_append(B,[A|C],[A|D]) :-
   aleph_append(B,C,D).


update_generators :-
   prolog:findall(A,('$aleph_sat_litinfo'(A,_,_,[],_,_),A>1),B),
   B\= ([]),
   !,
   retract(user:'$aleph_sat_litinfo'(1,D,E,F,G,C)),
   aleph_append(C,B,H),
   asserta(user:'$aleph_sat_litinfo'(1,D,E,F,G,H)).
update_generators.


update_dependents(_,[]).
update_dependents(C,[A|I]) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,B)),
   update(B,C,H),
   asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H)),
   update_dependents(C,I).


update([],A,[A]).
update([A|B],A,[A|B]) :-
   !.
update([A|B],C,[A|D]) :-
   update(B,C,D).


gen_nlitnum(A) :-
   retract(user:'$aleph_sat'(lastnlit,B)),
   !,
   A is B-1,
   asserta(user:'$aleph_sat'(lastnlit,A)).
gen_nlitnum(-1) :-
   asserta(user:'$aleph_sat'(lastnlit,-1)).


update_lit(A,true,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,not B,C,D,E),
   !.
update_lit(A,false,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,B,C,D,E),
   !.
update_lit(A,B,C,D,E,F) :-
   gen_nlitnum(A),
   add_litinfo(A,B,C,D,E,F),
   get_vars(C,D,G),
   get_vars(C,E,I),
   assertz(user:'$aleph_sat_ivars'(A,H,G)),
   assertz(user:'$aleph_sat_ovars'(A,H,I)),
   !.


add_litinfo(A,true,B,C,D,E) :-
   !,
   assertz(user:'$aleph_sat_litinfo'(A,0,not B,C,D,E)).
add_litinfo(A,_,B,C,D,E) :-
   assertz(user:'$aleph_sat_litinfo'(A,0,B,C,D,E)).


update_oterms(_,[],A,A).
update_oterms(C,[A|H],G,J) :-
   retract(user:'$aleph_sat_vars'(A,D,E,B)),
   update(B,C,F),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_list(E,G,I),
   update_oterms(C,H,I,J).


update_iterms(_,[]).
update_iterms(C,[A|G]) :-
   retract(user:'$aleph_sat_vars'(A,D,B,F)),
   update(B,C,E),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_dependents(C,F),
   update_iterms(C,G).


insert_eqs([],_,A,A).
insert_eqs([A/C|G],D,F,I) :-
   '$aleph_sat_vars'(A,B,_,_),
   '$aleph_sat_terms'(B,_,_,E),
   add_eqs(C,D,E,F,H),
   insert_eqs(G,D,H,I).


add_lit(A,C,D,F,G,_,_,A) :-
   setting(construct_bottom,B),
   (
     B=false
   ;
     B=reduction
   ),
   ( C=true
   ->
     E= (not D)
   ;
     E=D
   ),
   '$aleph_sat_litinfo'(_,0,E,F,G,_),
   !.
add_lit(B,E,F,G,H,C,D,A) :-
   A is B+1,
   update_iterms(A,C),
   update_oterms(A,D,[],I),
   add_litinfo(A,E,F,G,H,I),
   assertz(user:'$aleph_sat_ivars'(A,C)),
   assertz(user:'$aleph_sat_ovars'(A,D)),
   !.


split_vars(D,A,B,C,O,K,G,I,L) :-
   setting(splitvars,true),
   !,
   get_args(A,B,[],E),
   get_args(A,C,[],F),
   get_var_equivs(D,E,F,G,J,H),
   ( H= ([])
   ->
     I=J,
     K=A,
     L=H
   ;
     functor(A,M,N),
     functor(K,M,N),
     copy_args(A,K,B),
     copy_args(A,K,O),
     rename_ovars(C,D,A,K,H,L),
     get_argterms(K,C,[],I)
   ).
split_vars(_,A,B,D,_,A,C,E,[]) :-
   get_vars(A,B,C),
   get_vars(A,D,E).


rename(_,[],_,A,A) :-
   !.
rename(0,_,_,_,_) :-
   !.
rename(A,D,I,B,F) :-
   arg(A,B,C),
   aleph_member(C/E,D),
   !,
   aleph_member(G,E),
   arg(A,F,G),
   H is A-1,
   rename(H,D,[C/G|I],B,F).
rename(A,H,D,B,E) :-
   arg(A,B,C),
   ( aleph_member(C/F,D)
   ->
     arg(A,E,F)
   ;
     arg(A,E,C)
   ),
   G is A-1,
   rename(G,H,D,B,E).


update_list([],A,A).
update_list([B|C],A,E) :-
   update(A,B,D),
   !,
   update_list(C,D,E).


aleph_delete(A,[A|B],B).
aleph_delete(B,[A|C],[A|D]) :-
   aleph_delete(B,C,D).


get_equivs(A,[]) :-
   A<0,
   !.
get_equivs(A,B) :-
   '$aleph_sat_varsequiv'(A,B),
   !.
get_equivs(A,C) :-
   B is A-1,
   get_equivs(B,C).


update_equiv_lists([],A,A) :-
   !.
update_equiv_lists([A/C|E],B,H) :-
   aleph_delete(A/D,B,G),
   !,
   update_list(C,D,F),
   update_equiv_lists(E,[A/F|G],H).
update_equiv_lists([B|A],C,D) :-
   update_equiv_lists(A,[B|C],D).


update_equivs([],_) :-
   !.
update_equivs(B,A) :-
   retract(user:'$aleph_sat_varsequiv'(A,C)),
   !,
   update_equiv_lists(B,C,D),
   asserta(user:'$aleph_sat_varsequiv'(A,D)).
update_equivs(C,A) :-
   B is A-1,
   get_equivs(B,D),
   update_equiv_lists(C,D,E),
   asserta(user:'$aleph_sat_varsequiv'(A,E)).


intersects(A,C) :-
   aleph_member(B,A),
   aleph_member1(B,C),
   !.


tparg([A],B,C) :-
   !,
   arg(A,B,C).
tparg([A|C],B,E) :-
   arg(A,B,D),
   tparg(C,D,E).


flatten_consts([],_,_).
flatten_consts([A/_|E],B,C) :-
   tparg(A,B,D),
   tparg(A,C,aleph_const(D)),
   flatten_consts(E,B,C).


flatten_vars([],_,_,[]).
flatten_vars([A/D|H],B,G,[E|I]) :-
   tparg(A,B,C),
   '$aleph_sat_terms'(F,_,C,D),
   '$aleph_sat_vars'(E,F,_,_),
   \+'$aleph_sat_varscopy'(E,_,_),
   tparg(A,G,E),
   flatten_vars(H,B,G,I).


copy_modeterms(_,_,0) :-
   !.
copy_modeterms(B,F,A) :-
   arg(A,B,C),
   nonvar(C),
   functor(C,D,E),
   \+ (D= (+);D= (-);D= (#)),
   !,
   functor(G,D,E),
   arg(A,F,G),
   copy_modeterms(C,G,E),
   H is A-1,
   copy_modeterms(B,F,H).
copy_modeterms(B,C,A) :-
   D is A-1,
   copy_modeterms(B,C,D).


add_new_lit(G,B,A,L,M,Q) :-
   arg(1,A,E),
   functor(B,C,D),
   functor(F,C,D),
   once(copy_modeterms(E,F,D)),
   arg(2,A,H),
   arg(3,A,I),
   arg(4,A,J),
   split_vars(G,B,H,I,J,F,N,O,K),
   update_equivs(K,G),
   add_lit(L,M,F,H,I,N,O,P),
   insert_eqs(K,G,P,Q),
   !.


in_path(B) :-
   '$aleph_sat'(hovars,A),
   !,
   (
     A= ([])
   ;
     B= ([])
   ;
     intersects(A,B)
   ).
in_path(_).


get_vars(not A,B,C) :-
   !,
   get_vars(A,B,C).
get_vars(_,[],[]).
get_vars(C,[A|E],H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   get_vars_in_term([D],G),
   get_vars(C,E,F),
   update_list(F,G,H).


apply_equivs(A,B,D,E) :-
   get_equivs(A,C),
   rename(B,C,[],D,E).


flatten_lit(E,mode(A,D,G,I),B,F,H) :-
   functor(A,_,C),
   once(copy_modeterms(A,B,C)),
   flatten_vars(D,E,B,F),
   flatten_vars(G,E,B,H),
   flatten_consts(I,E,B).


flatten_lits(A,J,C,N,F,B,_) :-
   functor(A,D,E),
   asserta(user:'$aleph_local'(flatten_lits,B)),
   H is C-1,
   functor(G,D,E),
   flatten_lit(A,F,G,_,_),
   functor(I,D,E),
   apply_equivs(H,E,G,I),
   retract(user:'$aleph_local'(flatten_lits,M)),
   ( J=true
   ->
     arg(3,F,K),
     get_vars(I,K,L),
     ( in_path(L)
     ->
       add_new_lit(C,I,F,M,N,O)
     ;
       O=M
     )
   ;
     add_new_lit(C,I,F,M,N,O)
   ),
   asserta(user:'$aleph_local'(flatten_lits,O)),
   fail.
flatten_lits(_,_,_,_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_lits,A)).


integrate_args(_,_,[]).
integrate_args(C,B,[A/E|G]) :-
   tparg(A,B,D),
   integrate_term(C,D/E),
   ( retract(user:'$aleph_sat_terms'(F,C,D,unknown))
   ->
     asserta(user:'$aleph_sat_terms'(F,C,D,E))
   ;
     true
   ),
   integrate_args(C,B,G).


flatten_atom(B,F,C,H,A,I,J) :-
   arg(3,A,D),
   arg(4,A,E),
   integrate_args(B,C,D),
   integrate_args(B,C,E),
   ( B=F
   ->
     G=true
   ;
     G=false
   ),
   flatten_lits(C,G,B,H,A,I,J).


aleph_member(A,[A|_]).
aleph_member(A,[_|B]) :-
   aleph_member(A,B).


aleph_rpermute(A,C) :-
   length(A,B),
   aleph_rpermute(A,B,C).


flatten_atoms(true,H,I,L) :-
   prolog:findall(A-B,retract(user:'$aleph_sat_atom'(A,B)),C),
   aleph_rpermute(C,D),
   aleph_member(E-J,D),
   retract(user:'$aleph_local'(flatten_num,K)),
   ( E= (not F)
   ->
     G=true
   ;
     F=E,
     G=false
   ),
   flatten_atom(H,I,F,G,J,K,L),
   asserta(user:'$aleph_local'(flatten_num,L)),
   fail.
flatten_atoms(false,D,E,H) :-
   repeat,
   retract(user:'$aleph_sat_atom'(A,F)),
   retract(user:'$aleph_local'(flatten_num,G)),
   ( A= (not B)
   ->
     C=true
   ;
     B=A,
     C=false
   ),
   flatten_atom(D,E,B,C,F,G,H),
   asserta(user:'$aleph_local'(flatten_num,H)),
   ( '$aleph_sat_atom'(_,_)
   ->
     fail
   ;
     retract(user:'$aleph_local'(flatten_num,H))
   ),
   !.
flatten_atoms(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


flatten(C,D,A,E) :-
   retractall(user:'$aleph_local'(flatten_num,_)),
   asserta(user:'$aleph_local'(flatten_num,A)),
   '$aleph_sat_atom'(_,_),
   !,
   ( setting(permute_bottom,B)
   ->
     true
   ;
     B=false
   ),
   flatten_atoms(B,C,D,E).
flatten(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


gen_layer(A/B,J) :-
   ( A/B= (not)/1
   ->
     '$aleph_global'(modeb,modeb(H,not C)),
     functor(C,D,E),
     functor(F,D,E),
     once(copy_modeterms(C,F,E)),
     G= (not F)
   ;
     functor(C,A,B),
     functor(G,A,B),
     '$aleph_global'(modeb,modeb(H,C)),
     once(copy_modeterms(C,G,B))
   ),
   split_args(C,C,I,Q,R),
   ( I= ([])
   ->
     N=true,
     P=true
   ;
     aleph_delete(L/M,I,O),
     K is J-1,
     construct_incall(G,K,[L/M],N),
     construct_call(G,J,O,P)
   ),
   call(user:N),
   call(user:P),
   aleph_background_predicate(G),
   get_successes(G,H,mode(C,I,Q,R)),
   fail.
gen_layer(_,_).


get_atoms1([],_,_,A,A).
get_atoms1([A|E],B,C,D,G) :-
   gen_layer(A,B),
   flatten(B,C,D,F),
   get_atoms1(E,B,C,F,G).


get_atoms([],_,_,A,A) :-
   !.
get_atoms(D,A,B,E,H) :-
   A=<B,
   C is A-1,
   '$aleph_sat_terms'(_,C,_,_),
   !,
   get_atoms1(D,A,B,E,G),
   F is A+1,
   get_atoms(D,F,B,G,H).
get_atoms(_,_,_,A,A).

:- dynamic '$aleph_determination'/2.


:- dynamic '$aleph_has_ivar'/4.


:- dynamic '$aleph_has_ovar'/4.


:- dynamic '$aleph_has_vars'/3.


:- dynamic '$aleph_link_vars'/2.



dec1([],[]).
dec1([A|C],B) :-
   ( A==0
   ->
     B= ([])
   ;
     ( A>0
     ->
       C=[D|E],
       B=[A-D|F],
       dec1(E,F)
     )
   ;
     G is-A,
     B=[G-G|F],
     dec1(C,F)
   ).


zeros(0,[]) :-
   !.
zeros(A,[0|C]) :-
   B is A-1,
   zeros(B,C).


fill_rle(A,D) :-
   ( A<8
   ->
     B=A
   ;
     ( A<256
     ->
       B is 2^ (msb(A-1)+1)
     )
   ;
     B is 256* ((A-1)div 256+1)
   ),
   C is B-A,
   zeros(C,D).


c1([],A,B,A,B).
c1([A-A|D],[C|E],B,G,H) :-
   !,
   F is B+1,
   C is-A,
   c1(D,E,F,G,H).
c1([A-B|D],[A,B|E],C,G,H) :-
   F is C+2,
   c1(D,E,F,G,H).


prove(_,_,_,[],[],0).
prove(A,B,C,[D|E],H,I) :-
   index_prove(A,B,C,D,G,J),
   prove(A,B,C,E,F,K),
   aleph_append(F,G,H),
   I is J+K.


recompute_cover(A,pos,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,E),
   setting(prooftime,F),
   setting(proof_strategy,G),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,D))
   ;
     '$aleph_global'(atoms,atoms(pos,D))
   ),
   prove(E/F/G,pos,C,D,H,_).
recompute_cover(A,neg,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   '$aleph_global'(atoms_left,atoms_left(neg,G)),
   prove(D/E/F,neg,C,G,H,_).


retractall_aleph_search_node :-
   eraseall('$aleph_search_node').


retract_aleph_search_node(A,B,C,D,E,F,G,H) :-
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),I),
   erase(I).


uncompact_rle(A,C) :-
   A=..[cov|B],
   dec1(B,C).


compact_rle(A,D) :-
   c1(A,E,0,C,B),
   fill_rle(B,C),
   D=..[cov|E].


asserta_aleph_search_node(A,B,C,D,_,_,E,F) :-
   setting(compact_node_representation,true),
   !,
   recorda('$aleph_search_node',a(A,B,C,D,_,_,E,F),_).
asserta_aleph_search_node(C,D,E,F,A,B,I,J) :-
   compact_rle(A,G),
   compact_rle(B,H),
   recorda('$aleph_search_node',a(C,D,E,F,G,H,I,J),_).


'$aleph_search_node'(A,B,C,D,E,F,G,H) :-
   setting(compact_node_representation,true),
   !,
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),_).
'$aleph_search_node'(A,B,C,D,H,J,E,F) :-
   recorded('$aleph_search_node',a(A,B,C,D,G,I,E,F),_),
   uncompact_rle(G,H),
   uncompact_rle(I,J).

:- dynamic '$aleph_optimise_keys'/0.

'$aleph_optimise_keys'.

:- dynamic '$aleph_search_node'/2.


:- dynamic '$aleph_search_gain'/4.


:- dynamic '$aleph_search_expansion'/4.


:- dynamic '$aleph_search_seen'/2.


:- dynamic '$aleph_search'/2.


:- dynamic '$aleph_search_prunecache'/1.


:- dynamic '$aleph_search_cache'/1.


:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(735,0,nofpubs(152,159),[[1]/person],[[2]/number],[946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983]).
'$aleph_sat_litinfo'(736,0,nofpubs(151,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(644,0,yearsinprogram(126,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(641,0,yearsinprogram(132,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(512,0,nofpubs(98,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(9,0,yearsinprogram(1,10),[[1]/person],[[2]/number],[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983]).
'$aleph_sat_litinfo'(28,0,nofpubs(2,28),[[1]/person],[[2]/number],[192,195,196,197,200,202,203,205,552,558,562,567,572,577,580,583,586,803,806,810,813,816,819,829,840,851,862,873,884,890,896,902,908,914,920,959,970,982]).
'$aleph_sat_litinfo'(945,0,nofpubs(153,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(944,0,nofpubs(154,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(943,0,nofpubs(157,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(942,0,nofpubs(158,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(748,0,nofpubs(101,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(747,0,nofpubs(102,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(746,0,nofpubs(123,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(745,0,nofpubs(124,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(744,0,nofpubs(125,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(743,0,nofpubs(126,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(742,0,nofpubs(127,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(741,0,nofpubs(128,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(740,0,nofpubs(129,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(739,0,nofpubs(130,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(738,0,nofpubs(131,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(737,0,nofpubs(132,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(528,0,nofpubs(34,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(526,0,nofpubs(39,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(525,0,nofpubs(40,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(524,0,nofpubs(42,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(522,0,nofpubs(61,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(521,0,nofpubs(62,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(520,0,nofpubs(63,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(519,0,nofpubs(64,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(518,0,nofpubs(65,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(517,0,nofpubs(66,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(516,0,nofpubs(67,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(515,0,nofpubs(68,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(513,0,nofpubs(70,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(29,0,nofpubs(1,29),[[1]/person],[[2]/number],[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981]).
'$aleph_sat_litinfo'(643,0,yearsinprogram(128,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(642,0,yearsinprogram(129,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(331,0,yearsinprogram(61,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(175,0,nofpubs(32,95),[[1]/person],[[2]/number],[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980]).
'$aleph_sat_litinfo'(176,0,nofpubs(31,96),[[1]/person],[[2]/number],[547,554,555,556,557,558,559,564,569,570,571,572,573,575,582,583,584,802,805,809,812,815,818,826,837,848,859,870,881,887,893,899,905,911,917,958,967,979]).
'$aleph_sat_litinfo'(510,0,nofpubs(100,97),[[1]/person],[[2]/number],[546,549,550,551,552,553,554,564,565,566,567,568,569,574,579,580,581,801,804,808,811,814,817,825,836,847,858,869,880,886,892,898,904,910,916,957,966,978]).
'$aleph_sat_litinfo'(177,0,nofpubs(30,97),[[1]/person],[[2]/number],[546,549,550,551,552,553,554,564,565,566,567,568,569,574,579,580,581,801,804,808,811,814,817,825,836,847,858,869,880,886,892,898,904,910,916,957,966,978]).
'$aleph_sat_litinfo'(324,0,yearsinprogram(99,118),[[1]/person],[[2]/number],[762,768,778,791,795,796,797,798,799,800,817,818,819,824,835,846,857,868,875,876,877,878,879,880,881,882,883,884,885,916,917,918,919,920,921,953,965,977]).
'$aleph_sat_litinfo'(527,0,nofpubs(36,119),[[1]/person],[[2]/number],[761,767,787,788,789,790,791,792,793,794,814,815,816,823,834,845,856,864,865,866,867,868,869,870,871,872,873,874,879,910,911,912,913,914,915,952,964,976]).
'$aleph_sat_litinfo'(325,0,yearsinprogram(98,119),[[1]/person],[[2]/number],[761,767,787,788,789,790,791,792,793,794,814,815,816,823,834,845,856,864,865,866,867,868,869,870,871,872,873,874,879,910,911,912,913,914,915,952,964,976]).
'$aleph_sat_litinfo'(330,0,yearsinprogram(63,120),[[1]/person],[[2]/number],[760,766,777,782,783,784,785,786,789,796,811,812,813,822,833,844,853,854,855,856,857,858,859,860,861,862,863,867,878,904,905,906,907,908,909,951,963,975]).
'$aleph_sat_litinfo'(326,0,yearsinprogram(70,120),[[1]/person],[[2]/number],[760,766,777,782,783,784,785,786,789,796,811,812,813,822,833,844,853,854,855,856,857,858,859,860,861,862,863,867,878,904,905,906,907,908,909,951,963,975]).
'$aleph_sat_litinfo'(932,0,yearsinprogram(154,121),[[1]/person],[[2]/number],[759,765,775,776,777,778,779,780,781,788,808,809,810,821,832,842,843,844,845,846,847,848,849,850,851,852,855,866,877,898,899,900,901,902,903,950,962,974]).
'$aleph_sat_litinfo'(327,0,yearsinprogram(69,121),[[1]/person],[[2]/number],[759,765,775,776,777,778,779,780,781,788,808,809,810,821,832,842,843,844,845,846,847,848,849,850,851,852,855,866,877,898,899,900,901,902,903,950,962,974]).
'$aleph_sat_litinfo'(645,0,yearsinprogram(102,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(514,0,nofpubs(69,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(329,0,yearsinprogram(66,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(328,0,yearsinprogram(68,122),[[1]/person],[[2]/number],[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973]).
'$aleph_sat_litinfo'(523,0,nofpubs(43,150),[[1]/person],[[2]/number],[757,763,764,765,766,767,768,769,770,771,801,802,803,820,821,822,823,824,825,826,827,828,829,830,831,842,853,864,875,886,887,888,889,890,891,948,960,972]).
'$aleph_sat_litinfo'(511,0,nofpubs(99,150),[[1]/person],[[2]/number],[757,763,764,765,766,767,768,769,770,771,801,802,803,820,821,822,823,824,825,826,827,828,829,830,831,842,853,864,875,886,887,888,889,890,891,948,960,972]).
'$aleph_sat_litinfo'(596,0,taughtby(104,153,54),[[1]/course],[[2]/person,[3]/date],[925,938,945]).
'$aleph_sat_litinfo'(650,0,ta(104,154,37),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(649,0,ta(109,154,41),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(597,0,taughtby(104,154,12),[[1]/course],[[2]/person,[3]/date],[924,930,931,932,936,937,941,944]).
'$aleph_sat_litinfo'(655,0,ta(104,157,12),[[1]/course],[[2]/person,[3]/date],[935,940,943]).
'$aleph_sat_litinfo'(656,0,ta(104,158,14),[[1]/course],[[2]/person,[3]/date],[934,939,942]).
'$aleph_sat_litinfo'(671,0,ta(156,102,7),[[2]/person],[[1]/course,[3]/date],[922,926,928,933]).
'$aleph_sat_litinfo'(604,0,taughtby(156,101,7),[[2]/person],[[1]/course,[3]/date],[922,926,928,933]).
'$aleph_sat_litinfo'(601,0,taughtby(155,101,7),[[2]/person],[[1]/course,[3]/date],[923,927,929]).
'$aleph_sat_litinfo'(753,0,commonpub(151,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(749,0,commonpub(152,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(543,0,commonpub(36,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(532,0,commonpub(99,151),[[1]/person],[[2]/person],[675,687,689,712,729,730,731,733,736,753,754,755,756]).
'$aleph_sat_litinfo'(542,0,commonpub(43,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(536,0,commonpub(99,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(599,0,taughtby(104,101,37),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(210,0,taughtby(56,101,6),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(335,0,ta(56,102,35),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(222,0,taughtby(48,102,103),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(332,0,ta(56,123,37),[[1]/course],[[2]/person,[3]/date],[670,685,746]).
'$aleph_sat_litinfo'(333,0,ta(56,124,6),[[1]/course],[[2]/person,[3]/date],[669,684,745]).
'$aleph_sat_litinfo'(336,0,ta(56,125,35),[[1]/course],[[2]/person,[3]/date],[667,668,683,744]).
'$aleph_sat_litinfo'(334,0,ta(56,125,41),[[1]/course],[[2]/person,[3]/date],[667,668,683,744]).
'$aleph_sat_litinfo'(648,0,ta(110,126,6),[[1]/course],[[2]/person,[3]/date],[630,635,639,644,665,666,682,743]).
'$aleph_sat_litinfo'(338,0,ta(56,126,12),[[1]/course],[[2]/person,[3]/date],[630,635,639,644,665,666,682,743]).
'$aleph_sat_litinfo'(343,0,ta(46,127,41),[[1]/course],[[2]/person,[3]/date],[664,681,742]).
'$aleph_sat_litinfo'(345,0,ta(45,128,6),[[1]/course],[[2]/person,[3]/date],[629,634,638,643,663,680,741]).
'$aleph_sat_litinfo'(346,0,ta(45,129,6),[[1]/course],[[2]/person,[3]/date],[628,633,637,642,662,679,740]).
'$aleph_sat_litinfo'(652,0,ta(104,130,41),[[1]/course],[[2]/person,[3]/date],[660,661,678,739]).
'$aleph_sat_litinfo'(347,0,ta(45,130,7),[[1]/course],[[2]/person,[3]/date],[660,661,678,739]).
'$aleph_sat_litinfo'(348,0,ta(45,131,7),[[1]/course],[[2]/person,[3]/date],[659,677,738]).
'$aleph_sat_litinfo'(653,0,ta(104,132,41),[[1]/course],[[2]/person,[3]/date],[627,632,641,657,658,676,737]).
'$aleph_sat_litinfo'(352,0,ta(45,132,12),[[1]/course],[[2]/person,[3]/date],[627,632,641,657,658,676,737]).
'$aleph_sat_litinfo'(594,0,taughtby(105,43,33),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(541,0,commonpub(43,43),[[1]/person],[[2]/person],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(236,0,taughtby(45,43,6),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(232,0,taughtby(45,43,33),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(228,0,taughtby(46,43,14),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(213,0,taughtby(53,43,38),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(52,0,taughtby(3,43,37),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(50,0,taughtby(3,43,12),[[1]/course],[[2]/person,[3]/date],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(534,0,commonpub(99,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(530,0,commonpub(100,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(187,0,commonpub(30,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(474,0,publication(135,99),[[2]/person],[[1]/ref],[716,717]).
'$aleph_sat_litinfo'(463,0,publication(135,100),[[2]/person],[[1]/ref],[716,717]).
'$aleph_sat_litinfo'(535,0,commonpub(99,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(531,0,commonpub(100,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(188,0,commonpub(30,100),[[1]/person],[[2]/person],[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716]).
'$aleph_sat_litinfo'(476,0,publication(136,99),[[2]/person],[[1]/ref],[714,715]).
'$aleph_sat_litinfo'(465,0,publication(136,100),[[2]/person],[[1]/ref],[714,715]).
'$aleph_sat_litinfo'(479,0,publication(137,99),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(485,0,publication(138,43),[[2]/person],[[1]/ref],[709,710]).
'$aleph_sat_litinfo'(486,0,publication(139,43),[[2]/person],[[1]/ref],[707,708]).
'$aleph_sat_litinfo'(487,0,publication(140,43),[[2]/person],[[1]/ref],[705,706]).
'$aleph_sat_litinfo'(488,0,publication(141,43),[[2]/person],[[1]/ref],[703,704]).
'$aleph_sat_litinfo'(489,0,publication(142,43),[[2]/person],[[1]/ref],[701,702]).
'$aleph_sat_litinfo'(490,0,publication(143,43),[[2]/person],[[1]/ref],[699,700]).
'$aleph_sat_litinfo'(491,0,publication(144,43),[[2]/person],[[1]/ref],[697,698]).
'$aleph_sat_litinfo'(492,0,publication(145,43),[[2]/person],[[1]/ref],[695,696]).
'$aleph_sat_litinfo'(493,0,publication(146,43),[[2]/person],[[1]/ref],[693,694]).
'$aleph_sat_litinfo'(494,0,publication(147,43),[[2]/person],[[1]/ref],[691,692]).
'$aleph_sat_litinfo'(626,0,projectmember(112,36),[[1]/project],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(625,0,projectmember(113,36),[[1]/project],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(592,0,taughtby(107,36,41),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(591,0,taughtby(108,36,50),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(590,0,taughtby(109,36,41),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(544,0,commonpub(36,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(235,0,taughtby(45,36,7),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(234,0,taughtby(45,36,12),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(216,0,taughtby(52,36,54),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(182,0,commonpub(31,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(41,0,taughtby(11,36,14),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(37,0,taughtby(13,36,37),[[1]/course],[[2]/person,[3]/date],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(495,0,publication(148,36),[[2]/person],[[1]/ref],[689,690]).
'$aleph_sat_litinfo'(498,0,publication(149,36),[[2]/person],[[1]/ref],[687,688]).
'$aleph_sat_litinfo'(603,0,taughtby(104,101,37),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(380,0,ta(104,61,6),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(373,0,ta(104,63,35),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(252,0,taughtby(104,40,33),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(239,0,taughtby(104,69,6),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(264,0,taughtby(109,36,41),[[2]/person],[[1]/course,[3]/date],[590,608,617,649]).
'$aleph_sat_litinfo'(269,0,taughtby(110,34,6),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(267,0,taughtby(110,34,54),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(357,0,ta(133,70,14),[[2]/person],[[1]/course,[3]/date],[606,615,647]).
'$aleph_sat_litinfo'(364,0,ta(134,66,6),[[2]/person],[[1]/course,[3]/date],[605,614,646]).
'$aleph_sat_litinfo'(190,0,commonpub(30,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(184,0,commonpub(31,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(178,0,commonpub(32,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(49,0,taughtby(3,2,4),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(48,0,taughtby(5,2,7),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(47,0,taughtby(5,2,6),[[1]/course],[[2]/person,[3]/date],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(32,0,commonpub(2,2),[[1]/person],[[2]/person],[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640]).
'$aleph_sat_litinfo'(624,0,projectmember(114,34),[[1]/project],[[2]/person],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(623,0,projectmember(115,34),[[1]/project],[[2]/person],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(589,0,taughtby(110,34,6),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(588,0,taughtby(110,34,54),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(230,0,taughtby(46,34,37),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(227,0,taughtby(46,34,33),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(38,0,taughtby(11,34,38),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(35,0,taughtby(13,34,14),[[1]/course],[[2]/person,[3]/date],[265,266,267,268,269,270,295,300,303,304,387,528,639]).
'$aleph_sat_litinfo'(545,0,commonpub(36,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(539,0,commonpub(69,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(538,0,commonpub(98,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(238,0,taughtby(44,31,38),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(233,0,taughtby(45,31,4),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(229,0,taughtby(46,31,41),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(225,0,taughtby(47,31,7),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(221,0,taughtby(48,31,6),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(220,0,taughtby(49,31,50),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(219,0,taughtby(51,31,6),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(189,0,commonpub(30,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(183,0,commonpub(31,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(46,0,taughtby(11,31,37),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(36,0,taughtby(13,31,35),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(34,0,taughtby(13,31,33),[[1]/course],[[2]/person,[3]/date],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(31,0,commonpub(2,31),[[1]/person],[[2]/person],[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637]).
'$aleph_sat_litinfo'(301,0,projectmember(112,36),[[2]/person],[[1]/project],[626]).
'$aleph_sat_litinfo'(302,0,projectmember(113,36),[[2]/person],[[1]/project],[625]).
'$aleph_sat_litinfo'(303,0,projectmember(114,34),[[2]/person],[[1]/project],[624]).
'$aleph_sat_litinfo'(304,0,projectmember(115,34),[[2]/person],[[1]/project],[623]).
'$aleph_sat_litinfo'(242,0,taughtby(105,43,33),[[2]/person],[[1]/course,[3]/date],[594,612,621]).
'$aleph_sat_litinfo'(248,0,taughtby(106,42,41),[[2]/person],[[1]/course,[3]/date],[593,611,620]).
'$aleph_sat_litinfo'(260,0,taughtby(107,36,41),[[2]/person],[[1]/course,[3]/date],[592,610,619]).
'$aleph_sat_litinfo'(263,0,taughtby(108,36,50),[[2]/person],[[1]/course,[3]/date],[591,609,618]).
'$aleph_sat_litinfo'(340,0,ta(47,69,12),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(185,0,commonpub(31,69),[[1]/person],[[2]/person],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(99,0,ta(11,69,14),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(537,0,commonpub(98,98),[[1]/person],[[2]/person],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(344,0,ta(46,98,14),[[1]/course],[[2]/person,[3]/date],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(339,0,ta(47,98,7),[[1]/course],[[2]/person,[3]/date],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(181,0,commonpub(31,98),[[1]/person],[[2]/person],[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538]).
'$aleph_sat_litinfo'(231,0,taughtby(45,39,38),[[1]/course],[[2]/person,[3]/date],[255,256,385,526]).
'$aleph_sat_litinfo'(40,0,taughtby(11,39,4),[[1]/course],[[2]/person,[3]/date],[255,256,385,526]).
'$aleph_sat_litinfo'(208,0,taughtby(56,40,54),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(42,0,taughtby(11,40,12),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(237,0,taughtby(45,42,50),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(218,0,taughtby(52,42,6),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(217,0,taughtby(52,42,35),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(44,0,taughtby(11,42,7),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(87,0,ta(13,61,37),[[1]/course],[[2]/person,[3]/date],[312,320,323,331,379,380,399,522]).
'$aleph_sat_litinfo'(100,0,ta(11,62,14),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(98,0,ta(11,62,12),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(88,0,ta(13,62,35),[[1]/course],[[2]/person,[3]/date],[376,377,378,398,521]).
'$aleph_sat_litinfo'(341,0,ta(46,63,37),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(337,0,ta(56,63,12),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(89,0,ta(13,63,14),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(91,0,ta(11,64,37),[[1]/course],[[2]/person,[3]/date],[371,396,519]).
'$aleph_sat_litinfo'(351,0,ta(45,65,35),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(94,0,ta(11,65,7),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(92,0,ta(11,65,6),[[1]/course],[[2]/person,[3]/date],[368,369,370,395,518]).
'$aleph_sat_litinfo'(350,0,ta(45,66,35),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(342,0,ta(46,66,41),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(101,0,ta(3,66,37),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(93,0,ta(11,66,7),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(349,0,ta(45,67,35),[[1]/course],[[2]/person,[3]/date],[361,362,393,516]).
'$aleph_sat_litinfo'(95,0,ta(11,67,41),[[1]/course],[[2]/person,[3]/date],[361,362,393,516]).
'$aleph_sat_litinfo'(96,0,ta(11,68,41),[[1]/course],[[2]/person,[3]/date],[309,317,328,360,392,515]).
'$aleph_sat_litinfo'(103,0,ta(3,70,12),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(102,0,ta(3,70,7),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(136,0,publication(71,31),[[2]/person],[[1]/ref],[453,454]).
'$aleph_sat_litinfo'(139,0,publication(72,31),[[2]/person],[[1]/ref],[451,452]).
'$aleph_sat_litinfo'(140,0,publication(73,31),[[2]/person],[[1]/ref],[449,450]).
'$aleph_sat_litinfo'(141,0,publication(74,31),[[2]/person],[[1]/ref],[447,448]).
'$aleph_sat_litinfo'(142,0,publication(75,31),[[2]/person],[[1]/ref],[445,446]).
'$aleph_sat_litinfo'(144,0,publication(76,31),[[2]/person],[[1]/ref],[443,444]).
'$aleph_sat_litinfo'(226,0,taughtby(47,30,50),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(224,0,taughtby(47,30,12),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(223,0,taughtby(47,30,4),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(215,0,taughtby(52,30,38),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(214,0,taughtby(53,30,54),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(212,0,taughtby(55,30,37),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(211,0,taughtby(55,30,14),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(209,0,taughtby(56,30,35),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(207,0,taughtby(57,30,14),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(206,0,taughtby(57,30,37),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(186,0,commonpub(30,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(180,0,commonpub(31,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(51,0,taughtby(3,30,7),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(45,0,taughtby(11,30,6),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(43,0,taughtby(11,30,41),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(39,0,taughtby(11,30,33),[[1]/course],[[2]/person,[3]/date],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(30,0,commonpub(2,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(170,0,publication(77,30),[[2]/person],[[1]/ref],[441,442]).
'$aleph_sat_litinfo'(150,0,publication(77,31),[[2]/person],[[1]/ref],[441,442]).
'$aleph_sat_litinfo'(152,0,publication(78,31),[[2]/person],[[1]/ref],[439,440]).
'$aleph_sat_litinfo'(153,0,publication(79,31),[[2]/person],[[1]/ref],[437,438]).
'$aleph_sat_litinfo'(154,0,publication(80,31),[[2]/person],[[1]/ref],[435,436]).
'$aleph_sat_litinfo'(155,0,publication(81,31),[[2]/person],[[1]/ref],[433,434]).
'$aleph_sat_litinfo'(156,0,publication(82,30),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(157,0,publication(83,30),[[2]/person],[[1]/ref],[428,429]).
'$aleph_sat_litinfo'(158,0,publication(84,30),[[2]/person],[[1]/ref],[426,427]).
'$aleph_sat_litinfo'(159,0,publication(85,30),[[2]/person],[[1]/ref],[424,425]).
'$aleph_sat_litinfo'(160,0,publication(86,30),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(161,0,publication(87,30),[[2]/person],[[1]/ref],[419,420]).
'$aleph_sat_litinfo'(162,0,publication(88,30),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(163,0,publication(89,30),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(164,0,publication(90,30),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(165,0,publication(91,30),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(166,0,publication(92,30),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(167,0,publication(93,30),[[2]/person],[[1]/ref],[402,403]).
'$aleph_sat_litinfo'(169,0,publication(94,30),[[2]/person],[[1]/ref],[400,401]).
'$aleph_sat_litinfo'(261,0,taughtby(45,36,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(259,0,taughtby(45,36,12),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(255,0,taughtby(45,39,38),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(251,0,taughtby(45,42,50),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(245,0,taughtby(45,43,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(241,0,taughtby(45,43,33),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(55,0,taughtby(45,31,4),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(270,0,taughtby(46,34,37),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(266,0,taughtby(46,34,33),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(243,0,taughtby(46,43,14),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(57,0,taughtby(46,31,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(74,0,taughtby(47,30,50),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(68,0,taughtby(47,30,12),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(65,0,taughtby(47,30,4),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(58,0,taughtby(47,31,7),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(253,0,taughtby(56,40,54),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(69,0,taughtby(56,30,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(53,0,taughtby(44,31,38),[[2]/person],[[1]/course,[3]/date],[238,280,290]).
'$aleph_sat_litinfo'(59,0,taughtby(48,31,6),[[2]/person],[[1]/course,[3]/date],[221,222,276,286]).
'$aleph_sat_litinfo'(61,0,taughtby(49,31,50),[[2]/person],[[1]/course,[3]/date],[220,275,285]).
'$aleph_sat_litinfo'(257,0,taughtby(52,36,54),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(250,0,taughtby(52,42,6),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(247,0,taughtby(52,42,35),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(63,0,taughtby(52,30,38),[[2]/person],[[1]/course,[3]/date],[215,216,217,218,274,284]).
'$aleph_sat_litinfo'(240,0,taughtby(53,43,38),[[2]/person],[[1]/course,[3]/date],[213,214,273,283]).
'$aleph_sat_litinfo'(66,0,taughtby(53,30,54),[[2]/person],[[1]/course,[3]/date],[213,214,273,283]).
'$aleph_sat_litinfo'(73,0,taughtby(55,30,37),[[2]/person],[[1]/course,[3]/date],[211,212,272,282]).
'$aleph_sat_litinfo'(67,0,taughtby(55,30,14),[[2]/person],[[1]/course,[3]/date],[211,212,272,282]).
'$aleph_sat_litinfo'(62,0,taughtby(51,31,6),[[2]/person],[[1]/course,[3]/date],[219]).
'$aleph_sat_litinfo'(76,0,taughtby(57,30,14),[[2]/person],[[1]/course,[3]/date],[206,207]).
'$aleph_sat_litinfo'(75,0,taughtby(57,30,37),[[2]/person],[[1]/course,[3]/date],[206,207]).
'$aleph_sat_litinfo'(33,0,commonpub(2,32),[[1]/person],[[2]/person],[106,119,133,171,172,175,178,179]).
'$aleph_sat_litinfo'(14,0,publication(15,2),[[2]/person],[[1]/ref],[131,132]).
'$aleph_sat_litinfo'(15,0,publication(16,2),[[2]/person],[[1]/ref],[129,130]).
'$aleph_sat_litinfo'(16,0,publication(17,2),[[2]/person],[[1]/ref],[127,128]).
'$aleph_sat_litinfo'(17,0,publication(18,2),[[2]/person],[[1]/ref],[125,126]).
'$aleph_sat_litinfo'(18,0,publication(19,2),[[2]/person],[[1]/ref],[123,124]).
'$aleph_sat_litinfo'(19,0,publication(20,2),[[2]/person],[[1]/ref],[121,122]).
'$aleph_sat_litinfo'(20,0,publication(21,2),[[2]/person],[[1]/ref],[119,120]).
'$aleph_sat_litinfo'(21,0,publication(22,2),[[2]/person],[[1]/ref],[117,118]).
'$aleph_sat_litinfo'(22,0,publication(23,2),[[2]/person],[[1]/ref],[115,116]).
'$aleph_sat_litinfo'(23,0,publication(24,2),[[2]/person],[[1]/ref],[113,114]).
'$aleph_sat_litinfo'(24,0,publication(25,2),[[2]/person],[[1]/ref],[111,112]).
'$aleph_sat_litinfo'(25,0,publication(26,2),[[2]/person],[[1]/ref],[109,110]).
'$aleph_sat_litinfo'(26,0,publication(27,2),[[2]/person],[[1]/ref],[107,108]).
'$aleph_sat_litinfo'(71,0,taughtby(3,30,7),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(2,0,taughtby(3,2,4),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(72,0,taughtby(11,30,6),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(70,0,taughtby(11,30,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(64,0,taughtby(11,30,33),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(60,0,taughtby(11,31,37),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(10,0,ta(11,1,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(56,0,taughtby(13,31,35),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(54,0,taughtby(13,31,33),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(11,0,ta(13,1,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(4,0,taughtby(5,2,7),[[2]/person],[[1]/course,[3]/date],[47,48]).
'$aleph_sat_litinfo'(3,0,taughtby(5,2,6),[[2]/person],[[1]/course,[3]/date],[47,48]).
'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(5,0,position(2,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(6,0,position(2,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(7,0,phase(1,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(8,0,phase(1,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(12,0,professor(2),[[1]/person],[],[]).
'$aleph_sat_litinfo'(13,0,student(1),[[1]/person],[],[]).
'$aleph_sat_litinfo'(27,0,allpublicationswith(2,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(77,0,courselevel(13,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(78,0,courselevel(11,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(79,0,courselevel(3,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(80,0,courselevel(13,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(81,0,courselevel(11,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(82,0,courselevel(3,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(83,0,position(31,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(84,0,position(30,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(85,0,position(31,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(86,0,position(30,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(90,0,ta(13,1,14),[[1]/course],[[2]/person,[3]/date],[7,8,9,10,11,13,29]).
'$aleph_sat_litinfo'(97,0,ta(11,1,12),[[1]/course],[[2]/person,[3]/date],[7,8,9,10,11,13,29]).
'$aleph_sat_litinfo'(104,0,professor(31),[[1]/person],[],[]).
'$aleph_sat_litinfo'(105,0,professor(30),[[1]/person],[],[]).
'$aleph_sat_litinfo'(106,0,student(32),[[1]/person],[],[]).
'$aleph_sat_litinfo'(107,0,publication(27,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(108,0,publication(27,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(109,0,publication(26,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(110,0,publication(26,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(111,0,publication(25,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(112,0,publication(25,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(113,0,publication(24,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(114,0,publication(24,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(115,0,publication(23,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(116,0,publication(23,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(117,0,publication(22,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(118,0,publication(22,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(119,0,publication(21,32),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(120,0,publication(21,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(121,0,publication(20,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(122,0,publication(20,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(123,0,publication(19,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(124,0,publication(19,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(125,0,publication(18,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(126,0,publication(18,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(127,0,publication(17,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(128,0,publication(17,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(129,0,publication(16,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(130,0,publication(16,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(131,0,publication(15,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(132,0,publication(15,2),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(133,0,publication(21,32),[[2]/person],[[1]/ref],[119,120]).
'$aleph_sat_litinfo'(134,0,publication(15,31),[[2]/person],[[1]/ref],[131,132]).
'$aleph_sat_litinfo'(135,0,publication(16,31),[[2]/person],[[1]/ref],[129,130]).
'$aleph_sat_litinfo'(137,0,publication(17,31),[[2]/person],[[1]/ref],[127,128]).
'$aleph_sat_litinfo'(138,0,publication(18,31),[[2]/person],[[1]/ref],[125,126]).
'$aleph_sat_litinfo'(143,0,publication(19,31),[[2]/person],[[1]/ref],[123,124]).
'$aleph_sat_litinfo'(145,0,publication(22,31),[[2]/person],[[1]/ref],[117,118]).
'$aleph_sat_litinfo'(146,0,publication(23,31),[[2]/person],[[1]/ref],[115,116]).
'$aleph_sat_litinfo'(147,0,publication(24,31),[[2]/person],[[1]/ref],[113,114]).
'$aleph_sat_litinfo'(148,0,publication(25,31),[[2]/person],[[1]/ref],[111,112]).
'$aleph_sat_litinfo'(149,0,publication(26,31),[[2]/person],[[1]/ref],[109,110]).
'$aleph_sat_litinfo'(151,0,publication(27,31),[[2]/person],[[1]/ref],[107,108]).
'$aleph_sat_litinfo'(168,0,publication(20,30),[[2]/person],[[1]/ref],[121,122]).
'$aleph_sat_litinfo'(171,0,allpublicationswith(32,32),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(172,0,allpublicationswith(32,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(173,0,allpublicationswith(31,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(174,0,allpublicationswith(30,30),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(179,0,commonpub(32,32),[[1]/person],[[2]/person],[106,119,133,171,172,175,178,179]).
'$aleph_sat_litinfo'(191,0,geq(29,aleph_const(0)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(192,0,geq(28,aleph_const(13)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(193,0,geq(10,aleph_const(3)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(194,0,geq(29,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(195,0,geq(28,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(196,0,geq(28,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(197,0,geq(28,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(198,0,geq(10,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(199,0,geq(10,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(200,0,diff(29,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(201,0,diff(29,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(202,0,diff(28,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(203,0,diff(28,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(204,0,diff(10,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(205,0,diff(10,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(244,0,taughtby(3,43,12),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(246,0,taughtby(3,43,37),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(249,0,taughtby(11,42,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(254,0,taughtby(11,40,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(256,0,taughtby(11,39,4),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(258,0,taughtby(11,36,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(262,0,taughtby(13,36,37),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(265,0,taughtby(11,34,38),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(268,0,taughtby(13,34,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(271,0,courselevel(56,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(272,0,courselevel(55,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(273,0,courselevel(53,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(274,0,courselevel(52,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(275,0,courselevel(49,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(276,0,courselevel(48,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(277,0,courselevel(47,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(278,0,courselevel(46,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(279,0,courselevel(45,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(280,0,courselevel(44,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(281,0,courselevel(56,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(282,0,courselevel(55,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(283,0,courselevel(53,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(284,0,courselevel(52,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(285,0,courselevel(49,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(286,0,courselevel(48,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(287,0,courselevel(47,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(288,0,courselevel(46,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(289,0,courselevel(45,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(290,0,courselevel(44,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(291,0,position(100,111),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(292,0,position(43,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(293,0,position(42,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(294,0,position(36,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(295,0,position(34,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(296,0,position(100,aleph_const(faculty_adjunct_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(297,0,position(43,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(298,0,position(42,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(299,0,position(36,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(300,0,position(34,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(305,0,phase(99,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(306,0,phase(98,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(307,0,phase(70,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(308,0,phase(69,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(309,0,phase(68,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(310,0,phase(66,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(311,0,phase(63,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(312,0,phase(61,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(313,0,phase(99,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(314,0,phase(98,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(315,0,phase(70,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(316,0,phase(69,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(317,0,phase(68,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(318,0,phase(66,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(319,0,phase(63,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(320,0,phase(61,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(321,0,tempadvisedby(66,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(322,0,tempadvisedby(63,43),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(323,0,tempadvisedby(61,42),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(353,0,ta(47,98,7),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(354,0,ta(46,98,14),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(355,0,ta(3,70,7),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(356,0,ta(3,70,12),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(358,0,ta(47,69,12),[[2]/person],[[1]/course,[3]/date],[223,224,225,226,277,287,339,340]).
'$aleph_sat_litinfo'(359,0,ta(11,69,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(360,0,ta(11,68,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(361,0,ta(11,67,41),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(362,0,ta(45,67,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(363,0,ta(3,66,37),[[2]/person],[[1]/course,[3]/date],[49,50,51,52,79,82,101,102,103]).
'$aleph_sat_litinfo'(365,0,ta(11,66,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(366,0,ta(46,66,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(367,0,ta(45,66,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(368,0,ta(11,65,6),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(369,0,ta(11,65,7),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(370,0,ta(45,65,35),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(371,0,ta(11,64,37),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(372,0,ta(46,63,37),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(374,0,ta(56,63,12),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(375,0,ta(13,63,14),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(376,0,ta(13,62,35),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(377,0,ta(11,62,12),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(378,0,ta(11,62,14),[[2]/person],[[1]/course,[3]/date],[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100]).
'$aleph_sat_litinfo'(379,0,ta(13,61,37),[[2]/person],[[1]/course,[3]/date],[34,35,36,37,77,80,87,88,89,90]).
'$aleph_sat_litinfo'(381,0,professor(100),[[1]/person],[],[]).
'$aleph_sat_litinfo'(382,0,professor(43),[[1]/person],[],[]).
'$aleph_sat_litinfo'(383,0,professor(42),[[1]/person],[],[]).
'$aleph_sat_litinfo'(384,0,professor(40),[[1]/person],[],[]).
'$aleph_sat_litinfo'(385,0,professor(39),[[1]/person],[],[]).
'$aleph_sat_litinfo'(386,0,professor(36),[[1]/person],[],[]).
'$aleph_sat_litinfo'(387,0,professor(34),[[1]/person],[],[]).
'$aleph_sat_litinfo'(388,0,student(99),[[1]/person],[],[]).
'$aleph_sat_litinfo'(389,0,student(98),[[1]/person],[],[]).
'$aleph_sat_litinfo'(390,0,student(70),[[1]/person],[],[]).
'$aleph_sat_litinfo'(391,0,student(69),[[1]/person],[],[]).
'$aleph_sat_litinfo'(392,0,student(68),[[1]/person],[],[]).
'$aleph_sat_litinfo'(393,0,student(67),[[1]/person],[],[]).
'$aleph_sat_litinfo'(394,0,student(66),[[1]/person],[],[]).
'$aleph_sat_litinfo'(395,0,student(65),[[1]/person],[],[]).
'$aleph_sat_litinfo'(396,0,student(64),[[1]/person],[],[]).
'$aleph_sat_litinfo'(397,0,student(63),[[1]/person],[],[]).
'$aleph_sat_litinfo'(398,0,student(62),[[1]/person],[],[]).
'$aleph_sat_litinfo'(399,0,student(61),[[1]/person],[],[]).
'$aleph_sat_litinfo'(400,0,publication(94,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(401,0,publication(94,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(402,0,publication(93,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(403,0,publication(93,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(404,0,publication(92,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(405,0,publication(92,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(406,0,publication(92,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(407,0,publication(91,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(408,0,publication(91,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(409,0,publication(91,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(410,0,publication(90,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(411,0,publication(90,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(412,0,publication(90,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(413,0,publication(89,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(414,0,publication(89,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(415,0,publication(89,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(416,0,publication(88,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(417,0,publication(88,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(418,0,publication(88,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(419,0,publication(87,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(420,0,publication(87,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(421,0,publication(86,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(422,0,publication(86,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(423,0,publication(86,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(424,0,publication(85,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(425,0,publication(85,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(426,0,publication(84,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(427,0,publication(84,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(428,0,publication(83,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(429,0,publication(83,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(430,0,publication(82,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(431,0,publication(82,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(432,0,publication(82,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(433,0,publication(81,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(434,0,publication(81,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(435,0,publication(80,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(436,0,publication(80,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(437,0,publication(79,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(438,0,publication(79,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(439,0,publication(78,69),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(440,0,publication(78,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(441,0,publication(77,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(442,0,publication(77,30),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(443,0,publication(76,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(444,0,publication(76,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(445,0,publication(75,69),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(446,0,publication(75,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(447,0,publication(74,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(448,0,publication(74,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(449,0,publication(73,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(450,0,publication(73,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(451,0,publication(72,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(452,0,publication(72,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(453,0,publication(71,98),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(454,0,publication(71,31),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(455,0,publication(82,100),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(456,0,publication(83,100),[[2]/person],[[1]/ref],[428,429]).
'$aleph_sat_litinfo'(457,0,publication(84,100),[[2]/person],[[1]/ref],[426,427]).
'$aleph_sat_litinfo'(458,0,publication(85,100),[[2]/person],[[1]/ref],[424,425]).
'$aleph_sat_litinfo'(459,0,publication(86,100),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(460,0,publication(87,100),[[2]/person],[[1]/ref],[419,420]).
'$aleph_sat_litinfo'(461,0,publication(88,100),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(462,0,publication(89,100),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(464,0,publication(90,100),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(466,0,publication(91,100),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(467,0,publication(92,100),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(468,0,publication(93,100),[[2]/person],[[1]/ref],[402,403]).
'$aleph_sat_litinfo'(469,0,publication(94,100),[[2]/person],[[1]/ref],[400,401]).
'$aleph_sat_litinfo'(470,0,publication(82,99),[[2]/person],[[1]/ref],[430,431,432]).
'$aleph_sat_litinfo'(471,0,publication(86,99),[[2]/person],[[1]/ref],[421,422,423]).
'$aleph_sat_litinfo'(472,0,publication(88,99),[[2]/person],[[1]/ref],[416,417,418]).
'$aleph_sat_litinfo'(473,0,publication(89,99),[[2]/person],[[1]/ref],[413,414,415]).
'$aleph_sat_litinfo'(475,0,publication(90,99),[[2]/person],[[1]/ref],[410,411,412]).
'$aleph_sat_litinfo'(477,0,publication(91,99),[[2]/person],[[1]/ref],[407,408,409]).
'$aleph_sat_litinfo'(478,0,publication(92,99),[[2]/person],[[1]/ref],[404,405,406]).
'$aleph_sat_litinfo'(480,0,publication(71,98),[[2]/person],[[1]/ref],[453,454]).
'$aleph_sat_litinfo'(481,0,publication(73,98),[[2]/person],[[1]/ref],[449,450]).
'$aleph_sat_litinfo'(482,0,publication(76,98),[[2]/person],[[1]/ref],[443,444]).
'$aleph_sat_litinfo'(483,0,publication(75,69),[[2]/person],[[1]/ref],[445,446]).
'$aleph_sat_litinfo'(484,0,publication(78,69),[[2]/person],[[1]/ref],[439,440]).
'$aleph_sat_litinfo'(496,0,publication(72,36),[[2]/person],[[1]/ref],[451,452]).
'$aleph_sat_litinfo'(497,0,publication(74,36),[[2]/person],[[1]/ref],[447,448]).
'$aleph_sat_litinfo'(499,0,publication(79,36),[[2]/person],[[1]/ref],[437,438]).
'$aleph_sat_litinfo'(500,0,publication(80,36),[[2]/person],[[1]/ref],[435,436]).
'$aleph_sat_litinfo'(501,0,publication(81,36),[[2]/person],[[1]/ref],[433,434]).
'$aleph_sat_litinfo'(502,0,allpublicationswith(100,100),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(503,0,allpublicationswith(99,99),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(504,0,allpublicationswith(98,98),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(505,0,allpublicationswith(98,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(506,0,allpublicationswith(69,69),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(507,0,allpublicationswith(69,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(508,0,allpublicationswith(43,43),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(509,0,allpublicationswith(36,36),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(529,0,commonpub(100,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(533,0,commonpub(99,30),[[1]/person],[[2]/person],[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442]).
'$aleph_sat_litinfo'(540,0,commonpub(69,69),[[1]/person],[[2]/person],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(546,0,geq(97,aleph_const(15)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(547,0,geq(96,aleph_const(22)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(548,0,geq(95,aleph_const(1)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(549,0,geq(97,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(550,0,geq(97,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(551,0,geq(97,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(552,0,geq(97,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(553,0,geq(97,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(554,0,geq(96,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(555,0,geq(96,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(556,0,geq(96,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(557,0,geq(96,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(558,0,geq(96,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(559,0,geq(96,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(560,0,geq(95,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(561,0,geq(95,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(562,0,geq(28,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(563,0,geq(10,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(564,0,diff(97,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(565,0,diff(97,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(566,0,diff(97,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(567,0,diff(97,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(568,0,diff(97,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(569,0,diff(96,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(570,0,diff(96,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(571,0,diff(96,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(572,0,diff(96,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(573,0,diff(96,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(574,0,diff(95,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(575,0,diff(95,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(576,0,diff(95,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(577,0,diff(95,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(578,0,diff(95,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(579,0,diff(29,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(580,0,diff(28,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(581,0,diff(10,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(582,0,diff(29,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(583,0,diff(28,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(584,0,diff(10,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(585,0,diff(29,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(586,0,diff(28,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(587,0,diff(10,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(593,0,taughtby(106,42,41),[[1]/course],[[2]/person,[3]/date],[247,248,249,250,251,293,298,323,383,524]).
'$aleph_sat_litinfo'(595,0,taughtby(104,40,33),[[1]/course],[[2]/person,[3]/date],[252,253,254,384,525]).
'$aleph_sat_litinfo'(598,0,taughtby(104,69,6),[[1]/course],[[2]/person,[3]/date],[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540]).
'$aleph_sat_litinfo'(600,0,taughtby(48,102,103),[[2]/person],[[1]/course,[3]/date],[221,222,276,286]).
'$aleph_sat_litinfo'(602,0,taughtby(56,101,6),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(605,0,courselevel(134,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(606,0,courselevel(133,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(607,0,courselevel(110,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(608,0,courselevel(109,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(609,0,courselevel(108,58),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(610,0,courselevel(107,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(611,0,courselevel(106,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(612,0,courselevel(105,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(613,0,courselevel(104,59),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(614,0,courselevel(134,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(615,0,courselevel(133,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(616,0,courselevel(110,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(617,0,courselevel(109,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(618,0,courselevel(108,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(619,0,courselevel(107,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(620,0,courselevel(106,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(621,0,courselevel(105,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(622,0,courselevel(104,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(627,0,phase(132,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(628,0,phase(129,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(629,0,phase(128,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(630,0,phase(126,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(631,0,phase(102,117),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(632,0,phase(132,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(633,0,phase(129,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(634,0,phase(128,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(635,0,phase(126,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(636,0,phase(102,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(637,0,tempadvisedby(129,31),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(638,0,tempadvisedby(128,36),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(639,0,tempadvisedby(126,34),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(640,0,tempadvisedby(102,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(646,0,ta(134,66,6),[[1]/course],[[2]/person,[3]/date],[310,318,321,329,363,364,365,366,367,394,517]).
'$aleph_sat_litinfo'(647,0,ta(133,70,14),[[1]/course],[[2]/person,[3]/date],[307,315,326,355,356,357,390,513]).
'$aleph_sat_litinfo'(651,0,ta(104,61,6),[[1]/course],[[2]/person,[3]/date],[312,320,323,331,379,380,399,522]).
'$aleph_sat_litinfo'(654,0,ta(104,63,35),[[1]/course],[[2]/person,[3]/date],[311,319,322,330,372,373,374,375,397,520]).
'$aleph_sat_litinfo'(657,0,ta(104,132,41),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(658,0,ta(45,132,12),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(659,0,ta(45,131,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(660,0,ta(45,130,7),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(661,0,ta(104,130,41),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(662,0,ta(45,129,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(663,0,ta(45,128,6),[[2]/person],[[1]/course,[3]/date],[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352]).
'$aleph_sat_litinfo'(664,0,ta(46,127,41),[[2]/person],[[1]/course,[3]/date],[227,228,229,230,278,288,341,342,343,344]).
'$aleph_sat_litinfo'(665,0,ta(110,126,6),[[2]/person],[[1]/course,[3]/date],[588,589,607,616,648]).
'$aleph_sat_litinfo'(666,0,ta(56,126,12),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(667,0,ta(56,125,41),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(668,0,ta(56,125,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(669,0,ta(56,124,6),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(670,0,ta(56,123,37),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(672,0,ta(56,102,35),[[2]/person],[[1]/course,[3]/date],[208,209,210,271,281,332,333,334,335,336,337,338]).
'$aleph_sat_litinfo'(673,0,professor(101),[[1]/person],[],[]).
'$aleph_sat_litinfo'(674,0,student(152),[[1]/person],[],[]).
'$aleph_sat_litinfo'(675,0,student(151),[[1]/person],[],[]).
'$aleph_sat_litinfo'(676,0,student(132),[[1]/person],[],[]).
'$aleph_sat_litinfo'(677,0,student(131),[[1]/person],[],[]).
'$aleph_sat_litinfo'(678,0,student(130),[[1]/person],[],[]).
'$aleph_sat_litinfo'(679,0,student(129),[[1]/person],[],[]).
'$aleph_sat_litinfo'(680,0,student(128),[[1]/person],[],[]).
'$aleph_sat_litinfo'(681,0,student(127),[[1]/person],[],[]).
'$aleph_sat_litinfo'(682,0,student(126),[[1]/person],[],[]).
'$aleph_sat_litinfo'(683,0,student(125),[[1]/person],[],[]).
'$aleph_sat_litinfo'(684,0,student(124),[[1]/person],[],[]).
'$aleph_sat_litinfo'(685,0,student(123),[[1]/person],[],[]).
'$aleph_sat_litinfo'(686,0,student(102),[[1]/person],[],[]).
'$aleph_sat_litinfo'(687,0,publication(149,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(688,0,publication(149,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(689,0,publication(148,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(690,0,publication(148,36),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(691,0,publication(147,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(692,0,publication(147,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(693,0,publication(146,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(694,0,publication(146,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(695,0,publication(145,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(696,0,publication(145,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(697,0,publication(144,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(698,0,publication(144,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(699,0,publication(143,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(700,0,publication(143,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(701,0,publication(142,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(702,0,publication(142,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(703,0,publication(141,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(704,0,publication(141,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(705,0,publication(140,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(706,0,publication(140,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(707,0,publication(139,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(708,0,publication(139,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(709,0,publication(138,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(710,0,publication(138,43),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(711,0,publication(137,152),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(712,0,publication(137,151),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(713,0,publication(137,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(714,0,publication(136,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(715,0,publication(136,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(716,0,publication(135,100),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(717,0,publication(135,99),[[1]/ref,[2]/person],[],[]).
'$aleph_sat_litinfo'(718,0,publication(138,152),[[2]/person],[[1]/ref],[709,710]).
'$aleph_sat_litinfo'(719,0,publication(139,152),[[2]/person],[[1]/ref],[707,708]).
'$aleph_sat_litinfo'(720,0,publication(140,152),[[2]/person],[[1]/ref],[705,706]).
'$aleph_sat_litinfo'(721,0,publication(141,152),[[2]/person],[[1]/ref],[703,704]).
'$aleph_sat_litinfo'(722,0,publication(142,152),[[2]/person],[[1]/ref],[701,702]).
'$aleph_sat_litinfo'(723,0,publication(143,152),[[2]/person],[[1]/ref],[699,700]).
'$aleph_sat_litinfo'(724,0,publication(144,152),[[2]/person],[[1]/ref],[697,698]).
'$aleph_sat_litinfo'(725,0,publication(137,152),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(726,0,publication(145,152),[[2]/person],[[1]/ref],[695,696]).
'$aleph_sat_litinfo'(727,0,publication(146,152),[[2]/person],[[1]/ref],[693,694]).
'$aleph_sat_litinfo'(728,0,publication(147,152),[[2]/person],[[1]/ref],[691,692]).
'$aleph_sat_litinfo'(729,0,publication(148,151),[[2]/person],[[1]/ref],[689,690]).
'$aleph_sat_litinfo'(730,0,publication(149,151),[[2]/person],[[1]/ref],[687,688]).
'$aleph_sat_litinfo'(731,0,publication(137,151),[[2]/person],[[1]/ref],[711,712,713]).
'$aleph_sat_litinfo'(732,0,allpublicationswith(152,152),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(733,0,allpublicationswith(151,151),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(734,0,allpublicationswith(43,152),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(750,0,commonpub(152,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(751,0,commonpub(152,43),[[1]/person],[[2]/person],[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734]).
'$aleph_sat_litinfo'(752,0,commonpub(152,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(754,0,commonpub(151,99),[[1]/person],[[2]/person],[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717]).
'$aleph_sat_litinfo'(755,0,commonpub(151,36),[[1]/person],[[2]/person],[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690]).
'$aleph_sat_litinfo'(756,0,commonpub(151,152),[[1]/person],[[2]/person],[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752]).
'$aleph_sat_litinfo'(757,0,geq(150,aleph_const(10)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(758,0,geq(122,aleph_const(2)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(759,0,geq(121,aleph_const(6)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(760,0,geq(120,aleph_const(4)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(761,0,geq(119,aleph_const(7)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(762,0,geq(118,aleph_const(5)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(763,0,geq(150,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(764,0,geq(150,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(765,0,geq(150,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(766,0,geq(150,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(767,0,geq(150,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(768,0,geq(150,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(769,0,geq(150,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(770,0,geq(150,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(771,0,geq(150,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(772,0,geq(122,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(773,0,geq(122,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(774,0,geq(122,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(775,0,geq(121,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(776,0,geq(121,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(777,0,geq(121,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(778,0,geq(121,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(779,0,geq(121,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(780,0,geq(121,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(781,0,geq(121,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(782,0,geq(120,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(783,0,geq(120,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(784,0,geq(120,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(785,0,geq(120,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(786,0,geq(120,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(787,0,geq(119,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(788,0,geq(119,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(789,0,geq(119,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(790,0,geq(119,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(791,0,geq(119,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(792,0,geq(119,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(793,0,geq(119,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(794,0,geq(119,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(795,0,geq(118,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(796,0,geq(118,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(797,0,geq(118,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(798,0,geq(118,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(799,0,geq(118,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(800,0,geq(118,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(801,0,geq(97,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(802,0,geq(96,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(803,0,geq(28,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(804,0,geq(97,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(805,0,geq(96,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(806,0,geq(28,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(807,0,geq(10,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(808,0,geq(97,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(809,0,geq(96,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(810,0,geq(28,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(811,0,geq(97,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(812,0,geq(96,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(813,0,geq(28,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(814,0,geq(97,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(815,0,geq(96,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(816,0,geq(28,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(817,0,geq(97,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(818,0,geq(96,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(819,0,geq(28,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(820,0,diff(150,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(821,0,diff(150,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(822,0,diff(150,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(823,0,diff(150,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(824,0,diff(150,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(825,0,diff(150,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(826,0,diff(150,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(827,0,diff(150,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(828,0,diff(150,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(829,0,diff(150,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(830,0,diff(150,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(831,0,diff(122,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(832,0,diff(122,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(833,0,diff(122,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(834,0,diff(122,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(835,0,diff(122,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(836,0,diff(122,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(837,0,diff(122,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(838,0,diff(122,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(839,0,diff(122,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(840,0,diff(122,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(841,0,diff(122,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(842,0,diff(121,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(843,0,diff(121,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(844,0,diff(121,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(845,0,diff(121,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(846,0,diff(121,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(847,0,diff(121,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(848,0,diff(121,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(849,0,diff(121,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(850,0,diff(121,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(851,0,diff(121,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(852,0,diff(121,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(853,0,diff(120,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(854,0,diff(120,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(855,0,diff(120,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(856,0,diff(120,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(857,0,diff(120,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(858,0,diff(120,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(859,0,diff(120,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(860,0,diff(120,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(861,0,diff(120,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(862,0,diff(120,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(863,0,diff(120,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(864,0,diff(119,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(865,0,diff(119,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(866,0,diff(119,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(867,0,diff(119,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(868,0,diff(119,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(869,0,diff(119,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(870,0,diff(119,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(871,0,diff(119,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(872,0,diff(119,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(873,0,diff(119,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(874,0,diff(119,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(875,0,diff(118,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(876,0,diff(118,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(877,0,diff(118,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(878,0,diff(118,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(879,0,diff(118,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(880,0,diff(118,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(881,0,diff(118,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(882,0,diff(118,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(883,0,diff(118,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(884,0,diff(118,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(885,0,diff(118,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(886,0,diff(97,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(887,0,diff(96,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(888,0,diff(95,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(889,0,diff(29,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(890,0,diff(28,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(891,0,diff(10,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(892,0,diff(97,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(893,0,diff(96,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(894,0,diff(95,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(895,0,diff(29,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(896,0,diff(28,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(897,0,diff(10,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(898,0,diff(97,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(899,0,diff(96,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(900,0,diff(95,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(901,0,diff(29,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(902,0,diff(28,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(903,0,diff(10,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(904,0,diff(97,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(905,0,diff(96,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(906,0,diff(95,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(907,0,diff(29,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(908,0,diff(28,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(909,0,diff(10,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(910,0,diff(97,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(911,0,diff(96,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(912,0,diff(95,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(913,0,diff(29,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(914,0,diff(28,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(915,0,diff(10,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(916,0,diff(97,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(917,0,diff(96,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(918,0,diff(95,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(919,0,diff(29,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(920,0,diff(28,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(921,0,diff(10,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(922,0,taughtby(156,101,7),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(923,0,taughtby(155,101,7),[[1]/course],[[2]/person,[3]/date],[601,602,603,604,673,748]).
'$aleph_sat_litinfo'(924,0,taughtby(104,154,12),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(925,0,taughtby(104,153,54),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(926,0,courselevel(156,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(927,0,courselevel(155,60),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(928,0,courselevel(156,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(929,0,courselevel(155,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(930,0,phase(154,116),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(931,0,phase(154,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(933,0,ta(156,102,7),[[1]/course],[[2]/person,[3]/date],[600,631,636,640,645,671,672,686,747]).
'$aleph_sat_litinfo'(934,0,ta(104,158,14),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(935,0,ta(104,157,12),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(936,0,ta(104,154,37),[[2]/person],[[1]/course,[3]/date],[595,596,597,598,599,613,622,650,651,652,653,654,655,656]).
'$aleph_sat_litinfo'(937,0,ta(109,154,41),[[2]/person],[[1]/course,[3]/date],[590,608,617,649]).
'$aleph_sat_litinfo'(938,0,professor(153),[[1]/person],[],[]).
'$aleph_sat_litinfo'(939,0,student(158),[[1]/person],[],[]).
'$aleph_sat_litinfo'(940,0,student(157),[[1]/person],[],[]).
'$aleph_sat_litinfo'(941,0,student(154),[[1]/person],[],[]).
'$aleph_sat_litinfo'(946,0,geq(159,aleph_const(11)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(947,0,geq(159,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(948,0,geq(159,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(949,0,geq(159,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(950,0,geq(159,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(951,0,geq(159,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(952,0,geq(159,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(953,0,geq(159,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(954,0,geq(159,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(955,0,geq(159,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(956,0,geq(159,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(957,0,geq(97,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(958,0,geq(96,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(959,0,geq(28,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(960,0,diff(159,150),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(961,0,diff(159,122),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(962,0,diff(159,121),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(963,0,diff(159,120),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(964,0,diff(159,119),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(965,0,diff(159,118),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(966,0,diff(159,97),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(967,0,diff(159,96),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(968,0,diff(159,95),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(969,0,diff(159,29),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(970,0,diff(159,28),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(971,0,diff(159,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(972,0,diff(150,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(973,0,diff(122,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(974,0,diff(121,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(975,0,diff(120,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(976,0,diff(119,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(977,0,diff(118,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(978,0,diff(97,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(979,0,diff(96,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(980,0,diff(95,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(981,0,diff(29,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(982,0,diff(28,159),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(983,0,diff(10,159),[[1]/number,[2]/number],[],[]).

:- dynamic '$aleph_sat_vars'/4.

'$aleph_sat_vars'(159,159,[946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983],[735]).
'$aleph_sat_vars'(10,10,[193,197,198,199,201,203,204,205,553,559,563,568,573,578,581,584,587,771,781,786,794,800,807,830,841,852,863,874,885,891,897,903,909,915,921,956,971,983],[9,512,641,644,736]).
'$aleph_sat_vars'(28,28,[192,195,196,197,200,202,203,205,552,558,562,567,572,577,580,583,586,803,806,810,813,816,819,829,840,851,862,873,884,890,896,902,908,914,920,959,970,982],[28]).
'$aleph_sat_vars'(29,29,[191,194,195,198,200,201,202,204,551,557,561,566,571,576,579,582,585,770,774,780,785,793,799,828,839,850,861,872,883,889,895,901,907,913,919,955,969,981],[29,513,515,516,517,518,519,520,521,522,524,525,526,528,737,738,739,740,741,742,743,744,745,746,747,748,942,943,944,945]).
'$aleph_sat_vars'(95,95,[548,550,556,560,561,562,563,565,570,574,575,576,577,578,585,586,587,769,773,779,784,792,798,827,838,849,860,871,882,888,894,900,906,912,918,954,968,980],[175,331,642,643]).
'$aleph_sat_vars'(96,96,[547,554,555,556,557,558,559,564,569,570,571,572,573,575,582,583,584,802,805,809,812,815,818,826,837,848,859,870,881,887,893,899,905,911,917,958,967,979],[176]).
'$aleph_sat_vars'(97,97,[546,549,550,551,552,553,554,564,565,566,567,568,569,574,579,580,581,801,804,808,811,814,817,825,836,847,858,869,880,886,892,898,904,910,916,957,966,978],[177,510]).
'$aleph_sat_vars'(118,118,[762,768,778,791,795,796,797,798,799,800,817,818,819,824,835,846,857,868,875,876,877,878,879,880,881,882,883,884,885,916,917,918,919,920,921,953,965,977],[324]).
'$aleph_sat_vars'(119,119,[761,767,787,788,789,790,791,792,793,794,814,815,816,823,834,845,856,864,865,866,867,868,869,870,871,872,873,874,879,910,911,912,913,914,915,952,964,976],[325,527]).
'$aleph_sat_vars'(120,120,[760,766,777,782,783,784,785,786,789,796,811,812,813,822,833,844,853,854,855,856,857,858,859,860,861,862,863,867,878,904,905,906,907,908,909,951,963,975],[326,330]).
'$aleph_sat_vars'(121,121,[759,765,775,776,777,778,779,780,781,788,808,809,810,821,832,842,843,844,845,846,847,848,849,850,851,852,855,866,877,898,899,900,901,902,903,950,962,974],[327,932]).
'$aleph_sat_vars'(122,122,[758,764,772,773,774,775,782,787,795,804,805,806,807,820,831,832,833,834,835,836,837,838,839,840,841,843,854,865,876,892,893,894,895,896,897,949,961,973],[328,329,514,645]).
'$aleph_sat_vars'(150,150,[757,763,764,765,766,767,768,769,770,771,801,802,803,820,821,822,823,824,825,826,827,828,829,830,831,842,853,864,875,886,887,888,889,890,891,948,960,972],[511,523]).
'$aleph_sat_vars'(153,153,[925,938,945],[596]).
'$aleph_sat_vars'(154,154,[924,930,931,932,936,937,941,944],[597,649,650]).
'$aleph_sat_vars'(157,157,[935,940,943],[655]).
'$aleph_sat_vars'(158,158,[934,939,942],[656]).
'$aleph_sat_vars'(41,41,[],[43,57,70,95,96,229,248,260,264,334,342,343,360,361,366,590,592,593,649,652,653,657,661,664,667,937]).
'$aleph_sat_vars'(109,109,[590,608,617,649],[264,937]).
'$aleph_sat_vars'(37,37,[],[37,46,52,60,73,75,87,91,101,206,212,230,246,262,270,332,341,363,371,372,379,599,603,650,670,936]).
'$aleph_sat_vars'(104,104,[595,596,597,598,599,613,622,650,651,652,653,654,655,656],[239,252,373,380,603,657,661,924,925,934,935,936]).
'$aleph_sat_vars'(12,12,[],[10,42,50,68,97,98,103,224,234,244,254,259,337,338,340,352,356,358,374,377,597,655,658,666,924,935]).
'$aleph_sat_vars'(14,14,[],[11,35,41,67,76,89,90,99,100,207,211,228,243,258,268,344,354,357,359,375,378,647,656,934]).
'$aleph_sat_vars'(7,7,[],[4,44,48,51,58,71,93,94,102,225,235,249,261,339,347,348,353,355,365,369,601,604,659,660,671,922,923,933]).
'$aleph_sat_vars'(102,102,[600,631,636,640,645,671,672,686,747],[222,335,933]).
'$aleph_sat_vars'(156,156,[922,926,928,933],[604,671]).
'$aleph_sat_vars'(116,116,[],[305,306,308,930]).
'$aleph_sat_vars'(155,155,[923,927,929],[601]).
'$aleph_sat_vars'(60,60,[],[79,273,274,275,276,280,605,606,607,608,610,611,612,926,927]).
'$aleph_sat_vars'(54,54,[],[66,208,214,216,253,257,267,588,596,925]).
'$aleph_sat_vars'(101,101,[601,602,603,604,673,748],[210,599,922,923]).
'$aleph_sat_vars'(152,152,[674,691,693,695,697,699,701,703,705,707,709,711,718,719,720,721,722,723,724,725,726,727,728,732,734,735,749,750,751,752],[536,542,752,756]).
'$aleph_sat_vars'(151,151,[675,687,689,712,729,730,731,733,736,753,754,755,756],[532,543,749,753]).
'$aleph_sat_vars'(36,36,[257,258,259,260,261,262,263,264,294,299,301,302,386,433,435,437,447,451,495,496,497,498,499,500,501,509,527,543,544,545,638,688,690],[37,41,182,216,234,235,544,590,591,592,625,626,755]).
'$aleph_sat_vars'(99,99,[305,313,324,388,405,408,411,414,417,422,431,470,471,472,473,474,475,476,477,478,479,503,511,532,533,534,535,536,713,715,717],[187,530,534,750,754]).
'$aleph_sat_vars'(43,43,[240,241,242,243,244,245,246,292,297,322,382,485,486,487,488,489,490,491,492,493,494,508,523,541,542,692,694,696,698,700,702,704,706,708,710,734],[50,52,213,228,232,236,541,594,751]).
'$aleph_sat_vars'(123,123,[670,685,746],[332]).
'$aleph_sat_vars'(124,124,[669,684,745],[333]).
'$aleph_sat_vars'(125,125,[667,668,683,744],[334,336]).
'$aleph_sat_vars'(126,126,[630,635,639,644,665,666,682,743],[338,648]).
'$aleph_sat_vars'(127,127,[664,681,742],[343]).
'$aleph_sat_vars'(128,128,[629,634,638,643,663,680,741],[345]).
'$aleph_sat_vars'(129,129,[628,633,637,642,662,679,740],[346]).
'$aleph_sat_vars'(130,130,[660,661,678,739],[347,652]).
'$aleph_sat_vars'(131,131,[659,677,738],[348]).
'$aleph_sat_vars'(132,132,[627,632,641,657,658,676,737],[352,653]).
'$aleph_sat_vars'(137,137,[711,712,713],[479,725,731]).
'$aleph_sat_vars'(149,149,[687,688],[498,730]).
'$aleph_sat_vars'(148,148,[689,690],[495,729]).
'$aleph_sat_vars'(147,147,[691,692],[494,728]).
'$aleph_sat_vars'(146,146,[693,694],[493,727]).
'$aleph_sat_vars'(145,145,[695,696],[492,726]).
'$aleph_sat_vars'(144,144,[697,698],[491,724]).
'$aleph_sat_vars'(143,143,[699,700],[490,723]).
'$aleph_sat_vars'(142,142,[701,702],[489,722]).
'$aleph_sat_vars'(141,141,[703,704],[488,721]).
'$aleph_sat_vars'(140,140,[705,706],[487,720]).
'$aleph_sat_vars'(139,139,[707,708],[486,719]).
'$aleph_sat_vars'(138,138,[709,710],[485,718]).
'$aleph_sat_vars'(135,135,[716,717],[463,474]).
'$aleph_sat_vars'(100,100,[291,296,381,400,402,404,407,410,413,416,419,421,424,426,428,430,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,502,510,529,530,531,714,716],[188,531,535]).
'$aleph_sat_vars'(136,136,[714,715],[465,476]).
'$aleph_sat_vars'(35,35,[],[36,56,69,88,209,217,247,335,336,349,350,351,362,367,370,373,376,654,668,672]).
'$aleph_sat_vars'(56,56,[208,209,210,271,281,332,333,334,335,336,337,338],[69,253,374,602,666,667,668,669,670,672]).
'$aleph_sat_vars'(6,6,[],[3,45,47,59,62,72,92,210,218,219,221,236,239,245,250,269,333,345,346,364,368,380,589,598,602,646,648,651,662,663,665,669]).
'$aleph_sat_vars'(110,110,[588,589,607,616,648],[267,269,665]).
'$aleph_sat_vars'(46,46,[227,228,229,230,278,288,341,342,343,344],[57,243,266,270,354,366,372,664]).
'$aleph_sat_vars'(45,45,[231,232,233,234,235,236,237,279,289,345,346,347,348,349,350,351,352],[55,241,245,251,255,259,261,362,367,370,658,659,660,662,663]).
'$aleph_sat_vars'(63,63,[311,319,322,330,372,373,374,375,397,520],[89,337,341,654]).
'$aleph_sat_vars'(61,61,[312,320,323,331,379,380,399,522],[87,651]).
'$aleph_sat_vars'(70,70,[307,315,326,355,356,357,390,513],[102,103,647]).
'$aleph_sat_vars'(133,133,[606,615,647],[357]).
'$aleph_sat_vars'(66,66,[310,318,321,329,363,364,365,366,367,394,517],[93,101,342,350,646]).
'$aleph_sat_vars'(134,134,[605,614,646],[364]).
'$aleph_sat_vars'(2,2,[2,3,4,5,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,108,110,112,114,116,118,120,122,124,126,128,130,132,172,640],[1,32,47,48,49,178,184,190]).
'$aleph_sat_vars'(34,34,[265,266,267,268,269,270,295,300,303,304,387,528,639],[35,38,227,230,588,589,623,624]).
'$aleph_sat_vars'(31,31,[53,54,55,56,57,58,59,60,61,62,83,85,104,107,109,111,113,115,117,123,125,127,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,173,176,180,181,182,183,184,185,321,434,436,438,440,441,444,446,448,450,452,454,505,507,637],[31,34,36,46,183,189,219,220,221,225,229,233,238,538,539,545]).
'$aleph_sat_vars'(117,117,[],[310,312,628,629,631]).
'$aleph_sat_vars'(9,9,[],[7,307,309,311,627,630]).
'$aleph_sat_vars'(112,112,[626],[301]).
'$aleph_sat_vars'(113,113,[625],[302]).
'$aleph_sat_vars'(114,114,[624],[303]).
'$aleph_sat_vars'(115,115,[623],[304]).
'$aleph_sat_vars'(105,105,[594,612,621],[242]).
'$aleph_sat_vars'(106,106,[593,611,620],[248]).
'$aleph_sat_vars'(107,107,[592,610,619],[260]).
'$aleph_sat_vars'(108,108,[591,609,618],[263]).
'$aleph_sat_vars'(59,59,[],[78,271,279,613]).
'$aleph_sat_vars'(58,58,[],[77,272,277,278,609]).
'$aleph_sat_vars'(103,103,[],[222,600]).
'$aleph_sat_vars'(48,48,[221,222,276,286],[59,600]).
'$aleph_sat_vars'(69,69,[239,308,316,327,358,359,391,439,445,483,484,506,507,514,539,540],[99,185,340,540,598]).
'$aleph_sat_vars'(33,33,[],[34,39,54,64,227,232,241,242,252,266,594,595]).
'$aleph_sat_vars'(40,40,[252,253,254,384,525],[42,208,595]).
'$aleph_sat_vars'(42,42,[247,248,249,250,251,293,298,323,383,524],[44,217,218,237,593]).
'$aleph_sat_vars'(50,50,[],[61,74,220,226,237,251,263,591]).
'$aleph_sat_vars'(98,98,[306,314,325,353,354,389,443,449,453,480,481,482,504,505,512,537,538],[181,339,344,537]).
'$aleph_sat_vars'(30,30,[63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,86,105,121,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,174,177,186,187,188,189,190,401,403,406,409,412,415,418,420,423,425,427,429,432,442],[30,39,43,45,51,180,186,206,207,209,211,212,214,215,223,224,226,529,533]).
'$aleph_sat_vars'(39,39,[255,256,385,526],[40,231]).
'$aleph_sat_vars'(62,62,[376,377,378,398,521],[88,98,100]).
'$aleph_sat_vars'(64,64,[371,396,519],[91]).
'$aleph_sat_vars'(65,65,[368,369,370,395,518],[92,94,351]).
'$aleph_sat_vars'(67,67,[361,362,393,516],[95,349]).
'$aleph_sat_vars'(68,68,[309,317,328,360,392,515],[96]).
'$aleph_sat_vars'(81,81,[433,434],[155,501]).
'$aleph_sat_vars'(80,80,[435,436],[154,500]).
'$aleph_sat_vars'(79,79,[437,438],[153,499]).
'$aleph_sat_vars'(74,74,[447,448],[141,497]).
'$aleph_sat_vars'(72,72,[451,452],[139,496]).
'$aleph_sat_vars'(78,78,[439,440],[152,484]).
'$aleph_sat_vars'(75,75,[445,446],[142,483]).
'$aleph_sat_vars'(76,76,[443,444],[144,482]).
'$aleph_sat_vars'(73,73,[449,450],[140,481]).
'$aleph_sat_vars'(71,71,[453,454],[136,480]).
'$aleph_sat_vars'(92,92,[404,405,406],[166,467,478]).
'$aleph_sat_vars'(91,91,[407,408,409],[165,466,477]).
'$aleph_sat_vars'(90,90,[410,411,412],[164,464,475]).
'$aleph_sat_vars'(89,89,[413,414,415],[163,462,473]).
'$aleph_sat_vars'(88,88,[416,417,418],[162,461,472]).
'$aleph_sat_vars'(86,86,[421,422,423],[160,459,471]).
'$aleph_sat_vars'(82,82,[430,431,432],[156,455,470]).
'$aleph_sat_vars'(94,94,[400,401],[169,469]).
'$aleph_sat_vars'(93,93,[402,403],[167,468]).
'$aleph_sat_vars'(87,87,[419,420],[161,460]).
'$aleph_sat_vars'(85,85,[424,425],[159,458]).
'$aleph_sat_vars'(84,84,[426,427],[158,457]).
'$aleph_sat_vars'(83,83,[428,429],[157,456]).
'$aleph_sat_vars'(77,77,[441,442],[150,170]).
'$aleph_sat_vars'(13,13,[34,35,36,37,77,80,87,88,89,90],[11,54,56,262,268,375,376,379]).
'$aleph_sat_vars'(11,11,[38,39,40,41,42,43,44,45,46,78,81,91,92,93,94,95,96,97,98,99,100],[10,60,64,70,72,249,254,256,258,265,359,360,361,365,368,369,371,377,378]).
'$aleph_sat_vars'(3,3,[49,50,51,52,79,82,101,102,103],[2,71,244,246,355,356,363]).
'$aleph_sat_vars'(47,47,[223,224,225,226,277,287,339,340],[58,65,68,74,353,358]).
'$aleph_sat_vars'(8,8,[],[5,83,84,292,293,294,295]).
'$aleph_sat_vars'(111,111,[],[291]).
'$aleph_sat_vars'(44,44,[238,280,290],[53]).
'$aleph_sat_vars'(49,49,[220,275,285],[61]).
'$aleph_sat_vars'(52,52,[215,216,217,218,274,284],[63,247,250,257]).
'$aleph_sat_vars'(53,53,[213,214,273,283],[66,240]).
'$aleph_sat_vars'(55,55,[211,212,272,282],[67,73]).
'$aleph_sat_vars'(38,38,[],[38,53,63,213,215,231,238,240,255,265]).
'$aleph_sat_vars'(4,4,[],[2,40,49,55,65,223,233,256]).
'$aleph_sat_vars'(51,51,[219],[62]).
'$aleph_sat_vars'(57,57,[206,207],[75,76]).
'$aleph_sat_vars'(32,32,[106,119,133,171,172,175,178,179],[33,179]).
'$aleph_sat_vars'(20,20,[121,122],[19,168]).
'$aleph_sat_vars'(27,27,[107,108],[26,151]).
'$aleph_sat_vars'(26,26,[109,110],[25,149]).
'$aleph_sat_vars'(25,25,[111,112],[24,148]).
'$aleph_sat_vars'(24,24,[113,114],[23,147]).
'$aleph_sat_vars'(23,23,[115,116],[22,146]).
'$aleph_sat_vars'(22,22,[117,118],[21,145]).
'$aleph_sat_vars'(19,19,[123,124],[18,143]).
'$aleph_sat_vars'(18,18,[125,126],[17,138]).
'$aleph_sat_vars'(17,17,[127,128],[16,137]).
'$aleph_sat_vars'(16,16,[129,130],[15,135]).
'$aleph_sat_vars'(15,15,[131,132],[14,134]).
'$aleph_sat_vars'(21,21,[119,120],[20,133]).
'$aleph_sat_vars'(1,1,[7,8,9,10,11,13,29],[1,90,97]).
'$aleph_sat_vars'(5,5,[47,48],[3,4]).

:- dynamic '$aleph_sat_terms'/4.

'$aleph_sat_terms'(159,4,11,number).
'$aleph_sat_terms'(158,4,person315_1,person).
'$aleph_sat_terms'(157,4,person294_1,person).
'$aleph_sat_terms'(156,4,course36_4,course).
'$aleph_sat_terms'(155,4,course117_4,course).
'$aleph_sat_terms'(154,4,person141_1,person).
'$aleph_sat_terms'(153,4,person231_1,person).
'$aleph_sat_terms'(152,3,person77_1,person).
'$aleph_sat_terms'(151,3,person138_1,person).
'$aleph_sat_terms'(150,3,10,number).
'$aleph_sat_terms'(149,3,title210_3,ref).
'$aleph_sat_terms'(148,3,title62_3,ref).
'$aleph_sat_terms'(147,3,title298_3,ref).
'$aleph_sat_terms'(146,3,title311_3,ref).
'$aleph_sat_terms'(145,3,title235_3,ref).
'$aleph_sat_terms'(144,3,title216_3,ref).
'$aleph_sat_terms'(143,3,title77_3,ref).
'$aleph_sat_terms'(142,3,title128_3,ref).
'$aleph_sat_terms'(141,3,title309_3,ref).
'$aleph_sat_terms'(140,3,title126_3,ref).
'$aleph_sat_terms'(139,3,title18_3,ref).
'$aleph_sat_terms'(138,3,title317_3,ref).
'$aleph_sat_terms'(137,3,title287_3,ref).
'$aleph_sat_terms'(136,3,title66_3,ref).
'$aleph_sat_terms'(135,3,title279_3,ref).
'$aleph_sat_terms'(134,3,course149_4,course).
'$aleph_sat_terms'(133,3,course98_4,course).
'$aleph_sat_terms'(132,3,person422_1,person).
'$aleph_sat_terms'(131,3,person144_1,person).
'$aleph_sat_terms'(130,3,person58_1,person).
'$aleph_sat_terms'(129,3,person172_1,person).
'$aleph_sat_terms'(128,3,person205_1,person).
'$aleph_sat_terms'(127,3,person350_1,person).
'$aleph_sat_terms'(126,3,person182_1,person).
'$aleph_sat_terms'(125,3,person237_1,person).
'$aleph_sat_terms'(124,3,person401_1,person).
'$aleph_sat_terms'(123,3,person424_1,person).
'$aleph_sat_terms'(122,3,2,number).
'$aleph_sat_terms'(121,3,6,number).
'$aleph_sat_terms'(120,3,4,number).
'$aleph_sat_terms'(119,3,7,number).
'$aleph_sat_terms'(118,3,5,number).
'$aleph_sat_terms'(117,3,pre_quals_9,phase).
'$aleph_sat_terms'(116,3,post_generals_9,phase).
'$aleph_sat_terms'(115,3,project152_5,project).
'$aleph_sat_terms'(114,3,project119_5,project).
'$aleph_sat_terms'(113,3,project94_5,project).
'$aleph_sat_terms'(112,3,project130_5,project).
'$aleph_sat_terms'(111,3,faculty_adjunct_8,faculty).
'$aleph_sat_terms'(110,3,course103_4,course).
'$aleph_sat_terms'(109,3,course84_4,course).
'$aleph_sat_terms'(108,3,course97_4,course).
'$aleph_sat_terms'(107,3,course119_4,course).
'$aleph_sat_terms'(106,3,course121_4,course).
'$aleph_sat_terms'(105,3,course29_4,course).
'$aleph_sat_terms'(104,3,course165_4,course).
'$aleph_sat_terms'(103,3,summer_0203_6,date).
'$aleph_sat_terms'(102,3,person278_1,person).
'$aleph_sat_terms'(101,3,person181_1,person).
'$aleph_sat_terms'(100,2,person29_1,person).
'$aleph_sat_terms'(99,2,person242_1,person).
'$aleph_sat_terms'(98,2,person249_1,person).
'$aleph_sat_terms'(97,2,15,number).
'$aleph_sat_terms'(96,2,22,number).
'$aleph_sat_terms'(95,2,1,number).
'$aleph_sat_terms'(94,2,title184_3,ref).
'$aleph_sat_terms'(93,2,title307_3,ref).
'$aleph_sat_terms'(92,2,title175_3,ref).
'$aleph_sat_terms'(91,2,title321_3,ref).
'$aleph_sat_terms'(90,2,title291_3,ref).
'$aleph_sat_terms'(89,2,title205_3,ref).
'$aleph_sat_terms'(88,2,title215_3,ref).
'$aleph_sat_terms'(87,2,title324_3,ref).
'$aleph_sat_terms'(86,2,title104_3,ref).
'$aleph_sat_terms'(85,2,title155_3,ref).
'$aleph_sat_terms'(84,2,title129_3,ref).
'$aleph_sat_terms'(83,2,title200_3,ref).
'$aleph_sat_terms'(82,2,title330_3,ref).
'$aleph_sat_terms'(81,2,title105_3,ref).
'$aleph_sat_terms'(80,2,title27_3,ref).
'$aleph_sat_terms'(79,2,title21_3,ref).
'$aleph_sat_terms'(78,2,title20_3,ref).
'$aleph_sat_terms'(77,2,title138_3,ref).
'$aleph_sat_terms'(76,2,title276_3,ref).
'$aleph_sat_terms'(75,2,title159_3,ref).
'$aleph_sat_terms'(74,2,title19_3,ref).
'$aleph_sat_terms'(73,2,title73_3,ref).
'$aleph_sat_terms'(72,2,title158_3,ref).
'$aleph_sat_terms'(71,2,title95_3,ref).
'$aleph_sat_terms'(70,2,person303_1,person).
'$aleph_sat_terms'(69,2,person75_1,person).
'$aleph_sat_terms'(68,2,person6_1,person).
'$aleph_sat_terms'(67,2,person125_1,person).
'$aleph_sat_terms'(66,2,person390_1,person).
'$aleph_sat_terms'(65,2,person310_1,person).
'$aleph_sat_terms'(64,2,person23_1,person).
'$aleph_sat_terms'(63,2,person191_1,person).
'$aleph_sat_terms'(62,2,person356_1,person).
'$aleph_sat_terms'(61,2,person416_1,person).
'$aleph_sat_terms'(60,2,level_500_7,level).
'$aleph_sat_terms'(59,2,level_300_7,level).
'$aleph_sat_terms'(58,2,level_400_7,level).
'$aleph_sat_terms'(57,2,course137,course).
'$aleph_sat_terms'(56,2,course104_4,course).
'$aleph_sat_terms'(55,2,course126_4,course).
'$aleph_sat_terms'(54,2,autumn_0102_6,date).
'$aleph_sat_terms'(53,2,course66_4,course).
'$aleph_sat_terms'(52,2,course77_4,course).
'$aleph_sat_terms'(51,2,course149,course).
'$aleph_sat_terms'(50,2,spring_0304_6,date).
'$aleph_sat_terms'(49,2,course91_4,course).
'$aleph_sat_terms'(48,2,course144_4,course).
'$aleph_sat_terms'(47,2,course27_4,course).
'$aleph_sat_terms'(46,2,course161_4,course).
'$aleph_sat_terms'(45,2,course11_4,course).
'$aleph_sat_terms'(44,2,course160_4,course).
'$aleph_sat_terms'(43,2,person298_1,person).
'$aleph_sat_terms'(42,2,person52_1,person).
'$aleph_sat_terms'(41,2,winter_0203_6,date).
'$aleph_sat_terms'(40,2,person364_1,person).
'$aleph_sat_terms'(39,2,person57_1,person).
'$aleph_sat_terms'(38,2,autumn_0001_6,date).
'$aleph_sat_terms'(37,2,winter_0304_6,date).
'$aleph_sat_terms'(36,2,person324_1,person).
'$aleph_sat_terms'(35,2,autumn_0203_6,date).
'$aleph_sat_terms'(34,2,person201_1,person).
'$aleph_sat_terms'(33,2,winter_0001_6,date).
'$aleph_sat_terms'(32,1,person397_1,person).
'$aleph_sat_terms'(31,1,person331_1,person).
'$aleph_sat_terms'(30,1,person165_1,person).
'$aleph_sat_terms'(29,1,0,number).
'$aleph_sat_terms'(28,1,13,number).
'$aleph_sat_terms'(27,1,title127_3,ref).
'$aleph_sat_terms'(26,1,title243_3,ref).
'$aleph_sat_terms'(25,1,title136_3,ref).
'$aleph_sat_terms'(24,1,title308_3,ref).
'$aleph_sat_terms'(23,1,title327_3,ref).
'$aleph_sat_terms'(22,1,title328_3,ref).
'$aleph_sat_terms'(21,1,title326_3,ref).
'$aleph_sat_terms'(20,1,title193_3,ref).
'$aleph_sat_terms'(19,1,title334_3,ref).
'$aleph_sat_terms'(18,1,title154_3,ref).
'$aleph_sat_terms'(17,1,title152_3,ref).
'$aleph_sat_terms'(16,1,title202_3,ref).
'$aleph_sat_terms'(15,1,title164_3,ref).
'$aleph_sat_terms'(14,1,winter_0102_6,date).
'$aleph_sat_terms'(13,1,course68_4,course).
'$aleph_sat_terms'(12,1,spring_0102_6,date).
'$aleph_sat_terms'(11,1,course147_4,course).
'$aleph_sat_terms'(10,1,3,number).
'$aleph_sat_terms'(9,1,post_quals_9,phase).
'$aleph_sat_terms'(8,1,faculty_8,faculty).
'$aleph_sat_terms'(7,1,spring_0203_6,date).
'$aleph_sat_terms'(6,1,autumn_0304_6,date).
'$aleph_sat_terms'(5,1,course122,course).
'$aleph_sat_terms'(4,1,spring_0001_6,date).
'$aleph_sat_terms'(3,1,course40_4,course).
'$aleph_sat_terms'(2,0,person378_1,person).
'$aleph_sat_terms'(1,0,person309_1,person).

:- dynamic '$aleph_sat_varscopy'/3.


:- dynamic '$aleph_sat_varsequiv'/2.


:- dynamic '$aleph_sat_ivars'/2.

'$aleph_sat_ivars'(1,[]).
'$aleph_sat_ivars'(2,[2]).
'$aleph_sat_ivars'(3,[2]).
'$aleph_sat_ivars'(4,[2]).
'$aleph_sat_ivars'(5,[2]).
'$aleph_sat_ivars'(6,[2]).
'$aleph_sat_ivars'(7,[1]).
'$aleph_sat_ivars'(8,[1]).
'$aleph_sat_ivars'(9,[1]).
'$aleph_sat_ivars'(10,[1]).
'$aleph_sat_ivars'(11,[1]).
'$aleph_sat_ivars'(12,[2]).
'$aleph_sat_ivars'(13,[1]).
'$aleph_sat_ivars'(14,[2]).
'$aleph_sat_ivars'(15,[2]).
'$aleph_sat_ivars'(16,[2]).
'$aleph_sat_ivars'(17,[2]).
'$aleph_sat_ivars'(18,[2]).
'$aleph_sat_ivars'(19,[2]).
'$aleph_sat_ivars'(20,[2]).
'$aleph_sat_ivars'(21,[2]).
'$aleph_sat_ivars'(22,[2]).
'$aleph_sat_ivars'(23,[2]).
'$aleph_sat_ivars'(24,[2]).
'$aleph_sat_ivars'(25,[2]).
'$aleph_sat_ivars'(26,[2]).
'$aleph_sat_ivars'(27,[2]).
'$aleph_sat_ivars'(28,[2]).
'$aleph_sat_ivars'(29,[1]).
'$aleph_sat_ivars'(30,[2]).
'$aleph_sat_ivars'(31,[2]).
'$aleph_sat_ivars'(32,[2]).
'$aleph_sat_ivars'(33,[2]).
'$aleph_sat_ivars'(34,[13]).
'$aleph_sat_ivars'(35,[13]).
'$aleph_sat_ivars'(36,[13]).
'$aleph_sat_ivars'(37,[13]).
'$aleph_sat_ivars'(38,[11]).
'$aleph_sat_ivars'(39,[11]).
'$aleph_sat_ivars'(40,[11]).
'$aleph_sat_ivars'(41,[11]).
'$aleph_sat_ivars'(42,[11]).
'$aleph_sat_ivars'(43,[11]).
'$aleph_sat_ivars'(44,[11]).
'$aleph_sat_ivars'(45,[11]).
'$aleph_sat_ivars'(46,[11]).
'$aleph_sat_ivars'(47,[5]).
'$aleph_sat_ivars'(48,[5]).
'$aleph_sat_ivars'(49,[3]).
'$aleph_sat_ivars'(50,[3]).
'$aleph_sat_ivars'(51,[3]).
'$aleph_sat_ivars'(52,[3]).
'$aleph_sat_ivars'(53,[31]).
'$aleph_sat_ivars'(54,[31]).
'$aleph_sat_ivars'(55,[31]).
'$aleph_sat_ivars'(56,[31]).
'$aleph_sat_ivars'(57,[31]).
'$aleph_sat_ivars'(58,[31]).
'$aleph_sat_ivars'(59,[31]).
'$aleph_sat_ivars'(60,[31]).
'$aleph_sat_ivars'(61,[31]).
'$aleph_sat_ivars'(62,[31]).
'$aleph_sat_ivars'(63,[30]).
'$aleph_sat_ivars'(64,[30]).
'$aleph_sat_ivars'(65,[30]).
'$aleph_sat_ivars'(66,[30]).
'$aleph_sat_ivars'(67,[30]).
'$aleph_sat_ivars'(68,[30]).
'$aleph_sat_ivars'(69,[30]).
'$aleph_sat_ivars'(70,[30]).
'$aleph_sat_ivars'(71,[30]).
'$aleph_sat_ivars'(72,[30]).
'$aleph_sat_ivars'(73,[30]).
'$aleph_sat_ivars'(74,[30]).
'$aleph_sat_ivars'(75,[30]).
'$aleph_sat_ivars'(76,[30]).
'$aleph_sat_ivars'(77,[13]).
'$aleph_sat_ivars'(78,[11]).
'$aleph_sat_ivars'(79,[3]).
'$aleph_sat_ivars'(80,[13]).
'$aleph_sat_ivars'(81,[11]).
'$aleph_sat_ivars'(82,[3]).
'$aleph_sat_ivars'(83,[31]).
'$aleph_sat_ivars'(84,[30]).
'$aleph_sat_ivars'(85,[31]).
'$aleph_sat_ivars'(86,[30]).
'$aleph_sat_ivars'(87,[13]).
'$aleph_sat_ivars'(88,[13]).
'$aleph_sat_ivars'(89,[13]).
'$aleph_sat_ivars'(90,[13]).
'$aleph_sat_ivars'(91,[11]).
'$aleph_sat_ivars'(92,[11]).
'$aleph_sat_ivars'(93,[11]).
'$aleph_sat_ivars'(94,[11]).
'$aleph_sat_ivars'(95,[11]).
'$aleph_sat_ivars'(96,[11]).
'$aleph_sat_ivars'(97,[11]).
'$aleph_sat_ivars'(98,[11]).
'$aleph_sat_ivars'(99,[11]).
'$aleph_sat_ivars'(100,[11]).
'$aleph_sat_ivars'(101,[3]).
'$aleph_sat_ivars'(102,[3]).
'$aleph_sat_ivars'(103,[3]).
'$aleph_sat_ivars'(104,[31]).
'$aleph_sat_ivars'(105,[30]).
'$aleph_sat_ivars'(106,[32]).
'$aleph_sat_ivars'(107,[27,31]).
'$aleph_sat_ivars'(108,[27,2]).
'$aleph_sat_ivars'(109,[26,31]).
'$aleph_sat_ivars'(110,[26,2]).
'$aleph_sat_ivars'(111,[25,31]).
'$aleph_sat_ivars'(112,[25,2]).
'$aleph_sat_ivars'(113,[24,31]).
'$aleph_sat_ivars'(114,[24,2]).
'$aleph_sat_ivars'(115,[23,31]).
'$aleph_sat_ivars'(116,[23,2]).
'$aleph_sat_ivars'(117,[22,31]).
'$aleph_sat_ivars'(118,[22,2]).
'$aleph_sat_ivars'(119,[21,32]).
'$aleph_sat_ivars'(120,[21,2]).
'$aleph_sat_ivars'(121,[20,30]).
'$aleph_sat_ivars'(122,[20,2]).
'$aleph_sat_ivars'(123,[19,31]).
'$aleph_sat_ivars'(124,[19,2]).
'$aleph_sat_ivars'(125,[18,31]).
'$aleph_sat_ivars'(126,[18,2]).
'$aleph_sat_ivars'(127,[17,31]).
'$aleph_sat_ivars'(128,[17,2]).
'$aleph_sat_ivars'(129,[16,31]).
'$aleph_sat_ivars'(130,[16,2]).
'$aleph_sat_ivars'(131,[15,31]).
'$aleph_sat_ivars'(132,[15,2]).
'$aleph_sat_ivars'(133,[32]).
'$aleph_sat_ivars'(134,[31]).
'$aleph_sat_ivars'(135,[31]).
'$aleph_sat_ivars'(136,[31]).
'$aleph_sat_ivars'(137,[31]).
'$aleph_sat_ivars'(138,[31]).
'$aleph_sat_ivars'(139,[31]).
'$aleph_sat_ivars'(140,[31]).
'$aleph_sat_ivars'(141,[31]).
'$aleph_sat_ivars'(142,[31]).
'$aleph_sat_ivars'(143,[31]).
'$aleph_sat_ivars'(144,[31]).
'$aleph_sat_ivars'(145,[31]).
'$aleph_sat_ivars'(146,[31]).
'$aleph_sat_ivars'(147,[31]).
'$aleph_sat_ivars'(148,[31]).
'$aleph_sat_ivars'(149,[31]).
'$aleph_sat_ivars'(150,[31]).
'$aleph_sat_ivars'(151,[31]).
'$aleph_sat_ivars'(152,[31]).
'$aleph_sat_ivars'(153,[31]).
'$aleph_sat_ivars'(154,[31]).
'$aleph_sat_ivars'(155,[31]).
'$aleph_sat_ivars'(156,[30]).
'$aleph_sat_ivars'(157,[30]).
'$aleph_sat_ivars'(158,[30]).
'$aleph_sat_ivars'(159,[30]).
'$aleph_sat_ivars'(160,[30]).
'$aleph_sat_ivars'(161,[30]).
'$aleph_sat_ivars'(162,[30]).
'$aleph_sat_ivars'(163,[30]).
'$aleph_sat_ivars'(164,[30]).
'$aleph_sat_ivars'(165,[30]).
'$aleph_sat_ivars'(166,[30]).
'$aleph_sat_ivars'(167,[30]).
'$aleph_sat_ivars'(168,[30]).
'$aleph_sat_ivars'(169,[30]).
'$aleph_sat_ivars'(170,[30]).
'$aleph_sat_ivars'(171,[32]).
'$aleph_sat_ivars'(172,[32,2]).
'$aleph_sat_ivars'(173,[31]).
'$aleph_sat_ivars'(174,[30]).
'$aleph_sat_ivars'(175,[32]).
'$aleph_sat_ivars'(176,[31]).
'$aleph_sat_ivars'(177,[30]).
'$aleph_sat_ivars'(178,[32]).
'$aleph_sat_ivars'(179,[32]).
'$aleph_sat_ivars'(180,[31]).
'$aleph_sat_ivars'(181,[31]).
'$aleph_sat_ivars'(182,[31]).
'$aleph_sat_ivars'(183,[31]).
'$aleph_sat_ivars'(184,[31]).
'$aleph_sat_ivars'(185,[31]).
'$aleph_sat_ivars'(186,[30]).
'$aleph_sat_ivars'(187,[30]).
'$aleph_sat_ivars'(188,[30]).
'$aleph_sat_ivars'(189,[30]).
'$aleph_sat_ivars'(190,[30]).
'$aleph_sat_ivars'(191,[29]).
'$aleph_sat_ivars'(192,[28]).
'$aleph_sat_ivars'(193,[10]).
'$aleph_sat_ivars'(194,[29]).
'$aleph_sat_ivars'(195,[28,29]).
'$aleph_sat_ivars'(196,[28]).
'$aleph_sat_ivars'(197,[28,10]).
'$aleph_sat_ivars'(198,[10,29]).
'$aleph_sat_ivars'(199,[10]).
'$aleph_sat_ivars'(200,[29,28]).
'$aleph_sat_ivars'(201,[29,10]).
'$aleph_sat_ivars'(202,[28,29]).
'$aleph_sat_ivars'(203,[28,10]).
'$aleph_sat_ivars'(204,[10,29]).
'$aleph_sat_ivars'(205,[10,28]).
'$aleph_sat_ivars'(206,[57]).
'$aleph_sat_ivars'(207,[57]).
'$aleph_sat_ivars'(208,[56]).
'$aleph_sat_ivars'(209,[56]).
'$aleph_sat_ivars'(210,[56]).
'$aleph_sat_ivars'(211,[55]).
'$aleph_sat_ivars'(212,[55]).
'$aleph_sat_ivars'(213,[53]).
'$aleph_sat_ivars'(214,[53]).
'$aleph_sat_ivars'(215,[52]).
'$aleph_sat_ivars'(216,[52]).
'$aleph_sat_ivars'(217,[52]).
'$aleph_sat_ivars'(218,[52]).
'$aleph_sat_ivars'(219,[51]).
'$aleph_sat_ivars'(220,[49]).
'$aleph_sat_ivars'(221,[48]).
'$aleph_sat_ivars'(222,[48]).
'$aleph_sat_ivars'(223,[47]).
'$aleph_sat_ivars'(224,[47]).
'$aleph_sat_ivars'(225,[47]).
'$aleph_sat_ivars'(226,[47]).
'$aleph_sat_ivars'(227,[46]).
'$aleph_sat_ivars'(228,[46]).
'$aleph_sat_ivars'(229,[46]).
'$aleph_sat_ivars'(230,[46]).
'$aleph_sat_ivars'(231,[45]).
'$aleph_sat_ivars'(232,[45]).
'$aleph_sat_ivars'(233,[45]).
'$aleph_sat_ivars'(234,[45]).
'$aleph_sat_ivars'(235,[45]).
'$aleph_sat_ivars'(236,[45]).
'$aleph_sat_ivars'(237,[45]).
'$aleph_sat_ivars'(238,[44]).
'$aleph_sat_ivars'(239,[69]).
'$aleph_sat_ivars'(240,[43]).
'$aleph_sat_ivars'(241,[43]).
'$aleph_sat_ivars'(242,[43]).
'$aleph_sat_ivars'(243,[43]).
'$aleph_sat_ivars'(244,[43]).
'$aleph_sat_ivars'(245,[43]).
'$aleph_sat_ivars'(246,[43]).
'$aleph_sat_ivars'(247,[42]).
'$aleph_sat_ivars'(248,[42]).
'$aleph_sat_ivars'(249,[42]).
'$aleph_sat_ivars'(250,[42]).
'$aleph_sat_ivars'(251,[42]).
'$aleph_sat_ivars'(252,[40]).
'$aleph_sat_ivars'(253,[40]).
'$aleph_sat_ivars'(254,[40]).
'$aleph_sat_ivars'(255,[39]).
'$aleph_sat_ivars'(256,[39]).
'$aleph_sat_ivars'(257,[36]).
'$aleph_sat_ivars'(258,[36]).
'$aleph_sat_ivars'(259,[36]).
'$aleph_sat_ivars'(260,[36]).
'$aleph_sat_ivars'(261,[36]).
'$aleph_sat_ivars'(262,[36]).
'$aleph_sat_ivars'(263,[36]).
'$aleph_sat_ivars'(264,[36]).
'$aleph_sat_ivars'(265,[34]).
'$aleph_sat_ivars'(266,[34]).
'$aleph_sat_ivars'(267,[34]).
'$aleph_sat_ivars'(268,[34]).
'$aleph_sat_ivars'(269,[34]).
'$aleph_sat_ivars'(270,[34]).
'$aleph_sat_ivars'(271,[56]).
'$aleph_sat_ivars'(272,[55]).
'$aleph_sat_ivars'(273,[53]).
'$aleph_sat_ivars'(274,[52]).
'$aleph_sat_ivars'(275,[49]).
'$aleph_sat_ivars'(276,[48]).
'$aleph_sat_ivars'(277,[47]).
'$aleph_sat_ivars'(278,[46]).
'$aleph_sat_ivars'(279,[45]).
'$aleph_sat_ivars'(280,[44]).
'$aleph_sat_ivars'(281,[56]).
'$aleph_sat_ivars'(282,[55]).
'$aleph_sat_ivars'(283,[53]).
'$aleph_sat_ivars'(284,[52]).
'$aleph_sat_ivars'(285,[49]).
'$aleph_sat_ivars'(286,[48]).
'$aleph_sat_ivars'(287,[47]).
'$aleph_sat_ivars'(288,[46]).
'$aleph_sat_ivars'(289,[45]).
'$aleph_sat_ivars'(290,[44]).
'$aleph_sat_ivars'(291,[100]).
'$aleph_sat_ivars'(292,[43]).
'$aleph_sat_ivars'(293,[42]).
'$aleph_sat_ivars'(294,[36]).
'$aleph_sat_ivars'(295,[34]).
'$aleph_sat_ivars'(296,[100]).
'$aleph_sat_ivars'(297,[43]).
'$aleph_sat_ivars'(298,[42]).
'$aleph_sat_ivars'(299,[36]).
'$aleph_sat_ivars'(300,[34]).
'$aleph_sat_ivars'(301,[36]).
'$aleph_sat_ivars'(302,[36]).
'$aleph_sat_ivars'(303,[34]).
'$aleph_sat_ivars'(304,[34]).
'$aleph_sat_ivars'(305,[99]).
'$aleph_sat_ivars'(306,[98]).
'$aleph_sat_ivars'(307,[70]).
'$aleph_sat_ivars'(308,[69]).
'$aleph_sat_ivars'(309,[68]).
'$aleph_sat_ivars'(310,[66]).
'$aleph_sat_ivars'(311,[63]).
'$aleph_sat_ivars'(312,[61]).
'$aleph_sat_ivars'(313,[99]).
'$aleph_sat_ivars'(314,[98]).
'$aleph_sat_ivars'(315,[70]).
'$aleph_sat_ivars'(316,[69]).
'$aleph_sat_ivars'(317,[68]).
'$aleph_sat_ivars'(318,[66]).
'$aleph_sat_ivars'(319,[63]).
'$aleph_sat_ivars'(320,[61]).
'$aleph_sat_ivars'(321,[66,31]).
'$aleph_sat_ivars'(322,[63,43]).
'$aleph_sat_ivars'(323,[61,42]).
'$aleph_sat_ivars'(324,[99]).
'$aleph_sat_ivars'(325,[98]).
'$aleph_sat_ivars'(326,[70]).
'$aleph_sat_ivars'(327,[69]).
'$aleph_sat_ivars'(328,[68]).
'$aleph_sat_ivars'(329,[66]).
'$aleph_sat_ivars'(330,[63]).
'$aleph_sat_ivars'(331,[61]).
'$aleph_sat_ivars'(332,[56]).
'$aleph_sat_ivars'(333,[56]).
'$aleph_sat_ivars'(334,[56]).
'$aleph_sat_ivars'(335,[56]).
'$aleph_sat_ivars'(336,[56]).
'$aleph_sat_ivars'(337,[56]).
'$aleph_sat_ivars'(338,[56]).
'$aleph_sat_ivars'(339,[47]).
'$aleph_sat_ivars'(340,[47]).
'$aleph_sat_ivars'(341,[46]).
'$aleph_sat_ivars'(342,[46]).
'$aleph_sat_ivars'(343,[46]).
'$aleph_sat_ivars'(344,[46]).
'$aleph_sat_ivars'(345,[45]).
'$aleph_sat_ivars'(346,[45]).
'$aleph_sat_ivars'(347,[45]).
'$aleph_sat_ivars'(348,[45]).
'$aleph_sat_ivars'(349,[45]).
'$aleph_sat_ivars'(350,[45]).
'$aleph_sat_ivars'(351,[45]).
'$aleph_sat_ivars'(352,[45]).
'$aleph_sat_ivars'(353,[98]).
'$aleph_sat_ivars'(354,[98]).
'$aleph_sat_ivars'(355,[70]).
'$aleph_sat_ivars'(356,[70]).
'$aleph_sat_ivars'(357,[70]).
'$aleph_sat_ivars'(358,[69]).
'$aleph_sat_ivars'(359,[69]).
'$aleph_sat_ivars'(360,[68]).
'$aleph_sat_ivars'(361,[67]).
'$aleph_sat_ivars'(362,[67]).
'$aleph_sat_ivars'(363,[66]).
'$aleph_sat_ivars'(364,[66]).
'$aleph_sat_ivars'(365,[66]).
'$aleph_sat_ivars'(366,[66]).
'$aleph_sat_ivars'(367,[66]).
'$aleph_sat_ivars'(368,[65]).
'$aleph_sat_ivars'(369,[65]).
'$aleph_sat_ivars'(370,[65]).
'$aleph_sat_ivars'(371,[64]).
'$aleph_sat_ivars'(372,[63]).
'$aleph_sat_ivars'(373,[63]).
'$aleph_sat_ivars'(374,[63]).
'$aleph_sat_ivars'(375,[63]).
'$aleph_sat_ivars'(376,[62]).
'$aleph_sat_ivars'(377,[62]).
'$aleph_sat_ivars'(378,[62]).
'$aleph_sat_ivars'(379,[61]).
'$aleph_sat_ivars'(380,[61]).
'$aleph_sat_ivars'(381,[100]).
'$aleph_sat_ivars'(382,[43]).
'$aleph_sat_ivars'(383,[42]).
'$aleph_sat_ivars'(384,[40]).
'$aleph_sat_ivars'(385,[39]).
'$aleph_sat_ivars'(386,[36]).
'$aleph_sat_ivars'(387,[34]).
'$aleph_sat_ivars'(388,[99]).
'$aleph_sat_ivars'(389,[98]).
'$aleph_sat_ivars'(390,[70]).
'$aleph_sat_ivars'(391,[69]).
'$aleph_sat_ivars'(392,[68]).
'$aleph_sat_ivars'(393,[67]).
'$aleph_sat_ivars'(394,[66]).
'$aleph_sat_ivars'(395,[65]).
'$aleph_sat_ivars'(396,[64]).
'$aleph_sat_ivars'(397,[63]).
'$aleph_sat_ivars'(398,[62]).
'$aleph_sat_ivars'(399,[61]).
'$aleph_sat_ivars'(400,[94,100]).
'$aleph_sat_ivars'(401,[94,30]).
'$aleph_sat_ivars'(402,[93,100]).
'$aleph_sat_ivars'(403,[93,30]).
'$aleph_sat_ivars'(404,[92,100]).
'$aleph_sat_ivars'(405,[92,99]).
'$aleph_sat_ivars'(406,[92,30]).
'$aleph_sat_ivars'(407,[91,100]).
'$aleph_sat_ivars'(408,[91,99]).
'$aleph_sat_ivars'(409,[91,30]).
'$aleph_sat_ivars'(410,[90,100]).
'$aleph_sat_ivars'(411,[90,99]).
'$aleph_sat_ivars'(412,[90,30]).
'$aleph_sat_ivars'(413,[89,100]).
'$aleph_sat_ivars'(414,[89,99]).
'$aleph_sat_ivars'(415,[89,30]).
'$aleph_sat_ivars'(416,[88,100]).
'$aleph_sat_ivars'(417,[88,99]).
'$aleph_sat_ivars'(418,[88,30]).
'$aleph_sat_ivars'(419,[87,100]).
'$aleph_sat_ivars'(420,[87,30]).
'$aleph_sat_ivars'(421,[86,100]).
'$aleph_sat_ivars'(422,[86,99]).
'$aleph_sat_ivars'(423,[86,30]).
'$aleph_sat_ivars'(424,[85,100]).
'$aleph_sat_ivars'(425,[85,30]).
'$aleph_sat_ivars'(426,[84,100]).
'$aleph_sat_ivars'(427,[84,30]).
'$aleph_sat_ivars'(428,[83,100]).
'$aleph_sat_ivars'(429,[83,30]).
'$aleph_sat_ivars'(430,[82,100]).
'$aleph_sat_ivars'(431,[82,99]).
'$aleph_sat_ivars'(432,[82,30]).
'$aleph_sat_ivars'(433,[81,36]).
'$aleph_sat_ivars'(434,[81,31]).
'$aleph_sat_ivars'(435,[80,36]).
'$aleph_sat_ivars'(436,[80,31]).
'$aleph_sat_ivars'(437,[79,36]).
'$aleph_sat_ivars'(438,[79,31]).
'$aleph_sat_ivars'(439,[78,69]).
'$aleph_sat_ivars'(440,[78,31]).
'$aleph_sat_ivars'(441,[77,31]).
'$aleph_sat_ivars'(442,[77,30]).
'$aleph_sat_ivars'(443,[76,98]).
'$aleph_sat_ivars'(444,[76,31]).
'$aleph_sat_ivars'(445,[75,69]).
'$aleph_sat_ivars'(446,[75,31]).
'$aleph_sat_ivars'(447,[74,36]).
'$aleph_sat_ivars'(448,[74,31]).
'$aleph_sat_ivars'(449,[73,98]).
'$aleph_sat_ivars'(450,[73,31]).
'$aleph_sat_ivars'(451,[72,36]).
'$aleph_sat_ivars'(452,[72,31]).
'$aleph_sat_ivars'(453,[71,98]).
'$aleph_sat_ivars'(454,[71,31]).
'$aleph_sat_ivars'(455,[100]).
'$aleph_sat_ivars'(456,[100]).
'$aleph_sat_ivars'(457,[100]).
'$aleph_sat_ivars'(458,[100]).
'$aleph_sat_ivars'(459,[100]).
'$aleph_sat_ivars'(460,[100]).
'$aleph_sat_ivars'(461,[100]).
'$aleph_sat_ivars'(462,[100]).
'$aleph_sat_ivars'(463,[100]).
'$aleph_sat_ivars'(464,[100]).
'$aleph_sat_ivars'(465,[100]).
'$aleph_sat_ivars'(466,[100]).
'$aleph_sat_ivars'(467,[100]).
'$aleph_sat_ivars'(468,[100]).
'$aleph_sat_ivars'(469,[100]).
'$aleph_sat_ivars'(470,[99]).
'$aleph_sat_ivars'(471,[99]).
'$aleph_sat_ivars'(472,[99]).
'$aleph_sat_ivars'(473,[99]).
'$aleph_sat_ivars'(474,[99]).
'$aleph_sat_ivars'(475,[99]).
'$aleph_sat_ivars'(476,[99]).
'$aleph_sat_ivars'(477,[99]).
'$aleph_sat_ivars'(478,[99]).
'$aleph_sat_ivars'(479,[99]).
'$aleph_sat_ivars'(480,[98]).
'$aleph_sat_ivars'(481,[98]).
'$aleph_sat_ivars'(482,[98]).
'$aleph_sat_ivars'(483,[69]).
'$aleph_sat_ivars'(484,[69]).
'$aleph_sat_ivars'(485,[43]).
'$aleph_sat_ivars'(486,[43]).
'$aleph_sat_ivars'(487,[43]).
'$aleph_sat_ivars'(488,[43]).
'$aleph_sat_ivars'(489,[43]).
'$aleph_sat_ivars'(490,[43]).
'$aleph_sat_ivars'(491,[43]).
'$aleph_sat_ivars'(492,[43]).
'$aleph_sat_ivars'(493,[43]).
'$aleph_sat_ivars'(494,[43]).
'$aleph_sat_ivars'(495,[36]).
'$aleph_sat_ivars'(496,[36]).
'$aleph_sat_ivars'(497,[36]).
'$aleph_sat_ivars'(498,[36]).
'$aleph_sat_ivars'(499,[36]).
'$aleph_sat_ivars'(500,[36]).
'$aleph_sat_ivars'(501,[36]).
'$aleph_sat_ivars'(502,[100]).
'$aleph_sat_ivars'(503,[99]).
'$aleph_sat_ivars'(504,[98]).
'$aleph_sat_ivars'(505,[98,31]).
'$aleph_sat_ivars'(506,[69]).
'$aleph_sat_ivars'(507,[69,31]).
'$aleph_sat_ivars'(508,[43]).
'$aleph_sat_ivars'(509,[36]).
'$aleph_sat_ivars'(510,[100]).
'$aleph_sat_ivars'(511,[99]).
'$aleph_sat_ivars'(512,[98]).
'$aleph_sat_ivars'(513,[70]).
'$aleph_sat_ivars'(514,[69]).
'$aleph_sat_ivars'(515,[68]).
'$aleph_sat_ivars'(516,[67]).
'$aleph_sat_ivars'(517,[66]).
'$aleph_sat_ivars'(518,[65]).
'$aleph_sat_ivars'(519,[64]).
'$aleph_sat_ivars'(520,[63]).
'$aleph_sat_ivars'(521,[62]).
'$aleph_sat_ivars'(522,[61]).
'$aleph_sat_ivars'(523,[43]).
'$aleph_sat_ivars'(524,[42]).
'$aleph_sat_ivars'(525,[40]).
'$aleph_sat_ivars'(526,[39]).
'$aleph_sat_ivars'(527,[36]).
'$aleph_sat_ivars'(528,[34]).
'$aleph_sat_ivars'(529,[100]).
'$aleph_sat_ivars'(530,[100]).
'$aleph_sat_ivars'(531,[100]).
'$aleph_sat_ivars'(532,[99]).
'$aleph_sat_ivars'(533,[99]).
'$aleph_sat_ivars'(534,[99]).
'$aleph_sat_ivars'(535,[99]).
'$aleph_sat_ivars'(536,[99]).
'$aleph_sat_ivars'(537,[98]).
'$aleph_sat_ivars'(538,[98]).
'$aleph_sat_ivars'(539,[69]).
'$aleph_sat_ivars'(540,[69]).
'$aleph_sat_ivars'(541,[43]).
'$aleph_sat_ivars'(542,[43]).
'$aleph_sat_ivars'(543,[36]).
'$aleph_sat_ivars'(544,[36]).
'$aleph_sat_ivars'(545,[36]).
'$aleph_sat_ivars'(546,[97]).
'$aleph_sat_ivars'(547,[96]).
'$aleph_sat_ivars'(548,[95]).
'$aleph_sat_ivars'(549,[97]).
'$aleph_sat_ivars'(550,[97,95]).
'$aleph_sat_ivars'(551,[97,29]).
'$aleph_sat_ivars'(552,[97,28]).
'$aleph_sat_ivars'(553,[97,10]).
'$aleph_sat_ivars'(554,[96,97]).
'$aleph_sat_ivars'(555,[96]).
'$aleph_sat_ivars'(556,[96,95]).
'$aleph_sat_ivars'(557,[96,29]).
'$aleph_sat_ivars'(558,[96,28]).
'$aleph_sat_ivars'(559,[96,10]).
'$aleph_sat_ivars'(560,[95]).
'$aleph_sat_ivars'(561,[95,29]).
'$aleph_sat_ivars'(562,[28,95]).
'$aleph_sat_ivars'(563,[10,95]).
'$aleph_sat_ivars'(564,[97,96]).
'$aleph_sat_ivars'(565,[97,95]).
'$aleph_sat_ivars'(566,[97,29]).
'$aleph_sat_ivars'(567,[97,28]).
'$aleph_sat_ivars'(568,[97,10]).
'$aleph_sat_ivars'(569,[96,97]).
'$aleph_sat_ivars'(570,[96,95]).
'$aleph_sat_ivars'(571,[96,29]).
'$aleph_sat_ivars'(572,[96,28]).
'$aleph_sat_ivars'(573,[96,10]).
'$aleph_sat_ivars'(574,[95,97]).
'$aleph_sat_ivars'(575,[95,96]).
'$aleph_sat_ivars'(576,[95,29]).
'$aleph_sat_ivars'(577,[95,28]).
'$aleph_sat_ivars'(578,[95,10]).
'$aleph_sat_ivars'(579,[29,97]).
'$aleph_sat_ivars'(580,[28,97]).
'$aleph_sat_ivars'(581,[10,97]).
'$aleph_sat_ivars'(582,[29,96]).
'$aleph_sat_ivars'(583,[28,96]).
'$aleph_sat_ivars'(584,[10,96]).
'$aleph_sat_ivars'(585,[29,95]).
'$aleph_sat_ivars'(586,[28,95]).
'$aleph_sat_ivars'(587,[10,95]).
'$aleph_sat_ivars'(588,[110]).
'$aleph_sat_ivars'(589,[110]).
'$aleph_sat_ivars'(590,[109]).
'$aleph_sat_ivars'(591,[108]).
'$aleph_sat_ivars'(592,[107]).
'$aleph_sat_ivars'(593,[106]).
'$aleph_sat_ivars'(594,[105]).
'$aleph_sat_ivars'(595,[104]).
'$aleph_sat_ivars'(596,[104]).
'$aleph_sat_ivars'(597,[104]).
'$aleph_sat_ivars'(598,[104]).
'$aleph_sat_ivars'(599,[104]).
'$aleph_sat_ivars'(600,[102]).
'$aleph_sat_ivars'(601,[101]).
'$aleph_sat_ivars'(602,[101]).
'$aleph_sat_ivars'(603,[101]).
'$aleph_sat_ivars'(604,[101]).
'$aleph_sat_ivars'(605,[134]).
'$aleph_sat_ivars'(606,[133]).
'$aleph_sat_ivars'(607,[110]).
'$aleph_sat_ivars'(608,[109]).
'$aleph_sat_ivars'(609,[108]).
'$aleph_sat_ivars'(610,[107]).
'$aleph_sat_ivars'(611,[106]).
'$aleph_sat_ivars'(612,[105]).
'$aleph_sat_ivars'(613,[104]).
'$aleph_sat_ivars'(614,[134]).
'$aleph_sat_ivars'(615,[133]).
'$aleph_sat_ivars'(616,[110]).
'$aleph_sat_ivars'(617,[109]).
'$aleph_sat_ivars'(618,[108]).
'$aleph_sat_ivars'(619,[107]).
'$aleph_sat_ivars'(620,[106]).
'$aleph_sat_ivars'(621,[105]).
'$aleph_sat_ivars'(622,[104]).
'$aleph_sat_ivars'(623,[115]).
'$aleph_sat_ivars'(624,[114]).
'$aleph_sat_ivars'(625,[113]).
'$aleph_sat_ivars'(626,[112]).
'$aleph_sat_ivars'(627,[132]).
'$aleph_sat_ivars'(628,[129]).
'$aleph_sat_ivars'(629,[128]).
'$aleph_sat_ivars'(630,[126]).
'$aleph_sat_ivars'(631,[102]).
'$aleph_sat_ivars'(632,[132]).
'$aleph_sat_ivars'(633,[129]).
'$aleph_sat_ivars'(634,[128]).
'$aleph_sat_ivars'(635,[126]).
'$aleph_sat_ivars'(636,[102]).
'$aleph_sat_ivars'(637,[129,31]).
'$aleph_sat_ivars'(638,[128,36]).
'$aleph_sat_ivars'(639,[126,34]).
'$aleph_sat_ivars'(640,[102,2]).
'$aleph_sat_ivars'(641,[132]).
'$aleph_sat_ivars'(642,[129]).
'$aleph_sat_ivars'(643,[128]).
'$aleph_sat_ivars'(644,[126]).
'$aleph_sat_ivars'(645,[102]).
'$aleph_sat_ivars'(646,[134]).
'$aleph_sat_ivars'(647,[133]).
'$aleph_sat_ivars'(648,[110]).
'$aleph_sat_ivars'(649,[109]).
'$aleph_sat_ivars'(650,[104]).
'$aleph_sat_ivars'(651,[104]).
'$aleph_sat_ivars'(652,[104]).
'$aleph_sat_ivars'(653,[104]).
'$aleph_sat_ivars'(654,[104]).
'$aleph_sat_ivars'(655,[104]).
'$aleph_sat_ivars'(656,[104]).
'$aleph_sat_ivars'(657,[132]).
'$aleph_sat_ivars'(658,[132]).
'$aleph_sat_ivars'(659,[131]).
'$aleph_sat_ivars'(660,[130]).
'$aleph_sat_ivars'(661,[130]).
'$aleph_sat_ivars'(662,[129]).
'$aleph_sat_ivars'(663,[128]).
'$aleph_sat_ivars'(664,[127]).
'$aleph_sat_ivars'(665,[126]).
'$aleph_sat_ivars'(666,[126]).
'$aleph_sat_ivars'(667,[125]).
'$aleph_sat_ivars'(668,[125]).
'$aleph_sat_ivars'(669,[124]).
'$aleph_sat_ivars'(670,[123]).
'$aleph_sat_ivars'(671,[102]).
'$aleph_sat_ivars'(672,[102]).
'$aleph_sat_ivars'(673,[101]).
'$aleph_sat_ivars'(674,[152]).
'$aleph_sat_ivars'(675,[151]).
'$aleph_sat_ivars'(676,[132]).
'$aleph_sat_ivars'(677,[131]).
'$aleph_sat_ivars'(678,[130]).
'$aleph_sat_ivars'(679,[129]).
'$aleph_sat_ivars'(680,[128]).
'$aleph_sat_ivars'(681,[127]).
'$aleph_sat_ivars'(682,[126]).
'$aleph_sat_ivars'(683,[125]).
'$aleph_sat_ivars'(684,[124]).
'$aleph_sat_ivars'(685,[123]).
'$aleph_sat_ivars'(686,[102]).
'$aleph_sat_ivars'(687,[149,151]).
'$aleph_sat_ivars'(688,[149,36]).
'$aleph_sat_ivars'(689,[148,151]).
'$aleph_sat_ivars'(690,[148,36]).
'$aleph_sat_ivars'(691,[147,152]).
'$aleph_sat_ivars'(692,[147,43]).
'$aleph_sat_ivars'(693,[146,152]).
'$aleph_sat_ivars'(694,[146,43]).
'$aleph_sat_ivars'(695,[145,152]).
'$aleph_sat_ivars'(696,[145,43]).
'$aleph_sat_ivars'(697,[144,152]).
'$aleph_sat_ivars'(698,[144,43]).
'$aleph_sat_ivars'(699,[143,152]).
'$aleph_sat_ivars'(700,[143,43]).
'$aleph_sat_ivars'(701,[142,152]).
'$aleph_sat_ivars'(702,[142,43]).
'$aleph_sat_ivars'(703,[141,152]).
'$aleph_sat_ivars'(704,[141,43]).
'$aleph_sat_ivars'(705,[140,152]).
'$aleph_sat_ivars'(706,[140,43]).
'$aleph_sat_ivars'(707,[139,152]).
'$aleph_sat_ivars'(708,[139,43]).
'$aleph_sat_ivars'(709,[138,152]).
'$aleph_sat_ivars'(710,[138,43]).
'$aleph_sat_ivars'(711,[137,152]).
'$aleph_sat_ivars'(712,[137,151]).
'$aleph_sat_ivars'(713,[137,99]).
'$aleph_sat_ivars'(714,[136,100]).
'$aleph_sat_ivars'(715,[136,99]).
'$aleph_sat_ivars'(716,[135,100]).
'$aleph_sat_ivars'(717,[135,99]).
'$aleph_sat_ivars'(718,[152]).
'$aleph_sat_ivars'(719,[152]).
'$aleph_sat_ivars'(720,[152]).
'$aleph_sat_ivars'(721,[152]).
'$aleph_sat_ivars'(722,[152]).
'$aleph_sat_ivars'(723,[152]).
'$aleph_sat_ivars'(724,[152]).
'$aleph_sat_ivars'(725,[152]).
'$aleph_sat_ivars'(726,[152]).
'$aleph_sat_ivars'(727,[152]).
'$aleph_sat_ivars'(728,[152]).
'$aleph_sat_ivars'(729,[151]).
'$aleph_sat_ivars'(730,[151]).
'$aleph_sat_ivars'(731,[151]).
'$aleph_sat_ivars'(732,[152]).
'$aleph_sat_ivars'(733,[151]).
'$aleph_sat_ivars'(734,[43,152]).
'$aleph_sat_ivars'(735,[152]).
'$aleph_sat_ivars'(736,[151]).
'$aleph_sat_ivars'(737,[132]).
'$aleph_sat_ivars'(738,[131]).
'$aleph_sat_ivars'(739,[130]).
'$aleph_sat_ivars'(740,[129]).
'$aleph_sat_ivars'(741,[128]).
'$aleph_sat_ivars'(742,[127]).
'$aleph_sat_ivars'(743,[126]).
'$aleph_sat_ivars'(744,[125]).
'$aleph_sat_ivars'(745,[124]).
'$aleph_sat_ivars'(746,[123]).
'$aleph_sat_ivars'(747,[102]).
'$aleph_sat_ivars'(748,[101]).
'$aleph_sat_ivars'(749,[152]).
'$aleph_sat_ivars'(750,[152]).
'$aleph_sat_ivars'(751,[152]).
'$aleph_sat_ivars'(752,[152]).
'$aleph_sat_ivars'(753,[151]).
'$aleph_sat_ivars'(754,[151]).
'$aleph_sat_ivars'(755,[151]).
'$aleph_sat_ivars'(756,[151]).
'$aleph_sat_ivars'(757,[150]).
'$aleph_sat_ivars'(758,[122]).
'$aleph_sat_ivars'(759,[121]).
'$aleph_sat_ivars'(760,[120]).
'$aleph_sat_ivars'(761,[119]).
'$aleph_sat_ivars'(762,[118]).
'$aleph_sat_ivars'(763,[150]).
'$aleph_sat_ivars'(764,[150,122]).
'$aleph_sat_ivars'(765,[150,121]).
'$aleph_sat_ivars'(766,[150,120]).
'$aleph_sat_ivars'(767,[150,119]).
'$aleph_sat_ivars'(768,[150,118]).
'$aleph_sat_ivars'(769,[150,95]).
'$aleph_sat_ivars'(770,[150,29]).
'$aleph_sat_ivars'(771,[150,10]).
'$aleph_sat_ivars'(772,[122]).
'$aleph_sat_ivars'(773,[122,95]).
'$aleph_sat_ivars'(774,[122,29]).
'$aleph_sat_ivars'(775,[121,122]).
'$aleph_sat_ivars'(776,[121]).
'$aleph_sat_ivars'(777,[121,120]).
'$aleph_sat_ivars'(778,[121,118]).
'$aleph_sat_ivars'(779,[121,95]).
'$aleph_sat_ivars'(780,[121,29]).
'$aleph_sat_ivars'(781,[121,10]).
'$aleph_sat_ivars'(782,[120,122]).
'$aleph_sat_ivars'(783,[120]).
'$aleph_sat_ivars'(784,[120,95]).
'$aleph_sat_ivars'(785,[120,29]).
'$aleph_sat_ivars'(786,[120,10]).
'$aleph_sat_ivars'(787,[119,122]).
'$aleph_sat_ivars'(788,[119,121]).
'$aleph_sat_ivars'(789,[119,120]).
'$aleph_sat_ivars'(790,[119]).
'$aleph_sat_ivars'(791,[119,118]).
'$aleph_sat_ivars'(792,[119,95]).
'$aleph_sat_ivars'(793,[119,29]).
'$aleph_sat_ivars'(794,[119,10]).
'$aleph_sat_ivars'(795,[118,122]).
'$aleph_sat_ivars'(796,[118,120]).
'$aleph_sat_ivars'(797,[118]).
'$aleph_sat_ivars'(798,[118,95]).
'$aleph_sat_ivars'(799,[118,29]).
'$aleph_sat_ivars'(800,[118,10]).
'$aleph_sat_ivars'(801,[97,150]).
'$aleph_sat_ivars'(802,[96,150]).
'$aleph_sat_ivars'(803,[28,150]).
'$aleph_sat_ivars'(804,[97,122]).
'$aleph_sat_ivars'(805,[96,122]).
'$aleph_sat_ivars'(806,[28,122]).
'$aleph_sat_ivars'(807,[10,122]).
'$aleph_sat_ivars'(808,[97,121]).
'$aleph_sat_ivars'(809,[96,121]).
'$aleph_sat_ivars'(810,[28,121]).
'$aleph_sat_ivars'(811,[97,120]).
'$aleph_sat_ivars'(812,[96,120]).
'$aleph_sat_ivars'(813,[28,120]).
'$aleph_sat_ivars'(814,[97,119]).
'$aleph_sat_ivars'(815,[96,119]).
'$aleph_sat_ivars'(816,[28,119]).
'$aleph_sat_ivars'(817,[97,118]).
'$aleph_sat_ivars'(818,[96,118]).
'$aleph_sat_ivars'(819,[28,118]).
'$aleph_sat_ivars'(820,[150,122]).
'$aleph_sat_ivars'(821,[150,121]).
'$aleph_sat_ivars'(822,[150,120]).
'$aleph_sat_ivars'(823,[150,119]).
'$aleph_sat_ivars'(824,[150,118]).
'$aleph_sat_ivars'(825,[150,97]).
'$aleph_sat_ivars'(826,[150,96]).
'$aleph_sat_ivars'(827,[150,95]).
'$aleph_sat_ivars'(828,[150,29]).
'$aleph_sat_ivars'(829,[150,28]).
'$aleph_sat_ivars'(830,[150,10]).
'$aleph_sat_ivars'(831,[122,150]).
'$aleph_sat_ivars'(832,[122,121]).
'$aleph_sat_ivars'(833,[122,120]).
'$aleph_sat_ivars'(834,[122,119]).
'$aleph_sat_ivars'(835,[122,118]).
'$aleph_sat_ivars'(836,[122,97]).
'$aleph_sat_ivars'(837,[122,96]).
'$aleph_sat_ivars'(838,[122,95]).
'$aleph_sat_ivars'(839,[122,29]).
'$aleph_sat_ivars'(840,[122,28]).
'$aleph_sat_ivars'(841,[122,10]).
'$aleph_sat_ivars'(842,[121,150]).
'$aleph_sat_ivars'(843,[121,122]).
'$aleph_sat_ivars'(844,[121,120]).
'$aleph_sat_ivars'(845,[121,119]).
'$aleph_sat_ivars'(846,[121,118]).
'$aleph_sat_ivars'(847,[121,97]).
'$aleph_sat_ivars'(848,[121,96]).
'$aleph_sat_ivars'(849,[121,95]).
'$aleph_sat_ivars'(850,[121,29]).
'$aleph_sat_ivars'(851,[121,28]).
'$aleph_sat_ivars'(852,[121,10]).
'$aleph_sat_ivars'(853,[120,150]).
'$aleph_sat_ivars'(854,[120,122]).
'$aleph_sat_ivars'(855,[120,121]).
'$aleph_sat_ivars'(856,[120,119]).
'$aleph_sat_ivars'(857,[120,118]).
'$aleph_sat_ivars'(858,[120,97]).
'$aleph_sat_ivars'(859,[120,96]).
'$aleph_sat_ivars'(860,[120,95]).
'$aleph_sat_ivars'(861,[120,29]).
'$aleph_sat_ivars'(862,[120,28]).
'$aleph_sat_ivars'(863,[120,10]).
'$aleph_sat_ivars'(864,[119,150]).
'$aleph_sat_ivars'(865,[119,122]).
'$aleph_sat_ivars'(866,[119,121]).
'$aleph_sat_ivars'(867,[119,120]).
'$aleph_sat_ivars'(868,[119,118]).
'$aleph_sat_ivars'(869,[119,97]).
'$aleph_sat_ivars'(870,[119,96]).
'$aleph_sat_ivars'(871,[119,95]).
'$aleph_sat_ivars'(872,[119,29]).
'$aleph_sat_ivars'(873,[119,28]).
'$aleph_sat_ivars'(874,[119,10]).
'$aleph_sat_ivars'(875,[118,150]).
'$aleph_sat_ivars'(876,[118,122]).
'$aleph_sat_ivars'(877,[118,121]).
'$aleph_sat_ivars'(878,[118,120]).
'$aleph_sat_ivars'(879,[118,119]).
'$aleph_sat_ivars'(880,[118,97]).
'$aleph_sat_ivars'(881,[118,96]).
'$aleph_sat_ivars'(882,[118,95]).
'$aleph_sat_ivars'(883,[118,29]).
'$aleph_sat_ivars'(884,[118,28]).
'$aleph_sat_ivars'(885,[118,10]).
'$aleph_sat_ivars'(886,[97,150]).
'$aleph_sat_ivars'(887,[96,150]).
'$aleph_sat_ivars'(888,[95,150]).
'$aleph_sat_ivars'(889,[29,150]).
'$aleph_sat_ivars'(890,[28,150]).
'$aleph_sat_ivars'(891,[10,150]).
'$aleph_sat_ivars'(892,[97,122]).
'$aleph_sat_ivars'(893,[96,122]).
'$aleph_sat_ivars'(894,[95,122]).
'$aleph_sat_ivars'(895,[29,122]).
'$aleph_sat_ivars'(896,[28,122]).
'$aleph_sat_ivars'(897,[10,122]).
'$aleph_sat_ivars'(898,[97,121]).
'$aleph_sat_ivars'(899,[96,121]).
'$aleph_sat_ivars'(900,[95,121]).
'$aleph_sat_ivars'(901,[29,121]).
'$aleph_sat_ivars'(902,[28,121]).
'$aleph_sat_ivars'(903,[10,121]).
'$aleph_sat_ivars'(904,[97,120]).
'$aleph_sat_ivars'(905,[96,120]).
'$aleph_sat_ivars'(906,[95,120]).
'$aleph_sat_ivars'(907,[29,120]).
'$aleph_sat_ivars'(908,[28,120]).
'$aleph_sat_ivars'(909,[10,120]).
'$aleph_sat_ivars'(910,[97,119]).
'$aleph_sat_ivars'(911,[96,119]).
'$aleph_sat_ivars'(912,[95,119]).
'$aleph_sat_ivars'(913,[29,119]).
'$aleph_sat_ivars'(914,[28,119]).
'$aleph_sat_ivars'(915,[10,119]).
'$aleph_sat_ivars'(916,[97,118]).
'$aleph_sat_ivars'(917,[96,118]).
'$aleph_sat_ivars'(918,[95,118]).
'$aleph_sat_ivars'(919,[29,118]).
'$aleph_sat_ivars'(920,[28,118]).
'$aleph_sat_ivars'(921,[10,118]).
'$aleph_sat_ivars'(922,[156]).
'$aleph_sat_ivars'(923,[155]).
'$aleph_sat_ivars'(924,[154]).
'$aleph_sat_ivars'(925,[153]).
'$aleph_sat_ivars'(926,[156]).
'$aleph_sat_ivars'(927,[155]).
'$aleph_sat_ivars'(928,[156]).
'$aleph_sat_ivars'(929,[155]).
'$aleph_sat_ivars'(930,[154]).
'$aleph_sat_ivars'(931,[154]).
'$aleph_sat_ivars'(932,[154]).
'$aleph_sat_ivars'(933,[156]).
'$aleph_sat_ivars'(934,[158]).
'$aleph_sat_ivars'(935,[157]).
'$aleph_sat_ivars'(936,[154]).
'$aleph_sat_ivars'(937,[154]).
'$aleph_sat_ivars'(938,[153]).
'$aleph_sat_ivars'(939,[158]).
'$aleph_sat_ivars'(940,[157]).
'$aleph_sat_ivars'(941,[154]).
'$aleph_sat_ivars'(942,[158]).
'$aleph_sat_ivars'(943,[157]).
'$aleph_sat_ivars'(944,[154]).
'$aleph_sat_ivars'(945,[153]).
'$aleph_sat_ivars'(946,[159]).
'$aleph_sat_ivars'(947,[159]).
'$aleph_sat_ivars'(948,[159,150]).
'$aleph_sat_ivars'(949,[159,122]).
'$aleph_sat_ivars'(950,[159,121]).
'$aleph_sat_ivars'(951,[159,120]).
'$aleph_sat_ivars'(952,[159,119]).
'$aleph_sat_ivars'(953,[159,118]).
'$aleph_sat_ivars'(954,[159,95]).
'$aleph_sat_ivars'(955,[159,29]).
'$aleph_sat_ivars'(956,[159,10]).
'$aleph_sat_ivars'(957,[97,159]).
'$aleph_sat_ivars'(958,[96,159]).
'$aleph_sat_ivars'(959,[28,159]).
'$aleph_sat_ivars'(960,[159,150]).
'$aleph_sat_ivars'(961,[159,122]).
'$aleph_sat_ivars'(962,[159,121]).
'$aleph_sat_ivars'(963,[159,120]).
'$aleph_sat_ivars'(964,[159,119]).
'$aleph_sat_ivars'(965,[159,118]).
'$aleph_sat_ivars'(966,[159,97]).
'$aleph_sat_ivars'(967,[159,96]).
'$aleph_sat_ivars'(968,[159,95]).
'$aleph_sat_ivars'(969,[159,29]).
'$aleph_sat_ivars'(970,[159,28]).
'$aleph_sat_ivars'(971,[159,10]).
'$aleph_sat_ivars'(972,[150,159]).
'$aleph_sat_ivars'(973,[122,159]).
'$aleph_sat_ivars'(974,[121,159]).
'$aleph_sat_ivars'(975,[120,159]).
'$aleph_sat_ivars'(976,[119,159]).
'$aleph_sat_ivars'(977,[118,159]).
'$aleph_sat_ivars'(978,[97,159]).
'$aleph_sat_ivars'(979,[96,159]).
'$aleph_sat_ivars'(980,[95,159]).
'$aleph_sat_ivars'(981,[29,159]).
'$aleph_sat_ivars'(982,[28,159]).
'$aleph_sat_ivars'(983,[10,159]).

:- dynamic '$aleph_sat_ovars'/2.

'$aleph_sat_ovars'(1,[1,2]).
'$aleph_sat_ovars'(2,[3,4]).
'$aleph_sat_ovars'(3,[5,6]).
'$aleph_sat_ovars'(4,[5,7]).
'$aleph_sat_ovars'(5,[8]).
'$aleph_sat_ovars'(6,[]).
'$aleph_sat_ovars'(7,[9]).
'$aleph_sat_ovars'(8,[]).
'$aleph_sat_ovars'(9,[10]).
'$aleph_sat_ovars'(10,[11,12]).
'$aleph_sat_ovars'(11,[13,14]).
'$aleph_sat_ovars'(12,[]).
'$aleph_sat_ovars'(13,[]).
'$aleph_sat_ovars'(14,[15]).
'$aleph_sat_ovars'(15,[16]).
'$aleph_sat_ovars'(16,[17]).
'$aleph_sat_ovars'(17,[18]).
'$aleph_sat_ovars'(18,[19]).
'$aleph_sat_ovars'(19,[20]).
'$aleph_sat_ovars'(20,[21]).
'$aleph_sat_ovars'(21,[22]).
'$aleph_sat_ovars'(22,[23]).
'$aleph_sat_ovars'(23,[24]).
'$aleph_sat_ovars'(24,[25]).
'$aleph_sat_ovars'(25,[26]).
'$aleph_sat_ovars'(26,[27]).
'$aleph_sat_ovars'(27,[]).
'$aleph_sat_ovars'(28,[28]).
'$aleph_sat_ovars'(29,[29]).
'$aleph_sat_ovars'(30,[30]).
'$aleph_sat_ovars'(31,[31]).
'$aleph_sat_ovars'(32,[2]).
'$aleph_sat_ovars'(33,[32]).
'$aleph_sat_ovars'(34,[31,33]).
'$aleph_sat_ovars'(35,[34,14]).
'$aleph_sat_ovars'(36,[31,35]).
'$aleph_sat_ovars'(37,[36,37]).
'$aleph_sat_ovars'(38,[34,38]).
'$aleph_sat_ovars'(39,[30,33]).
'$aleph_sat_ovars'(40,[39,4]).
'$aleph_sat_ovars'(41,[36,14]).
'$aleph_sat_ovars'(42,[40,12]).
'$aleph_sat_ovars'(43,[30,41]).
'$aleph_sat_ovars'(44,[42,7]).
'$aleph_sat_ovars'(45,[30,6]).
'$aleph_sat_ovars'(46,[31,37]).
'$aleph_sat_ovars'(47,[2,6]).
'$aleph_sat_ovars'(48,[2,7]).
'$aleph_sat_ovars'(49,[2,4]).
'$aleph_sat_ovars'(50,[43,12]).
'$aleph_sat_ovars'(51,[30,7]).
'$aleph_sat_ovars'(52,[43,37]).
'$aleph_sat_ovars'(53,[44,38]).
'$aleph_sat_ovars'(54,[13,33]).
'$aleph_sat_ovars'(55,[45,4]).
'$aleph_sat_ovars'(56,[13,35]).
'$aleph_sat_ovars'(57,[46,41]).
'$aleph_sat_ovars'(58,[47,7]).
'$aleph_sat_ovars'(59,[48,6]).
'$aleph_sat_ovars'(60,[11,37]).
'$aleph_sat_ovars'(61,[49,50]).
'$aleph_sat_ovars'(62,[51,6]).
'$aleph_sat_ovars'(63,[52,38]).
'$aleph_sat_ovars'(64,[11,33]).
'$aleph_sat_ovars'(65,[47,4]).
'$aleph_sat_ovars'(66,[53,54]).
'$aleph_sat_ovars'(67,[55,14]).
'$aleph_sat_ovars'(68,[47,12]).
'$aleph_sat_ovars'(69,[56,35]).
'$aleph_sat_ovars'(70,[11,41]).
'$aleph_sat_ovars'(71,[3,7]).
'$aleph_sat_ovars'(72,[11,6]).
'$aleph_sat_ovars'(73,[55,37]).
'$aleph_sat_ovars'(74,[47,50]).
'$aleph_sat_ovars'(75,[57,37]).
'$aleph_sat_ovars'(76,[57,14]).
'$aleph_sat_ovars'(77,[58]).
'$aleph_sat_ovars'(78,[59]).
'$aleph_sat_ovars'(79,[60]).
'$aleph_sat_ovars'(80,[]).
'$aleph_sat_ovars'(81,[]).
'$aleph_sat_ovars'(82,[]).
'$aleph_sat_ovars'(83,[8]).
'$aleph_sat_ovars'(84,[8]).
'$aleph_sat_ovars'(85,[]).
'$aleph_sat_ovars'(86,[]).
'$aleph_sat_ovars'(87,[61,37]).
'$aleph_sat_ovars'(88,[62,35]).
'$aleph_sat_ovars'(89,[63,14]).
'$aleph_sat_ovars'(90,[1,14]).
'$aleph_sat_ovars'(91,[64,37]).
'$aleph_sat_ovars'(92,[65,6]).
'$aleph_sat_ovars'(93,[66,7]).
'$aleph_sat_ovars'(94,[65,7]).
'$aleph_sat_ovars'(95,[67,41]).
'$aleph_sat_ovars'(96,[68,41]).
'$aleph_sat_ovars'(97,[1,12]).
'$aleph_sat_ovars'(98,[62,12]).
'$aleph_sat_ovars'(99,[69,14]).
'$aleph_sat_ovars'(100,[62,14]).
'$aleph_sat_ovars'(101,[66,37]).
'$aleph_sat_ovars'(102,[70,7]).
'$aleph_sat_ovars'(103,[70,12]).
'$aleph_sat_ovars'(104,[]).
'$aleph_sat_ovars'(105,[]).
'$aleph_sat_ovars'(106,[]).
'$aleph_sat_ovars'(107,[]).
'$aleph_sat_ovars'(108,[]).
'$aleph_sat_ovars'(109,[]).
'$aleph_sat_ovars'(110,[]).
'$aleph_sat_ovars'(111,[]).
'$aleph_sat_ovars'(112,[]).
'$aleph_sat_ovars'(113,[]).
'$aleph_sat_ovars'(114,[]).
'$aleph_sat_ovars'(115,[]).
'$aleph_sat_ovars'(116,[]).
'$aleph_sat_ovars'(117,[]).
'$aleph_sat_ovars'(118,[]).
'$aleph_sat_ovars'(119,[]).
'$aleph_sat_ovars'(120,[]).
'$aleph_sat_ovars'(121,[]).
'$aleph_sat_ovars'(122,[]).
'$aleph_sat_ovars'(123,[]).
'$aleph_sat_ovars'(124,[]).
'$aleph_sat_ovars'(125,[]).
'$aleph_sat_ovars'(126,[]).
'$aleph_sat_ovars'(127,[]).
'$aleph_sat_ovars'(128,[]).
'$aleph_sat_ovars'(129,[]).
'$aleph_sat_ovars'(130,[]).
'$aleph_sat_ovars'(131,[]).
'$aleph_sat_ovars'(132,[]).
'$aleph_sat_ovars'(133,[21]).
'$aleph_sat_ovars'(134,[15]).
'$aleph_sat_ovars'(135,[16]).
'$aleph_sat_ovars'(136,[71]).
'$aleph_sat_ovars'(137,[17]).
'$aleph_sat_ovars'(138,[18]).
'$aleph_sat_ovars'(139,[72]).
'$aleph_sat_ovars'(140,[73]).
'$aleph_sat_ovars'(141,[74]).
'$aleph_sat_ovars'(142,[75]).
'$aleph_sat_ovars'(143,[19]).
'$aleph_sat_ovars'(144,[76]).
'$aleph_sat_ovars'(145,[22]).
'$aleph_sat_ovars'(146,[23]).
'$aleph_sat_ovars'(147,[24]).
'$aleph_sat_ovars'(148,[25]).
'$aleph_sat_ovars'(149,[26]).
'$aleph_sat_ovars'(150,[77]).
'$aleph_sat_ovars'(151,[27]).
'$aleph_sat_ovars'(152,[78]).
'$aleph_sat_ovars'(153,[79]).
'$aleph_sat_ovars'(154,[80]).
'$aleph_sat_ovars'(155,[81]).
'$aleph_sat_ovars'(156,[82]).
'$aleph_sat_ovars'(157,[83]).
'$aleph_sat_ovars'(158,[84]).
'$aleph_sat_ovars'(159,[85]).
'$aleph_sat_ovars'(160,[86]).
'$aleph_sat_ovars'(161,[87]).
'$aleph_sat_ovars'(162,[88]).
'$aleph_sat_ovars'(163,[89]).
'$aleph_sat_ovars'(164,[90]).
'$aleph_sat_ovars'(165,[91]).
'$aleph_sat_ovars'(166,[92]).
'$aleph_sat_ovars'(167,[93]).
'$aleph_sat_ovars'(168,[20]).
'$aleph_sat_ovars'(169,[94]).
'$aleph_sat_ovars'(170,[77]).
'$aleph_sat_ovars'(171,[]).
'$aleph_sat_ovars'(172,[]).
'$aleph_sat_ovars'(173,[]).
'$aleph_sat_ovars'(174,[]).
'$aleph_sat_ovars'(175,[95]).
'$aleph_sat_ovars'(176,[96]).
'$aleph_sat_ovars'(177,[97]).
'$aleph_sat_ovars'(178,[2]).
'$aleph_sat_ovars'(179,[32]).
'$aleph_sat_ovars'(180,[30]).
'$aleph_sat_ovars'(181,[98]).
'$aleph_sat_ovars'(182,[36]).
'$aleph_sat_ovars'(183,[31]).
'$aleph_sat_ovars'(184,[2]).
'$aleph_sat_ovars'(185,[69]).
'$aleph_sat_ovars'(186,[30]).
'$aleph_sat_ovars'(187,[99]).
'$aleph_sat_ovars'(188,[100]).
'$aleph_sat_ovars'(189,[31]).
'$aleph_sat_ovars'(190,[2]).
'$aleph_sat_ovars'(191,[]).
'$aleph_sat_ovars'(192,[]).
'$aleph_sat_ovars'(193,[]).
'$aleph_sat_ovars'(194,[]).
'$aleph_sat_ovars'(195,[]).
'$aleph_sat_ovars'(196,[]).
'$aleph_sat_ovars'(197,[]).
'$aleph_sat_ovars'(198,[]).
'$aleph_sat_ovars'(199,[]).
'$aleph_sat_ovars'(200,[]).
'$aleph_sat_ovars'(201,[]).
'$aleph_sat_ovars'(202,[]).
'$aleph_sat_ovars'(203,[]).
'$aleph_sat_ovars'(204,[]).
'$aleph_sat_ovars'(205,[]).
'$aleph_sat_ovars'(206,[30,37]).
'$aleph_sat_ovars'(207,[30,14]).
'$aleph_sat_ovars'(208,[40,54]).
'$aleph_sat_ovars'(209,[30,35]).
'$aleph_sat_ovars'(210,[101,6]).
'$aleph_sat_ovars'(211,[30,14]).
'$aleph_sat_ovars'(212,[30,37]).
'$aleph_sat_ovars'(213,[43,38]).
'$aleph_sat_ovars'(214,[30,54]).
'$aleph_sat_ovars'(215,[30,38]).
'$aleph_sat_ovars'(216,[36,54]).
'$aleph_sat_ovars'(217,[42,35]).
'$aleph_sat_ovars'(218,[42,6]).
'$aleph_sat_ovars'(219,[31,6]).
'$aleph_sat_ovars'(220,[31,50]).
'$aleph_sat_ovars'(221,[31,6]).
'$aleph_sat_ovars'(222,[102,103]).
'$aleph_sat_ovars'(223,[30,4]).
'$aleph_sat_ovars'(224,[30,12]).
'$aleph_sat_ovars'(225,[31,7]).
'$aleph_sat_ovars'(226,[30,50]).
'$aleph_sat_ovars'(227,[34,33]).
'$aleph_sat_ovars'(228,[43,14]).
'$aleph_sat_ovars'(229,[31,41]).
'$aleph_sat_ovars'(230,[34,37]).
'$aleph_sat_ovars'(231,[39,38]).
'$aleph_sat_ovars'(232,[43,33]).
'$aleph_sat_ovars'(233,[31,4]).
'$aleph_sat_ovars'(234,[36,12]).
'$aleph_sat_ovars'(235,[36,7]).
'$aleph_sat_ovars'(236,[43,6]).
'$aleph_sat_ovars'(237,[42,50]).
'$aleph_sat_ovars'(238,[31,38]).
'$aleph_sat_ovars'(239,[104,6]).
'$aleph_sat_ovars'(240,[53,38]).
'$aleph_sat_ovars'(241,[45,33]).
'$aleph_sat_ovars'(242,[105,33]).
'$aleph_sat_ovars'(243,[46,14]).
'$aleph_sat_ovars'(244,[3,12]).
'$aleph_sat_ovars'(245,[45,6]).
'$aleph_sat_ovars'(246,[3,37]).
'$aleph_sat_ovars'(247,[52,35]).
'$aleph_sat_ovars'(248,[106,41]).
'$aleph_sat_ovars'(249,[11,7]).
'$aleph_sat_ovars'(250,[52,6]).
'$aleph_sat_ovars'(251,[45,50]).
'$aleph_sat_ovars'(252,[104,33]).
'$aleph_sat_ovars'(253,[56,54]).
'$aleph_sat_ovars'(254,[11,12]).
'$aleph_sat_ovars'(255,[45,38]).
'$aleph_sat_ovars'(256,[11,4]).
'$aleph_sat_ovars'(257,[52,54]).
'$aleph_sat_ovars'(258,[11,14]).
'$aleph_sat_ovars'(259,[45,12]).
'$aleph_sat_ovars'(260,[107,41]).
'$aleph_sat_ovars'(261,[45,7]).
'$aleph_sat_ovars'(262,[13,37]).
'$aleph_sat_ovars'(263,[108,50]).
'$aleph_sat_ovars'(264,[109,41]).
'$aleph_sat_ovars'(265,[11,38]).
'$aleph_sat_ovars'(266,[46,33]).
'$aleph_sat_ovars'(267,[110,54]).
'$aleph_sat_ovars'(268,[13,14]).
'$aleph_sat_ovars'(269,[110,6]).
'$aleph_sat_ovars'(270,[46,37]).
'$aleph_sat_ovars'(271,[59]).
'$aleph_sat_ovars'(272,[58]).
'$aleph_sat_ovars'(273,[60]).
'$aleph_sat_ovars'(274,[60]).
'$aleph_sat_ovars'(275,[60]).
'$aleph_sat_ovars'(276,[60]).
'$aleph_sat_ovars'(277,[58]).
'$aleph_sat_ovars'(278,[58]).
'$aleph_sat_ovars'(279,[59]).
'$aleph_sat_ovars'(280,[60]).
'$aleph_sat_ovars'(281,[]).
'$aleph_sat_ovars'(282,[]).
'$aleph_sat_ovars'(283,[]).
'$aleph_sat_ovars'(284,[]).
'$aleph_sat_ovars'(285,[]).
'$aleph_sat_ovars'(286,[]).
'$aleph_sat_ovars'(287,[]).
'$aleph_sat_ovars'(288,[]).
'$aleph_sat_ovars'(289,[]).
'$aleph_sat_ovars'(290,[]).
'$aleph_sat_ovars'(291,[111]).
'$aleph_sat_ovars'(292,[8]).
'$aleph_sat_ovars'(293,[8]).
'$aleph_sat_ovars'(294,[8]).
'$aleph_sat_ovars'(295,[8]).
'$aleph_sat_ovars'(296,[]).
'$aleph_sat_ovars'(297,[]).
'$aleph_sat_ovars'(298,[]).
'$aleph_sat_ovars'(299,[]).
'$aleph_sat_ovars'(300,[]).
'$aleph_sat_ovars'(301,[112]).
'$aleph_sat_ovars'(302,[113]).
'$aleph_sat_ovars'(303,[114]).
'$aleph_sat_ovars'(304,[115]).
'$aleph_sat_ovars'(305,[116]).
'$aleph_sat_ovars'(306,[116]).
'$aleph_sat_ovars'(307,[9]).
'$aleph_sat_ovars'(308,[116]).
'$aleph_sat_ovars'(309,[9]).
'$aleph_sat_ovars'(310,[117]).
'$aleph_sat_ovars'(311,[9]).
'$aleph_sat_ovars'(312,[117]).
'$aleph_sat_ovars'(313,[]).
'$aleph_sat_ovars'(314,[]).
'$aleph_sat_ovars'(315,[]).
'$aleph_sat_ovars'(316,[]).
'$aleph_sat_ovars'(317,[]).
'$aleph_sat_ovars'(318,[]).
'$aleph_sat_ovars'(319,[]).
'$aleph_sat_ovars'(320,[]).
'$aleph_sat_ovars'(321,[]).
'$aleph_sat_ovars'(322,[]).
'$aleph_sat_ovars'(323,[]).
'$aleph_sat_ovars'(324,[118]).
'$aleph_sat_ovars'(325,[119]).
'$aleph_sat_ovars'(326,[120]).
'$aleph_sat_ovars'(327,[121]).
'$aleph_sat_ovars'(328,[122]).
'$aleph_sat_ovars'(329,[122]).
'$aleph_sat_ovars'(330,[120]).
'$aleph_sat_ovars'(331,[95]).
'$aleph_sat_ovars'(332,[123,37]).
'$aleph_sat_ovars'(333,[124,6]).
'$aleph_sat_ovars'(334,[125,41]).
'$aleph_sat_ovars'(335,[102,35]).
'$aleph_sat_ovars'(336,[125,35]).
'$aleph_sat_ovars'(337,[63,12]).
'$aleph_sat_ovars'(338,[126,12]).
'$aleph_sat_ovars'(339,[98,7]).
'$aleph_sat_ovars'(340,[69,12]).
'$aleph_sat_ovars'(341,[63,37]).
'$aleph_sat_ovars'(342,[66,41]).
'$aleph_sat_ovars'(343,[127,41]).
'$aleph_sat_ovars'(344,[98,14]).
'$aleph_sat_ovars'(345,[128,6]).
'$aleph_sat_ovars'(346,[129,6]).
'$aleph_sat_ovars'(347,[130,7]).
'$aleph_sat_ovars'(348,[131,7]).
'$aleph_sat_ovars'(349,[67,35]).
'$aleph_sat_ovars'(350,[66,35]).
'$aleph_sat_ovars'(351,[65,35]).
'$aleph_sat_ovars'(352,[132,12]).
'$aleph_sat_ovars'(353,[47,7]).
'$aleph_sat_ovars'(354,[46,14]).
'$aleph_sat_ovars'(355,[3,7]).
'$aleph_sat_ovars'(356,[3,12]).
'$aleph_sat_ovars'(357,[133,14]).
'$aleph_sat_ovars'(358,[47,12]).
'$aleph_sat_ovars'(359,[11,14]).
'$aleph_sat_ovars'(360,[11,41]).
'$aleph_sat_ovars'(361,[11,41]).
'$aleph_sat_ovars'(362,[45,35]).
'$aleph_sat_ovars'(363,[3,37]).
'$aleph_sat_ovars'(364,[134,6]).
'$aleph_sat_ovars'(365,[11,7]).
'$aleph_sat_ovars'(366,[46,41]).
'$aleph_sat_ovars'(367,[45,35]).
'$aleph_sat_ovars'(368,[11,6]).
'$aleph_sat_ovars'(369,[11,7]).
'$aleph_sat_ovars'(370,[45,35]).
'$aleph_sat_ovars'(371,[11,37]).
'$aleph_sat_ovars'(372,[46,37]).
'$aleph_sat_ovars'(373,[104,35]).
'$aleph_sat_ovars'(374,[56,12]).
'$aleph_sat_ovars'(375,[13,14]).
'$aleph_sat_ovars'(376,[13,35]).
'$aleph_sat_ovars'(377,[11,12]).
'$aleph_sat_ovars'(378,[11,14]).
'$aleph_sat_ovars'(379,[13,37]).
'$aleph_sat_ovars'(380,[104,6]).
'$aleph_sat_ovars'(381,[]).
'$aleph_sat_ovars'(382,[]).
'$aleph_sat_ovars'(383,[]).
'$aleph_sat_ovars'(384,[]).
'$aleph_sat_ovars'(385,[]).
'$aleph_sat_ovars'(386,[]).
'$aleph_sat_ovars'(387,[]).
'$aleph_sat_ovars'(388,[]).
'$aleph_sat_ovars'(389,[]).
'$aleph_sat_ovars'(390,[]).
'$aleph_sat_ovars'(391,[]).
'$aleph_sat_ovars'(392,[]).
'$aleph_sat_ovars'(393,[]).
'$aleph_sat_ovars'(394,[]).
'$aleph_sat_ovars'(395,[]).
'$aleph_sat_ovars'(396,[]).
'$aleph_sat_ovars'(397,[]).
'$aleph_sat_ovars'(398,[]).
'$aleph_sat_ovars'(399,[]).
'$aleph_sat_ovars'(400,[]).
'$aleph_sat_ovars'(401,[]).
'$aleph_sat_ovars'(402,[]).
'$aleph_sat_ovars'(403,[]).
'$aleph_sat_ovars'(404,[]).
'$aleph_sat_ovars'(405,[]).
'$aleph_sat_ovars'(406,[]).
'$aleph_sat_ovars'(407,[]).
'$aleph_sat_ovars'(408,[]).
'$aleph_sat_ovars'(409,[]).
'$aleph_sat_ovars'(410,[]).
'$aleph_sat_ovars'(411,[]).
'$aleph_sat_ovars'(412,[]).
'$aleph_sat_ovars'(413,[]).
'$aleph_sat_ovars'(414,[]).
'$aleph_sat_ovars'(415,[]).
'$aleph_sat_ovars'(416,[]).
'$aleph_sat_ovars'(417,[]).
'$aleph_sat_ovars'(418,[]).
'$aleph_sat_ovars'(419,[]).
'$aleph_sat_ovars'(420,[]).
'$aleph_sat_ovars'(421,[]).
'$aleph_sat_ovars'(422,[]).
'$aleph_sat_ovars'(423,[]).
'$aleph_sat_ovars'(424,[]).
'$aleph_sat_ovars'(425,[]).
'$aleph_sat_ovars'(426,[]).
'$aleph_sat_ovars'(427,[]).
'$aleph_sat_ovars'(428,[]).
'$aleph_sat_ovars'(429,[]).
'$aleph_sat_ovars'(430,[]).
'$aleph_sat_ovars'(431,[]).
'$aleph_sat_ovars'(432,[]).
'$aleph_sat_ovars'(433,[]).
'$aleph_sat_ovars'(434,[]).
'$aleph_sat_ovars'(435,[]).
'$aleph_sat_ovars'(436,[]).
'$aleph_sat_ovars'(437,[]).
'$aleph_sat_ovars'(438,[]).
'$aleph_sat_ovars'(439,[]).
'$aleph_sat_ovars'(440,[]).
'$aleph_sat_ovars'(441,[]).
'$aleph_sat_ovars'(442,[]).
'$aleph_sat_ovars'(443,[]).
'$aleph_sat_ovars'(444,[]).
'$aleph_sat_ovars'(445,[]).
'$aleph_sat_ovars'(446,[]).
'$aleph_sat_ovars'(447,[]).
'$aleph_sat_ovars'(448,[]).
'$aleph_sat_ovars'(449,[]).
'$aleph_sat_ovars'(450,[]).
'$aleph_sat_ovars'(451,[]).
'$aleph_sat_ovars'(452,[]).
'$aleph_sat_ovars'(453,[]).
'$aleph_sat_ovars'(454,[]).
'$aleph_sat_ovars'(455,[82]).
'$aleph_sat_ovars'(456,[83]).
'$aleph_sat_ovars'(457,[84]).
'$aleph_sat_ovars'(458,[85]).
'$aleph_sat_ovars'(459,[86]).
'$aleph_sat_ovars'(460,[87]).
'$aleph_sat_ovars'(461,[88]).
'$aleph_sat_ovars'(462,[89]).
'$aleph_sat_ovars'(463,[135]).
'$aleph_sat_ovars'(464,[90]).
'$aleph_sat_ovars'(465,[136]).
'$aleph_sat_ovars'(466,[91]).
'$aleph_sat_ovars'(467,[92]).
'$aleph_sat_ovars'(468,[93]).
'$aleph_sat_ovars'(469,[94]).
'$aleph_sat_ovars'(470,[82]).
'$aleph_sat_ovars'(471,[86]).
'$aleph_sat_ovars'(472,[88]).
'$aleph_sat_ovars'(473,[89]).
'$aleph_sat_ovars'(474,[135]).
'$aleph_sat_ovars'(475,[90]).
'$aleph_sat_ovars'(476,[136]).
'$aleph_sat_ovars'(477,[91]).
'$aleph_sat_ovars'(478,[92]).
'$aleph_sat_ovars'(479,[137]).
'$aleph_sat_ovars'(480,[71]).
'$aleph_sat_ovars'(481,[73]).
'$aleph_sat_ovars'(482,[76]).
'$aleph_sat_ovars'(483,[75]).
'$aleph_sat_ovars'(484,[78]).
'$aleph_sat_ovars'(485,[138]).
'$aleph_sat_ovars'(486,[139]).
'$aleph_sat_ovars'(487,[140]).
'$aleph_sat_ovars'(488,[141]).
'$aleph_sat_ovars'(489,[142]).
'$aleph_sat_ovars'(490,[143]).
'$aleph_sat_ovars'(491,[144]).
'$aleph_sat_ovars'(492,[145]).
'$aleph_sat_ovars'(493,[146]).
'$aleph_sat_ovars'(494,[147]).
'$aleph_sat_ovars'(495,[148]).
'$aleph_sat_ovars'(496,[72]).
'$aleph_sat_ovars'(497,[74]).
'$aleph_sat_ovars'(498,[149]).
'$aleph_sat_ovars'(499,[79]).
'$aleph_sat_ovars'(500,[80]).
'$aleph_sat_ovars'(501,[81]).
'$aleph_sat_ovars'(502,[]).
'$aleph_sat_ovars'(503,[]).
'$aleph_sat_ovars'(504,[]).
'$aleph_sat_ovars'(505,[]).
'$aleph_sat_ovars'(506,[]).
'$aleph_sat_ovars'(507,[]).
'$aleph_sat_ovars'(508,[]).
'$aleph_sat_ovars'(509,[]).
'$aleph_sat_ovars'(510,[97]).
'$aleph_sat_ovars'(511,[150]).
'$aleph_sat_ovars'(512,[10]).
'$aleph_sat_ovars'(513,[29]).
'$aleph_sat_ovars'(514,[122]).
'$aleph_sat_ovars'(515,[29]).
'$aleph_sat_ovars'(516,[29]).
'$aleph_sat_ovars'(517,[29]).
'$aleph_sat_ovars'(518,[29]).
'$aleph_sat_ovars'(519,[29]).
'$aleph_sat_ovars'(520,[29]).
'$aleph_sat_ovars'(521,[29]).
'$aleph_sat_ovars'(522,[29]).
'$aleph_sat_ovars'(523,[150]).
'$aleph_sat_ovars'(524,[29]).
'$aleph_sat_ovars'(525,[29]).
'$aleph_sat_ovars'(526,[29]).
'$aleph_sat_ovars'(527,[119]).
'$aleph_sat_ovars'(528,[29]).
'$aleph_sat_ovars'(529,[30]).
'$aleph_sat_ovars'(530,[99]).
'$aleph_sat_ovars'(531,[100]).
'$aleph_sat_ovars'(532,[151]).
'$aleph_sat_ovars'(533,[30]).
'$aleph_sat_ovars'(534,[99]).
'$aleph_sat_ovars'(535,[100]).
'$aleph_sat_ovars'(536,[152]).
'$aleph_sat_ovars'(537,[98]).
'$aleph_sat_ovars'(538,[31]).
'$aleph_sat_ovars'(539,[31]).
'$aleph_sat_ovars'(540,[69]).
'$aleph_sat_ovars'(541,[43]).
'$aleph_sat_ovars'(542,[152]).
'$aleph_sat_ovars'(543,[151]).
'$aleph_sat_ovars'(544,[36]).
'$aleph_sat_ovars'(545,[31]).
'$aleph_sat_ovars'(546,[]).
'$aleph_sat_ovars'(547,[]).
'$aleph_sat_ovars'(548,[]).
'$aleph_sat_ovars'(549,[]).
'$aleph_sat_ovars'(550,[]).
'$aleph_sat_ovars'(551,[]).
'$aleph_sat_ovars'(552,[]).
'$aleph_sat_ovars'(553,[]).
'$aleph_sat_ovars'(554,[]).
'$aleph_sat_ovars'(555,[]).
'$aleph_sat_ovars'(556,[]).
'$aleph_sat_ovars'(557,[]).
'$aleph_sat_ovars'(558,[]).
'$aleph_sat_ovars'(559,[]).
'$aleph_sat_ovars'(560,[]).
'$aleph_sat_ovars'(561,[]).
'$aleph_sat_ovars'(562,[]).
'$aleph_sat_ovars'(563,[]).
'$aleph_sat_ovars'(564,[]).
'$aleph_sat_ovars'(565,[]).
'$aleph_sat_ovars'(566,[]).
'$aleph_sat_ovars'(567,[]).
'$aleph_sat_ovars'(568,[]).
'$aleph_sat_ovars'(569,[]).
'$aleph_sat_ovars'(570,[]).
'$aleph_sat_ovars'(571,[]).
'$aleph_sat_ovars'(572,[]).
'$aleph_sat_ovars'(573,[]).
'$aleph_sat_ovars'(574,[]).
'$aleph_sat_ovars'(575,[]).
'$aleph_sat_ovars'(576,[]).
'$aleph_sat_ovars'(577,[]).
'$aleph_sat_ovars'(578,[]).
'$aleph_sat_ovars'(579,[]).
'$aleph_sat_ovars'(580,[]).
'$aleph_sat_ovars'(581,[]).
'$aleph_sat_ovars'(582,[]).
'$aleph_sat_ovars'(583,[]).
'$aleph_sat_ovars'(584,[]).
'$aleph_sat_ovars'(585,[]).
'$aleph_sat_ovars'(586,[]).
'$aleph_sat_ovars'(587,[]).
'$aleph_sat_ovars'(588,[34,54]).
'$aleph_sat_ovars'(589,[34,6]).
'$aleph_sat_ovars'(590,[36,41]).
'$aleph_sat_ovars'(591,[36,50]).
'$aleph_sat_ovars'(592,[36,41]).
'$aleph_sat_ovars'(593,[42,41]).
'$aleph_sat_ovars'(594,[43,33]).
'$aleph_sat_ovars'(595,[40,33]).
'$aleph_sat_ovars'(596,[153,54]).
'$aleph_sat_ovars'(597,[154,12]).
'$aleph_sat_ovars'(598,[69,6]).
'$aleph_sat_ovars'(599,[101,37]).
'$aleph_sat_ovars'(600,[48,103]).
'$aleph_sat_ovars'(601,[155,7]).
'$aleph_sat_ovars'(602,[56,6]).
'$aleph_sat_ovars'(603,[104,37]).
'$aleph_sat_ovars'(604,[156,7]).
'$aleph_sat_ovars'(605,[60]).
'$aleph_sat_ovars'(606,[60]).
'$aleph_sat_ovars'(607,[60]).
'$aleph_sat_ovars'(608,[60]).
'$aleph_sat_ovars'(609,[58]).
'$aleph_sat_ovars'(610,[60]).
'$aleph_sat_ovars'(611,[60]).
'$aleph_sat_ovars'(612,[60]).
'$aleph_sat_ovars'(613,[59]).
'$aleph_sat_ovars'(614,[]).
'$aleph_sat_ovars'(615,[]).
'$aleph_sat_ovars'(616,[]).
'$aleph_sat_ovars'(617,[]).
'$aleph_sat_ovars'(618,[]).
'$aleph_sat_ovars'(619,[]).
'$aleph_sat_ovars'(620,[]).
'$aleph_sat_ovars'(621,[]).
'$aleph_sat_ovars'(622,[]).
'$aleph_sat_ovars'(623,[34]).
'$aleph_sat_ovars'(624,[34]).
'$aleph_sat_ovars'(625,[36]).
'$aleph_sat_ovars'(626,[36]).
'$aleph_sat_ovars'(627,[9]).
'$aleph_sat_ovars'(628,[117]).
'$aleph_sat_ovars'(629,[117]).
'$aleph_sat_ovars'(630,[9]).
'$aleph_sat_ovars'(631,[117]).
'$aleph_sat_ovars'(632,[]).
'$aleph_sat_ovars'(633,[]).
'$aleph_sat_ovars'(634,[]).
'$aleph_sat_ovars'(635,[]).
'$aleph_sat_ovars'(636,[]).
'$aleph_sat_ovars'(637,[]).
'$aleph_sat_ovars'(638,[]).
'$aleph_sat_ovars'(639,[]).
'$aleph_sat_ovars'(640,[]).
'$aleph_sat_ovars'(641,[10]).
'$aleph_sat_ovars'(642,[95]).
'$aleph_sat_ovars'(643,[95]).
'$aleph_sat_ovars'(644,[10]).
'$aleph_sat_ovars'(645,[122]).
'$aleph_sat_ovars'(646,[66,6]).
'$aleph_sat_ovars'(647,[70,14]).
'$aleph_sat_ovars'(648,[126,6]).
'$aleph_sat_ovars'(649,[154,41]).
'$aleph_sat_ovars'(650,[154,37]).
'$aleph_sat_ovars'(651,[61,6]).
'$aleph_sat_ovars'(652,[130,41]).
'$aleph_sat_ovars'(653,[132,41]).
'$aleph_sat_ovars'(654,[63,35]).
'$aleph_sat_ovars'(655,[157,12]).
'$aleph_sat_ovars'(656,[158,14]).
'$aleph_sat_ovars'(657,[104,41]).
'$aleph_sat_ovars'(658,[45,12]).
'$aleph_sat_ovars'(659,[45,7]).
'$aleph_sat_ovars'(660,[45,7]).
'$aleph_sat_ovars'(661,[104,41]).
'$aleph_sat_ovars'(662,[45,6]).
'$aleph_sat_ovars'(663,[45,6]).
'$aleph_sat_ovars'(664,[46,41]).
'$aleph_sat_ovars'(665,[110,6]).
'$aleph_sat_ovars'(666,[56,12]).
'$aleph_sat_ovars'(667,[56,41]).
'$aleph_sat_ovars'(668,[56,35]).
'$aleph_sat_ovars'(669,[56,6]).
'$aleph_sat_ovars'(670,[56,37]).
'$aleph_sat_ovars'(671,[156,7]).
'$aleph_sat_ovars'(672,[56,35]).
'$aleph_sat_ovars'(673,[]).
'$aleph_sat_ovars'(674,[]).
'$aleph_sat_ovars'(675,[]).
'$aleph_sat_ovars'(676,[]).
'$aleph_sat_ovars'(677,[]).
'$aleph_sat_ovars'(678,[]).
'$aleph_sat_ovars'(679,[]).
'$aleph_sat_ovars'(680,[]).
'$aleph_sat_ovars'(681,[]).
'$aleph_sat_ovars'(682,[]).
'$aleph_sat_ovars'(683,[]).
'$aleph_sat_ovars'(684,[]).
'$aleph_sat_ovars'(685,[]).
'$aleph_sat_ovars'(686,[]).
'$aleph_sat_ovars'(687,[]).
'$aleph_sat_ovars'(688,[]).
'$aleph_sat_ovars'(689,[]).
'$aleph_sat_ovars'(690,[]).
'$aleph_sat_ovars'(691,[]).
'$aleph_sat_ovars'(692,[]).
'$aleph_sat_ovars'(693,[]).
'$aleph_sat_ovars'(694,[]).
'$aleph_sat_ovars'(695,[]).
'$aleph_sat_ovars'(696,[]).
'$aleph_sat_ovars'(697,[]).
'$aleph_sat_ovars'(698,[]).
'$aleph_sat_ovars'(699,[]).
'$aleph_sat_ovars'(700,[]).
'$aleph_sat_ovars'(701,[]).
'$aleph_sat_ovars'(702,[]).
'$aleph_sat_ovars'(703,[]).
'$aleph_sat_ovars'(704,[]).
'$aleph_sat_ovars'(705,[]).
'$aleph_sat_ovars'(706,[]).
'$aleph_sat_ovars'(707,[]).
'$aleph_sat_ovars'(708,[]).
'$aleph_sat_ovars'(709,[]).
'$aleph_sat_ovars'(710,[]).
'$aleph_sat_ovars'(711,[]).
'$aleph_sat_ovars'(712,[]).
'$aleph_sat_ovars'(713,[]).
'$aleph_sat_ovars'(714,[]).
'$aleph_sat_ovars'(715,[]).
'$aleph_sat_ovars'(716,[]).
'$aleph_sat_ovars'(717,[]).
'$aleph_sat_ovars'(718,[138]).
'$aleph_sat_ovars'(719,[139]).
'$aleph_sat_ovars'(720,[140]).
'$aleph_sat_ovars'(721,[141]).
'$aleph_sat_ovars'(722,[142]).
'$aleph_sat_ovars'(723,[143]).
'$aleph_sat_ovars'(724,[144]).
'$aleph_sat_ovars'(725,[137]).
'$aleph_sat_ovars'(726,[145]).
'$aleph_sat_ovars'(727,[146]).
'$aleph_sat_ovars'(728,[147]).
'$aleph_sat_ovars'(729,[148]).
'$aleph_sat_ovars'(730,[149]).
'$aleph_sat_ovars'(731,[137]).
'$aleph_sat_ovars'(732,[]).
'$aleph_sat_ovars'(733,[]).
'$aleph_sat_ovars'(734,[]).
'$aleph_sat_ovars'(735,[159]).
'$aleph_sat_ovars'(736,[10]).
'$aleph_sat_ovars'(737,[29]).
'$aleph_sat_ovars'(738,[29]).
'$aleph_sat_ovars'(739,[29]).
'$aleph_sat_ovars'(740,[29]).
'$aleph_sat_ovars'(741,[29]).
'$aleph_sat_ovars'(742,[29]).
'$aleph_sat_ovars'(743,[29]).
'$aleph_sat_ovars'(744,[29]).
'$aleph_sat_ovars'(745,[29]).
'$aleph_sat_ovars'(746,[29]).
'$aleph_sat_ovars'(747,[29]).
'$aleph_sat_ovars'(748,[29]).
'$aleph_sat_ovars'(749,[151]).
'$aleph_sat_ovars'(750,[99]).
'$aleph_sat_ovars'(751,[43]).
'$aleph_sat_ovars'(752,[152]).
'$aleph_sat_ovars'(753,[151]).
'$aleph_sat_ovars'(754,[99]).
'$aleph_sat_ovars'(755,[36]).
'$aleph_sat_ovars'(756,[152]).
'$aleph_sat_ovars'(757,[]).
'$aleph_sat_ovars'(758,[]).
'$aleph_sat_ovars'(759,[]).
'$aleph_sat_ovars'(760,[]).
'$aleph_sat_ovars'(761,[]).
'$aleph_sat_ovars'(762,[]).
'$aleph_sat_ovars'(763,[]).
'$aleph_sat_ovars'(764,[]).
'$aleph_sat_ovars'(765,[]).
'$aleph_sat_ovars'(766,[]).
'$aleph_sat_ovars'(767,[]).
'$aleph_sat_ovars'(768,[]).
'$aleph_sat_ovars'(769,[]).
'$aleph_sat_ovars'(770,[]).
'$aleph_sat_ovars'(771,[]).
'$aleph_sat_ovars'(772,[]).
'$aleph_sat_ovars'(773,[]).
'$aleph_sat_ovars'(774,[]).
'$aleph_sat_ovars'(775,[]).
'$aleph_sat_ovars'(776,[]).
'$aleph_sat_ovars'(777,[]).
'$aleph_sat_ovars'(778,[]).
'$aleph_sat_ovars'(779,[]).
'$aleph_sat_ovars'(780,[]).
'$aleph_sat_ovars'(781,[]).
'$aleph_sat_ovars'(782,[]).
'$aleph_sat_ovars'(783,[]).
'$aleph_sat_ovars'(784,[]).
'$aleph_sat_ovars'(785,[]).
'$aleph_sat_ovars'(786,[]).
'$aleph_sat_ovars'(787,[]).
'$aleph_sat_ovars'(788,[]).
'$aleph_sat_ovars'(789,[]).
'$aleph_sat_ovars'(790,[]).
'$aleph_sat_ovars'(791,[]).
'$aleph_sat_ovars'(792,[]).
'$aleph_sat_ovars'(793,[]).
'$aleph_sat_ovars'(794,[]).
'$aleph_sat_ovars'(795,[]).
'$aleph_sat_ovars'(796,[]).
'$aleph_sat_ovars'(797,[]).
'$aleph_sat_ovars'(798,[]).
'$aleph_sat_ovars'(799,[]).
'$aleph_sat_ovars'(800,[]).
'$aleph_sat_ovars'(801,[]).
'$aleph_sat_ovars'(802,[]).
'$aleph_sat_ovars'(803,[]).
'$aleph_sat_ovars'(804,[]).
'$aleph_sat_ovars'(805,[]).
'$aleph_sat_ovars'(806,[]).
'$aleph_sat_ovars'(807,[]).
'$aleph_sat_ovars'(808,[]).
'$aleph_sat_ovars'(809,[]).
'$aleph_sat_ovars'(810,[]).
'$aleph_sat_ovars'(811,[]).
'$aleph_sat_ovars'(812,[]).
'$aleph_sat_ovars'(813,[]).
'$aleph_sat_ovars'(814,[]).
'$aleph_sat_ovars'(815,[]).
'$aleph_sat_ovars'(816,[]).
'$aleph_sat_ovars'(817,[]).
'$aleph_sat_ovars'(818,[]).
'$aleph_sat_ovars'(819,[]).
'$aleph_sat_ovars'(820,[]).
'$aleph_sat_ovars'(821,[]).
'$aleph_sat_ovars'(822,[]).
'$aleph_sat_ovars'(823,[]).
'$aleph_sat_ovars'(824,[]).
'$aleph_sat_ovars'(825,[]).
'$aleph_sat_ovars'(826,[]).
'$aleph_sat_ovars'(827,[]).
'$aleph_sat_ovars'(828,[]).
'$aleph_sat_ovars'(829,[]).
'$aleph_sat_ovars'(830,[]).
'$aleph_sat_ovars'(831,[]).
'$aleph_sat_ovars'(832,[]).
'$aleph_sat_ovars'(833,[]).
'$aleph_sat_ovars'(834,[]).
'$aleph_sat_ovars'(835,[]).
'$aleph_sat_ovars'(836,[]).
'$aleph_sat_ovars'(837,[]).
'$aleph_sat_ovars'(838,[]).
'$aleph_sat_ovars'(839,[]).
'$aleph_sat_ovars'(840,[]).
'$aleph_sat_ovars'(841,[]).
'$aleph_sat_ovars'(842,[]).
'$aleph_sat_ovars'(843,[]).
'$aleph_sat_ovars'(844,[]).
'$aleph_sat_ovars'(845,[]).
'$aleph_sat_ovars'(846,[]).
'$aleph_sat_ovars'(847,[]).
'$aleph_sat_ovars'(848,[]).
'$aleph_sat_ovars'(849,[]).
'$aleph_sat_ovars'(850,[]).
'$aleph_sat_ovars'(851,[]).
'$aleph_sat_ovars'(852,[]).
'$aleph_sat_ovars'(853,[]).
'$aleph_sat_ovars'(854,[]).
'$aleph_sat_ovars'(855,[]).
'$aleph_sat_ovars'(856,[]).
'$aleph_sat_ovars'(857,[]).
'$aleph_sat_ovars'(858,[]).
'$aleph_sat_ovars'(859,[]).
'$aleph_sat_ovars'(860,[]).
'$aleph_sat_ovars'(861,[]).
'$aleph_sat_ovars'(862,[]).
'$aleph_sat_ovars'(863,[]).
'$aleph_sat_ovars'(864,[]).
'$aleph_sat_ovars'(865,[]).
'$aleph_sat_ovars'(866,[]).
'$aleph_sat_ovars'(867,[]).
'$aleph_sat_ovars'(868,[]).
'$aleph_sat_ovars'(869,[]).
'$aleph_sat_ovars'(870,[]).
'$aleph_sat_ovars'(871,[]).
'$aleph_sat_ovars'(872,[]).
'$aleph_sat_ovars'(873,[]).
'$aleph_sat_ovars'(874,[]).
'$aleph_sat_ovars'(875,[]).
'$aleph_sat_ovars'(876,[]).
'$aleph_sat_ovars'(877,[]).
'$aleph_sat_ovars'(878,[]).
'$aleph_sat_ovars'(879,[]).
'$aleph_sat_ovars'(880,[]).
'$aleph_sat_ovars'(881,[]).
'$aleph_sat_ovars'(882,[]).
'$aleph_sat_ovars'(883,[]).
'$aleph_sat_ovars'(884,[]).
'$aleph_sat_ovars'(885,[]).
'$aleph_sat_ovars'(886,[]).
'$aleph_sat_ovars'(887,[]).
'$aleph_sat_ovars'(888,[]).
'$aleph_sat_ovars'(889,[]).
'$aleph_sat_ovars'(890,[]).
'$aleph_sat_ovars'(891,[]).
'$aleph_sat_ovars'(892,[]).
'$aleph_sat_ovars'(893,[]).
'$aleph_sat_ovars'(894,[]).
'$aleph_sat_ovars'(895,[]).
'$aleph_sat_ovars'(896,[]).
'$aleph_sat_ovars'(897,[]).
'$aleph_sat_ovars'(898,[]).
'$aleph_sat_ovars'(899,[]).
'$aleph_sat_ovars'(900,[]).
'$aleph_sat_ovars'(901,[]).
'$aleph_sat_ovars'(902,[]).
'$aleph_sat_ovars'(903,[]).
'$aleph_sat_ovars'(904,[]).
'$aleph_sat_ovars'(905,[]).
'$aleph_sat_ovars'(906,[]).
'$aleph_sat_ovars'(907,[]).
'$aleph_sat_ovars'(908,[]).
'$aleph_sat_ovars'(909,[]).
'$aleph_sat_ovars'(910,[]).
'$aleph_sat_ovars'(911,[]).
'$aleph_sat_ovars'(912,[]).
'$aleph_sat_ovars'(913,[]).
'$aleph_sat_ovars'(914,[]).
'$aleph_sat_ovars'(915,[]).
'$aleph_sat_ovars'(916,[]).
'$aleph_sat_ovars'(917,[]).
'$aleph_sat_ovars'(918,[]).
'$aleph_sat_ovars'(919,[]).
'$aleph_sat_ovars'(920,[]).
'$aleph_sat_ovars'(921,[]).
'$aleph_sat_ovars'(922,[101,7]).
'$aleph_sat_ovars'(923,[101,7]).
'$aleph_sat_ovars'(924,[104,12]).
'$aleph_sat_ovars'(925,[104,54]).
'$aleph_sat_ovars'(926,[60]).
'$aleph_sat_ovars'(927,[60]).
'$aleph_sat_ovars'(928,[]).
'$aleph_sat_ovars'(929,[]).
'$aleph_sat_ovars'(930,[116]).
'$aleph_sat_ovars'(931,[]).
'$aleph_sat_ovars'(932,[121]).
'$aleph_sat_ovars'(933,[102,7]).
'$aleph_sat_ovars'(934,[104,14]).
'$aleph_sat_ovars'(935,[104,12]).
'$aleph_sat_ovars'(936,[104,37]).
'$aleph_sat_ovars'(937,[109,41]).
'$aleph_sat_ovars'(938,[]).
'$aleph_sat_ovars'(939,[]).
'$aleph_sat_ovars'(940,[]).
'$aleph_sat_ovars'(941,[]).
'$aleph_sat_ovars'(942,[29]).
'$aleph_sat_ovars'(943,[29]).
'$aleph_sat_ovars'(944,[29]).
'$aleph_sat_ovars'(945,[29]).
'$aleph_sat_ovars'(946,[]).
'$aleph_sat_ovars'(947,[]).
'$aleph_sat_ovars'(948,[]).
'$aleph_sat_ovars'(949,[]).
'$aleph_sat_ovars'(950,[]).
'$aleph_sat_ovars'(951,[]).
'$aleph_sat_ovars'(952,[]).
'$aleph_sat_ovars'(953,[]).
'$aleph_sat_ovars'(954,[]).
'$aleph_sat_ovars'(955,[]).
'$aleph_sat_ovars'(956,[]).
'$aleph_sat_ovars'(957,[]).
'$aleph_sat_ovars'(958,[]).
'$aleph_sat_ovars'(959,[]).
'$aleph_sat_ovars'(960,[]).
'$aleph_sat_ovars'(961,[]).
'$aleph_sat_ovars'(962,[]).
'$aleph_sat_ovars'(963,[]).
'$aleph_sat_ovars'(964,[]).
'$aleph_sat_ovars'(965,[]).
'$aleph_sat_ovars'(966,[]).
'$aleph_sat_ovars'(967,[]).
'$aleph_sat_ovars'(968,[]).
'$aleph_sat_ovars'(969,[]).
'$aleph_sat_ovars'(970,[]).
'$aleph_sat_ovars'(971,[]).
'$aleph_sat_ovars'(972,[]).
'$aleph_sat_ovars'(973,[]).
'$aleph_sat_ovars'(974,[]).
'$aleph_sat_ovars'(975,[]).
'$aleph_sat_ovars'(976,[]).
'$aleph_sat_ovars'(977,[]).
'$aleph_sat_ovars'(978,[]).
'$aleph_sat_ovars'(979,[]).
'$aleph_sat_ovars'(980,[]).
'$aleph_sat_ovars'(981,[]).
'$aleph_sat_ovars'(982,[]).
'$aleph_sat_ovars'(983,[]).

:- dynamic '$aleph_sat_atom'/2.


:- dynamic '$aleph_local'/2.


:- dynamic '$aleph_good'/3.


:- dynamic '$aleph_feature'/2.



aleph_manual('http://www.comlab.ox.ac.uk/oucl/groups/machlearn/Aleph/index.html').


aleph_version_date('Sun Mar 11 03:25:37 UTC 2007').


aleph_version(5).


aleph_background_predicate(A) :-
   predicate_property(A,B),
   (
     B=static
   ;
     B= (dynamic)
   ;
     B=built_in
   ),
   !.


broadcast(_).


aleph_reconsult(A) :-
   reconsult(A).


aleph_consult(A) :-
   consult(A).


remove_alarm(_) :-
   alarm(0,_,_).


aleph_random(A) :-
   A is random.


discretize_outputs([],[],[],A,A).
discretize_outputs([-A|E],[D|F],[C|G],B,I) :-
   discretize(A,_,_),
   !,
   B=[c2c(A,C,D) |H],
   discretize_outputs(E,F,G,H,I).
discretize_outputs([_|B],[A|C],[A|D],E,F) :-
   discretize_outputs(B,C,D,E,F).


discr_rw_body([],A,A).
discr_rw_body([A|K],E,M) :-
   functor(A,B,C),
   functor(D,B,C),
   '$aleph_global'(modeb,modeb(_,D)),
   A=..[B|G],
   D=..[B|F],
   E=[I|H],
   discretize_outputs(F,G,J,H,L),
   I=..[B|J],
   discr_rw_body(K,L,M).


do_discretization_rewrite((A:-true),(A:-true)) :-
   !.
do_discretization_rewrite((A:-B),(A:-E)) :-
   goals_to_list(B,C),
   discr_rw_body(C,D,[]),
   list_to_goals(D,E).


discretization_rewrite(A,B) :-
   discretize(on),
   !,
   do_discretization_rewrite(A,B).
discretization_rewrite(A,A).


range2value([r(A,B,D) |_],C,A) :-
   B>=C,
   C<D,
   !.
range2value([_|A],B,C) :-
   range2value(A,B,C).


c2c(A,B,D) :-
   ground(A),
   ground(B),
   discretize(A,_,C),
   range2value(C,B,D),
   !.
c2c(_,A,A).


discretize_args([],[],[]).
discretize_args([+A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([-A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([#A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).


discretize_atom(A,B,F) :-
   A=..[C|E],
   B=..[C|D],
   discretize_args(D,E,G),
   F=..[C|G].

:- dynamic discretize/2.


:- dynamic discretize/1.

discretize(off).


sat(A,B) :-
   setting(construct_bottom,false),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   asserta(user:'$aleph_sat'(hovars,[])),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   setting(construct_bottom,reduction),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   integrate_head_lit(D),
   asserta(user:'$aleph_sat'(hovars,D)),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   set(stage,saturation),
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   split_args(C,E,F,D,G),
   integrate_args(unknown,C,D),
   stopwatch(Q),
   assertz(user:'$aleph_sat_atom'(C,mode(E,D,F,G))),
   '$aleph_global'(i,set(i,H)),
   flatten(0,H,0,O),
   '$aleph_sat_litinfo'(1,_,I,_,_,_),
   get_vars(I,D,J),
   asserta(user:'$aleph_sat'(hovars,J)),
   get_vars(I,F,K),
   asserta(user:'$aleph_sat'(hivars,K)),
   functor(C,L,M),
   get_determs(L/M,N),
   ( '$aleph_global'(determination,determination(L/M,(=)/2))
   ->
     asserta(user:'$aleph_sat'(eq,true))
   ;
     asserta(user:'$aleph_sat'(eq,false))
   ),
   get_atoms(N,1,H,O,R),
   stopwatch(P),
   Z is P-Q,
   asserta(user:'$aleph_sat'(lastlit,R)),
   asserta(user:'$aleph_sat'(botsize,R)),
   update_generators,
   rm_moderepeats(R,S),
   rm_commutative(R,U),
   rm_symmetric(R,V),
   rm_redundant(R,W),
   rm_uselesslits(R,T),
   rm_nreduce(R,X),
   Y is R-S-T-U-V-W-X,
   show(bottom),
   p1_message(literals),
   p_message(Y),
   p1_message('saturation time'),
   p_message(Z),
   sat_end_hook(A,B),
   broadcast(end(sat(B,Y,Z))),
   store(bottom),
   noset(stage).
sat(_,_) :-
   noset(stage).


pp_dclause(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dclause(A,true)
   ;
     pp_dclause(A,false)
   ).


p_message(A) :-
   write('['),
   write(A),
   write(']'),
   nl,
   flush_output.


list_to_goals([A],A) :-
   !.
list_to_goals([A|B],(A,C)) :-
   list_to_goals(B,C).

:- dynamic '$aleph_sat'/2.

'$aleph_sat'(botsize,983).
'$aleph_sat'(lastlit,983).
'$aleph_sat'(lastvar,159).
'$aleph_sat'(lastterm,159).
'$aleph_sat'(eq,false).
'$aleph_sat'(hivars,[1,2]).
'$aleph_sat'(hovars,[]).
'$aleph_sat'(example,example(1,pos)).
'$aleph_sat'(lastnlit,-1).


goals_to_list((true,A),B) :-
   !,
   goals_to_list(A,B).
goals_to_list((A,B),[A|C]) :-
   !,
   goals_to_list(B,C).
goals_to_list(true,[]) :-
   !.
goals_to_list(A,[A]).


evalfn(B,C) :-
   ( setting(evalfn,A)
   ->
     true
   ;
     A=coverage
   ),
   evalfn(A,B,C).


add_hyp(end_of_file) :-
   !.
add_hyp(A) :-
   nlits(A,F),
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   extract_pos(B,H),
   extract_neg(B,I),
   setting(evalfn,C),
   complete_label(C,A,[D,E,F],G),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(G,A,H,I))).


show(settings) :-
   nl,
   p_message(settings),
   prolog:findall(A-B,'$aleph_global'(A,set(A,B)),C),
   sort(C,D),
   aleph_member(E-F,D),
   tab(8),
   write(E=F),
   nl,
   fail.
show(determinations) :-
   nl,
   p_message(determinations),
   show_global(determination,determination(_,_)).
show(modes) :-
   nl,
   p_message(modes),
   show_global(mode,mode(_,_)).
show(modehs) :-
   nl,
   p_message(modehs),
   show_global(modeh,modeh(_,_)).
show(modebs) :-
   nl,
   p_message(modebs),
   show_global(modeb,modeb(_,_)).
show(sizes) :-
   nl,
   p_message(sizes),
   show_global(size,size(_,_)).
show(bottom) :-
   nl,
   p_message('bottom clause'),
   setting(verbosity,A),
   A>0,
   '$aleph_sat'(lastlit,B),
   get_clause(1,B,[],C),
   pp_dlist(C).
show(theory) :-
   nl,
   p_message(theory),
   nl,
   '$aleph_global'(rules,rules(A)),
   aleph_reverse(A,B),
   aleph_member(C,B),
   '$aleph_global'(theory,theory(C,_,_,_,_)),
   eval_rule(C,_),
   fail.
show(theory) :-
   get_performance.
show(pos) :-
   nl,
   p_message(positives),
   store(greedy),
   examples(pos,_),
   reinstate(greedy),
   fail.
show(posleft) :-
   nl,
   p_message('positives left'),
   example(_,pos,A),
   \+call(user:A),
   write(A),
   write('.'),
   nl,
   fail.
show(neg) :-
   nl,
   p_message(negatives),
   store(greedy),
   examples(neg,_),
   reinstate(greedy),
   fail.
show(rand) :-
   nl,
   p_message(random),
   examples(rand,_),
   fail.
show(uspec) :-
   nl,
   p_message(uspec),
   examples(uspec,_),
   fail.
show(gcws) :-
   nl,
   p_message('gcws hypothesis'),
   '$aleph_search'(gcwshyp,hypothesis(_,A,_,_)),
   pp_dclause(A),
   fail.
show(abgen) :-
   nl,
   p_message('abduced hypothesis'),
   '$aleph_search'(abgenhyp,hypothesis(_,A,_,_)),
   aleph_member(B,A),
   pp_dclause(B),
   fail.
show(hypothesis) :-
   setting(portray_hypothesis,A),
   aleph_portray(hypothesis,A),
   fail.
show(search) :-
   setting(portray_search,A),
   aleph_portray(search,A).
show(good) :-
   setting(good,true),
   nl,
   p_message('good clauses'),
   ( setting(minscore,A)
   ->
     true
   ;
     A is(-inf)
   ),
   setting(evalfn,E),
   '$aleph_good'(_,B,D),
   B=[_,_,_,C|_],
   C>=A,
   pp_dclause(D),
   show_stats(E,B),
   fail.
show(good) :-
   setting(good,true),
   setting(goodfile,A),
   aleph_open(A,read,C),
   ( setting(minscore,B)
   ->
     true
   ;
     B is(-inf)
   ),
   setting(evalfn,G),
   repeat,
   read(C,D),
   ( D='$aleph_good'(_,E,H)
   ->
     E=[_,_,_,F|_],
     F>=B,
     show_stats(G,E),
     pp_dclause(H),
     fail
   ;
     close(C),
     !
   ).
show(features) :-
   setting(evalfn,A),
   ( '$aleph_feature'(feature,_)
   ->
     true
   ;
     gen_features
   ),
   p_message('features from good clauses'),
   '$aleph_feature'(feature,feature(C,B,_,D,E)),
   show_stats(A,B),
   pp_dclause(feature(C,(D:-E))),
   fail.
show(constraints) :-
   setting(good,true),
   nl,
   p_message(constraints),
   setting(noise,A),
   E is-A,
   '$aleph_good'(_,C,B),
   split_clause(B,false,_),
   C=[_,_,_,D],
   D>=E,
   pp_dclause(B),
   show_stats(coverage,C),
   fail.
show(constraints) :-
   show(false/0).
show(A/B) :-
   functor(C,A,B),
   prolog:current_predicate(A,user:C),
   nl,
   p1_message(definition),
   p_message(A/B),
   prolog:clause(user:C,D),
   \+in(D,'$aleph_search'(pclause,pclause(_,_))),
   pp_dclause((C:-D)),
   fail.
show(train_pos) :-
   setting(portray_examples,A),
   aleph_portray(train_pos,A).
show(train_neg) :-
   setting(portray_examples,A),
   aleph_portray(train_neg,A).
show(test_pos) :-
   setting(portray_examples,A),
   aleph_portray(test_pos,A).
show(test_neg) :-
   setting(portray_examples,A),
   aleph_portray(test_neg,A).
show(_).


reduce :-
   setting(search,A),
   catch(doreduce(A),abort,reinstate_values),
   !.


sat(A) :-
   integer(A),
   example(A,pos,_),
   sat(pos,A),
   !.
sat(A) :-
   record_example(check,uspec,A,B),
   sat(uspec,B),
   !.


clean_up :-
   clean_up_init,
   clean_up_sat,
   clean_up_reduce.


get_performance :-
   setting(evalfn,A),
   (
     A=sd
   ;
     A=mse
   ),
   !.
get_performance :-
   ( setting(train_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(train_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Training set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Training set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance :-
   ( setting(test_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(test_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Test set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Test set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance.


example(0,uspec,false).
example(1,pos,advisedby(person309_1,person378_1)).
example(2,pos,advisedby(person141_1,person331_1)).
example(3,pos,advisedby(person288_1,person165_1)).
example(4,pos,advisedby(person159_1,person201_1)).
example(5,pos,advisedby(person159_1,person57_1)).
example(6,pos,advisedby(person226_1,person324_1)).
example(7,pos,advisedby(person242_1,person29_1)).
example(8,pos,advisedby(person242_1,person165_1)).
example(9,pos,advisedby(person348_1,person324_1)).
example(10,pos,advisedby(person6_1,person29_1)).
example(11,pos,advisedby(person6_1,person165_1)).
example(12,pos,advisedby(person75_1,person331_1)).
example(13,pos,advisedby(person303_1,person165_1)).
example(14,pos,advisedby(person303_1,person29_1)).
example(15,pos,advisedby(person249_1,person331_1)).
example(16,pos,advisedby(person68_1,person201_1)).
example(17,pos,advisedby(person265_1,person168_1)).
example(18,pos,advisedby(person381_1,person168_1)).
example(19,pos,advisedby(person176_1,person407_1)).
example(20,pos,advisedby(person272_1,person7_1)).
example(21,pos,advisedby(person37_1,person79_1)).
example(22,pos,advisedby(person353_1,person319_1)).
example(23,pos,advisedby(person432_1,person240_1)).
example(24,pos,advisedby(person239_1,person171_1)).
example(25,pos,advisedby(person13_1,person240_1)).
example(26,pos,advisedby(person286_1,person171_1)).
example(27,pos,advisedby(person418_1,person171_1)).
example(28,pos,advisedby(person14_1,person150_1)).
example(29,pos,advisedby(person320_1,person150_1)).
example(30,pos,advisedby(person352_1,person415_1)).
example(31,pos,advisedby(person352_1,person292_1)).
example(32,pos,advisedby(person276_1,person407_1)).
example(33,pos,advisedby(person45_1,person415_1)).
example(34,pos,advisedby(person45_1,person211_1)).
example(35,pos,advisedby(person148_1,person171_1)).
example(36,pos,advisedby(person314_1,person415_1)).
example(37,pos,advisedby(person275_1,person79_1)).
example(38,pos,advisedby(person21_1,person211_1)).
example(39,pos,advisedby(person262_1,person415_1)).
example(40,pos,advisedby(person262_1,person292_1)).
example(41,pos,advisedby(person257_1,person240_1)).
example(42,pos,advisedby(person380_1,person79_1)).
example(43,pos,advisedby(person384_1,person240_1)).
example(44,pos,advisedby(person384_1,person407_1)).
example(45,pos,advisedby(person266_1,person7_1)).
example(46,pos,advisedby(person312_1,person319_1)).
example(47,pos,advisedby(person208_1,person319_1)).
example(48,pos,advisedby(person63_1,person415_1)).
example(49,pos,advisedby(person318_1,person185_1)).
example(50,pos,advisedby(person318_1,person319_1)).
example(51,pos,advisedby(person83_1,person349_1)).
example(52,pos,advisedby(person217_1,person342_1)).
example(53,pos,advisedby(person217_1,person72_1)).
example(54,pos,advisedby(person206_1,person342_1)).
example(55,pos,advisedby(person206_1,person72_1)).
example(56,pos,advisedby(person81_1,person342_1)).
example(57,pos,advisedby(person81_1,person393_1)).
example(58,pos,advisedby(person122_1,person72_1)).
example(59,pos,advisedby(person228_1,person342_1)).
example(60,pos,advisedby(person228_1,person393_1)).
example(61,pos,advisedby(person228_1,person394_1)).
example(62,pos,advisedby(person41_1,person394_1)).
example(63,pos,advisedby(person163_1,person393_1)).
example(64,pos,advisedby(person435_1,person279_1)).
example(65,pos,advisedby(person404_1,person72_1)).
example(66,pos,advisedby(person142_1,person342_1)).
example(67,pos,advisedby(person300_1,person342_1)).
example(68,pos,advisedby(person200_1,person72_1)).
example(69,pos,advisedby(person157_1,person72_1)).
example(70,pos,advisedby(person113_1,person394_1)).
example(71,pos,advisedby(person113_1,person342_1)).
example(72,pos,advisedby(person18_1,person335_1)).
example(73,pos,advisedby(person9_1,person335_1)).
example(74,pos,advisedby(person429_1,person335_1)).
example(75,pos,advisedby(person362_1,person5_1)).
example(76,pos,advisedby(person362_1,person335_1)).
example(77,pos,advisedby(person96_1,person5_1)).
example(78,pos,advisedby(person263_1,person5_1)).
example(79,pos,advisedby(person183_1,person5_1)).
example(80,pos,advisedby(person118_1,person5_1)).
example(1,neg,advisedby(person191_1,person378_1)).
example(2,neg,advisedby(person397_1,person378_1)).
example(3,neg,advisedby(person138_1,person378_1)).
example(4,neg,advisedby(person303_1,person378_1)).
example(5,neg,advisedby(person77_1,person378_1)).
example(6,neg,advisedby(person141_1,person378_1)).
example(7,neg,advisedby(person383_1,person378_1)).
example(8,neg,advisedby(person422_1,person378_1)).
example(9,neg,advisedby(person390_1,person378_1)).
example(10,neg,advisedby(person288_1,person378_1)).
example(11,neg,advisedby(person159_1,person378_1)).
example(12,neg,advisedby(person172_1,person378_1)).
example(13,neg,advisedby(person226_1,person378_1)).
example(14,neg,advisedby(person242_1,person378_1)).
example(15,neg,advisedby(person416_1,person378_1)).
example(16,neg,advisedby(person348_1,person378_1)).
example(17,neg,advisedby(person278_1,person378_1)).
example(18,neg,advisedby(person6_1,person378_1)).
example(19,neg,advisedby(person75_1,person378_1)).
example(20,neg,advisedby(person249_1,person378_1)).
example(21,neg,advisedby(person68_1,person378_1)).
example(22,neg,advisedby(person205_1,person378_1)).
example(23,neg,advisedby(person182_1,person378_1)).
example(24,neg,advisedby(person23_1,person378_1)).
example(25,neg,advisedby(person310_1,person378_1)).
example(26,neg,advisedby(person424_1,person378_1)).
example(27,neg,advisedby(person401_1,person378_1)).
example(28,neg,advisedby(person237_1,person378_1)).
example(29,neg,advisedby(person58_1,person378_1)).
example(30,neg,advisedby(person144_1,person378_1)).
example(31,neg,advisedby(person125_1,person378_1)).
example(32,neg,advisedby(person350_1,person378_1)).
example(33,neg,advisedby(person356_1,person378_1)).
example(34,neg,advisedby(person294_1,person378_1)).
example(35,neg,advisedby(person315_1,person378_1)).
example(36,neg,advisedby(person191_1,person298_1)).
example(37,neg,advisedby(person397_1,person298_1)).
example(38,neg,advisedby(person138_1,person298_1)).
example(39,neg,advisedby(person303_1,person298_1)).
example(40,neg,advisedby(person77_1,person298_1)).
example(41,neg,advisedby(person141_1,person298_1)).
example(42,neg,advisedby(person309_1,person298_1)).
example(43,neg,advisedby(person383_1,person298_1)).
example(44,neg,advisedby(person422_1,person298_1)).
example(45,neg,advisedby(person390_1,person298_1)).
example(46,neg,advisedby(person288_1,person298_1)).
example(47,neg,advisedby(person159_1,person298_1)).
example(48,neg,advisedby(person172_1,person298_1)).
example(49,neg,advisedby(person226_1,person298_1)).
example(50,neg,advisedby(person242_1,person298_1)).
example(51,neg,advisedby(person416_1,person298_1)).
example(52,neg,advisedby(person348_1,person298_1)).
example(53,neg,advisedby(person278_1,person298_1)).
example(54,neg,advisedby(person6_1,person298_1)).
example(55,neg,advisedby(person75_1,person298_1)).
example(56,neg,advisedby(person249_1,person298_1)).
example(57,neg,advisedby(person68_1,person298_1)).
example(58,neg,advisedby(person205_1,person298_1)).
example(59,neg,advisedby(person182_1,person298_1)).
example(60,neg,advisedby(person23_1,person298_1)).
example(61,neg,advisedby(person310_1,person298_1)).
example(62,neg,advisedby(person424_1,person298_1)).
example(63,neg,advisedby(person401_1,person298_1)).
example(64,neg,advisedby(person237_1,person298_1)).
example(65,neg,advisedby(person58_1,person298_1)).
example(66,neg,advisedby(person144_1,person298_1)).
example(67,neg,advisedby(person125_1,person298_1)).
example(68,neg,advisedby(person350_1,person298_1)).
example(69,neg,advisedby(person356_1,person298_1)).
example(70,neg,advisedby(person294_1,person298_1)).
example(71,neg,advisedby(person315_1,person298_1)).
example(72,neg,advisedby(person191_1,person52_1)).
example(73,neg,advisedby(person397_1,person52_1)).
example(74,neg,advisedby(person138_1,person52_1)).
example(75,neg,advisedby(person303_1,person52_1)).
example(76,neg,advisedby(person77_1,person52_1)).
example(77,neg,advisedby(person141_1,person52_1)).
example(78,neg,advisedby(person309_1,person52_1)).
example(79,neg,advisedby(person383_1,person52_1)).
example(80,neg,advisedby(person422_1,person52_1)).
example(81,neg,advisedby(person390_1,person52_1)).
example(82,neg,advisedby(person288_1,person52_1)).
example(83,neg,advisedby(person159_1,person52_1)).
example(84,neg,advisedby(person172_1,person52_1)).
example(85,neg,advisedby(person226_1,person52_1)).
example(86,neg,advisedby(person242_1,person52_1)).
example(87,neg,advisedby(person416_1,person52_1)).
example(88,neg,advisedby(person348_1,person52_1)).
example(89,neg,advisedby(person278_1,person52_1)).
example(90,neg,advisedby(person6_1,person52_1)).
example(91,neg,advisedby(person75_1,person52_1)).
example(92,neg,advisedby(person249_1,person52_1)).
example(93,neg,advisedby(person68_1,person52_1)).
example(94,neg,advisedby(person205_1,person52_1)).
example(95,neg,advisedby(person182_1,person52_1)).
example(96,neg,advisedby(person23_1,person52_1)).
example(97,neg,advisedby(person310_1,person52_1)).
example(98,neg,advisedby(person424_1,person52_1)).
example(99,neg,advisedby(person401_1,person52_1)).
example(100,neg,advisedby(person237_1,person52_1)).
example(101,neg,advisedby(person58_1,person52_1)).
example(102,neg,advisedby(person144_1,person52_1)).
example(103,neg,advisedby(person125_1,person52_1)).
example(104,neg,advisedby(person350_1,person52_1)).
example(105,neg,advisedby(person356_1,person52_1)).
example(106,neg,advisedby(person294_1,person52_1)).
example(107,neg,advisedby(person315_1,person52_1)).
example(108,neg,advisedby(person191_1,person57_1)).
example(109,neg,advisedby(person397_1,person57_1)).
example(110,neg,advisedby(person138_1,person57_1)).
example(111,neg,advisedby(person303_1,person57_1)).
example(112,neg,advisedby(person77_1,person57_1)).
example(113,neg,advisedby(person141_1,person57_1)).
example(114,neg,advisedby(person309_1,person57_1)).
example(115,neg,advisedby(person383_1,person57_1)).
example(116,neg,advisedby(person422_1,person57_1)).
example(117,neg,advisedby(person390_1,person57_1)).
example(118,neg,advisedby(person288_1,person57_1)).
example(119,neg,advisedby(person172_1,person57_1)).
example(120,neg,advisedby(person226_1,person57_1)).
example(121,neg,advisedby(person242_1,person57_1)).
example(122,neg,advisedby(person416_1,person57_1)).
example(123,neg,advisedby(person348_1,person57_1)).
example(124,neg,advisedby(person278_1,person57_1)).
example(125,neg,advisedby(person6_1,person57_1)).
example(126,neg,advisedby(person75_1,person57_1)).
example(127,neg,advisedby(person249_1,person57_1)).
example(128,neg,advisedby(person68_1,person57_1)).
example(129,neg,advisedby(person205_1,person57_1)).
example(130,neg,advisedby(person182_1,person57_1)).
example(131,neg,advisedby(person23_1,person57_1)).
example(132,neg,advisedby(person310_1,person57_1)).
example(133,neg,advisedby(person424_1,person57_1)).
example(134,neg,advisedby(person401_1,person57_1)).
example(135,neg,advisedby(person237_1,person57_1)).
example(136,neg,advisedby(person58_1,person57_1)).
example(137,neg,advisedby(person144_1,person57_1)).
example(138,neg,advisedby(person125_1,person57_1)).
example(139,neg,advisedby(person350_1,person57_1)).
example(140,neg,advisedby(person356_1,person57_1)).
example(141,neg,advisedby(person294_1,person57_1)).
example(142,neg,advisedby(person315_1,person57_1)).
example(143,neg,advisedby(person191_1,person231_1)).
example(144,neg,advisedby(person397_1,person231_1)).
example(145,neg,advisedby(person138_1,person231_1)).
example(146,neg,advisedby(person303_1,person231_1)).
example(147,neg,advisedby(person77_1,person231_1)).
example(148,neg,advisedby(person141_1,person231_1)).
example(149,neg,advisedby(person309_1,person231_1)).
example(150,neg,advisedby(person383_1,person231_1)).
example(151,neg,advisedby(person422_1,person231_1)).
example(152,neg,advisedby(person390_1,person231_1)).
example(153,neg,advisedby(person288_1,person231_1)).
example(154,neg,advisedby(person159_1,person231_1)).
example(155,neg,advisedby(person172_1,person231_1)).
example(156,neg,advisedby(person226_1,person231_1)).
example(157,neg,advisedby(person242_1,person231_1)).
example(158,neg,advisedby(person416_1,person231_1)).
example(159,neg,advisedby(person348_1,person231_1)).
example(160,neg,advisedby(person278_1,person231_1)).
example(161,neg,advisedby(person6_1,person231_1)).
example(162,neg,advisedby(person75_1,person231_1)).
example(163,neg,advisedby(person249_1,person231_1)).
example(164,neg,advisedby(person68_1,person231_1)).
example(165,neg,advisedby(person205_1,person231_1)).
example(166,neg,advisedby(person182_1,person231_1)).
example(167,neg,advisedby(person23_1,person231_1)).
example(168,neg,advisedby(person310_1,person231_1)).
example(169,neg,advisedby(person424_1,person231_1)).
example(170,neg,advisedby(person401_1,person231_1)).
example(171,neg,advisedby(person237_1,person231_1)).
example(172,neg,advisedby(person58_1,person231_1)).
example(173,neg,advisedby(person144_1,person231_1)).
example(174,neg,advisedby(person125_1,person231_1)).
example(175,neg,advisedby(person350_1,person231_1)).
example(176,neg,advisedby(person356_1,person231_1)).
example(177,neg,advisedby(person294_1,person231_1)).
example(178,neg,advisedby(person315_1,person231_1)).
example(179,neg,advisedby(person191_1,person181_1)).
example(180,neg,advisedby(person397_1,person181_1)).
example(181,neg,advisedby(person138_1,person181_1)).
example(182,neg,advisedby(person303_1,person181_1)).
example(183,neg,advisedby(person77_1,person181_1)).
example(184,neg,advisedby(person141_1,person181_1)).
example(185,neg,advisedby(person309_1,person181_1)).
example(186,neg,advisedby(person383_1,person181_1)).
example(187,neg,advisedby(person422_1,person181_1)).
example(188,neg,advisedby(person390_1,person181_1)).
example(189,neg,advisedby(person288_1,person181_1)).
example(190,neg,advisedby(person159_1,person181_1)).
example(191,neg,advisedby(person172_1,person181_1)).
example(192,neg,advisedby(person226_1,person181_1)).
example(193,neg,advisedby(person242_1,person181_1)).
example(194,neg,advisedby(person416_1,person181_1)).
example(195,neg,advisedby(person348_1,person181_1)).
example(196,neg,advisedby(person278_1,person181_1)).
example(197,neg,advisedby(person6_1,person181_1)).
example(198,neg,advisedby(person75_1,person181_1)).
example(199,neg,advisedby(person249_1,person181_1)).
example(200,neg,advisedby(person68_1,person181_1)).
example(201,neg,advisedby(person205_1,person181_1)).
example(202,neg,advisedby(person182_1,person181_1)).
example(203,neg,advisedby(person23_1,person181_1)).
example(204,neg,advisedby(person310_1,person181_1)).
example(205,neg,advisedby(person424_1,person181_1)).
example(206,neg,advisedby(person401_1,person181_1)).
example(207,neg,advisedby(person237_1,person181_1)).
example(208,neg,advisedby(person58_1,person181_1)).
example(209,neg,advisedby(person144_1,person181_1)).
example(210,neg,advisedby(person125_1,person181_1)).
example(211,neg,advisedby(person350_1,person181_1)).
example(212,neg,advisedby(person356_1,person181_1)).
example(213,neg,advisedby(person294_1,person181_1)).
example(214,neg,advisedby(person315_1,person181_1)).
example(215,neg,advisedby(person191_1,person364_1)).
example(216,neg,advisedby(person397_1,person364_1)).
example(217,neg,advisedby(person138_1,person364_1)).
example(218,neg,advisedby(person303_1,person364_1)).
example(219,neg,advisedby(person77_1,person364_1)).
example(220,neg,advisedby(person141_1,person364_1)).
example(221,neg,advisedby(person309_1,person364_1)).
example(222,neg,advisedby(person383_1,person364_1)).
example(223,neg,advisedby(person422_1,person364_1)).
example(224,neg,advisedby(person390_1,person364_1)).
example(225,neg,advisedby(person288_1,person364_1)).
example(226,neg,advisedby(person159_1,person364_1)).
example(227,neg,advisedby(person172_1,person364_1)).
example(228,neg,advisedby(person226_1,person364_1)).
example(229,neg,advisedby(person242_1,person364_1)).
example(230,neg,advisedby(person416_1,person364_1)).
example(231,neg,advisedby(person348_1,person364_1)).
example(232,neg,advisedby(person278_1,person364_1)).
example(233,neg,advisedby(person6_1,person364_1)).
example(234,neg,advisedby(person75_1,person364_1)).
example(235,neg,advisedby(person249_1,person364_1)).
example(236,neg,advisedby(person68_1,person364_1)).
example(237,neg,advisedby(person205_1,person364_1)).
example(238,neg,advisedby(person182_1,person364_1)).
example(239,neg,advisedby(person23_1,person364_1)).
example(240,neg,advisedby(person310_1,person364_1)).
example(241,neg,advisedby(person424_1,person364_1)).
example(242,neg,advisedby(person401_1,person364_1)).
example(243,neg,advisedby(person237_1,person364_1)).
example(244,neg,advisedby(person58_1,person364_1)).
example(245,neg,advisedby(person144_1,person364_1)).
example(246,neg,advisedby(person125_1,person364_1)).
example(247,neg,advisedby(person350_1,person364_1)).
example(248,neg,advisedby(person356_1,person364_1)).
example(249,neg,advisedby(person294_1,person364_1)).
example(250,neg,advisedby(person315_1,person364_1)).
example(251,neg,advisedby(person191_1,person331_1)).
example(252,neg,advisedby(person397_1,person331_1)).
example(253,neg,advisedby(person138_1,person331_1)).
example(254,neg,advisedby(person303_1,person331_1)).
example(255,neg,advisedby(person77_1,person331_1)).
example(256,neg,advisedby(person309_1,person331_1)).
example(257,neg,advisedby(person383_1,person331_1)).
example(258,neg,advisedby(person422_1,person331_1)).
example(259,neg,advisedby(person390_1,person331_1)).
example(260,neg,advisedby(person288_1,person331_1)).
example(261,neg,advisedby(person159_1,person331_1)).
example(262,neg,advisedby(person172_1,person331_1)).
example(263,neg,advisedby(person226_1,person331_1)).
example(264,neg,advisedby(person242_1,person331_1)).
example(265,neg,advisedby(person416_1,person331_1)).
example(266,neg,advisedby(person348_1,person331_1)).
example(267,neg,advisedby(person278_1,person331_1)).
example(268,neg,advisedby(person6_1,person331_1)).
example(269,neg,advisedby(person68_1,person331_1)).
example(270,neg,advisedby(person205_1,person331_1)).
example(271,neg,advisedby(person182_1,person331_1)).
example(272,neg,advisedby(person23_1,person331_1)).
example(273,neg,advisedby(person310_1,person331_1)).
example(274,neg,advisedby(person424_1,person331_1)).
example(275,neg,advisedby(person401_1,person331_1)).
example(276,neg,advisedby(person237_1,person331_1)).
example(277,neg,advisedby(person58_1,person331_1)).
example(278,neg,advisedby(person144_1,person331_1)).
example(279,neg,advisedby(person125_1,person331_1)).
example(280,neg,advisedby(person350_1,person331_1)).
example(281,neg,advisedby(person356_1,person331_1)).
example(282,neg,advisedby(person294_1,person331_1)).
example(283,neg,advisedby(person315_1,person331_1)).
example(284,neg,advisedby(person191_1,person103_1)).
example(285,neg,advisedby(person397_1,person103_1)).
example(286,neg,advisedby(person138_1,person103_1)).
example(287,neg,advisedby(person303_1,person103_1)).
example(288,neg,advisedby(person77_1,person103_1)).
example(289,neg,advisedby(person141_1,person103_1)).
example(290,neg,advisedby(person309_1,person103_1)).
example(291,neg,advisedby(person383_1,person103_1)).
example(292,neg,advisedby(person422_1,person103_1)).
example(293,neg,advisedby(person390_1,person103_1)).
example(294,neg,advisedby(person288_1,person103_1)).
example(295,neg,advisedby(person159_1,person103_1)).
example(296,neg,advisedby(person172_1,person103_1)).
example(297,neg,advisedby(person226_1,person103_1)).
example(298,neg,advisedby(person242_1,person103_1)).
example(299,neg,advisedby(person416_1,person103_1)).
example(300,neg,advisedby(person348_1,person103_1)).
example(301,neg,advisedby(person278_1,person103_1)).
example(302,neg,advisedby(person6_1,person103_1)).
example(303,neg,advisedby(person75_1,person103_1)).
example(304,neg,advisedby(person249_1,person103_1)).
example(305,neg,advisedby(person68_1,person103_1)).
example(306,neg,advisedby(person205_1,person103_1)).
example(307,neg,advisedby(person182_1,person103_1)).
example(308,neg,advisedby(person23_1,person103_1)).
example(309,neg,advisedby(person310_1,person103_1)).
example(310,neg,advisedby(person424_1,person103_1)).
example(311,neg,advisedby(person401_1,person103_1)).
example(312,neg,advisedby(person237_1,person103_1)).
example(313,neg,advisedby(person58_1,person103_1)).
example(314,neg,advisedby(person144_1,person103_1)).
example(315,neg,advisedby(person125_1,person103_1)).
example(316,neg,advisedby(person350_1,person103_1)).
example(317,neg,advisedby(person356_1,person103_1)).
example(318,neg,advisedby(person294_1,person103_1)).
example(319,neg,advisedby(person315_1,person103_1)).
example(320,neg,advisedby(person191_1,person165_1)).
example(321,neg,advisedby(person397_1,person165_1)).
example(322,neg,advisedby(person138_1,person165_1)).
example(323,neg,advisedby(person77_1,person165_1)).
example(324,neg,advisedby(person141_1,person165_1)).
example(325,neg,advisedby(person309_1,person165_1)).
example(326,neg,advisedby(person383_1,person165_1)).
example(327,neg,advisedby(person422_1,person165_1)).
example(328,neg,advisedby(person390_1,person165_1)).
example(329,neg,advisedby(person159_1,person165_1)).
example(330,neg,advisedby(person172_1,person165_1)).
example(331,neg,advisedby(person226_1,person165_1)).
example(332,neg,advisedby(person416_1,person165_1)).
example(333,neg,advisedby(person348_1,person165_1)).
example(334,neg,advisedby(person278_1,person165_1)).
example(335,neg,advisedby(person75_1,person165_1)).
example(336,neg,advisedby(person249_1,person165_1)).
example(337,neg,advisedby(person68_1,person165_1)).
example(338,neg,advisedby(person205_1,person165_1)).
example(339,neg,advisedby(person182_1,person165_1)).
example(340,neg,advisedby(person23_1,person165_1)).
example(341,neg,advisedby(person310_1,person165_1)).
example(342,neg,advisedby(person424_1,person165_1)).
example(343,neg,advisedby(person401_1,person165_1)).
example(344,neg,advisedby(person237_1,person165_1)).
example(345,neg,advisedby(person58_1,person165_1)).
example(346,neg,advisedby(person144_1,person165_1)).
example(347,neg,advisedby(person125_1,person165_1)).
example(348,neg,advisedby(person350_1,person165_1)).
example(349,neg,advisedby(person356_1,person165_1)).
example(350,neg,advisedby(person294_1,person165_1)).
example(351,neg,advisedby(person315_1,person165_1)).
example(352,neg,advisedby(person191_1,person29_1)).
example(353,neg,advisedby(person397_1,person29_1)).
example(354,neg,advisedby(person138_1,person29_1)).
example(355,neg,advisedby(person77_1,person29_1)).
example(356,neg,advisedby(person141_1,person29_1)).
example(357,neg,advisedby(person309_1,person29_1)).
example(358,neg,advisedby(person383_1,person29_1)).
example(359,neg,advisedby(person422_1,person29_1)).
example(360,neg,advisedby(person390_1,person29_1)).
example(361,neg,advisedby(person288_1,person29_1)).
example(362,neg,advisedby(person159_1,person29_1)).
example(363,neg,advisedby(person172_1,person29_1)).
example(364,neg,advisedby(person226_1,person29_1)).
example(365,neg,advisedby(person416_1,person29_1)).
example(366,neg,advisedby(person348_1,person29_1)).
example(367,neg,advisedby(person278_1,person29_1)).
example(368,neg,advisedby(person75_1,person29_1)).
example(369,neg,advisedby(person249_1,person29_1)).
example(370,neg,advisedby(person68_1,person29_1)).
example(371,neg,advisedby(person205_1,person29_1)).
example(372,neg,advisedby(person182_1,person29_1)).
example(373,neg,advisedby(person23_1,person29_1)).
example(374,neg,advisedby(person310_1,person29_1)).
example(375,neg,advisedby(person424_1,person29_1)).
example(376,neg,advisedby(person401_1,person29_1)).
example(377,neg,advisedby(person237_1,person29_1)).
example(378,neg,advisedby(person58_1,person29_1)).
example(379,neg,advisedby(person144_1,person29_1)).
example(380,neg,advisedby(person125_1,person29_1)).
example(381,neg,advisedby(person350_1,person29_1)).
example(382,neg,advisedby(person356_1,person29_1)).
example(383,neg,advisedby(person294_1,person29_1)).
example(384,neg,advisedby(person315_1,person29_1)).
example(385,neg,advisedby(person191_1,person201_1)).
example(386,neg,advisedby(person397_1,person201_1)).
example(387,neg,advisedby(person138_1,person201_1)).
example(388,neg,advisedby(person303_1,person201_1)).
example(389,neg,advisedby(person77_1,person201_1)).
example(390,neg,advisedby(person141_1,person201_1)).
example(391,neg,advisedby(person309_1,person201_1)).
example(392,neg,advisedby(person383_1,person201_1)).
example(393,neg,advisedby(person422_1,person201_1)).
example(394,neg,advisedby(person390_1,person201_1)).
example(395,neg,advisedby(person288_1,person201_1)).
example(396,neg,advisedby(person172_1,person201_1)).
example(397,neg,advisedby(person226_1,person201_1)).
example(398,neg,advisedby(person242_1,person201_1)).
example(399,neg,advisedby(person416_1,person201_1)).
example(400,neg,advisedby(person348_1,person201_1)).
example(401,neg,advisedby(person278_1,person201_1)).
example(402,neg,advisedby(person6_1,person201_1)).
example(403,neg,advisedby(person75_1,person201_1)).
example(404,neg,advisedby(person249_1,person201_1)).
example(405,neg,advisedby(person205_1,person201_1)).
example(406,neg,advisedby(person182_1,person201_1)).
example(407,neg,advisedby(person23_1,person201_1)).
example(408,neg,advisedby(person310_1,person201_1)).
example(409,neg,advisedby(person424_1,person201_1)).
example(410,neg,advisedby(person401_1,person201_1)).
example(411,neg,advisedby(person237_1,person201_1)).
example(412,neg,advisedby(person58_1,person201_1)).
example(413,neg,advisedby(person144_1,person201_1)).
example(414,neg,advisedby(person125_1,person201_1)).
example(415,neg,advisedby(person350_1,person201_1)).
example(416,neg,advisedby(person356_1,person201_1)).
example(417,neg,advisedby(person294_1,person201_1)).
example(418,neg,advisedby(person315_1,person201_1)).
example(419,neg,advisedby(person191_1,person324_1)).
example(420,neg,advisedby(person397_1,person324_1)).
example(421,neg,advisedby(person138_1,person324_1)).
example(422,neg,advisedby(person303_1,person324_1)).
example(423,neg,advisedby(person77_1,person324_1)).
example(424,neg,advisedby(person141_1,person324_1)).
example(425,neg,advisedby(person309_1,person324_1)).
example(426,neg,advisedby(person383_1,person324_1)).
example(427,neg,advisedby(person422_1,person324_1)).
example(428,neg,advisedby(person390_1,person324_1)).
example(429,neg,advisedby(person288_1,person324_1)).
example(430,neg,advisedby(person159_1,person324_1)).
example(431,neg,advisedby(person172_1,person324_1)).
example(432,neg,advisedby(person242_1,person324_1)).
example(433,neg,advisedby(person416_1,person324_1)).
example(434,neg,advisedby(person278_1,person324_1)).
example(435,neg,advisedby(person6_1,person324_1)).
example(436,neg,advisedby(person75_1,person324_1)).
example(437,neg,advisedby(person249_1,person324_1)).
example(438,neg,advisedby(person68_1,person324_1)).
example(439,neg,advisedby(person205_1,person324_1)).
example(440,neg,advisedby(person182_1,person324_1)).
example(441,neg,advisedby(person23_1,person324_1)).
example(442,neg,advisedby(person310_1,person324_1)).
example(443,neg,advisedby(person424_1,person324_1)).
example(444,neg,advisedby(person401_1,person324_1)).
example(445,neg,advisedby(person237_1,person324_1)).
example(446,neg,advisedby(person58_1,person324_1)).
example(447,neg,advisedby(person144_1,person324_1)).
example(448,neg,advisedby(person125_1,person324_1)).
example(449,neg,advisedby(person350_1,person324_1)).
example(450,neg,advisedby(person356_1,person324_1)).
example(451,neg,advisedby(person294_1,person324_1)).
example(452,neg,advisedby(person315_1,person324_1)).
example(453,neg,advisedby(person284_1,person319_1)).
example(454,neg,advisedby(person311_1,person319_1)).
example(455,neg,advisedby(person14_1,person319_1)).
example(456,neg,advisedby(person275_1,person319_1)).
example(457,neg,advisedby(person259_1,person319_1)).
example(458,neg,advisedby(person139_1,person319_1)).
example(459,neg,advisedby(person176_1,person319_1)).
example(460,neg,advisedby(person400_1,person319_1)).
example(461,neg,advisedby(person161_1,person319_1)).
example(462,neg,advisedby(person347_1,person319_1)).
example(463,neg,advisedby(person408_1,person319_1)).
example(464,neg,advisedby(person265_1,person319_1)).
example(465,neg,advisedby(person70_1,person319_1)).
example(466,neg,advisedby(person381_1,person319_1)).
example(467,neg,advisedby(person382_1,person319_1)).
example(468,neg,advisedby(person333_1,person319_1)).
example(469,neg,advisedby(person94_1,person319_1)).
example(470,neg,advisedby(person272_1,person319_1)).
example(471,neg,advisedby(person37_1,person319_1)).
example(472,neg,advisedby(person432_1,person319_1)).
example(473,neg,advisedby(person377_1,person319_1)).
example(474,neg,advisedby(person239_1,person319_1)).
example(475,neg,advisedby(person13_1,person319_1)).
example(476,neg,advisedby(person286_1,person319_1)).
example(477,neg,advisedby(person412_1,person319_1)).
example(478,neg,advisedby(person418_1,person319_1)).
example(479,neg,advisedby(person320_1,person319_1)).
example(480,neg,advisedby(person42_1,person319_1)).
example(481,neg,advisedby(person20_1,person319_1)).
example(482,neg,advisedby(person352_1,person319_1)).
example(483,neg,advisedby(person276_1,person319_1)).
example(484,neg,advisedby(person45_1,person319_1)).
example(485,neg,advisedby(person233_1,person319_1)).
example(486,neg,advisedby(person148_1,person319_1)).
example(487,neg,advisedby(person193_1,person319_1)).
example(488,neg,advisedby(person314_1,person319_1)).
example(489,neg,advisedby(person21_1,person319_1)).
example(490,neg,advisedby(person262_1,person319_1)).
example(491,neg,advisedby(person257_1,person319_1)).
example(492,neg,advisedby(person73_1,person319_1)).
example(493,neg,advisedby(person380_1,person319_1)).
example(494,neg,advisedby(person384_1,person319_1)).
example(495,neg,advisedby(person406_1,person319_1)).
example(496,neg,advisedby(person266_1,person319_1)).
example(497,neg,advisedby(person63_1,person319_1)).
example(498,neg,advisedby(person83_1,person319_1)).
example(499,neg,advisedby(person271_1,person319_1)).
example(500,neg,advisedby(person392_1,person319_1)).
example(501,neg,advisedby(person420_1,person319_1)).
example(502,neg,advisedby(person86_1,person319_1)).
example(503,neg,advisedby(person284_1,person292_1)).
example(504,neg,advisedby(person311_1,person292_1)).
example(505,neg,advisedby(person14_1,person292_1)).
example(506,neg,advisedby(person275_1,person292_1)).
example(507,neg,advisedby(person259_1,person292_1)).
example(508,neg,advisedby(person139_1,person292_1)).
example(509,neg,advisedby(person176_1,person292_1)).
example(510,neg,advisedby(person400_1,person292_1)).
example(511,neg,advisedby(person318_1,person292_1)).
example(512,neg,advisedby(person161_1,person292_1)).
example(513,neg,advisedby(person347_1,person292_1)).
example(514,neg,advisedby(person408_1,person292_1)).
example(515,neg,advisedby(person265_1,person292_1)).
example(516,neg,advisedby(person70_1,person292_1)).
example(517,neg,advisedby(person381_1,person292_1)).
example(518,neg,advisedby(person382_1,person292_1)).
example(519,neg,advisedby(person333_1,person292_1)).
example(520,neg,advisedby(person94_1,person292_1)).
example(521,neg,advisedby(person272_1,person292_1)).
example(522,neg,advisedby(person37_1,person292_1)).
example(523,neg,advisedby(person353_1,person292_1)).
example(524,neg,advisedby(person432_1,person292_1)).
example(525,neg,advisedby(person377_1,person292_1)).
example(526,neg,advisedby(person239_1,person292_1)).
example(527,neg,advisedby(person13_1,person292_1)).
example(528,neg,advisedby(person286_1,person292_1)).
example(529,neg,advisedby(person412_1,person292_1)).
example(530,neg,advisedby(person418_1,person292_1)).
example(531,neg,advisedby(person320_1,person292_1)).
example(532,neg,advisedby(person42_1,person292_1)).
example(533,neg,advisedby(person20_1,person292_1)).
example(534,neg,advisedby(person276_1,person292_1)).
example(535,neg,advisedby(person45_1,person292_1)).
example(536,neg,advisedby(person233_1,person292_1)).
example(537,neg,advisedby(person148_1,person292_1)).
example(538,neg,advisedby(person193_1,person292_1)).
example(539,neg,advisedby(person314_1,person292_1)).
example(540,neg,advisedby(person21_1,person292_1)).
example(541,neg,advisedby(person257_1,person292_1)).
example(542,neg,advisedby(person73_1,person292_1)).
example(543,neg,advisedby(person380_1,person292_1)).
example(544,neg,advisedby(person384_1,person292_1)).
example(545,neg,advisedby(person406_1,person292_1)).
example(546,neg,advisedby(person266_1,person292_1)).
example(547,neg,advisedby(person312_1,person292_1)).
example(548,neg,advisedby(person208_1,person292_1)).
example(549,neg,advisedby(person63_1,person292_1)).
example(550,neg,advisedby(person83_1,person292_1)).
example(551,neg,advisedby(person271_1,person292_1)).
example(552,neg,advisedby(person392_1,person292_1)).
example(553,neg,advisedby(person420_1,person292_1)).
example(554,neg,advisedby(person86_1,person292_1)).
example(555,neg,advisedby(person284_1,person293_1)).
example(556,neg,advisedby(person311_1,person293_1)).
example(557,neg,advisedby(person14_1,person293_1)).
example(558,neg,advisedby(person275_1,person293_1)).
example(559,neg,advisedby(person259_1,person293_1)).
example(560,neg,advisedby(person139_1,person293_1)).
example(561,neg,advisedby(person176_1,person293_1)).
example(562,neg,advisedby(person400_1,person293_1)).
example(563,neg,advisedby(person318_1,person293_1)).
example(564,neg,advisedby(person161_1,person293_1)).
example(565,neg,advisedby(person347_1,person293_1)).
example(566,neg,advisedby(person408_1,person293_1)).
example(567,neg,advisedby(person265_1,person293_1)).
example(568,neg,advisedby(person70_1,person293_1)).
example(569,neg,advisedby(person381_1,person293_1)).
example(570,neg,advisedby(person382_1,person293_1)).
example(571,neg,advisedby(person333_1,person293_1)).
example(572,neg,advisedby(person94_1,person293_1)).
example(573,neg,advisedby(person272_1,person293_1)).
example(574,neg,advisedby(person37_1,person293_1)).
example(575,neg,advisedby(person353_1,person293_1)).
example(576,neg,advisedby(person432_1,person293_1)).
example(577,neg,advisedby(person377_1,person293_1)).
example(578,neg,advisedby(person239_1,person293_1)).
example(579,neg,advisedby(person13_1,person293_1)).
example(580,neg,advisedby(person286_1,person293_1)).
example(581,neg,advisedby(person412_1,person293_1)).
example(582,neg,advisedby(person418_1,person293_1)).
example(583,neg,advisedby(person320_1,person293_1)).
example(584,neg,advisedby(person42_1,person293_1)).
example(585,neg,advisedby(person20_1,person293_1)).
example(586,neg,advisedby(person352_1,person293_1)).
example(587,neg,advisedby(person276_1,person293_1)).
example(588,neg,advisedby(person45_1,person293_1)).
example(589,neg,advisedby(person233_1,person293_1)).
example(590,neg,advisedby(person148_1,person293_1)).
example(591,neg,advisedby(person193_1,person293_1)).
example(592,neg,advisedby(person314_1,person293_1)).
example(593,neg,advisedby(person21_1,person293_1)).
example(594,neg,advisedby(person262_1,person293_1)).
example(595,neg,advisedby(person257_1,person293_1)).
example(596,neg,advisedby(person73_1,person293_1)).
example(597,neg,advisedby(person380_1,person293_1)).
example(598,neg,advisedby(person384_1,person293_1)).
example(599,neg,advisedby(person406_1,person293_1)).
example(600,neg,advisedby(person266_1,person293_1)).
example(601,neg,advisedby(person312_1,person293_1)).
example(602,neg,advisedby(person208_1,person293_1)).
example(603,neg,advisedby(person63_1,person293_1)).
example(604,neg,advisedby(person83_1,person293_1)).
example(605,neg,advisedby(person271_1,person293_1)).
example(606,neg,advisedby(person392_1,person293_1)).
example(607,neg,advisedby(person420_1,person293_1)).
example(608,neg,advisedby(person86_1,person293_1)).
example(609,neg,advisedby(person284_1,person240_1)).
example(610,neg,advisedby(person311_1,person240_1)).
example(611,neg,advisedby(person14_1,person240_1)).
example(612,neg,advisedby(person275_1,person240_1)).
example(613,neg,advisedby(person259_1,person240_1)).
example(614,neg,advisedby(person139_1,person240_1)).
example(615,neg,advisedby(person176_1,person240_1)).
example(616,neg,advisedby(person400_1,person240_1)).
example(617,neg,advisedby(person318_1,person240_1)).
example(618,neg,advisedby(person161_1,person240_1)).
example(619,neg,advisedby(person347_1,person240_1)).
example(620,neg,advisedby(person408_1,person240_1)).
example(621,neg,advisedby(person265_1,person240_1)).
example(622,neg,advisedby(person70_1,person240_1)).
example(623,neg,advisedby(person381_1,person240_1)).
example(624,neg,advisedby(person382_1,person240_1)).
example(625,neg,advisedby(person333_1,person240_1)).
example(626,neg,advisedby(person94_1,person240_1)).
example(627,neg,advisedby(person272_1,person240_1)).
example(628,neg,advisedby(person37_1,person240_1)).
example(629,neg,advisedby(person353_1,person240_1)).
example(630,neg,advisedby(person377_1,person240_1)).
example(631,neg,advisedby(person239_1,person240_1)).
example(632,neg,advisedby(person286_1,person240_1)).
example(633,neg,advisedby(person412_1,person240_1)).
example(634,neg,advisedby(person418_1,person240_1)).
example(635,neg,advisedby(person320_1,person240_1)).
example(636,neg,advisedby(person42_1,person240_1)).
example(637,neg,advisedby(person20_1,person240_1)).
example(638,neg,advisedby(person352_1,person240_1)).
example(639,neg,advisedby(person276_1,person240_1)).
example(640,neg,advisedby(person45_1,person240_1)).
example(641,neg,advisedby(person233_1,person240_1)).
example(642,neg,advisedby(person148_1,person240_1)).
example(643,neg,advisedby(person193_1,person240_1)).
example(644,neg,advisedby(person314_1,person240_1)).
example(645,neg,advisedby(person21_1,person240_1)).
example(646,neg,advisedby(person262_1,person240_1)).
example(647,neg,advisedby(person73_1,person240_1)).
example(648,neg,advisedby(person380_1,person240_1)).
example(649,neg,advisedby(person406_1,person240_1)).
example(650,neg,advisedby(person266_1,person240_1)).
example(651,neg,advisedby(person312_1,person240_1)).
example(652,neg,advisedby(person208_1,person240_1)).
example(653,neg,advisedby(person63_1,person240_1)).
example(654,neg,advisedby(person83_1,person240_1)).
example(655,neg,advisedby(person271_1,person240_1)).
example(656,neg,advisedby(person392_1,person240_1)).
example(657,neg,advisedby(person420_1,person240_1)).
example(658,neg,advisedby(person86_1,person240_1)).
example(659,neg,advisedby(person284_1,person211_1)).
example(660,neg,advisedby(person311_1,person211_1)).
example(661,neg,advisedby(person14_1,person211_1)).
example(662,neg,advisedby(person275_1,person211_1)).
example(663,neg,advisedby(person259_1,person211_1)).
example(664,neg,advisedby(person139_1,person211_1)).
example(665,neg,advisedby(person176_1,person211_1)).
example(666,neg,advisedby(person400_1,person211_1)).
example(667,neg,advisedby(person318_1,person211_1)).
example(668,neg,advisedby(person161_1,person211_1)).
example(669,neg,advisedby(person347_1,person211_1)).
example(670,neg,advisedby(person408_1,person211_1)).
example(671,neg,advisedby(person265_1,person211_1)).
example(672,neg,advisedby(person70_1,person211_1)).
example(673,neg,advisedby(person381_1,person211_1)).
example(674,neg,advisedby(person382_1,person211_1)).
example(675,neg,advisedby(person333_1,person211_1)).
example(676,neg,advisedby(person94_1,person211_1)).
example(677,neg,advisedby(person272_1,person211_1)).
example(678,neg,advisedby(person37_1,person211_1)).
example(679,neg,advisedby(person353_1,person211_1)).
example(680,neg,advisedby(person432_1,person211_1)).
example(681,neg,advisedby(person377_1,person211_1)).
example(682,neg,advisedby(person239_1,person211_1)).
example(683,neg,advisedby(person13_1,person211_1)).
example(684,neg,advisedby(person286_1,person211_1)).
example(685,neg,advisedby(person412_1,person211_1)).
example(686,neg,advisedby(person418_1,person211_1)).
example(687,neg,advisedby(person320_1,person211_1)).
example(688,neg,advisedby(person42_1,person211_1)).
example(689,neg,advisedby(person20_1,person211_1)).
example(690,neg,advisedby(person352_1,person211_1)).
example(691,neg,advisedby(person276_1,person211_1)).
example(692,neg,advisedby(person233_1,person211_1)).
example(693,neg,advisedby(person148_1,person211_1)).
example(694,neg,advisedby(person193_1,person211_1)).
example(695,neg,advisedby(person314_1,person211_1)).
example(696,neg,advisedby(person262_1,person211_1)).
example(697,neg,advisedby(person257_1,person211_1)).
example(698,neg,advisedby(person73_1,person211_1)).
example(699,neg,advisedby(person380_1,person211_1)).
example(700,neg,advisedby(person384_1,person211_1)).
example(701,neg,advisedby(person406_1,person211_1)).
example(702,neg,advisedby(person266_1,person211_1)).
example(703,neg,advisedby(person312_1,person211_1)).
example(704,neg,advisedby(person208_1,person211_1)).
example(705,neg,advisedby(person63_1,person211_1)).
example(706,neg,advisedby(person83_1,person211_1)).
example(707,neg,advisedby(person271_1,person211_1)).
example(708,neg,advisedby(person392_1,person211_1)).
example(709,neg,advisedby(person420_1,person211_1)).
example(710,neg,advisedby(person86_1,person211_1)).
example(711,neg,advisedby(person284_1,person150_1)).
example(712,neg,advisedby(person311_1,person150_1)).
example(713,neg,advisedby(person275_1,person150_1)).
example(714,neg,advisedby(person259_1,person150_1)).
example(715,neg,advisedby(person139_1,person150_1)).
example(716,neg,advisedby(person176_1,person150_1)).
example(717,neg,advisedby(person400_1,person150_1)).
example(718,neg,advisedby(person318_1,person150_1)).
example(719,neg,advisedby(person161_1,person150_1)).
example(720,neg,advisedby(person347_1,person150_1)).
example(721,neg,advisedby(person408_1,person150_1)).
example(722,neg,advisedby(person265_1,person150_1)).
example(723,neg,advisedby(person70_1,person150_1)).
example(724,neg,advisedby(person381_1,person150_1)).
example(725,neg,advisedby(person382_1,person150_1)).
example(726,neg,advisedby(person333_1,person150_1)).
example(727,neg,advisedby(person94_1,person150_1)).
example(728,neg,advisedby(person272_1,person150_1)).
example(729,neg,advisedby(person37_1,person150_1)).
example(730,neg,advisedby(person353_1,person150_1)).
example(731,neg,advisedby(person432_1,person150_1)).
example(732,neg,advisedby(person377_1,person150_1)).
example(733,neg,advisedby(person239_1,person150_1)).
example(734,neg,advisedby(person13_1,person150_1)).
example(735,neg,advisedby(person286_1,person150_1)).
example(736,neg,advisedby(person412_1,person150_1)).
example(737,neg,advisedby(person418_1,person150_1)).
example(738,neg,advisedby(person42_1,person150_1)).
example(739,neg,advisedby(person20_1,person150_1)).
example(740,neg,advisedby(person352_1,person150_1)).
example(741,neg,advisedby(person276_1,person150_1)).
example(742,neg,advisedby(person45_1,person150_1)).
example(743,neg,advisedby(person233_1,person150_1)).
example(744,neg,advisedby(person148_1,person150_1)).
example(745,neg,advisedby(person193_1,person150_1)).
example(746,neg,advisedby(person314_1,person150_1)).
example(747,neg,advisedby(person21_1,person150_1)).
example(748,neg,advisedby(person262_1,person150_1)).
example(749,neg,advisedby(person257_1,person150_1)).
example(750,neg,advisedby(person73_1,person150_1)).
example(751,neg,advisedby(person380_1,person150_1)).
example(752,neg,advisedby(person384_1,person150_1)).
example(753,neg,advisedby(person406_1,person150_1)).
example(754,neg,advisedby(person266_1,person150_1)).
example(755,neg,advisedby(person312_1,person150_1)).
example(756,neg,advisedby(person208_1,person150_1)).
example(757,neg,advisedby(person63_1,person150_1)).
example(758,neg,advisedby(person83_1,person150_1)).
example(759,neg,advisedby(person271_1,person150_1)).
example(760,neg,advisedby(person392_1,person150_1)).
example(761,neg,advisedby(person420_1,person150_1)).
example(762,neg,advisedby(person86_1,person150_1)).
example(763,neg,advisedby(person284_1,person415_1)).
example(764,neg,advisedby(person311_1,person415_1)).
example(765,neg,advisedby(person14_1,person415_1)).
example(766,neg,advisedby(person275_1,person415_1)).
example(767,neg,advisedby(person259_1,person415_1)).
example(768,neg,advisedby(person139_1,person415_1)).
example(769,neg,advisedby(person176_1,person415_1)).
example(770,neg,advisedby(person400_1,person415_1)).
example(771,neg,advisedby(person318_1,person415_1)).
example(772,neg,advisedby(person161_1,person415_1)).
example(773,neg,advisedby(person347_1,person415_1)).
example(774,neg,advisedby(person408_1,person415_1)).
example(775,neg,advisedby(person265_1,person415_1)).
example(776,neg,advisedby(person70_1,person415_1)).
example(777,neg,advisedby(person381_1,person415_1)).
example(778,neg,advisedby(person382_1,person415_1)).
example(779,neg,advisedby(person333_1,person415_1)).
example(780,neg,advisedby(person94_1,person415_1)).
example(781,neg,advisedby(person272_1,person415_1)).
example(782,neg,advisedby(person37_1,person415_1)).
example(783,neg,advisedby(person353_1,person415_1)).
example(784,neg,advisedby(person432_1,person415_1)).
example(785,neg,advisedby(person377_1,person415_1)).
example(786,neg,advisedby(person239_1,person415_1)).
example(787,neg,advisedby(person13_1,person415_1)).
example(788,neg,advisedby(person286_1,person415_1)).
example(789,neg,advisedby(person412_1,person415_1)).
example(790,neg,advisedby(person418_1,person415_1)).
example(791,neg,advisedby(person320_1,person415_1)).
example(792,neg,advisedby(person42_1,person415_1)).
example(793,neg,advisedby(person20_1,person415_1)).
example(794,neg,advisedby(person276_1,person415_1)).
example(795,neg,advisedby(person233_1,person415_1)).
example(796,neg,advisedby(person148_1,person415_1)).
example(797,neg,advisedby(person193_1,person415_1)).
example(798,neg,advisedby(person21_1,person415_1)).
example(799,neg,advisedby(person257_1,person415_1)).
example(800,neg,advisedby(person73_1,person415_1)).
example(801,neg,advisedby(person380_1,person415_1)).
example(802,neg,advisedby(person384_1,person415_1)).
example(803,neg,advisedby(person406_1,person415_1)).
example(804,neg,advisedby(person266_1,person415_1)).
example(805,neg,advisedby(person312_1,person415_1)).
example(806,neg,advisedby(person208_1,person415_1)).
example(807,neg,advisedby(person83_1,person415_1)).
example(808,neg,advisedby(person271_1,person415_1)).
example(809,neg,advisedby(person392_1,person415_1)).
example(810,neg,advisedby(person420_1,person415_1)).
example(811,neg,advisedby(person86_1,person415_1)).
example(812,neg,advisedby(person284_1,person79_1)).
example(813,neg,advisedby(person311_1,person79_1)).
example(814,neg,advisedby(person14_1,person79_1)).
example(815,neg,advisedby(person259_1,person79_1)).
example(816,neg,advisedby(person139_1,person79_1)).
example(817,neg,advisedby(person176_1,person79_1)).
example(818,neg,advisedby(person400_1,person79_1)).
example(819,neg,advisedby(person318_1,person79_1)).
example(820,neg,advisedby(person161_1,person79_1)).
example(821,neg,advisedby(person347_1,person79_1)).
example(822,neg,advisedby(person408_1,person79_1)).
example(823,neg,advisedby(person265_1,person79_1)).
example(824,neg,advisedby(person70_1,person79_1)).
example(825,neg,advisedby(person381_1,person79_1)).
example(826,neg,advisedby(person382_1,person79_1)).
example(827,neg,advisedby(person333_1,person79_1)).
example(828,neg,advisedby(person94_1,person79_1)).
example(829,neg,advisedby(person272_1,person79_1)).
example(830,neg,advisedby(person353_1,person79_1)).
example(831,neg,advisedby(person432_1,person79_1)).
example(832,neg,advisedby(person377_1,person79_1)).
example(833,neg,advisedby(person239_1,person79_1)).
example(834,neg,advisedby(person13_1,person79_1)).
example(835,neg,advisedby(person286_1,person79_1)).
example(836,neg,advisedby(person412_1,person79_1)).
example(837,neg,advisedby(person418_1,person79_1)).
example(838,neg,advisedby(person320_1,person79_1)).
example(839,neg,advisedby(person42_1,person79_1)).
example(840,neg,advisedby(person20_1,person79_1)).
example(841,neg,advisedby(person352_1,person79_1)).
example(842,neg,advisedby(person276_1,person79_1)).
example(843,neg,advisedby(person45_1,person79_1)).
example(844,neg,advisedby(person233_1,person79_1)).
example(845,neg,advisedby(person148_1,person79_1)).
example(846,neg,advisedby(person193_1,person79_1)).
example(847,neg,advisedby(person314_1,person79_1)).
example(848,neg,advisedby(person21_1,person79_1)).
example(849,neg,advisedby(person262_1,person79_1)).
example(850,neg,advisedby(person257_1,person79_1)).
example(851,neg,advisedby(person73_1,person79_1)).
example(852,neg,advisedby(person384_1,person79_1)).
example(853,neg,advisedby(person406_1,person79_1)).
example(854,neg,advisedby(person266_1,person79_1)).
example(855,neg,advisedby(person312_1,person79_1)).
example(856,neg,advisedby(person208_1,person79_1)).
example(857,neg,advisedby(person63_1,person79_1)).
example(858,neg,advisedby(person83_1,person79_1)).
example(859,neg,advisedby(person271_1,person79_1)).
example(860,neg,advisedby(person392_1,person79_1)).
example(861,neg,advisedby(person420_1,person79_1)).
example(862,neg,advisedby(person86_1,person79_1)).
example(863,neg,advisedby(person284_1,person349_1)).
example(864,neg,advisedby(person311_1,person349_1)).
example(865,neg,advisedby(person14_1,person349_1)).
example(866,neg,advisedby(person275_1,person349_1)).
example(867,neg,advisedby(person259_1,person349_1)).
example(868,neg,advisedby(person139_1,person349_1)).
example(869,neg,advisedby(person176_1,person349_1)).
example(870,neg,advisedby(person400_1,person349_1)).
example(871,neg,advisedby(person318_1,person349_1)).
example(872,neg,advisedby(person161_1,person349_1)).
example(873,neg,advisedby(person347_1,person349_1)).
example(874,neg,advisedby(person408_1,person349_1)).
example(875,neg,advisedby(person265_1,person349_1)).
example(876,neg,advisedby(person70_1,person349_1)).
example(877,neg,advisedby(person381_1,person349_1)).
example(878,neg,advisedby(person382_1,person349_1)).
example(879,neg,advisedby(person333_1,person349_1)).
example(880,neg,advisedby(person94_1,person349_1)).
example(881,neg,advisedby(person272_1,person349_1)).
example(882,neg,advisedby(person37_1,person349_1)).
example(883,neg,advisedby(person353_1,person349_1)).
example(884,neg,advisedby(person432_1,person349_1)).
example(885,neg,advisedby(person377_1,person349_1)).
example(886,neg,advisedby(person239_1,person349_1)).
example(887,neg,advisedby(person13_1,person349_1)).
example(888,neg,advisedby(person286_1,person349_1)).
example(889,neg,advisedby(person412_1,person349_1)).
example(890,neg,advisedby(person418_1,person349_1)).
example(891,neg,advisedby(person320_1,person349_1)).
example(892,neg,advisedby(person42_1,person349_1)).
example(893,neg,advisedby(person20_1,person349_1)).
example(894,neg,advisedby(person352_1,person349_1)).
example(895,neg,advisedby(person276_1,person349_1)).
example(896,neg,advisedby(person45_1,person349_1)).
example(897,neg,advisedby(person233_1,person349_1)).
example(898,neg,advisedby(person148_1,person349_1)).
example(899,neg,advisedby(person193_1,person349_1)).
example(900,neg,advisedby(person314_1,person349_1)).
example(901,neg,advisedby(person21_1,person349_1)).
example(902,neg,advisedby(person262_1,person349_1)).
example(903,neg,advisedby(person257_1,person349_1)).
example(904,neg,advisedby(person73_1,person349_1)).
example(905,neg,advisedby(person380_1,person349_1)).
example(906,neg,advisedby(person384_1,person349_1)).
example(907,neg,advisedby(person406_1,person349_1)).
example(908,neg,advisedby(person266_1,person349_1)).
example(909,neg,advisedby(person312_1,person349_1)).
example(910,neg,advisedby(person208_1,person349_1)).
example(911,neg,advisedby(person63_1,person349_1)).
example(912,neg,advisedby(person271_1,person349_1)).
example(913,neg,advisedby(person392_1,person349_1)).
example(914,neg,advisedby(person420_1,person349_1)).
example(915,neg,advisedby(person86_1,person349_1)).
example(916,neg,advisedby(person284_1,person7_1)).
example(917,neg,advisedby(person311_1,person7_1)).
example(918,neg,advisedby(person14_1,person7_1)).
example(919,neg,advisedby(person275_1,person7_1)).
example(920,neg,advisedby(person259_1,person7_1)).
example(921,neg,advisedby(person139_1,person7_1)).
example(922,neg,advisedby(person176_1,person7_1)).
example(923,neg,advisedby(person400_1,person7_1)).
example(924,neg,advisedby(person318_1,person7_1)).
example(925,neg,advisedby(person161_1,person7_1)).
example(926,neg,advisedby(person347_1,person7_1)).
example(927,neg,advisedby(person408_1,person7_1)).
example(928,neg,advisedby(person265_1,person7_1)).
example(929,neg,advisedby(person70_1,person7_1)).
example(930,neg,advisedby(person381_1,person7_1)).
example(931,neg,advisedby(person382_1,person7_1)).
example(932,neg,advisedby(person333_1,person7_1)).
example(933,neg,advisedby(person94_1,person7_1)).
example(934,neg,advisedby(person37_1,person7_1)).
example(935,neg,advisedby(person353_1,person7_1)).
example(936,neg,advisedby(person432_1,person7_1)).
example(937,neg,advisedby(person377_1,person7_1)).
example(938,neg,advisedby(person239_1,person7_1)).
example(939,neg,advisedby(person13_1,person7_1)).
example(940,neg,advisedby(person286_1,person7_1)).
example(941,neg,advisedby(person412_1,person7_1)).
example(942,neg,advisedby(person418_1,person7_1)).
example(943,neg,advisedby(person320_1,person7_1)).
example(944,neg,advisedby(person42_1,person7_1)).
example(945,neg,advisedby(person20_1,person7_1)).
example(946,neg,advisedby(person352_1,person7_1)).
example(947,neg,advisedby(person276_1,person7_1)).
example(948,neg,advisedby(person45_1,person7_1)).
example(949,neg,advisedby(person233_1,person7_1)).
example(950,neg,advisedby(person148_1,person7_1)).
example(951,neg,advisedby(person193_1,person7_1)).
example(952,neg,advisedby(person314_1,person7_1)).
example(953,neg,advisedby(person21_1,person7_1)).
example(954,neg,advisedby(person262_1,person7_1)).
example(955,neg,advisedby(person257_1,person7_1)).
example(956,neg,advisedby(person73_1,person7_1)).
example(957,neg,advisedby(person380_1,person7_1)).
example(958,neg,advisedby(person384_1,person7_1)).
example(959,neg,advisedby(person406_1,person7_1)).
example(960,neg,advisedby(person312_1,person7_1)).
example(961,neg,advisedby(person208_1,person7_1)).
example(962,neg,advisedby(person63_1,person7_1)).
example(963,neg,advisedby(person83_1,person7_1)).
example(964,neg,advisedby(person271_1,person7_1)).
example(965,neg,advisedby(person392_1,person7_1)).
example(966,neg,advisedby(person420_1,person7_1)).
example(967,neg,advisedby(person86_1,person7_1)).
example(968,neg,advisedby(person284_1,person185_1)).
example(969,neg,advisedby(person311_1,person185_1)).
example(970,neg,advisedby(person14_1,person185_1)).
example(971,neg,advisedby(person275_1,person185_1)).
example(972,neg,advisedby(person259_1,person185_1)).
example(973,neg,advisedby(person139_1,person185_1)).
example(974,neg,advisedby(person176_1,person185_1)).
example(975,neg,advisedby(person400_1,person185_1)).
example(976,neg,advisedby(person161_1,person185_1)).
example(977,neg,advisedby(person347_1,person185_1)).
example(978,neg,advisedby(person408_1,person185_1)).
example(979,neg,advisedby(person265_1,person185_1)).
example(980,neg,advisedby(person70_1,person185_1)).
example(981,neg,advisedby(person381_1,person185_1)).
example(982,neg,advisedby(person382_1,person185_1)).
example(983,neg,advisedby(person333_1,person185_1)).
example(984,neg,advisedby(person94_1,person185_1)).
example(985,neg,advisedby(person272_1,person185_1)).
example(986,neg,advisedby(person37_1,person185_1)).
example(987,neg,advisedby(person353_1,person185_1)).
example(988,neg,advisedby(person432_1,person185_1)).
example(989,neg,advisedby(person377_1,person185_1)).
example(990,neg,advisedby(person239_1,person185_1)).
example(991,neg,advisedby(person13_1,person185_1)).
example(992,neg,advisedby(person286_1,person185_1)).
example(993,neg,advisedby(person412_1,person185_1)).
example(994,neg,advisedby(person418_1,person185_1)).
example(995,neg,advisedby(person320_1,person185_1)).
example(996,neg,advisedby(person42_1,person185_1)).
example(997,neg,advisedby(person20_1,person185_1)).
example(998,neg,advisedby(person352_1,person185_1)).
example(999,neg,advisedby(person276_1,person185_1)).
example(1000,neg,advisedby(person45_1,person185_1)).
example(1001,neg,advisedby(person233_1,person185_1)).
example(1002,neg,advisedby(person148_1,person185_1)).
example(1003,neg,advisedby(person193_1,person185_1)).
example(1004,neg,advisedby(person314_1,person185_1)).
example(1005,neg,advisedby(person21_1,person185_1)).
example(1006,neg,advisedby(person262_1,person185_1)).
example(1007,neg,advisedby(person257_1,person185_1)).
example(1008,neg,advisedby(person73_1,person185_1)).
example(1009,neg,advisedby(person380_1,person185_1)).
example(1010,neg,advisedby(person384_1,person185_1)).
example(1011,neg,advisedby(person406_1,person185_1)).
example(1012,neg,advisedby(person266_1,person185_1)).
example(1013,neg,advisedby(person312_1,person185_1)).
example(1014,neg,advisedby(person208_1,person185_1)).
example(1015,neg,advisedby(person63_1,person185_1)).
example(1016,neg,advisedby(person83_1,person185_1)).
example(1017,neg,advisedby(person271_1,person185_1)).
example(1018,neg,advisedby(person392_1,person185_1)).
example(1019,neg,advisedby(person420_1,person185_1)).
example(1020,neg,advisedby(person86_1,person185_1)).
example(1021,neg,advisedby(person284_1,person171_1)).
example(1022,neg,advisedby(person311_1,person171_1)).
example(1023,neg,advisedby(person14_1,person171_1)).
example(1024,neg,advisedby(person275_1,person171_1)).
example(1025,neg,advisedby(person259_1,person171_1)).
example(1026,neg,advisedby(person139_1,person171_1)).
example(1027,neg,advisedby(person176_1,person171_1)).
example(1028,neg,advisedby(person400_1,person171_1)).
example(1029,neg,advisedby(person318_1,person171_1)).
example(1030,neg,advisedby(person161_1,person171_1)).
example(1031,neg,advisedby(person347_1,person171_1)).
example(1032,neg,advisedby(person408_1,person171_1)).
example(1033,neg,advisedby(person265_1,person171_1)).
example(1034,neg,advisedby(person70_1,person171_1)).
example(1035,neg,advisedby(person381_1,person171_1)).
example(1036,neg,advisedby(person382_1,person171_1)).
example(1037,neg,advisedby(person333_1,person171_1)).
example(1038,neg,advisedby(person94_1,person171_1)).
example(1039,neg,advisedby(person272_1,person171_1)).
example(1040,neg,advisedby(person37_1,person171_1)).
example(1041,neg,advisedby(person353_1,person171_1)).
example(1042,neg,advisedby(person432_1,person171_1)).
example(1043,neg,advisedby(person377_1,person171_1)).
example(1044,neg,advisedby(person13_1,person171_1)).
example(1045,neg,advisedby(person412_1,person171_1)).
example(1046,neg,advisedby(person320_1,person171_1)).
example(1047,neg,advisedby(person42_1,person171_1)).
example(1048,neg,advisedby(person20_1,person171_1)).
example(1049,neg,advisedby(person352_1,person171_1)).
example(1050,neg,advisedby(person276_1,person171_1)).
example(1051,neg,advisedby(person45_1,person171_1)).
example(1052,neg,advisedby(person233_1,person171_1)).
example(1053,neg,advisedby(person193_1,person171_1)).
example(1054,neg,advisedby(person314_1,person171_1)).
example(1055,neg,advisedby(person21_1,person171_1)).
example(1056,neg,advisedby(person262_1,person171_1)).
example(1057,neg,advisedby(person257_1,person171_1)).
example(1058,neg,advisedby(person73_1,person171_1)).
example(1059,neg,advisedby(person380_1,person171_1)).
example(1060,neg,advisedby(person384_1,person171_1)).
example(1061,neg,advisedby(person406_1,person171_1)).
example(1062,neg,advisedby(person266_1,person171_1)).
example(1063,neg,advisedby(person312_1,person171_1)).
example(1064,neg,advisedby(person208_1,person171_1)).
example(1065,neg,advisedby(person63_1,person171_1)).
example(1066,neg,advisedby(person83_1,person171_1)).
example(1067,neg,advisedby(person271_1,person171_1)).
example(1068,neg,advisedby(person392_1,person171_1)).
example(1069,neg,advisedby(person420_1,person171_1)).
example(1070,neg,advisedby(person86_1,person171_1)).
example(1071,neg,advisedby(person284_1,person168_1)).
example(1072,neg,advisedby(person311_1,person168_1)).
example(1073,neg,advisedby(person14_1,person168_1)).
example(1074,neg,advisedby(person275_1,person168_1)).
example(1075,neg,advisedby(person259_1,person168_1)).
example(1076,neg,advisedby(person139_1,person168_1)).
example(1077,neg,advisedby(person176_1,person168_1)).
example(1078,neg,advisedby(person400_1,person168_1)).
example(1079,neg,advisedby(person318_1,person168_1)).
example(1080,neg,advisedby(person161_1,person168_1)).
example(1081,neg,advisedby(person347_1,person168_1)).
example(1082,neg,advisedby(person408_1,person168_1)).
example(1083,neg,advisedby(person70_1,person168_1)).
example(1084,neg,advisedby(person382_1,person168_1)).
example(1085,neg,advisedby(person333_1,person168_1)).
example(1086,neg,advisedby(person94_1,person168_1)).
example(1087,neg,advisedby(person272_1,person168_1)).
example(1088,neg,advisedby(person37_1,person168_1)).
example(1089,neg,advisedby(person353_1,person168_1)).
example(1090,neg,advisedby(person432_1,person168_1)).
example(1091,neg,advisedby(person377_1,person168_1)).
example(1092,neg,advisedby(person239_1,person168_1)).
example(1093,neg,advisedby(person13_1,person168_1)).
example(1094,neg,advisedby(person286_1,person168_1)).
example(1095,neg,advisedby(person412_1,person168_1)).
example(1096,neg,advisedby(person418_1,person168_1)).
example(1097,neg,advisedby(person320_1,person168_1)).
example(1098,neg,advisedby(person42_1,person168_1)).
example(1099,neg,advisedby(person20_1,person168_1)).
example(1100,neg,advisedby(person352_1,person168_1)).
example(1101,neg,advisedby(person276_1,person168_1)).
example(1102,neg,advisedby(person45_1,person168_1)).
example(1103,neg,advisedby(person233_1,person168_1)).
example(1104,neg,advisedby(person148_1,person168_1)).
example(1105,neg,advisedby(person193_1,person168_1)).
example(1106,neg,advisedby(person314_1,person168_1)).
example(1107,neg,advisedby(person21_1,person168_1)).
example(1108,neg,advisedby(person262_1,person168_1)).
example(1109,neg,advisedby(person257_1,person168_1)).
example(1110,neg,advisedby(person73_1,person168_1)).
example(1111,neg,advisedby(person380_1,person168_1)).
example(1112,neg,advisedby(person384_1,person168_1)).
example(1113,neg,advisedby(person406_1,person168_1)).
example(1114,neg,advisedby(person266_1,person168_1)).
example(1115,neg,advisedby(person312_1,person168_1)).
example(1116,neg,advisedby(person208_1,person168_1)).
example(1117,neg,advisedby(person63_1,person168_1)).
example(1118,neg,advisedby(person83_1,person168_1)).
example(1119,neg,advisedby(person271_1,person168_1)).
example(1120,neg,advisedby(person392_1,person168_1)).
example(1121,neg,advisedby(person420_1,person168_1)).
example(1122,neg,advisedby(person86_1,person168_1)).
example(1123,neg,advisedby(person284_1,person407_1)).
example(1124,neg,advisedby(person311_1,person407_1)).
example(1125,neg,advisedby(person14_1,person407_1)).
example(1126,neg,advisedby(person275_1,person407_1)).
example(1127,neg,advisedby(person259_1,person407_1)).
example(1128,neg,advisedby(person139_1,person407_1)).
example(1129,neg,advisedby(person400_1,person407_1)).
example(1130,neg,advisedby(person318_1,person407_1)).
example(1131,neg,advisedby(person161_1,person407_1)).
example(1132,neg,advisedby(person347_1,person407_1)).
example(1133,neg,advisedby(person408_1,person407_1)).
example(1134,neg,advisedby(person265_1,person407_1)).
example(1135,neg,advisedby(person70_1,person407_1)).
example(1136,neg,advisedby(person381_1,person407_1)).
example(1137,neg,advisedby(person382_1,person407_1)).
example(1138,neg,advisedby(person333_1,person407_1)).
example(1139,neg,advisedby(person94_1,person407_1)).
example(1140,neg,advisedby(person272_1,person407_1)).
example(1141,neg,advisedby(person37_1,person407_1)).
example(1142,neg,advisedby(person353_1,person407_1)).
example(1143,neg,advisedby(person432_1,person407_1)).
example(1144,neg,advisedby(person377_1,person407_1)).
example(1145,neg,advisedby(person239_1,person407_1)).
example(1146,neg,advisedby(person13_1,person407_1)).
example(1147,neg,advisedby(person286_1,person407_1)).
example(1148,neg,advisedby(person412_1,person407_1)).
example(1149,neg,advisedby(person418_1,person407_1)).
example(1150,neg,advisedby(person320_1,person407_1)).
example(1151,neg,advisedby(person42_1,person407_1)).
example(1152,neg,advisedby(person20_1,person407_1)).
example(1153,neg,advisedby(person352_1,person407_1)).
example(1154,neg,advisedby(person45_1,person407_1)).
example(1155,neg,advisedby(person233_1,person407_1)).
example(1156,neg,advisedby(person148_1,person407_1)).
example(1157,neg,advisedby(person193_1,person407_1)).
example(1158,neg,advisedby(person314_1,person407_1)).
example(1159,neg,advisedby(person21_1,person407_1)).
example(1160,neg,advisedby(person262_1,person407_1)).
example(1161,neg,advisedby(person257_1,person407_1)).
example(1162,neg,advisedby(person73_1,person407_1)).
example(1163,neg,advisedby(person380_1,person407_1)).
example(1164,neg,advisedby(person406_1,person407_1)).
example(1165,neg,advisedby(person266_1,person407_1)).
example(1166,neg,advisedby(person312_1,person407_1)).
example(1167,neg,advisedby(person208_1,person407_1)).
example(1168,neg,advisedby(person63_1,person407_1)).
example(1169,neg,advisedby(person83_1,person407_1)).
example(1170,neg,advisedby(person271_1,person407_1)).
example(1171,neg,advisedby(person392_1,person407_1)).
example(1172,neg,advisedby(person420_1,person407_1)).
example(1173,neg,advisedby(person86_1,person407_1)).
example(1174,neg,advisedby(person38_1,person40_1)).
example(1175,neg,advisedby(person261_1,person40_1)).
example(1176,neg,advisedby(person149_1,person40_1)).
example(1177,neg,advisedby(person306_1,person40_1)).
example(1178,neg,advisedby(person410_1,person40_1)).
example(1179,neg,advisedby(person157_1,person40_1)).
example(1180,neg,advisedby(person200_1,person40_1)).
example(1181,neg,advisedby(person404_1,person40_1)).
example(1182,neg,advisedby(person122_1,person40_1)).
example(1183,neg,advisedby(person322_1,person40_1)).
example(1184,neg,advisedby(person131_1,person40_1)).
example(1185,neg,advisedby(person85_1,person40_1)).
example(1186,neg,advisedby(person241_1,person40_1)).
example(1187,neg,advisedby(person217_1,person40_1)).
example(1188,neg,advisedby(person270_1,person40_1)).
example(1189,neg,advisedby(person206_1,person40_1)).
example(1190,neg,advisedby(person81_1,person40_1)).
example(1191,neg,advisedby(person228_1,person40_1)).
example(1192,neg,advisedby(person51_1,person40_1)).
example(1193,neg,advisedby(person41_1,person40_1)).
example(1194,neg,advisedby(person163_1,person40_1)).
example(1195,neg,advisedby(person435_1,person40_1)).
example(1196,neg,advisedby(person363_1,person40_1)).
example(1197,neg,advisedby(person427_1,person40_1)).
example(1198,neg,advisedby(person142_1,person40_1)).
example(1199,neg,advisedby(person431_1,person40_1)).
example(1200,neg,advisedby(person283_1,person40_1)).
example(1201,neg,advisedby(person300_1,person40_1)).
example(1202,neg,advisedby(person113_1,person40_1)).
example(1203,neg,advisedby(person296_1,person40_1)).
example(1204,neg,advisedby(person36_1,person40_1)).
example(1205,neg,advisedby(person328_1,person40_1)).
example(1206,neg,advisedby(person31_1,person40_1)).
example(1207,neg,advisedby(person61_1,person40_1)).
example(1208,neg,advisedby(person119_1,person40_1)).
example(1209,neg,advisedby(person3_1,person40_1)).
example(1210,neg,advisedby(person317_1,person40_1)).
example(1211,neg,advisedby(person230_1,person40_1)).
example(1212,neg,advisedby(person258_1,person40_1)).
example(1213,neg,advisedby(person188_1,person40_1)).
example(1214,neg,advisedby(person327_1,person40_1)).
example(1215,neg,advisedby(person140_1,person40_1)).
example(1216,neg,advisedby(person321_1,person40_1)).
example(1217,neg,advisedby(person428_1,person40_1)).
example(1218,neg,advisedby(person158_1,person40_1)).
example(1219,neg,advisedby(person102_1,person40_1)).
example(1220,neg,advisedby(person90_1,person40_1)).
example(1221,neg,advisedby(person214_1,person40_1)).
example(1222,neg,advisedby(person146_1,person40_1)).
example(1223,neg,advisedby(person88_1,person40_1)).
example(1224,neg,advisedby(person178_1,person40_1)).
example(1225,neg,advisedby(person195_1,person40_1)).
example(1226,neg,advisedby(person38_1,person279_1)).
example(1227,neg,advisedby(person261_1,person279_1)).
example(1228,neg,advisedby(person149_1,person279_1)).
example(1229,neg,advisedby(person306_1,person279_1)).
example(1230,neg,advisedby(person410_1,person279_1)).
example(1231,neg,advisedby(person157_1,person279_1)).
example(1232,neg,advisedby(person200_1,person279_1)).
example(1233,neg,advisedby(person404_1,person279_1)).
example(1234,neg,advisedby(person122_1,person279_1)).
example(1235,neg,advisedby(person322_1,person279_1)).
example(1236,neg,advisedby(person131_1,person279_1)).
example(1237,neg,advisedby(person85_1,person279_1)).
example(1238,neg,advisedby(person241_1,person279_1)).
example(1239,neg,advisedby(person217_1,person279_1)).
example(1240,neg,advisedby(person270_1,person279_1)).
example(1241,neg,advisedby(person206_1,person279_1)).
example(1242,neg,advisedby(person81_1,person279_1)).
example(1243,neg,advisedby(person228_1,person279_1)).
example(1244,neg,advisedby(person51_1,person279_1)).
example(1245,neg,advisedby(person41_1,person279_1)).
example(1246,neg,advisedby(person163_1,person279_1)).
example(1247,neg,advisedby(person363_1,person279_1)).
example(1248,neg,advisedby(person427_1,person279_1)).
example(1249,neg,advisedby(person142_1,person279_1)).
example(1250,neg,advisedby(person431_1,person279_1)).
example(1251,neg,advisedby(person283_1,person279_1)).
example(1252,neg,advisedby(person300_1,person279_1)).
example(1253,neg,advisedby(person113_1,person279_1)).
example(1254,neg,advisedby(person296_1,person279_1)).
example(1255,neg,advisedby(person36_1,person279_1)).
example(1256,neg,advisedby(person328_1,person279_1)).
example(1257,neg,advisedby(person31_1,person279_1)).
example(1258,neg,advisedby(person61_1,person279_1)).
example(1259,neg,advisedby(person119_1,person279_1)).
example(1260,neg,advisedby(person3_1,person279_1)).
example(1261,neg,advisedby(person317_1,person279_1)).
example(1262,neg,advisedby(person230_1,person279_1)).
example(1263,neg,advisedby(person258_1,person279_1)).
example(1264,neg,advisedby(person188_1,person279_1)).
example(1265,neg,advisedby(person327_1,person279_1)).
example(1266,neg,advisedby(person140_1,person279_1)).
example(1267,neg,advisedby(person321_1,person279_1)).
example(1268,neg,advisedby(person428_1,person279_1)).
example(1269,neg,advisedby(person158_1,person279_1)).
example(1270,neg,advisedby(person102_1,person279_1)).
example(1271,neg,advisedby(person90_1,person279_1)).
example(1272,neg,advisedby(person214_1,person279_1)).
example(1273,neg,advisedby(person146_1,person279_1)).
example(1274,neg,advisedby(person88_1,person279_1)).
example(1275,neg,advisedby(person178_1,person279_1)).
example(1276,neg,advisedby(person195_1,person279_1)).
example(1277,neg,advisedby(person38_1,person394_1)).
example(1278,neg,advisedby(person261_1,person394_1)).
example(1279,neg,advisedby(person149_1,person394_1)).
example(1280,neg,advisedby(person306_1,person394_1)).
example(1281,neg,advisedby(person410_1,person394_1)).
example(1282,neg,advisedby(person157_1,person394_1)).
example(1283,neg,advisedby(person200_1,person394_1)).
example(1284,neg,advisedby(person404_1,person394_1)).
example(1285,neg,advisedby(person122_1,person394_1)).
example(1286,neg,advisedby(person322_1,person394_1)).
example(1287,neg,advisedby(person131_1,person394_1)).
example(1288,neg,advisedby(person85_1,person394_1)).
example(1289,neg,advisedby(person241_1,person394_1)).
example(1290,neg,advisedby(person217_1,person394_1)).
example(1291,neg,advisedby(person270_1,person394_1)).
example(1292,neg,advisedby(person206_1,person394_1)).
example(1293,neg,advisedby(person81_1,person394_1)).
example(1294,neg,advisedby(person51_1,person394_1)).
example(1295,neg,advisedby(person163_1,person394_1)).
example(1296,neg,advisedby(person435_1,person394_1)).
example(1297,neg,advisedby(person363_1,person394_1)).
example(1298,neg,advisedby(person427_1,person394_1)).
example(1299,neg,advisedby(person142_1,person394_1)).
example(1300,neg,advisedby(person431_1,person394_1)).
example(1301,neg,advisedby(person283_1,person394_1)).
example(1302,neg,advisedby(person300_1,person394_1)).
example(1303,neg,advisedby(person296_1,person394_1)).
example(1304,neg,advisedby(person36_1,person394_1)).
example(1305,neg,advisedby(person328_1,person394_1)).
example(1306,neg,advisedby(person31_1,person394_1)).
example(1307,neg,advisedby(person61_1,person394_1)).
example(1308,neg,advisedby(person119_1,person394_1)).
example(1309,neg,advisedby(person3_1,person394_1)).
example(1310,neg,advisedby(person317_1,person394_1)).
example(1311,neg,advisedby(person230_1,person394_1)).
example(1312,neg,advisedby(person258_1,person394_1)).
example(1313,neg,advisedby(person188_1,person394_1)).
example(1314,neg,advisedby(person327_1,person394_1)).
example(1315,neg,advisedby(person140_1,person394_1)).
example(1316,neg,advisedby(person321_1,person394_1)).
example(1317,neg,advisedby(person428_1,person394_1)).
example(1318,neg,advisedby(person158_1,person394_1)).
example(1319,neg,advisedby(person102_1,person394_1)).
example(1320,neg,advisedby(person90_1,person394_1)).
example(1321,neg,advisedby(person214_1,person394_1)).
example(1322,neg,advisedby(person146_1,person394_1)).
example(1323,neg,advisedby(person88_1,person394_1)).
example(1324,neg,advisedby(person178_1,person394_1)).
example(1325,neg,advisedby(person195_1,person394_1)).
example(1326,neg,advisedby(person38_1,person342_1)).
example(1327,neg,advisedby(person261_1,person342_1)).
example(1328,neg,advisedby(person149_1,person342_1)).
example(1329,neg,advisedby(person306_1,person342_1)).
example(1330,neg,advisedby(person410_1,person342_1)).
example(1331,neg,advisedby(person157_1,person342_1)).
example(1332,neg,advisedby(person200_1,person342_1)).
example(1333,neg,advisedby(person404_1,person342_1)).
example(1334,neg,advisedby(person122_1,person342_1)).
example(1335,neg,advisedby(person322_1,person342_1)).
example(1336,neg,advisedby(person131_1,person342_1)).
example(1337,neg,advisedby(person85_1,person342_1)).
example(1338,neg,advisedby(person241_1,person342_1)).
example(1339,neg,advisedby(person270_1,person342_1)).
example(1340,neg,advisedby(person51_1,person342_1)).
example(1341,neg,advisedby(person41_1,person342_1)).
example(1342,neg,advisedby(person163_1,person342_1)).
example(1343,neg,advisedby(person435_1,person342_1)).
example(1344,neg,advisedby(person363_1,person342_1)).
example(1345,neg,advisedby(person427_1,person342_1)).
example(1346,neg,advisedby(person431_1,person342_1)).
example(1347,neg,advisedby(person283_1,person342_1)).
example(1348,neg,advisedby(person296_1,person342_1)).
example(1349,neg,advisedby(person36_1,person342_1)).
example(1350,neg,advisedby(person328_1,person342_1)).
example(1351,neg,advisedby(person31_1,person342_1)).
example(1352,neg,advisedby(person61_1,person342_1)).
example(1353,neg,advisedby(person119_1,person342_1)).
example(1354,neg,advisedby(person3_1,person342_1)).
example(1355,neg,advisedby(person317_1,person342_1)).
example(1356,neg,advisedby(person230_1,person342_1)).
example(1357,neg,advisedby(person258_1,person342_1)).
example(1358,neg,advisedby(person188_1,person342_1)).
example(1359,neg,advisedby(person327_1,person342_1)).
example(1360,neg,advisedby(person140_1,person342_1)).
example(1361,neg,advisedby(person321_1,person342_1)).
example(1362,neg,advisedby(person428_1,person342_1)).
example(1363,neg,advisedby(person158_1,person342_1)).
example(1364,neg,advisedby(person102_1,person342_1)).
example(1365,neg,advisedby(person90_1,person342_1)).
example(1366,neg,advisedby(person214_1,person342_1)).
example(1367,neg,advisedby(person146_1,person342_1)).
example(1368,neg,advisedby(person88_1,person342_1)).
example(1369,neg,advisedby(person178_1,person342_1)).
example(1370,neg,advisedby(person195_1,person342_1)).
example(1371,neg,advisedby(person38_1,person111_1)).
example(1372,neg,advisedby(person261_1,person111_1)).
example(1373,neg,advisedby(person149_1,person111_1)).
example(1374,neg,advisedby(person306_1,person111_1)).
example(1375,neg,advisedby(person410_1,person111_1)).
example(1376,neg,advisedby(person157_1,person111_1)).
example(1377,neg,advisedby(person200_1,person111_1)).
example(1378,neg,advisedby(person404_1,person111_1)).
example(1379,neg,advisedby(person122_1,person111_1)).
example(1380,neg,advisedby(person322_1,person111_1)).
example(1381,neg,advisedby(person131_1,person111_1)).
example(1382,neg,advisedby(person85_1,person111_1)).
example(1383,neg,advisedby(person241_1,person111_1)).
example(1384,neg,advisedby(person217_1,person111_1)).
example(1385,neg,advisedby(person270_1,person111_1)).
example(1386,neg,advisedby(person206_1,person111_1)).
example(1387,neg,advisedby(person81_1,person111_1)).
example(1388,neg,advisedby(person228_1,person111_1)).
example(1389,neg,advisedby(person51_1,person111_1)).
example(1390,neg,advisedby(person41_1,person111_1)).
example(1391,neg,advisedby(person163_1,person111_1)).
example(1392,neg,advisedby(person435_1,person111_1)).
example(1393,neg,advisedby(person363_1,person111_1)).
example(1394,neg,advisedby(person427_1,person111_1)).
example(1395,neg,advisedby(person142_1,person111_1)).
example(1396,neg,advisedby(person431_1,person111_1)).
example(1397,neg,advisedby(person283_1,person111_1)).
example(1398,neg,advisedby(person300_1,person111_1)).
example(1399,neg,advisedby(person113_1,person111_1)).
example(1400,neg,advisedby(person296_1,person111_1)).
example(1401,neg,advisedby(person36_1,person111_1)).
example(1402,neg,advisedby(person328_1,person111_1)).
example(1403,neg,advisedby(person31_1,person111_1)).
example(1404,neg,advisedby(person61_1,person111_1)).
example(1405,neg,advisedby(person119_1,person111_1)).
example(1406,neg,advisedby(person3_1,person111_1)).
example(1407,neg,advisedby(person317_1,person111_1)).
example(1408,neg,advisedby(person230_1,person111_1)).
example(1409,neg,advisedby(person258_1,person111_1)).
example(1410,neg,advisedby(person188_1,person111_1)).
example(1411,neg,advisedby(person327_1,person111_1)).
example(1412,neg,advisedby(person140_1,person111_1)).
example(1413,neg,advisedby(person321_1,person111_1)).
example(1414,neg,advisedby(person428_1,person111_1)).
example(1415,neg,advisedby(person158_1,person111_1)).
example(1416,neg,advisedby(person102_1,person111_1)).
example(1417,neg,advisedby(person90_1,person111_1)).
example(1418,neg,advisedby(person214_1,person111_1)).
example(1419,neg,advisedby(person146_1,person111_1)).
example(1420,neg,advisedby(person88_1,person111_1)).
example(1421,neg,advisedby(person178_1,person111_1)).
example(1422,neg,advisedby(person195_1,person111_1)).
example(1423,neg,advisedby(person38_1,person115_1)).
example(1424,neg,advisedby(person261_1,person115_1)).
example(1425,neg,advisedby(person149_1,person115_1)).
example(1426,neg,advisedby(person306_1,person115_1)).
example(1427,neg,advisedby(person410_1,person115_1)).
example(1428,neg,advisedby(person157_1,person115_1)).
example(1429,neg,advisedby(person200_1,person115_1)).
example(1430,neg,advisedby(person404_1,person115_1)).
example(1431,neg,advisedby(person122_1,person115_1)).
example(1432,neg,advisedby(person322_1,person115_1)).
example(1433,neg,advisedby(person131_1,person115_1)).
example(1434,neg,advisedby(person85_1,person115_1)).
example(1435,neg,advisedby(person241_1,person115_1)).
example(1436,neg,advisedby(person217_1,person115_1)).
example(1437,neg,advisedby(person270_1,person115_1)).
example(1438,neg,advisedby(person206_1,person115_1)).
example(1439,neg,advisedby(person81_1,person115_1)).
example(1440,neg,advisedby(person228_1,person115_1)).
example(1441,neg,advisedby(person51_1,person115_1)).
example(1442,neg,advisedby(person41_1,person115_1)).
example(1443,neg,advisedby(person163_1,person115_1)).
example(1444,neg,advisedby(person435_1,person115_1)).
example(1445,neg,advisedby(person363_1,person115_1)).
example(1446,neg,advisedby(person427_1,person115_1)).
example(1447,neg,advisedby(person142_1,person115_1)).
example(1448,neg,advisedby(person431_1,person115_1)).
example(1449,neg,advisedby(person283_1,person115_1)).
example(1450,neg,advisedby(person300_1,person115_1)).
example(1451,neg,advisedby(person113_1,person115_1)).
example(1452,neg,advisedby(person296_1,person115_1)).
example(1453,neg,advisedby(person36_1,person115_1)).
example(1454,neg,advisedby(person328_1,person115_1)).
example(1455,neg,advisedby(person31_1,person115_1)).
example(1456,neg,advisedby(person61_1,person115_1)).
example(1457,neg,advisedby(person119_1,person115_1)).
example(1458,neg,advisedby(person3_1,person115_1)).
example(1459,neg,advisedby(person317_1,person115_1)).
example(1460,neg,advisedby(person230_1,person115_1)).
example(1461,neg,advisedby(person258_1,person115_1)).
example(1462,neg,advisedby(person188_1,person115_1)).
example(1463,neg,advisedby(person327_1,person115_1)).
example(1464,neg,advisedby(person140_1,person115_1)).
example(1465,neg,advisedby(person321_1,person115_1)).
example(1466,neg,advisedby(person428_1,person115_1)).
example(1467,neg,advisedby(person158_1,person115_1)).
example(1468,neg,advisedby(person102_1,person115_1)).
example(1469,neg,advisedby(person90_1,person115_1)).
example(1470,neg,advisedby(person214_1,person115_1)).
example(1471,neg,advisedby(person146_1,person115_1)).
example(1472,neg,advisedby(person88_1,person115_1)).
example(1473,neg,advisedby(person178_1,person115_1)).
example(1474,neg,advisedby(person195_1,person115_1)).
example(1475,neg,advisedby(person38_1,person351_1)).
example(1476,neg,advisedby(person261_1,person351_1)).
example(1477,neg,advisedby(person149_1,person351_1)).
example(1478,neg,advisedby(person306_1,person351_1)).
example(1479,neg,advisedby(person410_1,person351_1)).
example(1480,neg,advisedby(person157_1,person351_1)).
example(1481,neg,advisedby(person200_1,person351_1)).
example(1482,neg,advisedby(person404_1,person351_1)).
example(1483,neg,advisedby(person122_1,person351_1)).
example(1484,neg,advisedby(person322_1,person351_1)).
example(1485,neg,advisedby(person131_1,person351_1)).
example(1486,neg,advisedby(person85_1,person351_1)).
example(1487,neg,advisedby(person241_1,person351_1)).
example(1488,neg,advisedby(person217_1,person351_1)).
example(1489,neg,advisedby(person270_1,person351_1)).
example(1490,neg,advisedby(person206_1,person351_1)).
example(1491,neg,advisedby(person81_1,person351_1)).
example(1492,neg,advisedby(person228_1,person351_1)).
example(1493,neg,advisedby(person51_1,person351_1)).
example(1494,neg,advisedby(person41_1,person351_1)).
example(1495,neg,advisedby(person163_1,person351_1)).
example(1496,neg,advisedby(person435_1,person351_1)).
example(1497,neg,advisedby(person363_1,person351_1)).
example(1498,neg,advisedby(person427_1,person351_1)).
example(1499,neg,advisedby(person142_1,person351_1)).
example(1500,neg,advisedby(person431_1,person351_1)).
example(1501,neg,advisedby(person283_1,person351_1)).
example(1502,neg,advisedby(person300_1,person351_1)).
example(1503,neg,advisedby(person113_1,person351_1)).
example(1504,neg,advisedby(person296_1,person351_1)).
example(1505,neg,advisedby(person36_1,person351_1)).
example(1506,neg,advisedby(person328_1,person351_1)).
example(1507,neg,advisedby(person31_1,person351_1)).
example(1508,neg,advisedby(person61_1,person351_1)).
example(1509,neg,advisedby(person119_1,person351_1)).
example(1510,neg,advisedby(person3_1,person351_1)).
example(1511,neg,advisedby(person317_1,person351_1)).
example(1512,neg,advisedby(person230_1,person351_1)).
example(1513,neg,advisedby(person258_1,person351_1)).
example(1514,neg,advisedby(person188_1,person351_1)).
example(1515,neg,advisedby(person327_1,person351_1)).
example(1516,neg,advisedby(person140_1,person351_1)).
example(1517,neg,advisedby(person321_1,person351_1)).
example(1518,neg,advisedby(person428_1,person351_1)).
example(1519,neg,advisedby(person158_1,person351_1)).
example(1520,neg,advisedby(person102_1,person351_1)).
example(1521,neg,advisedby(person90_1,person351_1)).
example(1522,neg,advisedby(person214_1,person351_1)).
example(1523,neg,advisedby(person146_1,person351_1)).
example(1524,neg,advisedby(person88_1,person351_1)).
example(1525,neg,advisedby(person178_1,person351_1)).
example(1526,neg,advisedby(person195_1,person351_1)).
example(1527,neg,advisedby(person38_1,person72_1)).
example(1528,neg,advisedby(person261_1,person72_1)).
example(1529,neg,advisedby(person149_1,person72_1)).
example(1530,neg,advisedby(person306_1,person72_1)).
example(1531,neg,advisedby(person410_1,person72_1)).
example(1532,neg,advisedby(person322_1,person72_1)).
example(1533,neg,advisedby(person131_1,person72_1)).
example(1534,neg,advisedby(person85_1,person72_1)).
example(1535,neg,advisedby(person241_1,person72_1)).
example(1536,neg,advisedby(person270_1,person72_1)).
example(1537,neg,advisedby(person81_1,person72_1)).
example(1538,neg,advisedby(person228_1,person72_1)).
example(1539,neg,advisedby(person51_1,person72_1)).
example(1540,neg,advisedby(person41_1,person72_1)).
example(1541,neg,advisedby(person163_1,person72_1)).
example(1542,neg,advisedby(person435_1,person72_1)).
example(1543,neg,advisedby(person363_1,person72_1)).
example(1544,neg,advisedby(person427_1,person72_1)).
example(1545,neg,advisedby(person142_1,person72_1)).
example(1546,neg,advisedby(person431_1,person72_1)).
example(1547,neg,advisedby(person283_1,person72_1)).
example(1548,neg,advisedby(person300_1,person72_1)).
example(1549,neg,advisedby(person113_1,person72_1)).
example(1550,neg,advisedby(person296_1,person72_1)).
example(1551,neg,advisedby(person36_1,person72_1)).
example(1552,neg,advisedby(person328_1,person72_1)).
example(1553,neg,advisedby(person31_1,person72_1)).
example(1554,neg,advisedby(person61_1,person72_1)).
example(1555,neg,advisedby(person119_1,person72_1)).
example(1556,neg,advisedby(person3_1,person72_1)).
example(1557,neg,advisedby(person317_1,person72_1)).
example(1558,neg,advisedby(person230_1,person72_1)).
example(1559,neg,advisedby(person258_1,person72_1)).
example(1560,neg,advisedby(person188_1,person72_1)).
example(1561,neg,advisedby(person327_1,person72_1)).
example(1562,neg,advisedby(person140_1,person72_1)).
example(1563,neg,advisedby(person321_1,person72_1)).
example(1564,neg,advisedby(person428_1,person72_1)).
example(1565,neg,advisedby(person158_1,person72_1)).
example(1566,neg,advisedby(person102_1,person72_1)).
example(1567,neg,advisedby(person90_1,person72_1)).
example(1568,neg,advisedby(person214_1,person72_1)).
example(1569,neg,advisedby(person146_1,person72_1)).
example(1570,neg,advisedby(person88_1,person72_1)).
example(1571,neg,advisedby(person178_1,person72_1)).
example(1572,neg,advisedby(person195_1,person72_1)).
example(1573,neg,advisedby(person38_1,person393_1)).
example(1574,neg,advisedby(person261_1,person393_1)).
example(1575,neg,advisedby(person149_1,person393_1)).
example(1576,neg,advisedby(person306_1,person393_1)).
example(1577,neg,advisedby(person410_1,person393_1)).
example(1578,neg,advisedby(person157_1,person393_1)).
example(1579,neg,advisedby(person200_1,person393_1)).
example(1580,neg,advisedby(person404_1,person393_1)).
example(1581,neg,advisedby(person122_1,person393_1)).
example(1582,neg,advisedby(person322_1,person393_1)).
example(1583,neg,advisedby(person131_1,person393_1)).
example(1584,neg,advisedby(person85_1,person393_1)).
example(1585,neg,advisedby(person241_1,person393_1)).
example(1586,neg,advisedby(person217_1,person393_1)).
example(1587,neg,advisedby(person270_1,person393_1)).
example(1588,neg,advisedby(person206_1,person393_1)).
example(1589,neg,advisedby(person51_1,person393_1)).
example(1590,neg,advisedby(person41_1,person393_1)).
example(1591,neg,advisedby(person435_1,person393_1)).
example(1592,neg,advisedby(person363_1,person393_1)).
example(1593,neg,advisedby(person427_1,person393_1)).
example(1594,neg,advisedby(person142_1,person393_1)).
example(1595,neg,advisedby(person431_1,person393_1)).
example(1596,neg,advisedby(person283_1,person393_1)).
example(1597,neg,advisedby(person300_1,person393_1)).
example(1598,neg,advisedby(person113_1,person393_1)).
example(1599,neg,advisedby(person296_1,person393_1)).
example(1600,neg,advisedby(person36_1,person393_1)).
example(1601,neg,advisedby(person328_1,person393_1)).
example(1602,neg,advisedby(person31_1,person393_1)).
example(1603,neg,advisedby(person61_1,person393_1)).
example(1604,neg,advisedby(person119_1,person393_1)).
example(1605,neg,advisedby(person3_1,person393_1)).
example(1606,neg,advisedby(person317_1,person393_1)).
example(1607,neg,advisedby(person230_1,person393_1)).
example(1608,neg,advisedby(person258_1,person393_1)).
example(1609,neg,advisedby(person188_1,person393_1)).
example(1610,neg,advisedby(person327_1,person393_1)).
example(1611,neg,advisedby(person140_1,person393_1)).
example(1612,neg,advisedby(person321_1,person393_1)).
example(1613,neg,advisedby(person428_1,person393_1)).
example(1614,neg,advisedby(person158_1,person393_1)).
example(1615,neg,advisedby(person102_1,person393_1)).
example(1616,neg,advisedby(person90_1,person393_1)).
example(1617,neg,advisedby(person214_1,person393_1)).
example(1618,neg,advisedby(person146_1,person393_1)).
example(1619,neg,advisedby(person88_1,person393_1)).
example(1620,neg,advisedby(person178_1,person393_1)).
example(1621,neg,advisedby(person195_1,person393_1)).
example(1622,neg,advisedby(person18_1,person248_1)).
example(1623,neg,advisedby(person9_1,person248_1)).
example(1624,neg,advisedby(person429_1,person248_1)).
example(1625,neg,advisedby(person27_1,person248_1)).
example(1626,neg,advisedby(person362_1,person248_1)).
example(1627,neg,advisedby(person96_1,person248_1)).
example(1628,neg,advisedby(person361_1,person248_1)).
example(1629,neg,advisedby(person263_1,person248_1)).
example(1630,neg,advisedby(person183_1,person248_1)).
example(1631,neg,advisedby(person118_1,person248_1)).
example(1632,neg,advisedby(person105_1,person248_1)).
example(1633,neg,advisedby(person108_1,person248_1)).
example(1634,neg,advisedby(person203_1,person248_1)).
example(1635,neg,advisedby(person287_1,person248_1)).
example(1636,neg,advisedby(person87_1,person248_1)).
example(1637,neg,advisedby(person39_1,person248_1)).
example(1638,neg,advisedby(person35_1,person248_1)).
example(1639,neg,advisedby(person325_1,person248_1)).
example(1640,neg,advisedby(person76_1,person248_1)).
example(1641,neg,advisedby(person232_1,person248_1)).
example(1642,neg,advisedby(person18_1,person64_1)).
example(1643,neg,advisedby(person9_1,person64_1)).
example(1644,neg,advisedby(person429_1,person64_1)).
example(1645,neg,advisedby(person27_1,person64_1)).
example(1646,neg,advisedby(person362_1,person64_1)).
example(1647,neg,advisedby(person96_1,person64_1)).
example(1648,neg,advisedby(person361_1,person64_1)).
example(1649,neg,advisedby(person263_1,person64_1)).
example(1650,neg,advisedby(person183_1,person64_1)).
example(1651,neg,advisedby(person118_1,person64_1)).
example(1652,neg,advisedby(person105_1,person64_1)).
example(1653,neg,advisedby(person108_1,person64_1)).
example(1654,neg,advisedby(person203_1,person64_1)).
example(1655,neg,advisedby(person287_1,person64_1)).
example(1656,neg,advisedby(person87_1,person64_1)).
example(1657,neg,advisedby(person39_1,person64_1)).
example(1658,neg,advisedby(person35_1,person64_1)).
example(1659,neg,advisedby(person325_1,person64_1)).
example(1660,neg,advisedby(person76_1,person64_1)).
example(1661,neg,advisedby(person232_1,person64_1)).
example(1662,neg,advisedby(person18_1,person166_1)).
example(1663,neg,advisedby(person9_1,person166_1)).
example(1664,neg,advisedby(person429_1,person166_1)).
example(1665,neg,advisedby(person27_1,person166_1)).
example(1666,neg,advisedby(person362_1,person166_1)).
example(1667,neg,advisedby(person96_1,person166_1)).
example(1668,neg,advisedby(person361_1,person166_1)).
example(1669,neg,advisedby(person263_1,person166_1)).
example(1670,neg,advisedby(person183_1,person166_1)).
example(1671,neg,advisedby(person118_1,person166_1)).
example(1672,neg,advisedby(person105_1,person166_1)).
example(1673,neg,advisedby(person108_1,person166_1)).
example(1674,neg,advisedby(person203_1,person166_1)).
example(1675,neg,advisedby(person287_1,person166_1)).
example(1676,neg,advisedby(person87_1,person166_1)).
example(1677,neg,advisedby(person39_1,person166_1)).
example(1678,neg,advisedby(person35_1,person166_1)).
example(1679,neg,advisedby(person325_1,person166_1)).
example(1680,neg,advisedby(person76_1,person166_1)).
example(1681,neg,advisedby(person232_1,person166_1)).
example(1682,neg,advisedby(person18_1,person370_1)).
example(1683,neg,advisedby(person9_1,person370_1)).
example(1684,neg,advisedby(person429_1,person370_1)).
example(1685,neg,advisedby(person27_1,person370_1)).
example(1686,neg,advisedby(person362_1,person370_1)).
example(1687,neg,advisedby(person96_1,person370_1)).
example(1688,neg,advisedby(person361_1,person370_1)).
example(1689,neg,advisedby(person263_1,person370_1)).
example(1690,neg,advisedby(person183_1,person370_1)).
example(1691,neg,advisedby(person118_1,person370_1)).
example(1692,neg,advisedby(person105_1,person370_1)).
example(1693,neg,advisedby(person108_1,person370_1)).
example(1694,neg,advisedby(person203_1,person370_1)).
example(1695,neg,advisedby(person287_1,person370_1)).
example(1696,neg,advisedby(person87_1,person370_1)).
example(1697,neg,advisedby(person39_1,person370_1)).
example(1698,neg,advisedby(person35_1,person370_1)).
example(1699,neg,advisedby(person325_1,person370_1)).
example(1700,neg,advisedby(person76_1,person370_1)).
example(1701,neg,advisedby(person232_1,person370_1)).
example(1702,neg,advisedby(person27_1,person335_1)).
example(1703,neg,advisedby(person96_1,person335_1)).
example(1704,neg,advisedby(person361_1,person335_1)).
example(1705,neg,advisedby(person263_1,person335_1)).
example(1706,neg,advisedby(person183_1,person335_1)).
example(1707,neg,advisedby(person118_1,person335_1)).
example(1708,neg,advisedby(person105_1,person335_1)).
example(1709,neg,advisedby(person108_1,person335_1)).
example(1710,neg,advisedby(person203_1,person335_1)).
example(1711,neg,advisedby(person287_1,person335_1)).
example(1712,neg,advisedby(person87_1,person335_1)).
example(1713,neg,advisedby(person39_1,person335_1)).
example(1714,neg,advisedby(person35_1,person335_1)).
example(1715,neg,advisedby(person325_1,person335_1)).
example(1716,neg,advisedby(person76_1,person335_1)).
example(1717,neg,advisedby(person232_1,person335_1)).
example(1718,neg,advisedby(person18_1,person46_1)).
example(1719,neg,advisedby(person9_1,person46_1)).
example(1720,neg,advisedby(person429_1,person46_1)).
example(1721,neg,advisedby(person27_1,person46_1)).
example(1722,neg,advisedby(person362_1,person46_1)).
example(1723,neg,advisedby(person96_1,person46_1)).
example(1724,neg,advisedby(person361_1,person46_1)).
example(1725,neg,advisedby(person263_1,person46_1)).
example(1726,neg,advisedby(person183_1,person46_1)).
example(1727,neg,advisedby(person118_1,person46_1)).
example(1728,neg,advisedby(person105_1,person46_1)).
example(1729,neg,advisedby(person108_1,person46_1)).
example(1730,neg,advisedby(person203_1,person46_1)).
example(1731,neg,advisedby(person287_1,person46_1)).
example(1732,neg,advisedby(person87_1,person46_1)).
example(1733,neg,advisedby(person39_1,person46_1)).
example(1734,neg,advisedby(person35_1,person46_1)).
example(1735,neg,advisedby(person325_1,person46_1)).
example(1736,neg,advisedby(person76_1,person46_1)).
example(1737,neg,advisedby(person232_1,person46_1)).
example(1738,neg,advisedby(person18_1,person189_1)).
example(1739,neg,advisedby(person9_1,person189_1)).
example(1740,neg,advisedby(person429_1,person189_1)).
example(1741,neg,advisedby(person27_1,person189_1)).
example(1742,neg,advisedby(person362_1,person189_1)).
example(1743,neg,advisedby(person96_1,person189_1)).
example(1744,neg,advisedby(person361_1,person189_1)).
example(1745,neg,advisedby(person263_1,person189_1)).
example(1746,neg,advisedby(person183_1,person189_1)).
example(1747,neg,advisedby(person118_1,person189_1)).
example(1748,neg,advisedby(person105_1,person189_1)).
example(1749,neg,advisedby(person108_1,person189_1)).
example(1750,neg,advisedby(person203_1,person189_1)).
example(1751,neg,advisedby(person287_1,person189_1)).
example(1752,neg,advisedby(person87_1,person189_1)).
example(1753,neg,advisedby(person39_1,person189_1)).
example(1754,neg,advisedby(person35_1,person189_1)).
example(1755,neg,advisedby(person325_1,person189_1)).
example(1756,neg,advisedby(person76_1,person189_1)).
example(1757,neg,advisedby(person232_1,person189_1)).
example(1758,neg,advisedby(person18_1,person5_1)).
example(1759,neg,advisedby(person9_1,person5_1)).
example(1760,neg,advisedby(person429_1,person5_1)).
example(1761,neg,advisedby(person27_1,person5_1)).
example(1762,neg,advisedby(person361_1,person5_1)).
example(1763,neg,advisedby(person105_1,person5_1)).
example(1764,neg,advisedby(person108_1,person5_1)).
example(1765,neg,advisedby(person203_1,person5_1)).
example(1766,neg,advisedby(person287_1,person5_1)).
example(1767,neg,advisedby(person87_1,person5_1)).
example(1768,neg,advisedby(person39_1,person5_1)).
example(1769,neg,advisedby(person35_1,person5_1)).
example(1770,neg,advisedby(person325_1,person5_1)).
example(1771,neg,advisedby(person76_1,person5_1)).
example(1772,neg,advisedby(person232_1,person5_1)).

:- dynamic '$aleph_global'/2.

'$aleph_global'(targetpred,targetpred(advisedby/2)).
'$aleph_global'(last_clause,last_clause(0)).
'$aleph_global'(last_example,last_example(neg,1772)).
'$aleph_global'(atoms_left,atoms_left(neg,[1-1772])).
'$aleph_global'(atoms,atoms(neg,[1-1772])).
'$aleph_global'(size,size(neg,1772)).
'$aleph_global'(last_example,last_example(pos,80)).
'$aleph_global'(atoms_left,atoms_left(pos,[1-80])).
'$aleph_global'(atoms,atoms(pos,[1-80])).
'$aleph_global'(size,size(pos,80)).
'$aleph_global'(abduce,set(abduce,false)).
'$aleph_global'(best_clause_hook,set(best_clause_hook,true)).
'$aleph_global'(cache_clauselength,set(cache_clauselength,3)).
'$aleph_global'(caching,set(caching,false)).
'$aleph_global'(check_redundant,set(check_redundant,false)).
'$aleph_global'(check_good,set(check_good,false)).
'$aleph_global'(check_useless,set(check_useless,false)).
'$aleph_global'(clause_rewrite_hook,set(clause_rewrite_hook,true)).
'$aleph_global'(condition,set(condition,false)).
'$aleph_global'(confidence,set(confidence,0.95)).
'$aleph_global'(construct_bottom,set(construct_bottom,saturation)).
'$aleph_global'(good,set(good,false)).
'$aleph_global'(gsamplesize,set(gsamplesize,100)).
'$aleph_global'(interactive,set(interactive,false)).
'$aleph_global'(language,set(language,(+inf))).
'$aleph_global'(lazy_negs,set(lazy_negs,false)).
'$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)).
'$aleph_global'(lazy_on_cost,set(lazy_on_cost,false)).
'$aleph_global'(lookahead,set(lookahead,1)).
'$aleph_global'(max_abducibles,set(max_abducibles,2)).
'$aleph_global'(match_bottom_hook,set(match_bottom_hook,true)).
'$aleph_global'(max_features,set(max_features,(+inf))).
'$aleph_global'(mingain,set(mingain,0.05)).
'$aleph_global'(minposfrac,set(minposfrac,0)).
'$aleph_global'(minscore,set(minscore,(-inf))).
'$aleph_global'(moves,set(moves,5)).
'$aleph_global'(newbest_hook,set(newbest_hook,true)).
'$aleph_global'(good_clause_hook,set(good_clause_hook,true)).
'$aleph_global'(newvars,set(newvars,(+inf))).
'$aleph_global'(nreduce_bottom,set(nreduce_bottom,false)).
'$aleph_global'(openlist,set(openlist,(+inf))).
'$aleph_global'(optimise_clauses,set(optimise_clauses,false)).
'$aleph_global'(permute_bottom,set(permute_bottom,false)).
'$aleph_global'(portray_examples,set(portray_examples,false)).
'$aleph_global'(portray_hypothesis,set(portray_hypothesis,false)).
'$aleph_global'(portray_literals,set(portray_literals,false)).
'$aleph_global'(portray_search,set(portray_search,false)).
'$aleph_global'(prefix_trees,set(prefix_trees,false)).
'$aleph_global'(print,set(print,4)).
'$aleph_global'(proof_strategy,set(proof_strategy,restricted_sld)).
'$aleph_global'(prooftime,set(prooftime,(+inf))).
'$aleph_global'(prune_tree,set(prune_tree,false)).
'$aleph_global'(record_testclause_hook,set(record_testclause_hook,true)).
'$aleph_global'(reduce_end_hook,set(reduce_end_hook,true)).
'$aleph_global'(reduce_start_hook,set(reduce_start_hook,true)).
'$aleph_global'(reduce_prelims_hook,set(reduce_prelims_hook,true)).
'$aleph_global'(refine,set(refine,false)).
'$aleph_global'(refineop,set(refineop,false)).
'$aleph_global'(resample,set(resample,1)).
'$aleph_global'(rls_type,set(rls_type,gsat)).
'$aleph_global'(samplesize,set(samplesize,0)).
'$aleph_global'(sat_end_hook,set(sat_end_hook,true)).
'$aleph_global'(sat_start_hook,set(sat_start_hook,true)).
'$aleph_global'(search,set(search,bf)).
'$aleph_global'(searchstrat,set(searchstrat,bf)).
'$aleph_global'(recompute_cover,set(recompute_cover,false)).
'$aleph_global'(searchtime,set(searchtime,(+inf))).
'$aleph_global'(skolemvars,set(skolemvars,10000)).
'$aleph_global'(skolem_examples,set(skolem_examples,true)).
'$aleph_global'(splitvars,set(splitvars,false)).
'$aleph_global'(store_bottom,set(store_bottom,false)).
'$aleph_global'(subsample,set(subsample,false)).
'$aleph_global'(subsamplesize,set(subsamplesize,(+inf))).
'$aleph_global'(threads,set(threads,1)).
'$aleph_global'(trace_memory_usage,set(trace_memory_usage,false)).
'$aleph_global'(tries,set(tries,10)).
'$aleph_global'(typeoverlap,set(typeoverlap,0.95)).
'$aleph_global'(uniform_sample,set(uniform_sample,false)).
'$aleph_global'(updateback,set(updateback,true)).
'$aleph_global'(version,set(version,5)).
'$aleph_global'(clauselength,set(clauselength,10)).
'$aleph_global'(i,set(i,5)).
'$aleph_global'(noise,set(noise,1000)).
'$aleph_global'(minacc,set(minacc,0.1)).
'$aleph_global'(explore,set(explore,true)).
'$aleph_global'(nodes,set(nodes,500000)).
'$aleph_global'(evalfn,set(evalfn,f)).
'$aleph_global'(test_pos,set(test_pos,'test.f')).
'$aleph_global'(test_neg,set(test_neg,'test.n')).
'$aleph_global'(verbosity,set(verbosity,0)).
'$aleph_global'(minpos,set(minpos,10)).
'$aleph_global'(record,set(record,true)).
'$aleph_global'(recordfile,set(recordfile,'test.out')).
'$aleph_global'(recordfile_stream,set(recordfile_stream,'$stream'(4))).
'$aleph_global'(determination,determination(advisedby/2,taughtby/3)).
'$aleph_global'(determination,determination(advisedby/2,courselevel/2)).
'$aleph_global'(determination,determination(advisedby/2,position/2)).
'$aleph_global'(determination,determination(advisedby/2,projectmember/2)).
'$aleph_global'(determination,determination(advisedby/2,phase/2)).
'$aleph_global'(determination,determination(advisedby/2,tempadvisedby/2)).
'$aleph_global'(determination,determination(advisedby/2,yearsinprogram/2)).
'$aleph_global'(determination,determination(advisedby/2,ta/3)).
'$aleph_global'(determination,determination(advisedby/2,professor/1)).
'$aleph_global'(determination,determination(advisedby/2,student/1)).
'$aleph_global'(determination,determination(advisedby/2,publication/2)).
'$aleph_global'(determination,determination(advisedby/2,allpublicationswith/2)).
'$aleph_global'(determination,determination(advisedby/2,nofpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpub/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubsratio/2)).
'$aleph_global'(modeb,modeb(*,taughtby(+course,-person,-date))).
'$aleph_global'(mode,mode(*,taughtby(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,taughtby(-course,+person,-date))).
'$aleph_global'(mode,mode(*,taughtby(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,-level))).
'$aleph_global'(mode,mode(*,courselevel(+course,-level))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,#level))).
'$aleph_global'(mode,mode(*,courselevel(+course,#level))).
'$aleph_global'(modeb,modeb(*,position(+person,-faculty))).
'$aleph_global'(mode,mode(*,position(+person,-faculty))).
'$aleph_global'(modeb,modeb(*,position(+person,#faculty))).
'$aleph_global'(mode,mode(*,position(+person,#faculty))).
'$aleph_global'(modeb,modeb(*,projectmember(+project,-person))).
'$aleph_global'(mode,mode(*,projectmember(+project,-person))).
'$aleph_global'(modeb,modeb(*,projectmember(-project,+person))).
'$aleph_global'(mode,mode(*,projectmember(-project,+person))).
'$aleph_global'(modeh,modeh(*,advisedby(+person,+person))).
'$aleph_global'(mode,mode(*,advisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,phase(+person,-phase))).
'$aleph_global'(mode,mode(*,phase(+person,-phase))).
'$aleph_global'(modeb,modeb(*,phase(+person,#phase))).
'$aleph_global'(mode,mode(*,phase(+person,#phase))).
'$aleph_global'(modeb,modeb(*,tempadvisedby(+person,+person))).
'$aleph_global'(mode,mode(*,tempadvisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,yearsinprogram(+person,-number))).
'$aleph_global'(mode,mode(*,yearsinprogram(+person,-number))).
'$aleph_global'(modeb,modeb(*,ta(+course,-person,-date))).
'$aleph_global'(mode,mode(*,ta(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,ta(-course,+person,-date))).
'$aleph_global'(mode,mode(*,ta(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,professor(+person))).
'$aleph_global'(mode,mode(*,professor(+person))).
'$aleph_global'(modeb,modeb(*,student(+person))).
'$aleph_global'(mode,mode(*,student(+person))).
'$aleph_global'(modeb,modeb(*,publication(+ref,+person))).
'$aleph_global'(mode,mode(*,publication(+ref,+person))).
'$aleph_global'(modeb,modeb(*,publication(-ref,+person))).
'$aleph_global'(mode,mode(*,publication(-ref,+person))).
'$aleph_global'(modeb,modeb(*,allpublicationswith(+person,+person))).
'$aleph_global'(mode,mode(*,allpublicationswith(+person,+person))).
'$aleph_global'(modeb,modeb(*,not_allpulicationswith(+person,+person))).
'$aleph_global'(mode,mode(*,not_allpulicationswith(+person,+person))).
'$aleph_global'(modeb,modeb(*,nofpubs(+person,-number))).
'$aleph_global'(mode,mode(*,nofpubs(+person,-number))).
'$aleph_global'(modeb,modeb(*,commonpub(+person,-person))).
'$aleph_global'(mode,mode(*,commonpub(+person,-person))).
'$aleph_global'(modeb,modeb(*,commonpubs(+person,+person,-number))).
'$aleph_global'(mode,mode(*,commonpubs(+person,+person,-number))).
'$aleph_global'(modeb,modeb(*,commonpubsratio(+person,+person,-number))).
'$aleph_global'(mode,mode(*,commonpubsratio(+person,+person,-number))).
'$aleph_global'(modeb,modeb(*,commonpubsratio(+person,+person,#number))).
'$aleph_global'(mode,mode(*,commonpubsratio(+person,+person,#number))).
'$aleph_global'(determination,determination(advisedby/2,geq/2)).
'$aleph_global'(modeb,modeb(1,geq(+number,#number))).
'$aleph_global'(mode,mode(1,geq(+number,#number))).
'$aleph_global'(modeb,modeb(1,geq(+number,+number))).
'$aleph_global'(mode,mode(1,geq(+number,+number))).
'$aleph_global'(determination,determination(advisedby/2,diff/2)).
'$aleph_global'(modeb,modeb(1,diff(+number,+number))).
'$aleph_global'(mode,mode(1,diff(+number,+number))).
'$aleph_global'(train_pos,set(train_pos,'advisedby.f')).
'$aleph_global'(train_neg,set(train_neg,'advisedby.n')).
'$aleph_global'(prior,set(prior,[0.0431965-pos,0.956803-neg])).
'$aleph_global'(depth,set(depth,100000000)).
'$aleph_global'(stage,set(stage,saturation)).


set(qpacks,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks(_)),
   assert(qpacks:qpacks(A)).
set(discretize,A) :-
   ( A=on
   ->
     B=on
   ;
     ( A==off
     ->
       B=off
     )
   ;
     ( atom(A)
     ->
       B=on
     )
   ),
   !,
   ( A=on
   ->
     true
   ;
     ( A=off
     ->
       true
     )
   ;
     ensure_loaded(A)
   ),
   retractall(user:discretize(_)),
   assert(user:discretize(B)).
set(qpacks_compact,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks_compact(_)),
   assert(qpacks:qpacks_compact(A)).
set(A,B) :-
   check_setting(A,B),
   ( B=inf
   ->
     C is inf
   ;
     ( B=(+inf)
     ->
       C is inf
     )
   ;
     ( B=(-inf)
     ->
       C is(-inf)
     )
   ;
     C=B
   ),
   retractall(user:'$aleph_global'(A,set(A,_))),
   assertz(user:'$aleph_global'(A,set(A,C))),
   broadcast(set(A,C)),
   special_consideration(A,B).


setting(A,B) :-
   nonvar(A),
   '$aleph_global'(A,set(A,C)),
   !,
   B=C.
setting(A,B) :-
   default_setting(A,B).


init(yap) :-
   source,
   load_files(library(dbusage),[]),
   load_files(library(nb),[]),
   load_files(library(tries),[]),
   use_module(qpacks),
   use_module(prefix_trees),
   use_module(c2c),
   use_module(utils),
   ( prolog:predicate_property(user:false,built_in)
   ->
     prolog:hide_predicate(user:false)
   ;
     true
   ),
   style_check(single_var),
   yap_flag(unknown,error),
   prolog:assert_static(user: (aleph_random(A):-A is random)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     prolog:assert_static(user: (remove_alarm(A):-alarm(0,_,_)))
   ;
     prolog:assert_static(user:alarm(_,_,_)),
     prolog:assert_static(user:remove_alarm(_))
   ),
   prolog:assert_static(user: (aleph_consult(B):-consult(B))),
   prolog:assert_static(user: (aleph_reconsult(B):-reconsult(B))),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     prolog:assert_static(user: (thread_local  _))
   ),
   prolog:assert_static(user:broadcast(_)),
   prolog:assert_static(user: (aleph_background_predicate(C):-predicate_property(C,D),(D=static;D= (dynamic);D=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).
init(swi) :-
   redefine_system_predicate(false),
   style_check(+singleton),
   style_check(- (discontiguous)),
   dynamic false/0,
   dynamic example/3,
   assert(user: (aleph_random(A):-B=1000000,A is float(random(B-1))/float(B))),
   arithmetic_function(inf/0),
   assert(user:inf(1e+10)),
   assert(user: (gc:-garbage_collect)),
   assert(user: (depth_bound_call(C,D):-call_with_depth_limit(C,D,E),E\=depth_limit_exceeded)),
   ( prolog:predicate_property(user:numbervars(_,_,_),built_in)
   ->
     true
   ;
     assert(user: (numbervars(F,G,H):-numbervars(F,'$VAR',G,H)))
   ),
   assert(user: (assert_static(A):-assert(A))),
   assert(user: (system(A):-shell(A))),
   assert(user: (exists(A):-exists_file(A))),
   assert(user: (aleph_reconsult(I):-consult(I))),
   assert(user: (aleph_consult(A):-aleph_open(A,read,J),repeat,read(J,I),(I=end_of_file->close(J),!;assertz(I),fail))),
   use_module(library(broadcast)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     use_module(library(time))
   ;
     assert(user:alarm(_,_,_)),
     assert(user:remove_alarm(_))
   ),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     assert(user: (thread_local  _))
   ),
   assert(user: (aleph_background_predicate(K):-predicate_property(K,L),(L=interpreted;L=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).


prolog_type(yap) :-
   prolog:predicate_property(user:yap_flag(_,_),built_in),
   !.
prolog_type(swi).

:- dynamic message_hook/3.


:- dynamic portray_message/2.


:- dynamic term_expansion/2.


:- dynamic exception/3.


:- dynamic library_directory/1.

library_directory(A) :-
   current_prolog_flag(prolog_library_directory,A),
   A\=''.
library_directory(A) :-
   getenv('YAPSHAREDIR',A).
library_directory('~/share/Yap').
library_directory('.').
library_directory(A) :-
   system_library(A).

:- dynamic commons_directory/1.

commons_directory(A) :-
   system_commons(A).

:- dynamic foreign_directory/1.

foreign_directory(A) :-
   current_prolog_flag(prolog_foreign_directory,A),
   A\=''.
foreign_directory(A) :-
   current_prolog_flag(windows,true),
   file_search_path(path,A).
foreign_directory('.').
foreign_directory(yap('lib/Yap')).

:- dynamic prolog_file_type/2.

prolog_file_type(yap,prolog).
prolog_file_type(pl,prolog).
prolog_file_type(prolog,prolog).
prolog_file_type(A,prolog) :-
   current_prolog_flag(associate,A),
   A\==prolog,
   A\==pl,
   A\==yap.
prolog_file_type(qly,qly).
prolog_file_type(A,executable) :-
   current_prolog_flag(shared_object_extension,A).
prolog_file_type(pyd,executable).

:- dynamic file_search_path/2.

file_search_path(library,A) :-
   library_directory(A).
file_search_path(commons,A) :-
   commons_directory(A).
file_search_path(swi,A) :-
   current_prolog_flag(home,A).
file_search_path(yap,A) :-
   current_prolog_flag(home,A).
file_search_path(system,A) :-
   prolog_flag(host_type,A).
file_search_path(foreign,A) :-
   foreign_directory(A).
file_search_path(executable,A) :-
   foreign_directory(A).
file_search_path(path,C) :-
   getenv('PATH',A),
   ( current_prolog_flag(windows,true)
   ->
     atomic_list_concat(B,;,A)
   ;
     atomic_list_concat(B,:,A)
   ),
   lists:member(C,B).

:- dynamic goal_expansion/3.


:- dynamic unknown_predicate_handler/3.

[repeated literals] [232/983]

[bottom clause]
[literals] [751]
[saturation time] [0.195]
[sat] [1]

:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[]).
[sat] [1]
[sat] [1]
[sat] [1]
[sat] [1]

[bottom clause]
[literals] [1]
[saturation time] [0.002]

:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[]).


interesting_threshold(1).


diff(A,B) :-
   A\=B.


geq(B,A) :-
   var(A),
   !,
   B=A.
geq(A,B) :-
   A>=B.


allpublicationswith(A,B) :-
   nofpubs(A,C),
   commonpubs(A,B,C).


commonpubsratio(A,B,C) :-
   nofpubs(A,E),
   commonpubs(A,B,D),
   C is integer(D*100/E).


commonpubs(B,C,E) :-
   prolog:setof(A,(publication(A,B),publication(A,C)),D),
   length(D,E).


member(A,[A|_]).
member(A,[_|B]) :-
   member(A,B).


commonpub(C,A) :-
   prolog:setof(A,B^ (publication(B,C),publication(B,A)),D),
   member(A,D).


nofpubs(B,D) :-
   prolog:setof(A,publication(A,B),C),
   !,
   length(C,D).
nofpubs(_,0).


load_bg(0) :-
   [graphics,language,systems,theory].
load_bg(1) :-
   [ai,language,systems,theory].
load_bg(2) :-
   [ai,graphics,systems,theory].
load_bg(3) :-
   [ai,graphics,language,theory].
load_bg(4) :-
   [ai,graphics,language,systems].

:- dynamic advisedby/2.

advisedby(A,B) :-
   '$aleph_search'(pclause,pclause(advisedby(A,B),C)),
   C,
   !.


true(_,_,_).


write_profile_data([]).
write_profile_data([B-A|C]) :-
   prolog:format('~w: ~w~n',user:[A,B]),
   write_profile_data(C).


list_profile :-
   prolog:findall(B-A,prolog:profile_data(user:A,calls,B),C),
   sort(C,D),
   write_profile_data(D).


show_file(A) :-
   aleph_open(A,read,B),
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     writeq(C),
     write('.'),
     nl,
     fail
   ).


restorehyp :-
   retract(user:'$aleph_local'(pclause,pclause(A,B))),
   assertz(user:'$aleph_search'(pclause,pclause(A,B))),
   !.
restorehyp :-
   retract(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   !.
restorehyp.


setting_definition(A,B,C,D,E,G) :-
   set_def(A,B,C,D,E,F),
   ( F=noshow
   ->
     G=dontshow
   ;
     F=G
   ).


number((+inf),A) :-
   A is inf,
   !.
number((-inf),A) :-
   A is(-inf),
   !.
number(B,A) :-
   A is B,
   !.


check_legal(int(A)-int(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal(float(A)-float(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal([B|C],A) :-
   !,
   aleph_member1(A,[B|C]).
check_legal(read(filename),A) :-
   A\= ?,
   !,
   exists(A).
check_legal(_,_).


set_def(abduce,search-search_strategy,'Abduce Atoms and Generalise',[true,false],false,show).
set_def(best,search-search_space,'Label to beat',prolog_term,'',show).
set_def(best_clause_hook,miscellaneous,'Call before adding hypotesis: has 4 extra arguments, the Label, Clause, Positive Cover, and Negative Cover',prolog_term,true,noshow).
set_def(cache_clauselength,miscellaneous,'Maximum Length of Cached Clauses',int(1)-int((+inf)),3,show).
set_def(caching,miscellaneous,'Cache Clauses in Search',[true,false],false,show).
set_def(check_redundant,miscellaneous,'Check for Redundant Literals',[true,false],false,show).
set_def(check_good,miscellaneous,'Check good clauses for duplicates',[true,false],false,show).
set_def(check_useless,saturation,'Remove I/O unconnected Literals',[true,false],false,show).
set_def(classes,tree,'Class labels',prolog_term,'',show).
set_def(clause_rewrite_hook,miscellaneous,'Call User defined predicate before actually calling a clause, as call(P,Inp,Out)',prolog_term,true,noshow).
set_def(clauselength_distribution,search-search_strategy,'Probablity Distribution over Clauses',prolog_term,'',show).
set_def(clauselength,search-search_space,'Maximum Clause Length',int(1)-int((+inf)),4,show).
set_def(clauses,search-search_space,'Maximum Clauses per Theory',int(1)-int((+inf)),'',show).
set_def(condition,evaluation,'Condition SLP',[true,false],false,show).
set_def(confidence,tree,'Confidence for Rule Pruning',float(0)-float(1),0.95,show).
set_def(construct_bottom,saturation,'Build a bottom clause',[saturation,reduction,false],saturation,show).
set_def(depth,miscellaneous,'Theorem Proving Depth',int(1)-int((+inf)),10,show).
set_def(evalfn,evaluation,'Evaluation Function',[coverage,compression,posonly,pbayes,accuracy,laplace,auto_m,mestimate,mse,entropy,gini,sd,wracc,user],coverage,show).
set_def(explore,search-search_space,'Exhaustive Search of all alternatives',[true,false],false,show).
set_def(good,miscellaneous,'Store good clauses',[true,false],false,show).
set_def(goodfile,miscellaneous,'File of good clauses',write(filename),'',show).
set_def(gsamplesize,evaluation,'Size of random sample',int(1)-int((+inf)),100,show).
set_def(i,saturation,'bound layers of new variables',int(1)-int((+inf)),2,show).
set_def(interactive,search-search_strategy,'Interactive theory construction',[true,false],false,show).
set_def(language,search-search_space,'Maximum occurrence of any predicate symbol in a clause',int(1)-int((+inf)),(+inf),show).
set_def(lazy_negs,evaluation,'Lazy theorem proving on negative examples',[true,false],false,show).
set_def(lazy_on_contradiction,evaluation,'Lazy theorem proving on contradictions',[true,false],false,show).
set_def(lazy_on_cost,evaluation,'Lazy theorem proving on cost',[true,false],false,show).
set_def(lookahead,search-search_space,'Lookahead for automatic refinement operator',int(1)-int((+inf)),1,show).
set_def(m,evaluation,'M-estimate',float(0)-float((+inf)),'',show).
set_def(max_abducibles,search-search_space,'Maximum number of atoms in an abductive explanation',int(1)-int((+inf)),2,show).
set_def(match_bottom_hook,miscellaneous,'Call User defined predicate when generating a new refinement call(P,Rule)',prolog_term,true,noshow).
set_def(max_features,miscellaneous,'Maximum number of features to be constructed',int(1)-int((+inf)),(+inf),show).
set_def(minacc,evaluation,'Minimum clause accuracy',float(0)-float(1),0,show).
set_def(mingain,tree,'Minimum expected gain',float(1e-06)-float((+inf)),0.05,show).
set_def(minpos,evaluation,'Minimum pos covered by a clause',int(0)-int((+inf)),1,show).
set_def(minposfrac,evaluation,'Minimum proportion of positives covered by a clause',float(0)-float(1),0,show).
set_def(minscore,evaluation,'Minimum utility of an acceptable clause',float((-inf))-float((+inf)),(-inf),show).
set_def(moves,search-search_strategy,'Number of moves in a randomised local search',int(0)-int((+inf)),5,show).
set_def(newbest_hook,miscellaneous,'Call after finding a new best clause: has three extra arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(good_clause_hook,miscellaneous,'Call after finding a good clause: has two arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(newvars,search-search_space,'Existential variables in a clause',int(0)-int((+inf)),(+inf),show).
set_def(nodes,search-search_space,'Nodes to be explored in the search',int(1)-int((+inf)),5000,show).
set_def(noise,evaluation,'Maximum negatives covered',int(0)-int((+inf)),0,show).
set_def(nreduce_bottom,saturation,'Negative examples based reduction of bottom clause',[true,false],false,show).
set_def(openlist,search-search_space,'Beam width in a greedy search',int(1)-int((+inf)),(+inf),show).
set_def(optimise_clauses,miscellaneous,'Perform query Optimisation',[true,false],false,show).
set_def(permute_bottom,saturation,'Randomly permute order of negative literals in the bottom clause',[true,false],false,show).
set_def(portray_examples,miscellaneous,'Pretty print examples',[true,false],false,show).
set_def(portray_hypothesis,miscellaneous,'Pretty print hypotheses',[true,false],false,show).
set_def(portray_literals,miscellaneous,'Pretty print literals',[true,false],false,show).
set_def(portray_search,miscellaneous,'Pretty print search',[true,false],false,show).
set_def(prefix_trees,miscellaneous,'Prefix Tree Execution',[true,false],false,show).
set_def(print,miscellaneous,'Literals printed per line',int(1)-int((+inf)),4,show).
set_def(prior,miscellaneous,'Prior class distribution',prolog_term,'',show-ro).
set_def(proof_strategy,miscellaneous,'Current proof strategy',[restricted_sld,sld,user],restricted_sld,show).
set_def(prooftime,miscellaneous,'Theorem proving time',float(0)-float((+inf)),(+inf),show).
set_def(prune_tree,tree,'Tree pruning',[true,false],false,show).
set_def(recordfile,miscellaneous,'Log filename',write(filename),'',show).
set_def(record,miscellaneous,'Log to file',[true,false],false,show).
set_def(record_testclause_hook,miscellaneous,'Called just before you try to make the systemm use pclause database from Aleph search, has one argumeent F/A',prolog_term,true,noshow).
set_def(reduce_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_prelims_hook,miscellaneous,'User hook to call before starting a reduce',prolog_term,true,noshow).
set_def(refineop,search-search_strategy,'Current refinement operator',[user,auto,scs,false],'',show-ro).
set_def(refine,search-search_strategy,'Nature of customised refinement operator',[user,auto,scs,false],false,show).
set_def(resample,search-search_strategy,'Number of times to resample an example',int(1)-int((+inf)),1,show).
set_def(rls_type,search-search_strategy,'Type of randomised local search',[gsat,wsat,rrr,anneal],gsat,show).
set_def(rulefile,miscellaneous,'Rule file',write(filename),'',show).
set_def(samplesize,search-search_strategy,'Size of sample',int(0)-int((+inf)),0,show).
set_def(sat_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(sat_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(scs_percentile,search-search_strategy,'Percentile of good clauses for SCS search',float(0)-float(100),'',show).
set_def(scs_prob,search-search_strategy,'Probability of getting a good clause in SCS search',float(0)-float(1),'',show).
set_def(scs_sample,search-search_strategy,'Sample size in SCS search',int(1)-int((+inf)),'',show).
set_def(search,search-search_strategy,'Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar,false],bf,show).
set_def(searchstrat,search-search_strategy,'Current Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar],bf,show-ro).
set_def(recompute_cover,search-strategy,'do not store coverage with nodes',[true,false],false,show).
set_def(searchtime,search-search_strategy,'Search time in seconds',float(0)-float((+inf)),(+inf),show).
set_def(skolemvars,miscellaneous,'Counter for non-ground examples',int(1)-int((+inf)),10000,show).
set_def(skolem_examples,miscellaneous,'Skolemize Examples: usually true, but disabled by CLP(BN)',[true,false],true,noshow).
set_def(splitvars,saturation,'Split variable co-refencing',[true,false],false,show).
set_def(stage,miscellaneous,'Aleph processing mode',[saturation,reduction,command],command,show-ro).
set_def(store_bottom,saturation,'Store bottom',[true,false],false,show).
set_def(subsample,search-search_strategy,'Subsample for evaluating a clause',[true,false],false,show).
set_def(subsamplesize,search-search_strategy,'Size of subsample for evaluating a clause',int(1)-int((+inf)),(+inf),show).
set_def(temperature,search-search_strategy,'Temperature for randomised search annealing',float(0)-float((+inf)),'',show).
set_def(test_neg,miscellaneous,'Negative examples for testing theory',read(filename),'',show).
set_def(test_pos,miscellaneous,'Positive examples for testing theory',read(filename),'',show).
set_def(threads,miscellaneous,'Number of threads',int(1)-int((+inf)),1,show).
set_def(trace_memory_usage,miscellaneous,'Report on How Aleph is Using Memory',[true,false],false,show).
set_def(train_neg,miscellaneous,'Negative examples for training',read(filename),'',show).
set_def(train_pos,miscellaneous,'Positive examples for training',read(filename),'',show).
set_def(tree_type,tree,'Type of tree to construct',[classification,class_probability,regression,model],'',show).
set_def(tries,search-search_strategy,'Number of restarts for a randomised search',int(1)-int((+inf)),10,show).
set_def(typeoverlap,miscellaneous,'Type overlap for induce_modes',float(0)-float(1),0.95,show).
set_def(uniform_sample,search-search_strategy,'Distribution to draw clauses from randomly',[true,false],false,show).
set_def(updateback,miscellaneous,'Update background knowledge with clauses found on search',[true,false],true,noshow).
set_def(verbosity,miscellaneous,'Level of verbosity',int(0)-int((+inf)),1,show).
set_def(version,miscellaneous,'Aleph version',int(0)-int((+inf)),5,show-ro).
set_def(walk,search-search_strategy,'Random walk probability for Walksat',float(0)-float(1),'',show).


sumsq([],0).
sumsq([C|A],B) :-
   sumsq(A,D),
   B is C*C+D.


sum([],0).
sum([C|A],B) :-
   sum(A,D),
   B is C+D.


random(A,normal(B,C)) :-
   var(A),
   !,
   normal(B,C,A).
random(A,normal(_,_)) :-
   !,
   number(A).
random(B,A) :-
   A=[_|_],
   var(B),
   !,
   draw_element(A,C),
   B=C.
random(B,A) :-
   A=[_|_],
   nonvar(B),
   !,
   aleph_member(C-B,A),
   C> 0.


test_file(?,_) :-
   !.
test_file(A,F) :-
   setting(portray_examples,G),
   aleph_open(A,read,B),
   !,
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     retract(user:'$aleph_local'(total,D)),
     E is D+1,
     asserta(user:'$aleph_local'(total,E)),
     ( once(depth_bound_call(C))
     ->
       ( F=show
       ->
         p1_message(covered),
         aleph_portray(C,G),
         nl
       ;
         true
       )
     ;
       ( F=show
       ->
         p1_message('not covered'),
         aleph_portray(C,G),
         nl
       ;
         true
       ),
       fail
     ),
     retract(user:'$aleph_local'(covered,H)),
     I is H+1,
     asserta(user:'$aleph_local'(covered,I)),
     fail
   ),
   !.
test_file(A,_) :-
   p1_message('cannot open'),
   p_message(A).


test_files([],_).
test_files([A|C],B) :-
   test_file(A,B),
   test_files(C,B).


sd(A,C) :-
   length(A,B),
   ( B=1
   ->
     C= 0
   ;
     sum(A,E),
     sumsq(A,D),
     C is sqrt(D/ (B-1)-E*E/ (B* (B-1)))
   ).


mean(A,B) :-
   sum(A,C),
   length(A,D),
   B is C/D.


time_loop(0,_,[]) :-
   !.
time_loop(E,A,[B|G]) :-
   wallclock(D),
   call(user:A),
   wallclock(C),
   B is C-D,
   F is E-1,
   time_loop(F,A,G).


time(B,A,[D,E]) :-
   time_loop(A,B,C),
   mean(C,D),
   sd(C,E).


wallclock(A) :-
   statistics(real_time,[A|_]).


coversn(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(coversn,coverns(D,F))).


covers(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(covers,covers(D,F))).


coversn(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(coversn,coverns(D,E))).


covers(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(covers,covers(D,E))).


coversn :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(neg,B,C),
   examples(neg,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(coversn,_)),
   asserta(user:'$aleph_search'(coversn,coversn(C,D))).


get_hyp((A:-B)) :-
   '$aleph_search'(pclause,pclause(A,B)),
   !.
get_hyp(A) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)).


covers :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(pos,B,C),
   examples(pos,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(covers,_)),
   asserta(user:'$aleph_search'(covers,covers(C,D))).


rmhyp :-
   retract(user:'$aleph_search'(pclause,pclause(A,B))),
   asserta(user:'$aleph_local'(pclause,pclause(A,B))),
   !.
rmhyp :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   !.
rmhyp.


add_gcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   update_theory(_),
   fail.
add_gcws.


add_theory(B,A,D,E) :-
   aleph_member(C,A),
   add_hyp(B,C,D,E),
   update_theory(_),
   fail.
add_theory(_,_,A,B) :-
   rm_seeds(pos,A),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,B)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,C)),
   interval_count(C,D),
   p1_message('atoms left'),
   p_message(D),
   !.


rdhyp :-
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   read(A),
   add_hyp(A),
   nl,
   show(hypothesis).


get_hyp_label(_,A) :-
   var(A),
   !.
get_hyp_label((_:-A),[D,E,B]) :-
   nlits(A,C),
   B is C+1,
   ( '$aleph_search'(covers,covers(_,D))
   ->
     true
   ;
     covers(_),
     '$aleph_search'(covers,covers(_,D))
   ),
   ( '$aleph_search'(coversn,coverns(_,E))
   ->
     true
   ;
     coversn(_),
     '$aleph_search'(coversn,coversn(_,E))
   ).


hypothesis(A,C,E) :-
   '$aleph_search'(pclause,pclause(B,D)),
   !,
   A=B,
   C=D,
   get_hyp_label((B:-D),E).
hypothesis(C,E,G) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   ( A=[_|_]
   ->
     aleph_member(B,A)
   ;
     A=B
   ),
   split_clause(B,D,F),
   C=D,
   E=F,
   get_hyp_label((D:-F),G).


best_hypothesis(E,G,[A,B,C]) :-
   '$aleph_search'(selected,selected([A,B,C|_],D,_,_)),
   split_clause(D,F,H),
   !,
   E=F,
   G=H.


write_rule(A) :-
   aleph_member(B,A),
   '$aleph_global'(theory,theory(B,_,C,_,_)),
   pp_dclause(C),
   fail.
write_rule(_).


write_features(A) :-
   aleph_open(A,write,B),
   set_output(B),
   listing('$aleph_feature'/2),
   close(B),
   set_output(user_output).
write_features(_).


write_features :-
   setting(featurefile,A),
   write_features(A),
   !.
write_features.


write_rules(A) :-
   aleph_open(A,write,B),
   set_output(B),
   '$aleph_global'(rules,rules(C)),
   aleph_reverse(C,D),
   write_rule(D),
   flush_output(B),
   set_output(user_output).


write_rules :-
   setting(rulefile,A),
   write_rules(A),
   !.
write_rules.


posleft(B) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_to_list(A,B).


bottom(C) :-
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],B),
   list_to_clause(B,C).


settings :-
   show(settings).


show_global(A,B) :-
   '$aleph_global'(A,B),
   copy_term(B,C),
   numbervars(C,0,_),
   aleph_writeq(C),
   write('.'),
   nl,
   fail.
show_global(_,_).


feature(A,B) :-
   '$aleph_feature'(feature,feature(A,_,_,C,D)),
   B= (C:-D).


modes(C/D,A) :-
   A=modeh(_,B),
   '$aleph_global'(modeh,A),
   functor(B,C,D).
modes(C/D,A) :-
   A=modeb(_,B),
   '$aleph_global'(modeb,A),
   functor(B,C,D).


modeb(A,B) :-
   ( '$aleph_global'(modeb,modeb(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeb,modeb(A,B))),
     ( '$aleph_global'(mode,mode(A,B))
     ->
       true
     ;
       assertz(user:'$aleph_global'(mode,mode(A,B)))
     )
   ).


modeh(A,B) :-
   ( '$aleph_global'(mode,mode(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeh,modeh(A,B))),
     assertz(user:'$aleph_global'(mode,mode(A,B))),
     functor(B,C,D),
     update_backpreds(C/D)
   ).


mode(A,B) :-
   modeh(A,B),
   modeb(A,B).


positive_only(A/B) :-
   assertz(user:'$aleph_global'(positive_only,positive_only(A/B))).


model(A/B) :-
   assertz(user:'$aleph_global'(model,model(A/B))).


lazy_evaluate(A/B) :-
   assertz(user:'$aleph_global'(lazy_evaluate,lazy_evaluate(A/B))).


symmetric(A/B) :-
   assertz(user:'$aleph_global'(symmetric,symmetric(A/B))).


commutative(A/B) :-
   assertz(user:'$aleph_global'(commutative,commutative(A/B))).


abducible(A/B) :-
   assertz(user:'$aleph_global'(abducible,abducible(A/B))).


determination(A,B) :-
   nonvar(A),
   '$aleph_global'(determination,determination(A,B)),
   !.
determination(A,B) :-
   noset(autorefine),
   assertz(user:'$aleph_global'(determination,determination(A,B))),
   ( nonvar(A)
   ->
     update_backpreds(A)
   ;
     true
   ).


determinations(A,B) :-
   '$aleph_global'(determination,determination(A,B)).


man(A) :-
   aleph_manual(A).


set_default(A) :-
   default_setting(A,B),
   set(A,B),
   fail.
set_default(_).


rm_special_consideration(portray_literals,_) :-
   set_default(print),
   !.
rm_special_consideration(refine,_) :-
   set_default(refineop),
   !.
rm_special_consideration(record,_) :-
   noset(recordfile_stream),
   !.
rm_special_consideration(recordfile_stream,_) :-
   ( setting(recordfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(good,_) :-
   noset(goodfile_stream),
   !.
rm_special_consideration(goodfile_stream,_) :-
   ( setting(goodfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(_,_).


default_setting(A,B) :-
   set_def(A,_,_,_,B,_),
   B\=''.


special_consideration(search,ida) :-
   set(search,bf),
   set(evalfn,coverage),
   !.
special_consideration(search,compression) :-
   set(search,heuristic),
   set(evalfn,compression),
   !.
special_consideration(search,posonly) :-
   set(search,heuristic),
   set(evalfn,posonly),
   !.
special_consideration(search,user) :-
   set(search,heuristic),
   set(evalfn,user),
   !.
special_consideration(refine,A) :-
   set(refineop,A),
   !.
special_consideration(refineop,auto) :-
   gen_auto_refine,
   !.
special_consideration(portray_literals,true) :-
   set(print,1),
   !.
special_consideration(record,true) :-
   noset(recordfile_stream),
   ( setting(recordfile,A)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(record,false) :-
   noset(recordfile_stream),
   !.
special_consideration(recordfile,A) :-
   noset(recordfile_stream),
   ( setting(record,true)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,true) :-
   noset(goodfile_stream),
   ( setting(goodfile,A)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,false) :-
   noset(goodfile_stream),
   !.
special_consideration(goodfile,A) :-
   noset(goodfile_stream),
   ( setting(good,true)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(minscore,_) :-
   aleph_abolish('$aleph_feature'/2),
   !.
special_consideration(_,_).


check_setting(threads,B) :-
   set_def(threads,_,_,A,_,_),
   check_legal(A,B),
   prolog_type(C),
   ( B>1
   ->
     ( C=swi
     ->
       true
     ;
       err_message(set(threads,B)),
       fail
     )
   ;
     true
   ),
   !.
check_setting(A,C) :-
   set_def(A,_,_,B,_,_),
   !,
   ( check_legal(B,C)
   ->
     true
   ;
     err_message(set(A,C))
   ).
check_setting(_,_).


reinstate_file_streams :-
   setting(recordfile,A),
   set(recordfile,A),
   fail.
reinstate_file_streams :-
   setting(goodfile,A),
   set(goodfile,A),
   fail.
reinstate_file_streams.


reinstate_values :-
   reinstate_file_streams,
   '$aleph_global'(save,save(_,_)),
   repeat,
   retract(user:'$aleph_global'(save,save(B,A))),
   ( A=unknown
   ->
     noset(B)
   ;
     set(B,A)
   ),
   \+'$aleph_global'(save,save(_,_)),
   !.
reinstate_values :-
   reduce_end_hook.


store_bottom :-
   bottom_key(A,B,C,true),
   asserta(user:'$aleph_sat'(stored,stored(A,B,C))),
   '$aleph_sat'(lastterm,D),
   asserta(user:'$aleph_sat'(lasterm,C,D)),
   '$aleph_sat'(lastvar,E),
   asserta(user:'$aleph_sat'(lastvar,C,E)),
   '$aleph_sat'(botsize,F),
   asserta(user:'$aleph_sat'(botsize,C,F)),
   '$aleph_sat'(lastlit,G),
   asserta(user:'$aleph_sat'(lastlit,C,G)),
   '$aleph_sat'(hovars,H),
   asserta(user:'$aleph_sat'(hovars,C,H)),
   '$aleph_sat'(hivars,I),
   asserta(user:'$aleph_sat'(hivars,C,I)),
   '$aleph_sat'(eq,J),
   asserta(user:'$aleph_sat'(eq,C,J)),
   '$aleph_sat_ivars'(K,L),
   asserta(user:'$aleph_sat_ivars'(K,C,L)),
   '$aleph_sat_ovars'(K,M),
   asserta(user:'$aleph_sat_ovars'(K,C,M)),
   '$aleph_sat_litinfo'(K,N,O,P,Q,R),
   asserta(user:'$aleph_sat_litinfo'(K,C,N,O,P,Q,R)),
   fail.
store_bottom.


file_extension(pos,A) :-
   name('.f',A).
file_extension(neg,A) :-
   name('.n',A).
file_extension(background,A) :-
   name('.b',A).


read_examples_from_file(A,B,C) :-
   construct_name(A,B,C),
   ( aleph_open(C,read,E)
   ->
     concat(['consulting ',A,' examples'],D),
     p1_message(D),
     p_message(C)
   ;
     p1_message('cannot open'),
     p_message(C),
     fail
   ),
   repeat,
   read(E,F),
   ( F=end_of_file
   ->
     close(E)
   ;
     record_example(nocheck,A,F,_),
     fail
   ),
   !.
read_examples_from_file(_,_,?).


read_examples_from_files([],_,[]).
read_examples_from_files([B|D],A,[C|E]) :-
   read_examples_from_file(A,B,C),
   read_examples_from_files(D,A,E).


read_examples_files(A,B,C) :-
   clean_up_examples(A),
   asserta(user:'$aleph_global'(size,size(A,0))),
   ( B=[_|_]
   ->
     read_examples_from_files(B,A,C)
   ;
     read_examples_from_file(A,B,C)
   ),
   '$aleph_global'(size,size(A,D)),
   ( D>0
   ->
     E=[1-D]
   ;
     E= ([])
   ),
   asserta(user:'$aleph_global'(atoms,atoms(A,E))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(A,E))),
   asserta(user:'$aleph_global'(last_example,last_example(A,D))).


construct_name(_,A,A) :-
   setting(use_file_extensions,false),
   !.
construct_name(B,A,E) :-
   name(A,D),
   file_extension(B,C),
   aleph_append(C,D,F),
   name(E,F).


read_examples(B,D) :-
   ( setting(train_pos,A)
   ->
     set(use_file_extensions,false),
     read_examples_files(pos,A,_),
     noset(use_file_extensions)
   ;
     read_examples_files(pos,B,A),
     set(train_pos,A)
   ),
   ( setting(train_neg,C)
   ->
     set(use_file_extensions,false),
     read_examples_files(neg,C,_),
     noset(use_file_extensions)
   ;
     read_examples_files(neg,D,C),
     set(train_neg,C)
   ),
   '$aleph_global'(size,size(pos,E)),
   '$aleph_global'(size,size(neg,F)),
   set_lazy_recalls,
   ( setting(prior,_)
   ->
     true
   ;
     normalise_distribution([E-pos,F-neg],G),
     set(prior,G)
   ),
   reset_counts,
   asserta(user:'$aleph_global'(last_clause,last_clause(0))),
   broadcast(examples(loaded)).


read_background(A) :-
   construct_name(background,A,B),
   aleph_reconsult(B),
   broadcast(background(loaded)).


reset :-
   clean_up,
   clear_cache,
   aleph_abolish('$aleph_global'/2),
   aleph_abolish(example/3),
   prolog:assert_static(user:example(0,uspec,false)),
   set_default(_),
   !.


read_all(A,B) :-
   read_all(A,B,B).


read_all(A,B,C) :-
   clean_up,
   reset,
   read_background(A),
   read_examples(B,C),
   record_targetpred,
   check_recursive_calls,
   check_prune_defs,
   check_user_search,
   check_posonly,
   check_auto_refine,
   check_abducibles.


read_all(A) :-
   read_all(A,A,A).


extract_cover(_,[]).


eval_rule(0,B) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   !,
   label_create(A,B),
   p_message('Rule 0'),
   pp_dclause(A),
   extract_count(pos,B,C),
   extract_count(neg,B,D),
   extract_length(B,E),
   label_print_eval([C,D,E]),
   nl.
eval_rule(A,C) :-
   integer(A),
   A>0,
   '$aleph_global'(theory,theory(A,_,B,_,_)),
   !,
   label_create(B,C),
   extract_count(pos,C,D),
   extract_count(neg,C,E),
   concat(['Rule ',A],G),
   ( setting(evalfn,posonly)
   ->
     concat(['Pos cover = ',D,' Rand cover = ',E],F)
   ;
     concat(['Pos cover = ',D,' Neg cover = ',E],F)
   ),
   p1_message(G),
   p_message(F),
   pp_dclause(B),
   setting(verbosity,H),
   ( H>=2
   ->
     p_message('positive examples covered'),
     label_print_examples(pos,C),
     p_message('negative examples covered'),
     label_print_examples(neg,C)
   ;
     true
   ),
   nl.
eval_rule(_,_).


evalfn_name(compression,compression).
evalfn_name(coverage,'pos-neg').
evalfn_name(accuracy,accuracy).
evalfn_name(wracc,novelty).
evalfn_name(laplace,'laplace estimate').
evalfn_name(pbayes,'pseudo-bayes estimate').
evalfn_name(auto_m,'m estimate').
evalfn_name(mestimate,'m estimate').
evalfn_name(mse,mse).
evalfn_name(posonly,'posonly bayes estimate').
evalfn_name(entropy,entropy).
evalfn_name(gini,'gini value').
evalfn_name(sd,'standard deviation').
evalfn_name(user,'user defined cost').


label_print_eval([]) :-
   !.
label_print_eval(B) :-
   A=coverage,
   evalfn(A,B,C),
   print_eval(A,C).


examples(A,C) :-
   setting(portray_literals,E),
   example(B,A,D),
   aleph_member1(B,C),
   aleph_portray(D,E),
   write('.'),
   nl,
   fail.
examples(_,_).


label_print_examples(A,B) :-
   extract_cover(A,B,C),
   examples(A,C).


extract_length([_,_,A|_],A).


label_union([],A,A) :-
   !.
label_union(A,[],A) :-
   !.
label_union(A,B,N) :-
   extract_cover(pos,A,D),
   extract_cover(pos,B,C),
   extract_cover(neg,A,F),
   extract_cover(neg,B,E),
   extract_length(A,G),
   extract_length(B,H),
   update_list(C,D,I),
   update_list(E,F,J),
   M is G+H,
   list_to_intervals(I,K),
   list_to_intervals(J,L),
   assemble_label(K,L,M,N).


label_ncover(A,B) :-
   extract_cover(neg,A,B).


extract_cover(pos,[A,_,_],B) :-
   intervals_to_list(A,B),
   !.
extract_cover(neg,[_,A,_],B) :-
   intervals_to_list(A,B),
   !.


label_pcover(A,B) :-
   extract_cover(pos,A,B).


assemble_label(A,B,C,[A,B,C]).


label_create(A,G,H,J) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,I,_),
   retractall(user:'$aleph_search'(pclause,_)),
   ( G=pos
   ->
     assemble_label(I,unknown,unknown,J)
   ;
     assemble_label(unknown,I,unknown,J)
   ).


label_create(A,G,H,I,J,N) :-
   split_clause(A,B,C),
   nlits((B,C),M),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,K,_),
   prove(D/E/F,I,(B:-C),J,L,_),
   retractall(user:'$aleph_search'(pclause,_)),
   assemble_label(K,L,M,N),
   !.


get_normal(0,_,_,[]) :-
   !.
get_normal(A,B,C,[D|F]) :-
   A>0,
   normal(B,C,D),
   E is A-1,
   get_normal(E,B,C,F).


std_normal(F) :-
   aleph_random(A),
   aleph_random(B),
   C is 2*A-1,
   D is 2*B-1,
   E is C^2+D^2,
   ( E>1
   ->
     std_normal(F)
   ;
     G is sqrt(-2*log(E)/E),
     F is C*G
   ).


normal(B,C,A) :-
   std_normal(D),
   A is B+C*D.


random_select_from_intervals(D,A) :-
   interval_count(A,B),
   get_random(B,C),
   interval_select(C,A,D).


random_nselect(0,_,[]) :-
   !.
random_nselect(_,[],[]) :-
   !.
random_nselect(C,B,[A|F]) :-
   random_select(A,B,E),
   D is C-1,
   random_nselect(D,E,F).


key_sum([],0).
key_sum([C-_|A],B) :-
   key_sum(A,D),
   B is float(C+D).


draw_element([B-F|G],A,C,E) :-
   D is A+B,
   ( C=<D
   ->
     E=F
   ;
     draw_element(G,D,C,E)
   ).


select_example(A,B,[D-C|_],E) :-
   A=<B+C-D+1,
   !,
   E is A-B+D-1.
select_example(D,A,[C-B|F],G) :-
   E is A+B-C+1,
   select_example(D,E,F,G).


worse_coversets1(A-B,_,_,[]) :-
   A>B,
   !.
worse_coversets1(B-G,A,E,H) :-
   '$aleph_global'(max_set,max_set(A,B,C,_)),
   C=[_,_,_,D|_],
   D>=E,
   !,
   F is B+1,
   worse_coversets1(F-G,A,E,H),
   !.
worse_coversets1(A-C,D,E,[A|F]) :-
   B is A+1,
   worse_coversets1(B-C,D,E,F),
   !.


update_coversets([],_,_,_).
update_coversets([B|E],D,A,C) :-
   ( retract(user:'$aleph_global'(max_set,max_set(A,B,_,_)))
   ->
     true
   ;
     true
   ),
   asserta(user:'$aleph_global'(max_set,max_set(A,B,C,D))),
   update_coversets(E,D,A,C),
   !.


worse_coversets(_,_,_,[]) :-
   \+'$aleph_global'(maxcover,set(maxcover,true)),
   !.
worse_coversets([],_,_,[]).
worse_coversets([A|D],B,C,G) :-
   worse_coversets1(A,B,C,F),
   worse_coversets(D,B,C,E),
   aleph_append(E,F,G),
   !.


rm_interval(_,[],[]).
rm_interval(A,[B|D],G) :-
   interval_intersection(A,B,C),
   !,
   interval_subtract(B,C,F),
   rm_interval(A,D,E),
   aleph_append(E,F,G).
rm_interval(B,[A|C],[A|D]) :-
   rm_interval(B,C,D).


rm_seeds(pos,A) :-
   setting(construct_features,true),
   setting(feature_construction,exhaustive),
   !,
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,C))),
   ( '$aleph_global'(example_selected,example_selected(_,B))
   ->
     true
   ;
     A=[B-_|_]
   ),
   rm_seeds1([B-B],C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,D))).
rm_seeds(A,B) :-
   retract(user:'$aleph_global'(atoms_left,atoms_left(A,C))),
   rm_seeds1(B,C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(A,D))).


rm_seeds :-
   update_theory(A),
   !,
   '$aleph_global'(theory,theory(A,_,_,B,C)),
   rm_seeds(pos,B),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,C)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,D)),
   interval_count(D,E),
   p1_message('atoms left'),
   p_message(E),
   !.
rm_seeds.


add_clause_to_background(A) :-
   '$aleph_global'(theory,theory(A,C/_,I,_,_)),
   ( setting(minpos,B)
   ->
     true
   ;
     B=1
   ),
   C=[D,_,_,E|_],
   D>=B,
   setting(minscore,F),
   E>=F,
   !,
   ( retract(user:'$aleph_global'(rules,rules(G)))
   ->
     asserta(user:'$aleph_global'(rules,rules([A|G])))
   ;
     asserta(user:'$aleph_global'(rules,rules([A])))
   ),
   ( setting(updateback,H)
   ->
     true
   ;
     H=true
   ),
   user_clause_rewrite(I,J),
   ( H=true
   ->
     assertz(user:J)
   ;
     true
   ),
   !.
add_clause_to_background(_).


gen_lits([],[]).
gen_lits([B|C],[A|D]) :-
   gen_litnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,B,[],[],[])),
   gen_lits(C,D).


gen_featurenum(A) :-
   '$aleph_feature'(last_feature,B),
   !,
   A is B+1,
   setting(max_features,C),
   A=<C,
   retract(user:'$aleph_feature'(last_feature,B)),
   asserta(user:'$aleph_feature'(last_feature,A)).
gen_featurenum(1) :-
   asserta(user:'$aleph_feature'(last_feature,1)).


gen_litnum(A) :-
   retract(user:'$aleph_sat'(lastlit,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastlit,A)).
gen_litnum(0) :-
   asserta(user:'$aleph_sat'(lastlit,0)).


gen_var(A) :-
   retract(user:'$aleph_sat'(lastvar,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastvar,A)).
gen_var(0) :-
   asserta(user:'$aleph_sat'(lastvar,0)).


skolem_var(A) :-
   atomic(A),
   !,
   name(A,[36|_]).
skolem_var(B) :-
   gen_var(A),
   name(A,C),
   name(B,[36|C]).


index_clause((A:-true),B,A) :-
   !,
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).
index_clause(A,B,A) :-
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).


add_skolem_types2([],_).
add_skolem_types2([A/C|F],B) :-
   tparg(A,B,D),
   E=..[C,D],
   ( '$aleph_global'(back,back(E))
   ->
     true
   ;
     asserta(user:'$aleph_global'(back,back(E))),
     asserta(user:E)
   ),
   add_skolem_types2(F,B).


add_skolem_types1([],_).
add_skolem_types1([A|F],C) :-
   split_args(A,_,B,D,E),
   add_skolem_types2(B,C),
   add_skolem_types2(D,C),
   add_skolem_types2(E,C),
   add_skolem_types1(F,C).


add_skolem_types([]).
add_skolem_types([A|E]) :-
   functor(A,B,C),
   get_modes(B/C,D),
   add_skolem_types1(D,A),
   add_skolem_types(E).


add_skolem_types(10000,_,_) :-
   !.
add_skolem_types(_,A,B) :-
   add_skolem_types([A]),
   add_skolem_types(B).


add_backs([]).
add_backs([A|D]) :-
   asserta(user:'$aleph_global'(back,back(A))),
   functor(A,B,C),
   declare_dynamic(B/C),
   assertz(user:A),
   add_backs(D).


update_backpreds(A/B) :-
   '$aleph_local'(backpred,A/B),
   !.
update_backpreds(A/B) :-
   assertz(user:'$aleph_local'(backpred,A/B)).


skolemize(A,B) :-
   skolemize(A,B,[],0,_).


set_lazy_on_contradiction(_,_) :-
   '$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)),
   !.
set_lazy_on_contradiction(A,B) :-
   C is A+B,
   C>=100,
   !,
   set(lazy_on_contradiction,true).
set_lazy_on_contradiction(_,_).


set_lazy_recalls :-
   '$aleph_global'(lazy_evaluate,lazy_evaluate(A/B)),
   functor(C,A,B),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,0))),
   '$aleph_global'(mode,mode(D,C)),
   '$aleph_global'(lazy_recall,lazy_recall(A/B,F)),
   ( D= (*)
   ->
     E=100
   ;
     E=D
   ),
   E>F,
   retract(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,F))),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,E))),
   fail.
set_lazy_recalls.


record_abclause(A/B) :-
   functor(C,A,B),
   E= (C:-'$aleph_search'(abduced,pclause(C,D)),D,!),
   assertz(user:E).


check_abducibles :-
   '$aleph_global'(abducible,abducible(A/B)),
   record_testclause(A/B),
   record_abclause(A/B),
   fail.
check_abducibles.


cost_cover_required :-
   prolog:clause(user:cost(_,A,C),D),
   vars_in_term([A],[],B),
   (
     occurs_in(B,p(C))
   ;
     occurs_in(B,D)
   ),
   !.


check_user_search :-
   setting(evalfn,user),
   \+cost_cover_required,
   set(lazy_on_cost,true),
   !.
check_user_search.


check_prune_defs :-
   prolog:clause(user:prune(_),_),
   !,
   set(prune_defs,true).
check_prune_defs.


record_recursive_sat_call(A/B) :-
   functor(C,A,B),
   G= (C:-'$aleph_global'(stage,set(stage,saturation)),'$aleph_sat'(example,example(F,D)),example(E,D,C),E\=F,!),
   assertz(user:G).


check_recursive_calls :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   '$aleph_global'(determination,determination(A/B,A/B)),
   record_recursive_sat_call(A/B),
   set(recursion,true),
   fail.
check_recursive_calls.


record_testclause(A/B) :-
   setting(record_testclause_hook,true),
   !,
   functor(C,A,B),
   E= (C:-'$aleph_search'(pclause,pclause(C,D)),D,!),
   assertz(user:E).
record_testclause(B/C) :-
   setting(record_testclause_hook,A),
   prolog:call(call(user:A),B/C).


record_targetpred :-
   retract(user:'$aleph_local'(backpred,A/B)),
   once('$aleph_global'(determination,determination(A/B,_))),
   asserta(user:'$aleph_global'(targetpred,targetpred(A/B))),
   record_testclause(A/B),
   fail.
record_targetpred.


record_nskolemized(B,A,C,true) :-
   !,
   assertz(user:example(A,B,C)).
record_nskolemized(B,A,C,D) :-
   assertz(user: (example(A,B,C):-D)).


record_skolemized(B,A,G,C,F) :-
   assertz(user:example(A,B,C)),
   functor(C,D,E),
   update_backpreds(D/E),
   add_backs(F),
   add_skolem_types(G,C,F).


pfac(0,_,_,1).
pfac(1,_,_,1).
pfac(A,A,_,1).
pfac(A,D,B,F) :-
   C is A-1,
   E is B-1,
   pfac(C,D,E,G),
   H is A/B,
   F is G*H.


aleph_choose(A,B,D) :-
   C is A-B,
   ( C>B
   ->
     pfac(A,C,B,D)
   ;
     pfac(A,B,C,D)
   ).


binom(B,_,A,0) :-
   A>B,
   !.
binom(A,C,B,F) :-
   aleph_choose(A,B,G),
   H is C^B,
   D is 1-C,
   E is A-B,
   I is D^E,
   F is G*H*I,
   !.


call_with_depth_bound((A:-B),C) :-
   !,
   call_with_depth_bound((A,B),C).
call_with_depth_bound((A,C),B) :-
   !,
   prolog:depth_bound_call(call(user:A),B),
   call_with_depth_bound(C,B).
call_with_depth_bound(A,B) :-
   prolog:depth_bound_call(call(user:A),B).


clean_up_tree :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)).


clean_up_examples(A) :-
   retractall(user:'$aleph_global'(size,size(A,_))),
   retractall(user:'$aleph_global'(atoms,atoms(A,_))),
   retractall(user:'$aleph_global'(atoms_left,atoms_left(A,_))),
   retractall(user:'$aleph_global'(last_example,last_example(A,_))).


clean_up_examples :-
   clean_up_examples(pos),
   clean_up_examples(neg),
   clean_up_examples(rand).


clean_up_search :-
   retractall(user:'$aleph_search'(bad,_)),
   retractall(user:'$aleph_search'(best,_)),
   retractall(user:'$aleph_search'(best_label,_)),
   retractall(user:'$aleph_search'(clauseprior,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   retractall(user:'$aleph_search'(current,_)),
   retractall(user:'$aleph_search'(label,_)),
   retractall(user:'$aleph_search'(modes,_)),
   retractall(user:'$aleph_search'(nextnode,_)),
   destroy_open_list,
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(selected,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   retractall(user:'$aleph_search_expansion'(_,_,_,_)),
   retractall(user:'$aleph_search_gain'(_,_,_,_)),
   retractall_aleph_search_node.


clean_up_init :-
   aleph_abolish('$aleph_good'/3),
   retractall(user:'$aleph_search'(last_good,_)),
   aleph_abolish('$aleph_feature'/2).


declare_dynamic(A/B) :-
   dynamic A/B.


occurs1(E,C,A,B) :-
   A=<B,
   arg(A,C,D),
   vars_in_term([D],[],F),
   aleph_member(G,E),
   aleph_member(H,F),
   G==H,
   !.
occurs1(C,D,A,B) :-
   A<B,
   E is A+1,
   occurs1(C,D,E,B).


occurs_in(A,(B,_)) :-
   occurs_in(A,B),
   !.
occurs_in(A,(_,B)) :-
   !,
   occurs_in(A,B).
occurs_in(B,A) :-
   functor(A,_,C),
   occurs1(B,A,1,C).


aleph_ord_subset(=,_,A,_,B) :-
   aleph_ord_subset(A,B).
aleph_ord_subset(>,A,B,_,C) :-
   aleph_ord_subset([A|B],C).


aleph_ord_subset([],_) :-
   !.
aleph_ord_subset([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_subset(C,A,D,B,E).


aleph_ord_intersection(=,A,B,_,C,[A|D]) :-
   aleph_ord_intersection(B,C,D).
aleph_ord_intersection(<,_,A,B,C,D) :-
   aleph_ord_intersection(A,[B|C],D).
aleph_ord_intersection(>,A,B,_,C,D) :-
   aleph_ord_intersection([A|B],C,D).


aleph_ord_union(=,A,B,_,C,[A|D],E) :-
   aleph_ord_union(B,C,D,E).
aleph_ord_union(<,A,B,C,D,[A|E],F) :-
   aleph_ord_union(B,[C|D],E,F).
aleph_ord_union(>,B,C,A,D,[A|E],[A|F]) :-
   aleph_ord_union([B|C],D,E,F).


aleph_ord_union(A,[],A,[]) :-
   !.
aleph_ord_union([],A,A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F,G) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F,G).


aleph_ord_union(=,A,B,_,C,[A|D]) :-
   aleph_ord_union(B,C,D).
aleph_ord_union(<,A,B,C,D,[A|E]) :-
   aleph_ord_union(B,[C|D],E).
aleph_ord_union(>,B,C,A,D,[A|E]) :-
   aleph_ord_union([B|C],D,E).


aleph_ord_disjoint(<,_,A,B,C) :-
   aleph_ord_disjoint(A,[B|C]).
aleph_ord_disjoint(>,A,B,_,C) :-
   aleph_ord_disjoint([A|B],C).


aleph_ord_subtract(=,_,A,_,B,C) :-
   aleph_ord_subtract(A,B,C).
aleph_ord_subtract(<,A,B,C,D,[A|E]) :-
   aleph_ord_subtract(B,[C|D],E).
aleph_ord_subtract(>,A,B,_,C,D) :-
   aleph_ord_subtract([A|B],C,D).


interval_subtract(A-B,A-B,[]) :-
   !.
interval_subtract(A-B,A-D,[C-B]) :-
   !,
   C is D+1.
interval_subtract(B-A,D-A,[B-C]) :-
   !,
   C is D-1.
interval_subtract(A-B,D-F,[A-C,E-B]) :-
   C is D-1,
   E is F+1,
   C>=A,
   B>=E,
   !.


interval_subsumes(A-C,B-D) :-
   A=<B,
   C>=D.


interval_to_list(B-C,A,A) :-
   B>C,
   !.
interval_to_list(A-C,D,E) :-
   B is A+1,
   interval_to_list(B-C,[A|D],E).


intervals_to_list([],A,A).
intervals_to_list([A|C],B,E) :-
   interval_to_list(A,B,D),
   intervals_to_list(C,D,E).


list_to_interval(A,[],A,[]).
list_to_interval(A,[B|C],A,[B|C]) :-
   B-A>1,
   !.
list_to_interval(_,[A|B],C,D) :-
   list_to_interval(A,B,C,D).


list_to_intervals(A,C) :-
   sort(A,B),
   list_to_intervals1(B,C).


intervals_to_list(A,C) :-
   intervals_to_list(A,[],B),
   sort(B,C),
   !.


interval_select(A,[C-B|_],D) :-
   A=<B-C+1,
   !,
   D is C+A-1.
interval_select(A,[C-B|E],F) :-
   D is A- (B-C+1),
   interval_select(D,E,F).


interval_intersection(A-B,C-D,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(C-D,A-B,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(A-D,C-B,A-B) :-
   A>=C,
   B>=A,
   B=<D,
   !.
interval_intersection(C-B,A-D,A-B) :-
   A>=C,
   A=<B,
   B=<D,
   !.


intervals_intersects1(A,[B|_],C) :-
   interval_intersection(A,B,C),
   !.
intervals_intersects1(A,[_|B],C) :-
   intervals_intersects1(A,B,C).


intervals_intersects1(A-_,[B-C|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(B-C,[A-_|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(A-B,[_|C]) :-
   intervals_intersects1(A-B,C).


intervals_intersects([A-B|_],C) :-
   intervals_intersects1(A-B,C),
   !.
intervals_intersects([_|A],B) :-
   intervals_intersects(A,B).


partition(_,[],[],[]).
partition(B,[A|C],[A|D],E) :-
   B@>A,
   !,
   partition(B,C,D,E).
partition(B,[A|C],D,[A|E]) :-
   partition(B,C,D,E).


quicksort(_,[],[]).
quicksort(C,[A|B],H) :-
   partition(A,B,D,E),
   quicksort(C,D,G),
   quicksort(C,E,F),
   ( C=ascending
   ->
     aleph_append([A|F],G,H)
   ;
     aleph_append([A|G],F,H)
   ).


aleph_subset2([A|B],[A|C]) :-
   aleph_subset2(B,C).
aleph_subset2(A,[_|B]) :-
   aleph_subset2(A,B).
aleph_subset2([],[]).


get_pclause1([A],B,E,G,F,I,C) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,D,_,_,_),
   get_flatatom(D,E,F,G),
   functor(F,H,_),
   ( H= (=)
   ->
     I=0
   ;
     I=1
   ).
get_pclause1([A|F],B,D,H,(E,I),L,J) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,_,_),
   get_flatatom(C,D,E,G),
   get_pclause1(F,B,G,H,I,M,J),
   functor(E,K,_),
   ( K= (=)
   ->
     L=M
   ;
     L is M+1
   ).


get_pclause1([A],D,F,E,H,B) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,_,_,_),
   get_flatatom(C,D,E,F),
   functor(E,G,_),
   ( G= (=)
   ->
     H=0
   ;
     H=1
   ).
get_pclause1([A|E],C,G,(D,H),K,I) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   get_flatatom(B,C,D,F),
   get_pclause1(E,F,G,H,L,I),
   functor(D,J,_),
   ( J= (=)
   ->
     K=L
   ;
     K is L+1
   ).


flatten_args(0,_,_,A,A) :-
   !.
flatten_args(A,B,D,G,H) :-
   arg(A,B,C),
   F is A-1,
   ( C=aleph_const(E)
   ->
     arg(A,D,E),
     flatten_args(F,B,D,G,H)
   ;
     ( integer(C)
     ->
       update(G,C/I,J),
       arg(A,D,I),
       flatten_args(F,B,D,J,H)
     )
   ;
     functor(C,K,L),
     functor(M,K,L),
     arg(A,D,M),
     flatten_args(L,C,M,G,J),
     flatten_args(F,B,D,J,H)
   ).


get_flatatom(not A,B,not C,D) :-
   !,
   get_flatatom(A,B,C,D).
get_flatatom(A,E,B,F) :-
   functor(A,C,D),
   functor(B,C,D),
   flatten_args(D,A,B,E,F).


get_clause(A,B,_,[]) :-
   A>B,
   !.
get_clause(A,F,C,[D|H]) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   !,
   get_flatatom(B,C,D,G),
   E is A+1,
   get_clause(E,F,G,H).
get_clause(A,C,D,E) :-
   B is A+1,
   get_clause(B,C,D,E).


revzap([B|A],C,D) :-
   revzap(A,[B|C],D).
revzap([],A,A).


aleph_member3(A,A-B) :-
   A=<B.
aleph_member3(C,A-B) :-
   A<B,
   D is A+1,
   aleph_member3(C,D-B).


alphabetic_variant(A,B) :-
   copy_term(A/B,C/D),
   numbervars(C,0,_),
   numbervars(D,0,_),
   C=D.


min_in_list([A],A) :-
   !.
min_in_list([B|A],D) :-
   min_in_list(A,C),
   ( B@>C
   ->
     D=C
   ;
     D=B
   ).


max_in_list([A],A) :-
   !.
max_in_list([B|A],D) :-
   max_in_list(A,C),
   ( B@>C
   ->
     D=B
   ;
     D=C
   ).


get_first_n(0,_,[]) :-
   !.
get_first_n(_,[],[]) :-
   !.
get_first_n(B,[A|D],[A|E]) :-
   C is B-1,
   get_first_n(C,D,E).


aleph_rsample(B,C,A,A) :-
   B>=C,
   !.
aleph_rsample(D,B,[A|G],[A|H]) :-
   get_random(B,C),
   C=<D,
   !,
   E is D-1,
   F is B-1,
   aleph_rsample(E,F,G,H).
aleph_rsample(B,A,[_|D],E) :-
   C is A-1,
   aleph_rsample(B,C,D,E).


aleph_rsample(B,A,D) :-
   length(A,C),
   aleph_rsample(B,C,A,D).


aleph_rpermute([],0,[]) :-
   !.
aleph_rpermute(C,A,[D|G]) :-
   get_random(A,B),
   aleph_remove_nth(B,C,D,E),
   F is A-1,
   aleph_rpermute(E,F,G).


aleph_delete0(_,[],[]).
aleph_delete0(A,[A|B],B) :-
   !.
aleph_delete0(B,[A|C],[A|D]) :-
   aleph_delete0(B,C,D).


aleph_delete1(A,[A|B],B) :-
   !.
aleph_delete1(B,[A|C],[A|D]) :-
   aleph_delete1(B,C,D).


print_lit(B,C,A,E,D,F) :-
   ( A=1
   ->
     tab(3)
   ;
     true
   ),
   aleph_portray(B,C),
   write(D),
   ( A=E
   ->
     nl,
     F=1
   ;
     F is A+1
   ).


print_litlist([],_,_,_).
print_litlist([A],B,C,_) :-
   !,
   print_lit(A,B,C,C,'.',_).
print_litlist([A|E],B,C,D) :-
   print_lit(A,B,C,D,', ',F),
   print_litlist(E,B,F,D).


pp_dlist(A,D) :-
   copy_term(A,[B|C]),
   numbervars([B|C],0,_),
   aleph_portray(B,D),
   ( C= ([])
   ->
     write('.'),
     nl
   ;
     ( D=true
     ->
       write(' if:')
     ;
       write(' :-')
     ),
     nl,
     '$aleph_global'(print,set(print,E)),
     print_litlist(C,D,1,E)
   ).


pp_dlist([]) :-
   !.
pp_dlist(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dlist(A,true)
   ;
     pp_dlist(A,false)
   ).


print_lits((C,F),A,D,E) :-
   !,
   ( A=true
   ->
     B=' and '
   ;
     B=', '
   ),
   print_lit(C,A,D,E,B,G),
   print_lits(F,A,G,E).
print_lits(A,B,C,_) :-
   print_lit(A,B,C,C,'.',_).


aleph_portray(hypothesis,true) :-
   aleph_portray(hypothesis),
   !.
aleph_portray(hypothesis,false) :-
   p_message(hypothesis),
   hypothesis(A,B,_),
   pp_dclause((A:-B)),
   !.
aleph_portray(_,hypothesis) :-
   !.
aleph_portray(search,true) :-
   aleph_portray(search),
   !.
aleph_portray(search,_) :-
   !.
aleph_portray(train_pos,true) :-
   aleph_portray(train_pos),
   !.
aleph_portray(train_pos,_) :-
   !,
   setting(train_pos,A),
   show_file(A).
aleph_portray(train_neg,true) :-
   aleph_portray(train_neg),
   !.
aleph_portray(train_neg,_) :-
   !,
   setting(train_neg,A),
   show_file(A).
aleph_portray(test_pos,true) :-
   aleph_portray(test_pos),
   !.
aleph_portray(test_pos,_) :-
   !,
   setting(test_pos,A),
   show_file(A).
aleph_portray(test_neg,true) :-
   aleph_portray(test_neg),
   !.
aleph_portray(test_neg,_) :-
   !,
   setting(test_neg,A),
   show_file(A).
aleph_portray(A,true) :-
   aleph_portray(A),
   !.
aleph_portray(A,_) :-
   aleph_writeq(A).


pp_dclause((A:-true),B) :-
   !,
   pp_dclause(A,B).
pp_dclause((A:-B),E) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),0,_),
   aleph_portray(C,E),
   ( E=true
   ->
     write(' if:')
   ;
     write(' :-')
   ),
   nl,
   '$aleph_global'(print,set(print,F)),
   print_lits(D,E,1,F).
pp_dclause(A,C) :-
   copy_term(A,B),
   numbervars(B,0,_),
   aleph_portray(B,C),
   write('.'),
   nl.


strip_true((A:-true),A) :-
   !.
strip_true(A,A).


extract_clauses_with_length([],[]).
extract_clauses_with_length([A-[_,_,_,B] |C],[A-B|D]) :-
   extract_clauses_with_length(C,D).


theory_move(delete_clause,A,B) :-
   aleph_delete(_,A,B),
   B\= ([]).
theory_move(add_clause,A,E) :-
   setting(clauses,C),
   length(A,B),
   B<C,
   sample_clauses(1,[D]),
   aleph_append([D],A,E).
theory_move(delete_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(delete_lit,B,C),
   aleph_append([C],D,E).
theory_move(add_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(add_lit,B,C),
   aleph_append([C],D,E).


clause_move(delete_lit,A,P) :-
   A=J-[F,G,B,L],
   ( B=[D|C]
   ->
     aleph_delete(_,C,E),
     H=[D|E],
     bottom_key(F,G,I,_),
     clause_status(H,I,[],legal,legal),
     O is J-1,
     ( I=false
     ->
       get_pclause(H,[],K,_,_,_)
     ;
       get_pclause(H,I,[],K,_,_,_)
     ),
     \+prune(K)
   ;
     clause_to_list(L,[N|M]),
     aleph_delete(_,M,E),
     aleph_mode_linked([N|E]),
     list_to_clause([N|E],K),
     \+prune(K),
     O is J-1,
     H= ([])
   ),
   P=O-[F,G,H,K].
clause_move(add_lit,A,P) :-
   A=B-[F,G,D,E],
   setting(clauselength,C),
   B<C,
   ( D= ([])
   ->
     auto_refine(E,O),
     N is B+1,
     M= ([])
   ;
     aleph_delete(I,D,L),
     bottom_key(F,G,H,_),
     ( H=false
     ->
       '$aleph_sat_litinfo'(I,_,_,_,_,J)
     ;
       '$aleph_sat_litinfo'(I,H,_,_,_,_,J)
     ),
     aleph_member(K,J),
     \+aleph_member(K,L),
     aleph_append([K],D,M),
     clause_status(M,H,[],legal,legal),
     N is B+1,
     ( H=false
     ->
       get_pclause(M,[],O,_,_,_)
     ;
       get_pclause(M,H,[],O,_,_,_)
     ),
     \+prune(O)
   ),
   P=N-[F,G,M,O].


old_move(clauses,B-[_,_,C,D]) :-
   ( setting(cache_clauselength,A)
   ->
     true
   ;
     A=3
   ),
   B=<A,
   ( C= ([])
   ->
     clause_to_list(D,E),
     sort(E,F),
     numbervars(F,0,_)
   ;
     sort(C,F)
   ),
   ( '$aleph_search_seen'(B,F)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,F)),
     !,
     fail
   ).
old_move(theories,A) :-
   numbervars(A,0,_),
   length(A,B),
   ( '$aleph_search_seen'(B,C)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,C)),
     !,
     fail
   ).


num_to_length1(B,A,_,_,A) :-
   B>=A,
   !.
num_to_length1(A,H,D,B,F) :-
   '$aleph_sat'(random,number_of_clauses(A,C)),
   E is B+C,
   ( D=<E
   ->
     ( C< 1
     ->
       F is A-1
     ;
       F=A
     )
   ;
     G is A+1,
     num_to_length1(G,H,D,E,F)
   ).


get_rand_lit(A,C,B) :-
   repeat,
   get_random(A,B),
   B>1,
   ( C=false
   ->
     '$aleph_sat_litinfo'(B,_,_,_,_,_)
   ;
     '$aleph_sat_litinfo'(B,C,_,_,_,_,_)
   ),
   !.


get_rand_lit(A,B,D,C) :-
   repeat,
   get_rand_lit(A,B,C),
   \+aleph_member(C,D),
   !.


clause_status(A,C,D,E) :-
   bottom_key(_,_,B,_),
   clause_status(A,B,C,D,E).


randselect(0,_,_,_,[]) :-
   !.
randselect(_,C,_,A,[]) :-
   length(A,B),
   B is C-1,
   !.
randselect(E,A,B,C,[D|G]) :-
   get_rand_lit(A,B,C,D),
   F is E-1,
   randselect(F,A,B,[D|C],G).


clause_status([],_,_,A,A) :-
   !.
clause_status([C|F],B,A,H,I) :-
   get_ovars(A,B,[],E),
   get_ivars([C],B,[],D),
   aleph_subset1(D,E),
   !,
   aleph_append([C],A,G),
   clause_status(F,B,G,H,I).
clause_status(_,_,_,_,illegal).


randselect1(0,_,_,_,[]) :-
   !.
randselect1(_,_,[],_,[]) :-
   !.
randselect1(H,C,B,F,[A|K]) :-
   random_select(A,B,E),
   ( C=false
   ->
     '$aleph_sat_litinfo'(A,_,_,_,_,D)
   ;
     '$aleph_sat_litinfo'(A,C,_,_,_,_,D)
   ),
   update_list(D,E,G),
   aleph_delete_list([A|F],G,J),
   I is H-1,
   randselect1(I,C,J,[A|F],K).


get_pclause([A],B,C,E,D,F,G) :-
   !,
   get_pclause1([A],B,C,D,E,F,G).
get_pclause([A|D],B,C,H,F,K,G) :-
   get_pclause1([A],B,C,E,I,L,_),
   get_pclause1(D,B,E,F,J,M,G),
   H= (I:-J),
   K is L+M.


bottom_key(A,B,C,D) :-
   ( var(A),
     var(B)
   ->
     '$aleph_sat'(example,example(A,B))
   ;
     true
   ),
   ( setting(store_bottom,true)
   ->
     ( '$aleph_sat'(stored,stored(A,B,C))
     ->
       D=false
     ;
       concat([B,'_',A],C),
       D=true
     )
   ;
     C=false,
     D=false
   ).


randclause(1,B,legal,[1]) :-
   !,
   bottom_key(_,_,A,_),
   ( A=false
   ->
     get_pclause([1],[],B,_,_,_)
   ;
     get_pclause([1],A,[],B,_,_,_)
   ).
randclause(B,E,A,F) :-
   A==legal,
   '$aleph_sat'(example,example(C,D)),
   retract(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F))).
randclause(D,H,A,F) :-
   A==legal,
   !,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat_litinfo'(1,_,_,_,_,C)
   ;
     '$aleph_sat_litinfo'(1,B,_,_,_,_,C)
   ),
   E is D-1,
   repeat,
   randselect1(E,B,C,[1],G),
   F=[1|G],
   clause_status(F,B,[],legal,legal),
   !,
   ( B=false
   ->
     get_pclause(F,[],H,_,_,_)
   ;
     get_pclause(F,B,[],H,_,_,_)
   ).
randclause(A,I,H,F) :-
   D is A-1,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat'(lastlit,C)
   ;
     '$aleph_sat'(lastlit,B,C)
   ),
   repeat,
   randselect(D,C,B,[],E),
   aleph_append(E,[1],F),
   clause_status(F,B,[],legal,G),
   G=H,
   !,
   ( B=false
   ->
     get_pclause(F,[],I,_,_,_)
   ;
     get_pclause(F,B,[],I,_,_,_)
   ).


randclause_wo_repl(A,B,C,D,E) :-
   A>0,
   randclause(B,C,D,E),
   \+prune(C),
   split_clause(C,G,H),
   ( setting(language,F)
   ->
     lang_ok(F,G,H)
   ;
     true
   ),
   ( setting(newvars,I)
   ->
     newvars_ok(I,G,H)
   ;
     true
   ),
   \+'$aleph_sat'(random,rselect(E)),
   !,
   asserta(user:'$aleph_sat'(random,rselect(E))).
randclause_wo_repl(A,C,D,E,F) :-
   A>0,
   B is A-1,
   randclause_wo_repl(B,C,D,E,F),
   !.
randclause_wo_repl(_,1,A,B,C) :-
   randclause(1,A,B,C).


count_clause_status1([],_,0,0) :-
   !.
count_clause_status1([C/_|A],B,D,F) :-
   count_clause_status1(A,B,E,G),
   ( B==C
   ->
     D is E+1,
     F is G
   ;
     D is E,
     F is G+1
   ).


print_distribution :-
   write('Clause Length'),
   tab(8),
   write('Estimated number of clauses'),
   nl,
   write('_____________'),
   tab(8),
   write('___________________________'),
   nl,
   prolog:findall(A-B,'$aleph_sat'(random,number_of_clauses(A,B)),C),
   sort(C,D),
   aleph_member(A-B,D),
   write(A),
   tab(20),
   write(B),
   nl,
   fail.
print_distribution :-
   nl,
   write('Estimated size of hypothesis space = '),
   ( '$aleph_sat'(random,hypothesis_space(A))
   ->
     true
   ;
     A=0
   ),
   write(A),
   write(' clauses'),
   nl.


store_legal_clauses([],_,_,_).
store_legal_clauses([A/[E,F] |G],B,C,D) :-
   ( A==legal
   ->
     asserta(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F)))
   ;
     true
   ),
   store_legal_clauses(G,B,C,D).


count_clause_status(_,A,_,0) :-
   var(A),
   !.
count_clause_status(A,B,C,D) :-
   count_clause_status1(A,B,C,D).


get_random_wo_repl(0,_,[]) :-
   !.
get_random_wo_repl(E,A,[C/[B,D] |G]) :-
   randclause_wo_repl(A,B,C,D),
   !,
   F is E-1,
   get_random_wo_repl(F,A,G).
get_random_wo_repl(_,_,[]).


total_clauses(1,_,1) :-
   !.
total_clauses(A,B,E) :-
   C is A-1,
   D is B-1,
   total_clauses(C,D,F),
   E is F*D.


estimate_proportion(0,_,_,0,[]) :-
   !.
estimate_proportion(B,A,D,F,C) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   retractall(user:'$aleph_sat'(random,rselect_legal(A,_,_,_,_))),
   get_random_wo_repl(B,A,C),
   length(C,E),
   count_clause_status(C,D,G,_),
   ( E=0
   ->
     F=0
   ;
     F is G/E
   ),
   '$aleph_sat'(example,example(H,I)),
   retractall(user:'$aleph_sat'(random,rselect(_))),
   store_legal_clauses(C,A,H,I).


estimate_number(1,_,1) :-
   !.
estimate_number(B,A,D) :-
   estimate_proportion(A,B,legal,E,_),
   '$aleph_sat'(lastlit,C),
   total_clauses(B,C,F),
   D is float(E*F).


estimate_number(1,B,D,A,C) :-
   !,
   estimate_number(A,B,E),
   C is D+E.
estimate_number(E,B,C,A,H) :-
   p_message('New Trial'),
   estimate_number(A,B,D),
   G is C+D,
   F is E-1,
   estimate_number(F,B,G,A,H).


estimate_number(_,_,B,0) :-
   '$aleph_sat'(lastlit,A),
   A<B,
   !.
estimate_number(A,C,B,D) :-
   A>0,
   p1_message('Estimate legal clauses with length'),
   p_message(B),
   estimate_number(A,C,0,B,E),
   D is float(E/A),
   concat(['trials=',A,' sample=',C,' estimate=',D],F),
   p_message(F).


estimate_numbers(0,_,_,A,A) :-
   !.
estimate_numbers(A,B,C,E,H) :-
   retractall(user:'$aleph_sat'(random,number_of_clauses(A,_))),
   estimate_number(B,C,A,D),
   asserta(user:'$aleph_sat'(random,number_of_clauses(A,D))),
   F is A-1,
   G is D+E,
   estimate_numbers(F,B,C,G,H).


count_frequency([],_,0).
count_frequency([C|A],B,D) :-
   count_frequency(A,B,E),
   ( C=_-B
   ->
     D is E+1
   ;
     D is E
   ).


select_good_clauses([],_,A,B,A,B,[]) :-
   !.
select_good_clauses([A-E|C],A,B,F,G,H,I) :-
   !,
   D is B-1,
   select_good_clauses(C,A,D,[A-E|F],G,H,I).
select_good_clauses(C,_,A,B,A,B,C).


select_good_clauses([],_,A,A) :-
   !.
select_good_clauses(_,B,A,A) :-
   B=<0,
   !.
select_good_clauses([B-D|A],C,E,J) :-
   select_good_clauses(A,B,C,[B-D|E],F,I,G),
   H is F-1,
   select_good_clauses(G,H,I,J).


extract_count(pos,[A,_,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,[_,A,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,_,0).


label_create(C,F) :-
   '$aleph_global'(last_example,last_example(pos,E)),
   D=pos,
   ( setting(evalfn,posonly)
   ->
     '$aleph_global'(last_example,last_example(rand,A)),
     B=rand
   ;
     '$aleph_global'(last_example,last_example(neg,A)),
     B=neg
   ),
   label_create(C,D,[1-E],B,[1-A],F).


estimate_scores([],_,A,A) :-
   !.
estimate_scores([F-[_,_,_,A] |G],C,I,J) :-
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   complete_label(C,A,[D,E,F],[_,_,_,H|_]),
   estimate_scores(G,C,[-H-F|I],J).


normalise_distribution(A,C) :-
   key_sum(A,B),
   ( 0 is float(B)
   ->
     C=A
   ;
     normalise_distribution(A,B,D),
     keysort(D,C)
   ).


estimate_frequency(0,_,[]).
estimate_frequency(A,B,[C-A|E]) :-
   count_frequency(B,A,C),
   D is A-1,
   estimate_frequency(D,B,E).


select_good_clauses(A,C,F) :-
   keysort(A,B),
   length(B,D),
   E is integer(C*D/100),
   select_good_clauses(B,E,[],F).


estimate_clauselength_scores(0,_,_,A,A) :-
   !.
estimate_clauselength_scores(A,B,D,E,H) :-
   set(clauselength_distribution,[1-A]),
   p1_message('Estimate scores of clauses with length'),
   p_message(A),
   sample_clauses(B,C),
   estimate_scores(C,D,E,G),
   F is A-1,
   estimate_clauselength_scores(F,B,D,G,H).


randclause_wo_repl(A,B,C,D) :-
   randclause_wo_repl(100,A,B,C,D).


draw_legalclause_wo_repl(A,B,C,D) :-
   A=<B,
   randclause_wo_repl(A,C,legal,D),
   !.
draw_legalclause_wo_repl(A,B,D,E) :-
   A<B,
   C is A+1,
   draw_legalclause_wo_repl(C,B,D,E).


num_to_length(A,_,1) :-
   A=< 1,
   !.
num_to_length(B,A,C) :-
   num_to_length1(2,A,B,1,C).


get_rrandom(C,A) :-
   aleph_random(B),
   A is B*C.


draw_element(A,D) :-
   normalise_distribution(A,B),
   aleph_random(C),
   draw_element(B,0,C,D).


random_select(A,[A],[]) :-
   !.
random_select(D,A,E) :-
   length(A,B),
   B>0,
   get_random(B,C),
   aleph_remove_nth(C,A,D,E).


sample_clause_using_modes(C,D,E) :-
   prolog:findall(A,auto_refine(false,A),B),
   B\= ([]),
   random_select(F,B,_),
   draw_element(C,D),
   ( D=1
   ->
     E=F
   ;
     G is D-1,
     sample_clause_using_modes(G,F,E)
   ).
sample_clause_using_modes(D,A,E) :-
   prolog:findall(B,auto_refine(A,B),C),
   C\= ([]),
   !,
   ( D=1
   ->
     random_select(E,C,_)
   ;
     random_select(G,C,_),
     F is D-1,
     sample_clause_using_modes(F,G,E)
   ).
sample_clause_using_modes(_,A,A).


legal_clause_using_modes(A,B,C-[0,0,[],D]) :-
   A>0,
   sample_clause_using_modes(B,C,D),
   \+prune(D),
   split_clause(D,F,G),
   ( setting(language,E)
   ->
     lang_ok(E,F,G)
   ;
     true
   ),
   ( setting(newvars,H)
   ->
     newvars_ok(H,F,G)
   ;
     true
   ),
   !.
legal_clause_using_modes(A,C,D) :-
   A>1,
   B is A-1,
   legal_clause_using_modes(B,C,D),
   !.
legal_clause_using_modes(_,_,1-[0,0,[],A]) :-
   sample_clause_using_modes([1-1],1,A).


get_clause_sample(0,_,_,[]) :-
   !.
get_clause_sample(J,A,C,[D-[H,I,G,F] |L]) :-
   ( number(A)
   ->
     get_rrandom(A,B),
     num_to_length(B,C,D),
     E is C
   ;
     draw_element(A,D),
     E is D
   ),
   draw_legalclause_wo_repl(D,E,F,G),
   !,
   '$aleph_sat'(example,example(H,I)),
   K is J-1,
   get_clause_sample(K,A,C,L).
get_clause_sample(A,C,D,E) :-
   B is A-1,
   get_clause_sample(B,C,D,E).


estimate_numbers(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,sample(A,B,C,D,E)),
   '$aleph_sat'(random,hypothesis_space(F)),
   !.
estimate_numbers(A,B,C,D) :-
   retractall(user:'$aleph_sat'(random,sample(_,_,_,_,_))),
   retractall(user:'$aleph_sat'(random,hypothesis_space(_))),
   estimate_numbers(A,B,C,0,D),
   asserta(user:'$aleph_sat'(random,hypothesis_space(D))),
   '$aleph_sat'(example,example(E,F)),
   asserta(user:'$aleph_sat'(random,sample(E,F,A,B,C))).


remove_alpha_variants([],[]).
remove_alpha_variants([B|A],D) :-
   aleph_member(C,A),
   alphabetic_variant(B,C),
   !,
   remove_alpha_variants(A,D).
remove_alpha_variants([A|B],[A|C]) :-
   remove_alpha_variants(B,C).


sample_nclauses_using_modes(0,_,[]) :-
   !.
sample_nclauses_using_modes(C,A,[B|E]) :-
   legal_clause_using_modes(100,A,B),
   D is C-1,
   sample_nclauses_using_modes(D,A,E).


distrib(A-B,_,[]) :-
   A>B,
   !.
distrib(B-D,A,[A-B|E]) :-
   C is B+1,
   distrib(C-D,A,E).


sample_nclauses(false,D,G) :-
   !,
   gen_auto_refine,
   ( setting(clauselength_distribution,C)
   ->
     true
   ;
     setting(clauselength,A),
     B is  1/A,
     distrib(1-A,B,C)
   ),
   sample_nclauses_using_modes(D,C,E),
   remove_alpha_variants(E,F),
   keysort(F,G).
sample_nclauses(_,A,F) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,B),
   ( setting(clauselength_distribution,C)
   ->
     D is A
   ;
     estimate_numbers(B,1,400,C),
     ( A>C
     ->
       D is C
     ;
       D is A
     )
   ),
   get_clause_sample(D,C,B,E),
   keysort(E,F).


sample_clauses(B,C) :-
   setting(construct_bottom,A),
   sample_nclauses(A,B,C).


grounding_equality(+A= #A) :-
   '$aleph_search'(modes,typemapped(B,_,B)),
   concat([type,B],A).


pairwise_equality(+D= +E) :-
   '$aleph_search'(modes,typemapped(_,A,B)),
   '$aleph_search'(modes,typemapped(A,_,C)),
   B\==C,
   concat([type,B],D),
   concat([type,C],E).


infer_mode1([],_,_,_,[]).
infer_mode1([B|J],D,I,A,[G|K]) :-
   best_overlap(A,B,E,C),
   ( C>=D
   ->
     '$aleph_search'(modes,typemapped(E,_,F)),
     asserta(user:'$aleph_search'(modes,typemapped(B,E,F))),
     concat([type,F],H),
     G= +H
   ;
     ( C> 0
     ->
       asserta(user:'$aleph_search'(modes,typemapped(B,E,B)))
     ;
       asserta(user:'$aleph_search'(modes,typemapped(B,B,B)))
     ),
     concat([type,B],H),
     ( I=head
     ->
       G= +H
     ;
       G= -H
     )
   ),
   infer_mode1(J,D,I,A,K).


type_overlap(A,B,C) :-
   A>B,
   !,
   ( '$aleph_search'(modes,typeoverlap(B,A,_,C))
   ->
     true
   ;
     C= 0
   ).
type_overlap(A,B,C) :-
   ( '$aleph_search'(modes,typeoverlap(A,B,C,_))
   ->
     true
   ;
     C= 0
   ).


estimate_forward1([],_,_,0).
estimate_forward1([A|F],D,B,G) :-
   type_overlap(A,B,C),
   ( C>=D
   ->
     E is  1
   ;
     E is  0
   ),
   estimate_forward1(F,D,B,H),
   G is E+H.


best_overlap([A],B,A,C) :-
   !,
   type_overlap(B,A,C).
best_overlap([B|C],A,G,F) :-
   type_overlap(A,B,E),
   best_overlap(C,A,H,D),
   ( D>E
   ->
     F is D,
     G=H
   ;
     F is E,
     G=B
   ).
best_overlap([],A,A,0).


estimate_forward([],_,_,0).
estimate_forward([C|D],B,A,E) :-
   estimate_forward1(A,B,C,F),
   estimate_forward(D,B,A,G),
   E is F+G.


evaluate_backward([],_,_,0).
evaluate_backward([B|F],D,A,G) :-
   best_overlap(A,B,_,C),
   ( C>=D
   ->
     E= 1
   ;
     E= 0
   ),
   evaluate_backward(F,D,A,H),
   G is E+H.


score_modes([],_,_,_,[]).
score_modes([A|M],C,D,E,[K-A|N]) :-
   A=..[_|B],
   evaluate_backward(B,C,D,L),
   aleph_delete_list(B,E,F),
   estimate_forward(D,C,F,H),
   estimate_forward(B,C,F,G),
   I is G-H,
   ( I<0
   ->
     J is 0
   ;
     J is I
   ),
   K is- (L+J),
   score_modes(M,C,D,E,N).


infer_ordered_modes([],_,_,_,_,[]) :-
   !.
infer_ordered_modes(A,B,G,C,D,[H|L]) :-
   score_modes(A,B,C,D,E),
   keysort(E,[_-F|_]),
   infer_mode(F,B,G,C,H,I),
   aleph_delete(F,A,J),
   aleph_delete_list(I,D,K),
   infer_ordered_modes(J,B,G,I,K,L).


infer_mode(A,C,D,E,I,K) :-
   A=..[F|B],
   infer_mode1(B,C,D,E,G),
   J=..[F|G],
   length(B,H),
   ( '$aleph_global'(targetpred,targetpred(F/H))
   ->
     I=modeh(*,J)
   ;
     I=mode(*,J)
   ),
   aleph_ord_union(E,B,K).


aleph_ord_intersection(_,[],[]) :-
   !.
aleph_ord_intersection([],_,[]) :-
   !.
aleph_ord_intersection([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_intersection(C,A,D,B,E,F).


store_type_overlaps([],_,_,_).
store_type_overlaps([A|K],H,C,F) :-
   '$aleph_search'(modes,type(A,G,B)),
   aleph_ord_intersection(B,C,D),
   length(D,E),
   I is E/F,
   J is E/G,
   asserta(user:'$aleph_search'(modes,typeoverlap(H,A,I,J))),
   store_type_overlaps(K,H,C,F).


store_type_equivalence([],_,_).
store_type_equivalence([A|B],E,F) :-
   retract(user:'$aleph_search'(modes,type(A,D,C))),
   store_type_overlaps(B,A,C,D),
   asserta(user:'$aleph_search'(modes,type(A,E,F,D,C))),
   store_type_equivalence(B,E,F).


class_equivalent(A,B) :-
   aleph_member(C,A),
   type_equivalent(B,C),
   !.


type_equivalent([A|_],B) :-
   '$aleph_search'(modes,type(A,_,C)),
   '$aleph_search'(modes,type(B,_,D)),
   intersects(C,D),
   !.
type_equivalent([_|A],B) :-
   type_equivalent(A,B).


get_type_equivalence([],A,B,[]) :-
   sort(A,B).
get_type_equivalence([B|C],A,D,E) :-
   type_equivalent(A,B),
   !,
   get_type_equivalence(C,[B|A],D,E).
get_type_equivalence([A|B],C,D,[A|E]) :-
   get_type_equivalence(B,C,D,E).


get_type_elements(B,D,F,A) :-
   aleph_member(C,A),
   prolog:findall(E,(call(user:B),ground(B),arg(C,D,E)),G),
   arg(C,F,H),
   sort(G,I),
   ( retract(user:'$aleph_search'(modes,type(H,_,J)))
   ->
     aleph_ord_union(I,J,K)
   ;
     K=I
   ),
   length(K,L),
   asserta(user:'$aleph_search'(modes,type(H,L,K))),
   fail.
get_type_elements(_,_,_,_).


number_types(0,_,_) :-
   !.
number_types(A,C,B) :-
   arg(A,B,C),
   D is A-1,
   E is C-1,
   number_types(D,E,B).


add_inferred_modes([],_).
add_inferred_modes([A|C],B) :-
   write(A),
   nl,
   ( B=true
   ->
     call(user:A)
   ;
     true
   ),
   add_inferred_modes(C,B).


infer_negations([],[]).
infer_negations([mode(_,A) |C],D) :-
   A=..[_|B],
   aleph_member1(-_,B),
   !,
   infer_negations(C,D).
infer_negations([mode(_,A) |B],[mode(1,not A) |C]) :-
   infer_negations(B,C).


infer_equalities(C) :-
   prolog:findall(mode(1,A),(pairwise_equality(A);grounding_equality(A)),B),
   sort(B,C).


infer_modes([A|F],B,E,[C|H]) :-
   infer_mode(A,B,head,[],C,D),
   aleph_delete_list(D,E,G),
   infer_ordered_modes(F,B,body,D,G,H).


store_type_equivalences([]).
store_type_equivalences([[A|B] |D]) :-
   length([A|B],C),
   store_type_equivalence([A|B],A,C),
   store_type_equivalences(D).


merge_equivalence_classes([A],[A]) :-
   !.
merge_equivalence_classes(A,G) :-
   aleph_delete(C,A,B),
   aleph_delete(D,B,F),
   class_equivalent(C,D),
   !,
   aleph_ord_union(C,D,E),
   merge_equivalence_classes([E|F],G).
merge_equivalence_classes(A,A).


get_type_equivalences([],[]).
get_type_equivalences([B|A],[C|E]) :-
   get_type_equivalence(A,[B],C,D),
   get_type_equivalences(D,E).


interval_to_list(A-B,[]) :-
   A>B,
   !.
interval_to_list(A-C,[A|D]) :-
   B is A+1,
   interval_to_list(B-C,D).


get_type_elements([]).
get_type_elements([A|F]) :-
   functor(A,B,C),
   functor(D,B,C),
   interval_to_list(1-C,E),
   get_type_elements(example(_,_,D),D,A,E),
   get_type_elements(D,D,A,E),
   get_type_elements(F).


number_types([],A,[],A).
number_types([B/C|F],D,[A|G],H) :-
   functor(A,B,C),
   E is D+C,
   number_types(C,E,A),
   number_types(F,E,G,H).


in((A,B),A,B).
in((A,B),C,(A,D)) :-
   !,
   in(B,C,D).
in(A,A,true).


tautology((false:-A)) :-
   !,
   in(A,C,B),
   in(B,not D),
   C==D.
tautology((B:-A)) :-
   in(A,C),
   B==C,
   !.


aleph_mode_linked([],_) :-
   !.
aleph_mode_linked([A|C],B) :-
   '$aleph_link_vars'(A,B),
   aleph_append([A],B,D),
   aleph_mode_linked(C,D).


aleph_get_lit(B,[A|E]) :-
   functor(A,C,D),
   aleph_get_lit(B,C/D),
   '$aleph_link_vars'(B,[A|E]),
   \+aleph_member2(B,[A|E]).
aleph_get_lit(B,A) :-
   '$aleph_determination'(A,B).


aleph_get_hlit(B/C,A) :-
   functor(A,B,C),
   find_mode(modeh,B/C,D),
   once(split_args(D,D,_,_,E)),
   copy_modeterms(D,A,C),
   get_c_links(E,A,true,F),
   call(user:F).


aleph_member2(A,[B|_]) :-
   A==B,
   !.
aleph_member2(A,[_|B]) :-
   aleph_member2(A,B).


inconsistent_vartypes([B/D|_],A) :-
   aleph_member(C/E,A),
   B==C,
   D\==E,
   !.
inconsistent_vartypes([_|A],B) :-
   inconsistent_vartypes(A,B).


consistent_vartypes([],_).
consistent_vartypes([A/B|D],C) :-
   aleph_member2(A/B,C),
   consistent_vartypes(D,C).


bvar_types([],A,A).
bvar_types([A|E],C,G) :-
   '$aleph_has_vars'(A,B,D),
   consistent_vartypes(B,C),
   \+inconsistent_vartypes(D,C),
   aleph_append(D,C,F),
   bvar_types(E,F,G).


hvar_types(A,D) :-
   '$aleph_has_vars'(A,B,C),
   aleph_append(B,C,D).


var_types([A|B],F) :-
   hvar_types(A,C),
   bvar_types(B,C,D),
   aleph_append(D,C,E),
   sort(E,F).


aleph_output_var(B,C,A,E) :-
   '$aleph_has_ovar'(A,B,C,D),
   D@<E.


aleph_output_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.
aleph_output_var(_,_,_).


aleph_input_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.


prefix_lits(A,true,A) :-
   !.
prefix_lits(A,B,(A,B)).


get_var_types([],_,[]).
get_var_types([B/A|E],C,[D/A|F]) :-
   tparg(B,C,D),
   get_var_types(E,C,F).


get_c_links([],_,A,A).
get_c_links([A/C|I],B,H,K) :-
   tparg(A,B,E),
   D=..[C,F],
   G= (D,E=F),
   prefix_lits(G,H,J),
   get_c_links(I,B,J,K).


get_i_links([],_,_,A,A).
get_i_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F=aleph_input_var(C,D,E),
   prefix_lits(F,G,I),
   get_i_links(H,B,E,I,J).


get_o_links([],_,_,A,A).
get_o_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F= (aleph_output_var(C,D,E);aleph_output_var(C,D,B,A)),
   prefix_lits(F,G,I),
   get_o_links(H,B,E,I,J).


add_ioc_links(A,E,C,G) :-
   J= ('$aleph_link_vars'(A,B):-var_types(B,D),I),
   get_o_links(C,A,D,true,F),
   get_i_links(E,A,D,F,H),
   get_c_links(G,A,H,I),
   assert(user:J).


add_vars(B,A,C) :-
   get_var_types(A,B,D),
   get_var_types(C,B,E),
   ( '$aleph_has_vars'(B,D,E)
   ->
     true
   ;
     assert(user:'$aleph_has_vars'(B,D,E))
   ).


add_ovars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ovar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ovar'(C,D,E,B))
   ),
   fail.
add_ovars(_,_).


add_ivars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ivar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ivar'(C,D,E,B))
   ),
   fail.
add_ivars(_,_).


process_mode(A) :-
   functor(A,B,C),
   split_args(A,A,E,F,G),
   functor(D,B,C),
   copy_modeterms(A,D,C),
   add_ioc_links(D,E,F,G),
   add_ovars(D,F),
   add_vars(D,E,F).


process_determs :-
   once(aleph_abolish('$aleph_determination'/2)),
   '$aleph_global'(determination,determination(E/F,A/B)),
   functor(D,A,B),
   find_mode(modeb,A/B,C),
   copy_modeterms(C,D,B),
   G='$aleph_determination'(E/F,D),
   ( call(user:G)
   ->
     true
   ;
     assert(user:G)
   ),
   fail.
process_determs.


process_modes :-
   once(aleph_abolish('$aleph_link_vars'/2)),
   once(aleph_abolish('$aleph_has_vars'/3)),
   once(aleph_abolish('$aleph_has_ovar'/4)),
   once(aleph_abolish('$aleph_has_ivar'/4)),
   '$aleph_global'(modeb,modeb(_,A)),
   process_mode(A),
   fail.
process_modes :-
   '$aleph_global'(determination,determination(A/B,_)),
   find_mode(modeh,A/B,C),
   split_args(C,C,E,F,_),
   functor(D,A,B),
   copy_modeterms(C,D,B),
   add_ivars(D,E),
   add_ovars(D,F),
   add_vars(D,E,F),
   fail.
process_modes.


gen_auto_refine :-
   ( setting(autorefine,true)
   ->
     true
   ;
     set(autorefine,true),
     process_modes,
     process_determs
   ),
   !.
gen_auto_refine.


has_good_clause_hook(B,C,D) :-
   setting(good_clause_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.
has_good_clause_hook(_,_,_).


execute(A) :-
   system(A),
   !.
execute(_).


find_count(A,C) :-
   copy_term(A,B),
   '$aleph_global'(slp_count,B,C),
   !.
find_count(_,1).


renormalise([],_,[]).
renormalise([C/A|E],D,[B/A|F]) :-
   B is C/D,
   renormalise(E,D,F).


sum_counts([],0).
sum_counts([C/_|A],B) :-
   sum_counts(A,D),
   B is C+D.


inc_count(A) :-
   retract(user:'$aleph_global'(slp_count,A,B)),
   !,
   C is B+1,
   asserta(user:'$aleph_global'(slp_count,A,C)).
inc_count(A) :-
   asserta(user:'$aleph_global'(slp_count,A,2)).


rselect_clause(B,[C/A|_],A) :-
   B=<C,
   !.
rselect_clause(A,[B/_|D],E) :-
   C is A-B,
   rselect_clause(C,D,E).


renormalise(A,C) :-
   sum_counts(A,B),
   B>0,
   renormalise(A,B,C).


update_gsample(A/B,_) :-
   functor(E,A,B),
   make_sname(A,C),
   functor(D,C,B),
   retractall(user:'$aleph_global'(gsample,gsample(_))),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   D=..[_|F],
   E=..[_|F],
   prolog:clause(user:D,G),
   ground((D:-G)),
   record_example(check,rand,(E:-G),H),
   retract(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   fail.
update_gsample(_,A) :-
   '$aleph_local'(slp_samplenum,A),
   A>0,
   !,
   retract(user:'$aleph_local'(slp_samplenum,A)),
   set(gsamplesize,A),
   retract(user:'$aleph_global'(atoms,atoms(rand,_))),
   retract(user:'$aleph_global'(atoms_left,atoms_left(rand,_))),
   retract(user:'$aleph_global'(last_example,last_example(rand,_))),
   assert(user:'$aleph_global'(atoms,atoms(rand,[1-A]))),
   assert(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-A]))),
   assert(user:'$aleph_global'(last_example,last_example(rand,A))).
update_gsample(_,_).


gsample(A/C,_) :-
   make_sname(A,B),
   functor(D,B,C),
   prolog:clause(user:D,E),
   ground((D:-E)),
   !,
   update_gsample(A/C,_).
gsample(_,0) :-
   !.
gsample(A/B,I) :-
   functor(D,A,B),
   make_sname(A,C),
   functor(E,C,B),
   D=..[_|F],
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   repeat,
   slprove(stochastic,E),
   E=..[_|F],
   retract(user:'$aleph_local'(slp_samplenum,G)),
   H is G+1,
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   assertz(user:example(H,rand,D)),
   H>=I,
   !,
   retract(user:'$aleph_local'(slp_samplenum,H)),
   asserta(user:'$aleph_global'(size,size(rand,I))),
   asserta(user:'$aleph_global'(last_example,last_example(rand,I))),
   asserta(user:'$aleph_global'(atoms,atoms(rand,[1-I]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-I]))).


sample(_,0,[]) :-
   !.
sample(A/B,F,H) :-
   functor(C,A,B),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   asserta(user:'$aleph_local'(slp_samplenum,1)),
   repeat,
   slprove(stochastic,C),
   asserta(user:'$aleph_local'(slp_sample,C)),
   retract(user:'$aleph_local'(slp_samplenum,D)),
   E is D+1,
   asserta(user:'$aleph_local'(slp_samplenum,E)),
   E>F,
   !,
   retract(user:'$aleph_local'(slp_samplenum,E)),
   functor(G,A,B),
   prolog:findall(G,retract(user:'$aleph_local'(slp_sample,G)),H).


slprove(_,true) :-
   !.
slprove(A,not B) :-
   slprove(A,B),
   !,
   fail.
slprove(A,(B,C)) :-
   !,
   slprove(A,B),
   slprove(A,C).
slprove(A,(B;C)) :-
   (
     !,
     slprove(A,B)
   ;
     slprove(A,C)
   ).
slprove(_,A) :-
   prolog:predicate_property(user:A,built_in),
   !,
   call(user:A).
slprove(stochastic,A) :-
   prolog:findall(D/B,(prolog:clause(user:A,C),B= (A:-C),find_count(B,D)),E),
   renormalise(E,G),
   aleph_random(F),
   rselect_clause(F,G,(A:-C)),
   slprove(stochastic,C).
slprove(condition,A) :-
   functor(A,B,C),
   functor(D,B,C),
   prolog:clause(user:D,E),
   \+ \+ (D=A,slprove(condition,E)),
   inc_count((D:-E)).


range_restrict([],_,A,A).
range_restrict([B/A|F],C,G,H) :-
   functor(D,A,1),
   tparg(B,C,E),
   arg(1,D,E),
   range_restrict(F,C,[D|G],H).


add_generator(A/C) :-
   make_sname(A,B),
   functor(E,B,C),
   find_mode(modeh,A/C,D),
   once(copy_modeterms(D,E,C)),
   split_args(D,D,F,G,I),
   range_restrict(F,E,[],H),
   range_restrict(G,E,H,J),
   range_restrict(I,E,J,K),
   list_to_goals(K,L),
   \+prolog:clause(user:E,L),
   asserta(user: (E:-L)),
   fail.
add_generator(_).


condition(A) :-
   slprove(condition,A),
   !.
condition(_).


make_sname(A,B) :-
   concat([*,A],B).


add_generator :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   make_sname(B,C),
   functor(E,C,D),
   ( prolog:clause(user:E,_)
   ->
     true
   ;
     add_generator(B/D),
     p1_message('included generator'),
     p_message(C/D)
   ),
   fail.
add_generator.


condition_target :-
   '$aleph_global'(condition,set(condition,true)),
   add_generator,
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   p_message(conditioning),
   make_sname(B,C),
   functor(E,C,D),
   E=..[_|G],
   functor(F,B,D),
   example(_,_,F),
   F=..[_|G],
   condition(E),
   fail.
condition_target :-
   \+'$aleph_global'(condition,set(condition,true)),
   add_generator,
   !.
condition_target.


lazy_index_prove1(B,E,C,D,A) :-
   depth_bound_call((example(A,B,C),D)),
   \+'$aleph_local'(lazy_evaluate,eval(B,E)),
   asserta(user:'$aleph_local'(lazy_evaluate,eval(B,E))),
   fail.
lazy_index_prove1(_,_,_,_,_).


lazy_index_prove(A-B,_,_,_,_) :-
   A>B,
   !.
lazy_index_prove(E-G,A,B,C,D) :-
   lazy_index_prove1(A,B,C,D,E),
   F is E+1,
   lazy_index_prove(F-G,A,B,C,D).


lazy_prove([],_,_,_,_).
lazy_prove([A|F],B,C,D,E) :-
   lazy_index_prove(A,B,C,D,E),
   lazy_prove(F,B,C,D,E).


copy_modeterm(A,D) :-
   functor(A,B,C),
   find_mode(mode,B/C,E),
   functor(D,B,C),
   copy_modeterms(E,D,C),
   \+ \+A=D.


copy_consts(_,_,0) :-
   !.
copy_consts(B,C,A) :-
   arg(A,B,E),
   arg(A,C,D),
   var(D),
   !,
   D=aleph_const(E),
   F is A-1,
   copy_consts(B,C,F).
copy_consts(B,C,A) :-
   D is A-1,
   copy_consts(B,C,D).


evaluate(A,_,D,F,G,H) :-
   functor(A,B,C),
   functor(E,B,C),
   call(user:D),
   copy_args(A,E,F),
   copy_args(A,E,G),
   copy_consts(D,E,C),
   update_lit(I,false,E,F,G,H),
   \+'$aleph_local'(lazy_evaluated,I),
   asserta(user:'$aleph_local'(lazy_evaluated,I)),
   !.
evaluate(_,_,_,_,_,_).


call_library_pred(A,D,E,F,G,H) :-
   functor(A,B,C),
   '$aleph_global'(lazy_recall,lazy_recall(B/C,K)),
   asserta(user:'$aleph_local'(callno,1)),
   p1_message('lazy evaluation'),
   p_message(B),
   repeat,
   evaluate(A,D,E,F,G,H),
   retract(user:'$aleph_local'(callno,I)),
   J is I+1,
   asserta(user:'$aleph_local'(callno,J)),
   J>K,
   !,
   p_message(completed),
   retract(user:'$aleph_local'(callno,J)).


copy_io_args([],_,_,_).
copy_io_args([B|E],A,C,D) :-
   copy_args(A,B,C),
   copy_args(A,B,D),
   copy_io_args(E,A,C,D).


lazy_evaluate1(false,A,_,H,I,F,_,E,G) :-
   functor(A,B,C),
   p1_message('lazy evaluation'),
   p_message(B),
   functor(D,B,C),
   prolog:findall(D,(call(user:E),copy_args(E,D,F)),G),
   copy_io_args(G,A,H,I).
lazy_evaluate1(true,A,B,D,E,_,F,C,H) :-
   call_library_pred(A,B,C,D,E,F),
   prolog:findall(G,retract(user:'$aleph_local'(lazy_evaluated,G)),H).


collect_args([],_).
collect_args([A/_|G],D) :-
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(pos,B)),tparg(A,B,C)),E),
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(neg,B)),tparg(A,B,C)),F),
   tparg(A,D,[E,F]),
   collect_args(G,D).


lazy_prove_negs(A,B,_) :-
   '$aleph_global'(lazy_negs,set(lazy_negs,true)),
   !,
   '$aleph_global'(atoms,atoms(neg,C)),
   lazy_prove(neg,A,B,C).
lazy_prove_negs(A,B,C) :-
   lazy_prove(neg,A,B,C).


lazy_prove(C,D,A,B) :-
   ( A= (E:-F)
   ->
     lazy_prove(B,C,D,E,F)
   ;
     lazy_prove(B,C,D,A,true)
   ).


goals_to_clause((A,B),(A:-B)) :-
   !.
goals_to_clause(A,A).


lazy_evaluate_refinement([],_,A,_,_,A) :-
   !.
lazy_evaluate_refinement([A|G],B,C,D,E,I) :-
   lazy_evaluate([A],B,C,D,E,[F]),
   aleph_append([F],C,H),
   !,
   lazy_evaluate_refinement(G,B,H,D,E,I).


clause_to_list((A:-true),[A]) :-
   !.
clause_to_list((A:-B),[A|C]) :-
   !,
   goals_to_list(B,C).
clause_to_list(A,[A]).


skippable(A) :-
   functor(A,B,C),
   '$aleph_global'(abducible,abducible(B/C)).


soldnf_clause(A,_) :-
   soldnf_builtin(A),
   !,
   fail.
soldnf_clause(A,B) :-
   prolog:clause(user:A,B).


soldnfcall(A,true) :-
   call(user:A),
   !.
soldnfcall(_,false).


soldnf_builtin(not  _) :-
   !,
   fail.
soldnf_builtin(A) :-
   prolog:predicate_property(user:A,built_in).


conj_status(true,true,true) :-
   !.
conj_status(_,_,false).


soldnf_solve((A,C),H,B,E) :-
   !,
   soldnf_solve(A,F,B,D),
   soldnf_solve(C,G,D,E),
   conj_status(F,G,H).
soldnf_solve(not A,true,B,C) :-
   soldnf_solve(A,false,B,C).
soldnf_solve(not A,false,B,C) :-
   !,
   soldnf_solve(A,true,B,C).
soldnf_solve(B,C,A,A) :-
   soldnf_builtin(B),
   !,
   soldnfcall(B,C).
soldnf_solve(A,C,D,E) :-
   soldnf_clause(A,B),
   soldnf_solve(B,C,D,E).
soldnf_solve(A,true,B,[A|B]) :-
   skippable(A).


soldnf_solve(A,B) :-
   soldnf_solve(A,true,[],B).


remove_explained([],_,[]).
remove_explained([A|D],(B:-C),E) :-
   \+ \+ (A=B,call(user:C)),
   !,
   remove_explained(D,(B:-C),E).
remove_explained([A|B],(C:-D),[A|E]) :-
   remove_explained(B,(C:-D),E).


remove_abduced_atoms([]).
remove_abduced_atoms([A|B]) :-
   retract(user:'$aleph_search'(abduced,pclause(A,true))),
   remove_abduced_atoms(B).


erase_refs([]).
erase_refs([A|B]) :-
   erase(A),
   erase_refs(B).


gen_abduced_atoms([],[]).
gen_abduced_atoms([A|E],[D|G]) :-
   functor(A,B,C),
   add_determinations(B/C,true),
   sat(A),
   reduce,
   '$aleph_global'(hypothesis,hypothesis(_,D,_,_)),
   remove_explained(E,D,F),
   gen_abduced_atoms(F,G).


store_abduced_atoms([]).
store_abduced_atoms([A|B]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true))),
   store_abduced_atoms(B).


store_abduced_atoms([],[]).
store_abduced_atoms([A|C],[B|D]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true)),B),
   store_abduced_atoms(C,D).


sold_prove(A,C) :-
   soldnf_solve(A,B),
   sort(B,C).


abgen(A,D,F) :-
   sold_prove(A,B),
   ground(B),
   length(B,C),
   C=<D,
   prolog_type(E),
   ( E=yap
   ->
     store_abduced_atoms(B,G)
   ;
     store_abduced_atoms(B)
   ),
   store(proof_strategy),
   set(proof_strategy,sld),
   gen_abduced_atoms(B,F),
   reinstate(proof_strategy),
   ( E=yap
   ->
     erase_refs(G)
   ;
     remove_abduced_atoms(B)
   ).


abgen(A) :-
   abgen(A,_).


write_entry(C,A) :-
   name(A,B),
   length(B,D),
   E is integer((C-D)/2),
   tab(E),
   write(A),
   tab(E).


find_max_width([],A,A).
find_max_width([A|E],D,F) :-
   name(A,B),
   length(B,C),
   ( C>D
   ->
     find_max_width(E,C,F)
   ;
     find_max_width(E,D,F)
   ).


write_cmatrix([A,C,B,D]) :-
   I is A+B,
   J is C+D,
   E is A+C,
   F is B+D,
   G is E+F,
   ( G=0
   ->
     H is  0.5
   ;
     H is (A+D)/G
   ),
   find_max_width([A,C,B,D,I,J,E,F,G],0,K),
   L is K+2,
   tab(5),
   write(' '),
   tab(L),
   write('Actual'),
   nl,
   tab(5),
   write(' '),
   write_entry(L,+),
   tab(6),
   write_entry(L,-),
   nl,
   tab(5),
   write(+),
   write_entry(L,A),
   tab(6),
   write_entry(L,C),
   tab(6),
   write_entry(L,E),
   nl,
   write('Pred '),
   nl,
   tab(5),
   write(-),
   write_entry(L,B),
   tab(6),
   write_entry(L,D),
   tab(6),
   write_entry(L,F),
   nl,
   nl,
   tab(5),
   write(' '),
   write_entry(L,I),
   tab(6),
   write_entry(L,J),
   tab(6),
   write_entry(L,G),
   nl,
   nl,
   write('Accuracy = '),
   write(H),
   nl.


test(A,B,C,D) :-
   retractall(user:'$aleph_local'(covered,_)),
   retractall(user:'$aleph_local'(total,_)),
   asserta(user:'$aleph_local'(covered,0)),
   asserta(user:'$aleph_local'(total,0)),
   ( A=[_|_]
   ->
     test_files(A,B)
   ;
     test_file(A,B)
   ),
   retract(user:'$aleph_local'(covered,C)),
   retract(user:'$aleph_local'(total,D)).


update_theory(B) :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(M,A,N,O))),
   index_clause(A,B,D),
   ( '$aleph_global'(example_selected,example_selected(_,C))
   ->
     true
   ;
     F=[C-_|_]
   ),
   ( setting(lazy_on_cost,true)
   ->
     nlits(D,K),
     label_create(D,E),
     extract_pos(E,F),
     extract_neg(E,G),
     interval_count(F,I),
     interval_count(G,J),
     setting(evalfn,H),
     complete_label(H,D,[I,J,K],L),
     assertz(user:'$aleph_global'(theory,theory(B,L/C,D,F,G)))
   ;
     assertz(user:'$aleph_global'(theory,theory(B,M/C,D,N,O)))
   ),
   add_clause_to_background(B).


process_hypothesis(end_of_file) :-
   nl,
   nl,
   !.
process_hypothesis(none) :-
   nl,
   nl,
   !.
process_hypothesis(ok) :-
   !,
   update_theory(_),
   nl,
   p_message('added new clause').
process_hypothesis(prune) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(D,A,_),goals_to_list(A,E),clause_to_list(B,C),aleph_subsumes(C,[D|E])),
   assertz(user: (prune(B):-F)),
   nl,
   p_message('added new prune statement').
process_hypothesis(overgeneral) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(C,A,_),goals_to_list(A,D),clause_to_list(B,E),aleph_subsumes([C|D],E)),
   assertz(user: (false:-F)),
   nl,
   p_message('added new constraint').
process_hypothesis(overgeneral because not A) :-
   !,
   record_example(check,neg,A,_),
   nl,
   p_message('added new negative example').
process_hypothesis(overspecific) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,A,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(overspecific because A) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(A) :-
   call(user:A).


show_options(example_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept default example'),
   nl,
   tab(8),
   write('-> Enter an example'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.
show_options(hypothesis_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept clause'),
   nl,
   tab(8),
   write('-> "prune." to prune clause and its refinements from the search'),
   nl,
   tab(8),
   write('-> "overgeneral." to add clause as a constraint'),
   nl,
   tab(8),
   write('-> "overgeneral because not(E)." to add E as a negative example'),
   nl,
   tab(8),
   write('-> "overspecific." to add clause as a positive example'),
   nl,
   tab(8),
   write('-> "overspecific because E." to add E as a positive example'),
   nl,
   tab(8),
   write('-> any Aleph command'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.


has_class(A,B,_,C) :-
   arg(A,B,C),
   ground(C),
   !.
has_class(A,B,E,D) :-
   arg(A,B,C),
   in(C=D,E),
   ground(D),
   !.


gen_feature(A,C,D) :-
   nonvar(A),
   !,
   ( var(B)
   ->
     gen_featurenum(B)
   ;
     true
   ),
   split_clause(A,E,F),
   assertz(user:'$aleph_feature'(feature,feature(B,C,D,E,F))).


get_feature_class(A,B,C,D) :-
   has_class(A,B,C,D),
   !.
get_feature_class(_,_,_,_).


copy_iargs(0,_,_,_) :-
   !.
copy_iargs(A,C,D,A) :-
   !,
   B is A-1,
   copy_iargs(B,C,D,A).
copy_iargs(A,B,C,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A-1,
   copy_iargs(E,B,C,F).


aleph_abolish(A/B) :-
   functor(C,A,B),
   ( prolog:predicate_property(user:C,dynamic)
   ->
     retractall(user:C)
   ;
     prolog:abolish(user:A/B)
   ).


abgen(B,D) :-
   retractall(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_))),
   A is(-inf),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis([A,0,1,A],[false],[],[]))),
   setting(max_abducibles,C),
   abgen(B,C,D),
   '$aleph_global'(hypothesis,hypothesis(E,_,K,L)),
   E=[_,_,I,G|_],
   '$aleph_search'(abgenhyp,hypothesis(F,_,_,_)),
   F=[_,_,J,H|_],
   once((G>H;G=:=H,I<J)),
   once(retract(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_)))),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis(E,D,K,L))),
   fail.
abgen(_,A) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   '$aleph_search'(abgenhyp,hypothesis(B,A,C,D)),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(B,A,C,D))).


update_besthyp(G) :-
   '$aleph_global'(hypothesis,hypothesis(A,H,I,J)),
   '$aleph_global'(besthyp,besthyp(B,_,_,_,_)),
   A=[_,_,E,C|_],
   B=[_,_,F,D|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_global'(besthyp,besthyp(B,_,_,_,_))),
   assertz(user:'$aleph_global'(besthyp,besthyp(A,G,H,I,J))).
update_besthyp(_).


reset_best_label :-
   '$aleph_global'(besthyp,besthyp(B,_,G,H,I)),
   '$aleph_search'(best_label,A/_),
   A=[_,_,F,D|_],
   B=[_,_,E,C|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_search'(best_label,A/_)),
   asserta(user:'$aleph_search'(best_label,B/0)),
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(B,G,H,I))).
reset_best_label.


rsat(0) :-
   !.
rsat(B) :-
   gen_sample(pos,1),
   '$aleph_global'(example_selected,example_selected(pos,A)),
   ( \+'$aleph_sat'(stored,stored(A,pos,_))
   ->
     !,
     retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
     sat(pos,A)
   ;
     C is B-1,
     rsat(C)
   ).


rsat :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(resample),
   set(resample,1),
   rsat(100),
   reinstate(resample).


induce_tree :-
   clean_up,
   setting(tree_type,B),
   store_values([refine]),
   set(refine,auto),
   setting(mingain,A),
   ( A=< 0
   ->
     err_message('inappropriate setting for mingain'),
     fail
   ;
     true
   ),
   record_settings,
   stopwatch(D),
   construct_tree(B),
   stopwatch(C),
   E is C-D,
   show(theory),
   record_theory(E),
   reinstate_values([refine]),
   !.
induce_tree.


record_features(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(features),
   p1_message('time taken'),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_features(_).


gen_features :-
   aleph_abolish('$aleph_feature'/2),
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   ( setting(minscore,B)
   ->
     true
   ;
     B=(-inf)
   ),
   '$aleph_good'(_,C,E),
   C=[_,_,_,D|_],
   D>=B,
   split_clause(E,G,F),
   F\=true,
   functor(G,H,I),
   functor(J,H,I),
   copy_iargs(I,G,J,A),
   get_feature_class(A,G,F,K),
   gen_feature((J:-F),C,K),
   fail.
gen_features :-
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   setting(good,true),
   setting(goodfile,B),
   aleph_open(B,read,D),
   ( setting(minscore,C)
   ->
     true
   ;
     C=(-inf)
   ),
   repeat,
   read(D,E),
   ( E='$aleph_good'(_,F,H)
   ->
     F=[_,_,_,G|_],
     G>=C,
     split_clause(H,J,I),
     I\=true,
     functor(J,K,L),
     functor(M,K,L),
     copy_iargs(L,J,M,A),
     get_feature_class(A,J,I,N),
     gen_feature((M:-I),F,N),
     fail
   ;
     close(D),
     !
   ).
gen_features.


induce_features :-
   clean_up,
   store_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   set(good,true),
   set(check_good,true),
   set(updateback,false),
   set(construct_features,true),
   set(lazy_on_contradiction,true),
   ( setting(feature_construction,exhaustive)
   ->
     set(explore,true)
   ;
     true
   ),
   setting(max_features,B),
   record_settings,
   stopwatch(D),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   repeat,
   gen_sample(pos,0),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(false),
   addhyp,
   show_atoms_left,
   record_atoms_left,
   (
     '$aleph_search'(last_good,A),
     A>=B
   ;
     '$aleph_global'(atoms_left,atoms_left(pos,[]))
   ),
   !,
   gen_features,
   stopwatch(C),
   E is C-D,
   show(features),
   record_features(E),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,_))),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   reinstate_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   !.
induce_features.


search_modes :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   prolog:findall(C/D,determinations(A/B,C/D),E),
   number_types([A/B|E],0,F,G),
   get_type_elements(F),
   interval_to_list(1-G,H),
   get_type_equivalences(H,I),
   merge_equivalence_classes(I,J),
   store_type_equivalences(J),
   setting(typeoverlap,K),
   infer_modes(F,K,H,L),
   infer_equalities(O),
   L=[_|M],
   infer_negations(M,P),
   ( setting(updateback,N)
   ->
     true
   ;
     N=true
   ),
   p_message('found modes'),
   add_inferred_modes(L,N),
   add_inferred_modes(O,N),
   add_inferred_modes(P,N),
   fail.
search_modes.


induce_modes :-
   clean_up,
   store_values([typeoverlap]),
   search_modes,
   reinstate_values([typeoverlap]),
   show(modes).


induce_constraints :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([portray_search,search,construct_bottom,good,goodfile]),
   noset(goodfile),
   set(portray_search,false),
   set(construct_bottom,false),
   set(search,ic),
   set(good,true),
   sat(uspec,0),
   reduce,
   show(constraints),
   reinstate_values([portray_search,search,construct_bottom,good,goodfile]),
   show_total_stats,
   record_total_stats,
   !.
induce_constraints.


induce_theory(rls) :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store(evalfn),
   set(evalfn,accuracy),
   record_settings,
   find_theory(rls),
   reinstate(evalfn),
   show_total_stats,
   record_total_stats,
   !.
induce_theory(_).


induce_theory :-
   setting(search,A),
   induce_theory(A).


process_hypothesis :-
   show(hypothesis),
   repeat,
   show_options(hypothesis_selection),
   tab(4),
   write('Response?'),
   nl,
   read(A),
   process_hypothesis(A),
   (
     A=end_of_file
   ;
     A=none
   ),
   !.


ask_example(D) :-
   ( '$aleph_global'(example_selected,example_selected(pos,A))
   ->
     example(A,pos,B)
   ;
     B=none
   ),
   !,
   show_options(example_selection),
   tab(4),
   write('Response '),
   p1_message(default:B),
   write(?),
   nl,
   read(C),
   ( C=ok
   ->
     D=B
   ;
     D=C
   ).


induce_cover :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   addhyp,
   trace_memory_usage,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce_cover.


update_coverset(C,_) :-
   '$aleph_global'(hypothesis,hypothesis(A,_,B,_)),
   A=[_,_,_,D|_],
   worse_coversets(B,C,D,E),
   ( E= ([])
   ->
     true
   ;
     update_theory(F),
     update_coversets(E,F,C,A)
   ).


gen_sample(0,_,_) :-
   !.
gen_sample(C,A,B) :-
   assertz(user:'$aleph_global'(example_selected,example_selected(A,B))),
   D is C-1,
   gen_sample(D,A,B).


induce_max1(B) :-
   '$aleph_local'(counter,A),
   A=<B,
   !,
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   repeat,
   retract(user:'$aleph_local'(counter,D)),
   gen_sample(C,pos,D),
   get_besthyp(false),
   update_coverset(pos,D),
   E is D+1,
   assertz(user:'$aleph_local'(counter,E)),
   E>B,
   !,
   retract(user:'$aleph_local'(counter,E)).
induce_max1(_).


induce_max([]).
induce_max([A-B|C]) :-
   asserta(user:'$aleph_local'(counter,A)),
   induce_max1(B),
   induce_max(C).


induce_max :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   record_settings,
   stopwatch(C),
   set(maxcover,true),
   induce_max(A),
   trace_memory_usage,
   stopwatch(B),
   D is B-C,
   show(theory),
   record_theory(D),
   noset(maxcover),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(D),
   show_total_stats,
   record_total_stats,
   !.
induce_max.


record_total_stats :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_total_stats,
   flush_output(A),
   set_output(user_output).
record_total_stats.


show_total_stats :-
   '$aleph_global'(search_stats,search_stats(A,_)),
   !,
   p1_message('total clauses constructed'),
   p_message(A).
show_total_stats.


record_theory(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(theory),
   p1_message('time taken'),
   p_message(B),
   nl,
   ( '$aleph_global'(maxcover,set(maxcover,true))
   ->
     show(aleph,theory/5),
     nl,
     show(aleph,max_set/4),
     nl,
     show(aleph,rules/1)
   ;
     true
   ),
   flush_output(A),
   set_output(user_output).
record_theory(_).


record_atoms_left :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_atoms_left,
   flush_output(A),
   set_output(user_output).
record_atoms_left.


show_atoms_left :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   interval_count(A,C),
   '$aleph_global'(size,size(pos,D)),
   '$aleph_global'(search_stats,search_stats(_,B)),
   E is B*C/ (D-C),
   p1_message('positive examples left'),
   p_message(C),
   p1_message('estimated time to finish (secs)'),
   p_message(E),
   !.
show_atoms_left.


addgcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   !,
   asserta(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   addhyp,
   add_gcws.


sphyp :-
   retractall(user:'$aleph_search'(sphyp,hypothesis(_,_,_,_))),
   retractall(user:'$aleph_search'(gcwshyp,hypothesis(_,_,_,_))),
   retract(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   asserta(user:'$aleph_search'(sphyp,hypothesis([A,B,C|D],E,F,G))),
   store(searchstate),
   gcws,
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   reinstate(searchstate).


trace_memory_usage :-
   setting(trace_memory_usage,false),
   !.
trace_memory_usage :-
   dbusage:db_usage,
   dbusage:db_static(128*1024),
   dbusage:db_dynamic(128*1024).


get_besthyp(B) :-
   retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
   reset_best_label,
   sat(A),
   reduce,
   update_besthyp(A),
   ( B=true
   ->
     example(A,pos,C),
     abgen(C,E),
     once(retract(user:'$aleph_global'(hypothesis,hypothesis(D,_,F,G)))),
     assert(user:'$aleph_global'(hypothesis,hypothesis(D,E,F,G))),
     update_besthyp(A)
   ;
     true
   ),
   fail.
get_besthyp(_) :-
   retract(user:'$aleph_global'(besthyp,besthyp(C,G,A,E,F))),
   A\=false,
   !,
   ( setting(samplesize,B),
     B>1
   ->
     setting(nodes,D),
     show_clause(sample,C,A,D),
     record_clause(sample,C,A,D)
   ;
     true
   ),
   add_hyp(C,A,E,F),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,G))),
   !.
get_besthyp(_).


gen_sample(A,0) :-
   !,
   '$aleph_global'(atoms_left,atoms_left(A,[B-_|_])),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   p1_message('select example'),
   p_message(B),
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   gen_sample(C,A,B).
gen_sample(A,D) :-
   '$aleph_global'(atoms_left,atoms_left(A,B)),
   interval_count(B,C),
   H is min(C,D),
   assertz(user:'$aleph_local'(sample_num,0)),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   ( setting(resample,E)
   ->
     true
   ;
     E=1
   ),
   repeat,
   '$aleph_local'(sample_num,F),
   G is F+1,
   ( G=<H
   ->
     get_random(C,I),
     select_example(I,0,B,J),
     \+'$aleph_global'(example_selected,example_selected(A,J)),
     p1_message('select example'),
     p_message(J),
     retract(user:'$aleph_local'(sample_num,F)),
     assertz(user:'$aleph_local'(sample_num,G)),
     gen_sample(E,A,J),
     fail
   ;
     retract(user:'$aleph_local'(sample_num,F))
   ),
   !.


record_settings :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   ( '$aleph_global'(os,set(os,unix))
   ->
     execute(date),
     execute(hostname)
   ;
     true
   ),
   show(settings),
   flush_output(A),
   set_output(user_output).
record_settings.


induce :-
   clean_up,
   set(greedy,true),
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   trace_memory_usage,
   ( setting(gcws,true)
   ->
     sphyp,
     addgcws
   ;
     addhyp
   ),
   show_atoms_left,
   record_atoms_left,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   noset(greedy),
   reinstate(portray_search),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce.


induce_incremental :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([interactive,portray_search,proof_strategy,mode]),
   set(portray_search,false),
   set(proof_strategy,sld),
   set(interactive,true),
   record_settings,
   stopwatch(D),
   repeat,
   ask_example(A),
   (
     (
       A=end_of_file
     ;
       A=none
     )
   ->
     true
   ;
     once(record_example(check,pos,A,B)),
     retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
     asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
     once(sat(B)),
     once(reduce),
     once(process_hypothesis),
     fail
   ),
   !,
   stopwatch(C),
   E is C-D,
   show(theory),
   show(pos),
   show(neg),
   show(false/0),
   show(prune/1),
   record_theory(E),
   reinstate_values([interactive,portray_search,proof_strategy,mode]),
   p1_message('time taken'),
   p_message(E).


induce_clauses :-
   setting(interactive,true),
   !,
   induce_incremental.
induce_clauses :-
   induce.


collect(rls_restart,done(C,K,selected(E,H,I,J)),[D,A],[B,A],O) :-
   B is C+D,
   E=[_,_,_,G|_],
   '$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_)),
   ( F>=G
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(E,H,I,J))),
     set(best,E)
   ),
   setting(best,N),
   retract(user:'$aleph_search'(rls_nodes,L)),
   M is K+L,
   asserta(user:'$aleph_search'(rls_nodes,M)),
   ( discontinue_search(A,N/_,M)
   ->
     O=true
   ;
     O=false
   ).


collect_results(D,G,A,C,I) :-
   thread_get_message(B),
   collect(A,B,C,H,E),
   F is D+1,
   ( E==false,
     F<G
   ->
     collect_results(F,G,A,H,I)
   ;
     I=H
   ).


work(rls_restart(A,B,C),F) :-
   statistics(cputime,E),
   rls_thread(A,B,C,H,I),
   statistics(cputime,D),
   G is D-E,
   thread_send_message(F,done(G,H,I)).
work(all_done,_) :-
   thread_exit(done).


worker(A,C) :-
   thread_get_message(A,B),
   work(B,C),
   worker(A,C).


kill_worker(A,B) :-
   thread_send_message(A,all_done),
   prolog:thread_signal(B,throw(surplus_to_requirements)).


create_worker_pool(A,B,_,_,[]) :-
   A>B,
   !.
create_worker_pool(A,G,C,B,[D|H]) :-
   atom_concat(worker_,A,E),
   prolog:thread_create(worker(B,C),D,user:[alias(E)]),
   F is A+1,
   create_worker_pool(F,G,C,B,H).


kill_worker_pool(B,A) :-
   p_message('Killing workers'),
   forall(aleph_member(C,A),kill_worker(B,C)),
   p_message('Waiting for workers'),
   forall(aleph_member(C,A),thread_join(C,_)),
   message_queue_destroy(B),
   p_message('Ok, all done').


collect_results(rls_restart,A,B,C) :-
   collect_results(0,A,rls_restart,B,C).


create_worker_pool(A,B,C,D) :-
   create_worker_pool(1,A,B,C,D).


rls_thread(B,C,A,D,selected(E,F,G,H)) :-
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(A,[],[]))),
   p1_message(restart),
   p_message(B),
   find_clause(C),
   '$aleph_search'(current,current(_,D,_)),
   '$aleph_search'(selected,selected(E,F,G,H)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)).


estimate_numbers(B) :-
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,A),
   estimate_numbers(A,1,400,B).


check_auto_refine :-
   (
     setting(construct_bottom,reduction)
   ;
     setting(construct_bottom,false)
   ),
   \+setting(autorefine,true),
   !,
   ( setting(refine,user)
   ->
     true
   ;
     set(refine,auto)
   ).
check_auto_refine.


check_posonly :-
   '$aleph_global'(size,size(rand,A)),
   A>0,
   !.
check_posonly :-
   setting(evalfn,posonly),
   \+'$aleph_global'(modeh,modeh(_,_)),
   p1_message(error),
   p_message('missing modeh declaration in posonly mode'),
   !,
   fail.
check_posonly :-
   retractall(user:'$aleph_global'(slp_count,_,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   setting(evalfn,posonly),
   setting(gsamplesize,C),
   condition_target,
   '$aleph_global'(targetpred,targetpred(A/B)),
   gsample(A/B,C),
   !.
check_posonly.


set_up_builtins :-
   gen_nlitnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,!,[],[],[])).


reset_counts :-
   retractall(user:'$aleph_sat'(lastterm,_)),
   retractall(user:'$aleph_sat'(lastvar,_)),
   asserta(user:'$aleph_sat'(lastterm,0)),
   asserta(user:'$aleph_sat'(lastvar,0)),
   !.


clean_up_hypothesis :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))).


clean_up_sat :-
   aleph_abolish('$aleph_sat'/2),
   aleph_abolish('$aleph_local'/2),
   aleph_abolish('$aleph_sat_atom'/2),
   aleph_abolish('$aleph_sat_ovars'/2),
   aleph_abolish('$aleph_sat_ivars'/2),
   aleph_abolish('$aleph_sat_varscopy'/3),
   aleph_abolish('$aleph_sat_varequiv'/3),
   aleph_abolish('$aleph_sat_terms'/4),
   aleph_abolish('$aleph_sat_vars'/4),
   aleph_abolish('$aleph_sat_litinfo'/6),
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


zap_rest(B) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,C)),
   ( aleph_member1(A,B)
   ->
     intersect1(B,C,H,_),
     asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H))
   ;
     true
   ),
   fail.
zap_rest(_).


binom_lte(_,_,A,0) :-
   A<0,
   !.
binom_lte(A,B,C,E) :-
   binom(A,B,C,F),
   D is C-1,
   binom_lte(A,B,D,G),
   E is F+G,
   !.


record_tsearch_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('theories constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best theory'),
   pp_dclauses(D),
   flush_output(A),
   set_output(user_output).
record_tsearch_stats(_,_,_).


clean_up_reduce :-
   aleph_abolish('$aleph_local'/2),
   clean_up_search,
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


find_theory1(_) :-
   clean_up_reduce,
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   init_open_list,
   asserta(user:'$aleph_search'(nextnode,none)),
   stopwatch(K),
   get_search_settings(A),
   arg(4,A,_/D),
   interval_count(B,E),
   interval_count(C,F),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(selected,selected(G,[0-[0,0,[],false]],B,C))),
   get_theory_gain(A,0,G/0,[0-[0,0,[],false]],B,C,E,F,I,H),
   asserta(user:'$aleph_search'(current,current(0,H,I))),
   get_nextbest(A,_),
   tsearch(A,P),
   stopwatch(J),
   Q is J-K,
   '$aleph_search'(selected,selected(L,M,N,O)),
   destroy_open_list,
   add_hyp(L,M,N,O),
   p1_message('theories constructed'),
   p_message(P),
   p1_message('search time'),
   p_message(Q),
   p_message('best theory'),
   pp_dclauses(M),
   show_stats(D,L),
   update_search_stats(P,Q),
   record_tsearch_stats(M,P,Q).


find_theory(rls) :-
   !,
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(tries,A),
   A>=1,
   store_values([caching,store_bottom]),
   set(caching,false),
   set(store_bottom,true),
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   interval_count(B,E),
   interval_count(C,F),
   setting(evalfn,D),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(rls_selected,selected(G,[0-[0,0,[],false]],B,C))),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   get_search_settings(V),
   set(best,G),
   stopwatch(Y),
   repeat,
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(G,B,C))),
   '$aleph_search'(rls_restart,H),
   p1_message(restart),
   p_message(H),
   find_theory1(rls),
   '$aleph_search'(current,current(_,J,_)),
   retract(user:'$aleph_search'(rls_nodes,K)),
   '$aleph_search'(selected,selected([O,P,Q,N|R],S,T,U)),
   '$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_)),
   retract(user:'$aleph_search'(rls_restart,H)),
   I is H+1,
   asserta(user:'$aleph_search'(rls_restart,I)),
   L is J+K,
   asserta(user:'$aleph_search'(rls_nodes,L)),
   ( M>=N
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected([O,P,Q,N|R],S,T,U))),
     set(best,[O,P,Q,N|R])
   ),
   setting(best,W),
   (
     I>A
   ;
     discontinue_search(V,W/_,L)
   ),
   !,
   stopwatch(X),
   E1 is X-Y,
   '$aleph_search'(rls_nodes,D1),
   '$aleph_search'(rls_selected,selected(Z,A1,B1,C1)),
   add_hyp(Z,A1,B1,C1),
   p1_message('nodes constructed'),
   p_message(D1),
   p1_message('search time'),
   p_message(E1),
   p_message('best theory'),
   pp_dclauses(A1),
   show_stats(D,Z),
   record_search_stats(A1,D1,E1),
   noset(best),
   reinstate_values([caching,refine,refineop,store_bottom]).


update_search_stats(B,D) :-
   ( retract(user:'$aleph_global'(search_stats,search_stats(A,C)))
   ->
     E is A+B,
     F is C+D
   ;
     E is B,
     F is D
   ),
   asserta(user:'$aleph_global'(search_stats,search_stats(E,F))).


reduce_prelims(B,C,D) :-
   clean_up_reduce,
   check_posonly,
   check_auto_refine,
   ( A=true
   ->
     true
   ;
     prolog:call(call(user:A),B,C,D)
   ),
   setting(reduce_prelims_hook,A),
   ( '$aleph_sat'(lastlit,B)
   ->
     true
   ;
     B=0,
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   ( '$aleph_sat'(botsize,E)
   ->
     true
   ;
     E=0,
     asserta(user:'$aleph_sat'(botsize,E))
   ),
   (
     (
       '$aleph_global'(lazy_evaluate,lazy_evaluate(_))
     ;
       setting(greedy,true)
     )
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   setting(evalfn,F),
   ( F=posonly
   ->
     G=rand
   ;
     G=neg
   ),
   '$aleph_global'(atoms_left,atoms_left(G,D)),
   asserta(user:'$aleph_search'(nextnode,none)).


estimate_clauselength_distribution(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,clauselength_distribution(A,B,C,D,E,F)),
   !.
estimate_clauselength_distribution(A,B,E,H) :-
   setting(evalfn,C),
   estimate_clauselength_scores(A,B,C,[],D),
   select_good_clauses(D,E,F),
   estimate_frequency(A,F,G),
   normalise_distribution(G,H),
   ( '$aleph_sat'(example,example(I,J))
   ->
     asserta(user:'$aleph_sat'(random,clauselength_distribution(I,J,A,B,E,H)))
   ;
     true
   ).


rls_search(1,S,U,X,Y) :-
   !,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,I/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   stopwatch(W),
   estimate_numbers(_),
   repeat,
   retract(user:'$aleph_search'(rls_restart,G)),
   H is G+1,
   asserta(user:'$aleph_search'(rls_restart,H)),
   rls_thread(G,I,B,P,selected(J,M,N,O)),
   J=[_,_,_,L|_],
   '$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(J,M,N,O))),
     set(best,J)
   ),
   setting(best,T),
   retract(user:'$aleph_search'(rls_nodes,Q)),
   R is P+Q,
   asserta(user:'$aleph_search'(rls_nodes,R)),
   (
     H>S
   ;
     discontinue_search(C,T/_,R)
   ),
   !,
   stopwatch(V),
   U is V-W,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,X)),
   retract(user:'$aleph_search'(rls_selected,Y)).
rls_search(G,J,M,O,P) :-
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,L/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   estimate_numbers(_),
   thread_self(H),
   message_queue_create(I),
   create_worker_pool(G,H,I,N),
   forall(between(1,J,K),thread_send_message(I,rls_restart(K,L,B))),
   collect_results(rls_restart,J,[0,C],[M|_]),
   kill_worker_pool(I,N),
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,O)),
   retract(user:'$aleph_search'(rls_selected,P)).


reinstate_values([]).
reinstate_values([A|B]) :-
   reinstate(A),
   reinstate_values(B).


record_search_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('clauses constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best clause'),
   pp_dclause(D),
   flush_output(A),
   set_output(user_output).
record_search_stats(_,_,_).


show_stats(A,[D,E,_,B|_]) :-
   (
     (
       A=user
     ;
       A=entropy
     ;
       A=gini
     )
   ->
     C is-B
   ;
     C is B
   ),
   concat(['pos cover = ',D,' neg cover = ',E],F),
   p1_message(F),
   print_eval(A,C).


add_hyp(A,B,C,D) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))).


best_clause_hook(_,_,_,_) :-
   setting(best_clause_hook,true),
   !.
best_clause_hook(B,C,D,E) :-
   setting(best_clause_hook,A),
   call(A,B,C,D,E),
   !.


estimate_error_rate(B,A,D,E,F) :-
   C is 1-exp(log(1-A)/B),
   estimate_error(1/ 0,0/ 1,C,D,E,F).


find_clause(A) :-
   set(stage,reduction),
   set(searchstrat,A),
   p_message(reduce),
   reduce_prelims(T,H,U),
   init_open_list,
   get_search_settings(B),
   arg(4,B,_/C),
   get_start_label(C,F),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,G),
     asserta(user:'$aleph_search'(selected,selected(F,(G:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(selected,selected(F,(false:-true),[],[])))
   ),
   arg(13,B,J),
   interval_count(H,I),
   I>=J,
   '$aleph_search'(selected,selected(K,L,M,N)),
   add_hyp(K,L,M,N),
   ( '$aleph_global'(max_set,max_set(E,D,O,P))
   ->
     Q=O/P
   ;
     ( '$aleph_global'(best,set(best,R))
     ->
       Q=R/0
     )
   ;
     Q=F/0
   ),
   asserta(user:'$aleph_search'(best_label,Q)),
   p1_message('best label so far'),
   p_message(Q),
   arg(3,B,S),
   stopwatch(A1),
   ( S=false
   ->
     get_gains(B,0,Q,[],false,[],0,T,[1],H,U,[],1,V,Y),
     update_max_head_count(0,V)
   ;
     clear_cache,
     interval_count(H,W),
     asserta(user:'$aleph_local'(max_head_count,W)),
     X=0-[D,E,[],false],
     get_gains(B,0,Q,X,_,_,_,T,[X],H,U,[],1,V,Y)
   ),
   asserta(user:'$aleph_search_expansion'(1,0,1,V)),
   get_nextbest(B,_),
   asserta(user:'$aleph_search'(current,current(1,V,Y))),
   search(B,F1),
   stopwatch(Z),
   G1 is Z-A1,
   '$aleph_search'(selected,selected(B1,C1,D1,E1)),
   destroy_open_list,
   best_clause_hook(B1,C1,D1,E1),
   add_hyp(B1,C1,D1,E1),
   p1_message('clauses constructed'),
   p_message(F1),
   p1_message('search time'),
   p_message(G1),
   p_message('best clause'),
   pp_dclause(C1),
   show_stats(C,B1),
   update_search_stats(F1,G1),
   record_search_stats(C1,F1,G1),
   noset(stage),
   !.
find_clause(_) :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   destroy_open_list,
   best_clause_hook(A,B,C,D),
   add_hyp(A,B,C,D),
   p_message('best clause'),
   pp_dclause(B),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,A),
   noset(stage),
   !.


get_start_label(_,[0,0,0,A]) :-
   (
     setting(interactive,true)
   ;
     setting(search,ic)
   ),
   !,
   A is(-inf).
get_start_label(user,[1,0,2,A]) :-
   !,
   A is(-inf).
get_start_label(entropy,[1,0,2,-0.5]) :-
   !.
get_start_label(gini,[1,0,2,-0.5]) :-
   !.
get_start_label(wracc,[1,0,2,-0.25]) :-
   !.
get_start_label(A,[1,0,2,B]) :-
   evalfn(A,[1,0,2],B).


store_values([]).
store_values([A|B]) :-
   store(A),
   store_values(B).


add_bottom :-
   retractall(user:'$aleph_search'(selected,selected(_,_,_,_))),
   bottom(A),
   add_hyp(A),
   '$aleph_global'(hypothesis,hypothesis(C,B,_,_)),
   ( clause_ok(B,C)
   ->
     true
   ;
     '$aleph_sat'(example,example(D,E)),
     example(D,E,G),
     retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
     setting(evalfn,F),
     complete_label(F,G,[1,0,1],H),
     asserta(user:'$aleph_global'(hypothesis,hypothesis(H,(G:-true),[D-D],[])))
   ).


reduce_end_hook :-
   setting(reduce_end_hook,true),
   !.
reduce_end_hook :-
   setting(reduce_end_hook,A),
   prolog:call(call(user:A)),
   !.


reduce(false) :-
   !,
   add_bottom.
reduce(ibs) :-
   !,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retractall(user:'$aleph_search'(ibs_nodes,_)),
   retractall(user:'$aleph_search'(ibs_selected,_)),
   store_values([openlist,caching,explore]),
   set(openlist,1),
   set(caching,true),
   set(explore,true),
   asserta(user:'$aleph_search'(ibs_rval,1)),
   asserta(user:'$aleph_search'(ibs_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(openlist,F),
   p1_message('ibs beam width'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,I,[H,G|_]/_)),
   J is G+H,
   estimate_error_rate(I,0.5,J,G,K),
   p1_message('ibs estimated error'),
   p_message(K),
   retract(user:'$aleph_search'(ibs_rval,O)),
   retract(user:'$aleph_search'(ibs_nodes,L)),
   '$aleph_search'(selected,selected(P,Q,R,S)),
   M is 2*F,
   N is I+L,
   set(openlist,M),
   asserta(user:'$aleph_search'(ibs_rval,K)),
   asserta(user:'$aleph_search'(ibs_nodes,N)),
   (
     (
       K>=O
     ;
       M>512
     )
   ->
     true
   ;
     retract(user:'$aleph_search'(ibs_selected,selected(_,_,_,_))),
     asserta(user:'$aleph_search'(ibs_selected,selected(P,Q,R,S))),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retract(user:'$aleph_search'(ibs_nodes,Z)),
   retract(user:'$aleph_search'(ibs_selected,selected(V,W,X,Y))),
   best_clause_hook(V,W,X,Y),
   add_hyp(V,W,X,Y),
   p1_message('ibs clauses constructed'),
   p_message(Z),
   p1_message('ibs search time'),
   p_message(A1),
   p_message('ibs best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   reinstate_values([openlist,caching,explore]).
reduce(id) :-
   !,
   retractall(user:'$aleph_search'(id_nodes,_)),
   retractall(user:'$aleph_search'(id_selected,_)),
   store_values([caching,clauselength]),
   setting(clauselength,T),
   set(clauselength,1),
   set(caching,true),
   asserta(user:'$aleph_search'(id_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(id_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(id_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(V),
   repeat,
   setting(clauselength,F),
   p1_message('id clauselength setting'),
   p_message(F),
   find_clause(df),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(id_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(clauselength,I),
   '$aleph_search'(id_nodes,J),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(id_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P])
   ),
   I>T,
   !,
   stopwatch(U),
   B1 is U-V,
   retract(user:'$aleph_search'(id_nodes,A1)),
   retract(user:'$aleph_search'(id_selected,selected(W,X,Y,Z))),
   best_clause_hook(W,X,Y,Z),
   add_hyp(W,X,Y,Z),
   p1_message('id clauses constructed'),
   p_message(A1),
   p1_message('id search time'),
   p_message(B1),
   p_message('id best clause'),
   pp_dclause(X),
   show_stats(A,W),
   record_search_stats(X,A1,B1),
   noset(best),
   reinstate_values([caching,clauselength]).
reduce(ils) :-
   !,
   retractall(user:'$aleph_search'(ils_nodes,_)),
   retractall(user:'$aleph_search'(ils_selected,_)),
   store_values([caching,language]),
   set(searchstrat,bf),
   set(language,1),
   set(caching,true),
   asserta(user:'$aleph_search'(ils_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ils_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ils_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(language,F),
   p1_message('ils language setting'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(ils_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(language,I),
   asserta(user:'$aleph_search'(ils_nodes,J)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(ils_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P]),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retract(user:'$aleph_search'(ils_nodes,Z)),
   retract(user:'$aleph_search'(ils_selected,selected(V,W,X,Y))),
   add_hyp(V,W,X,Y),
   p1_message('ils clauses constructed'),
   p_message(Z),
   p1_message('ils search time'),
   p_message(A1),
   p_message('ils best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   noset(best),
   reinstate_values([caching,language]).
reduce(rls) :-
   !,
   setting(tries,A),
   A>=1,
   store_values([caching,refine,refineop]),
   set(searchstrat,heuristic),
   set(caching,true),
   setting(refine,B),
   ( B\=false
   ->
     true
   ;
     set(refineop,rls)
   ),
   setting(threads,C),
   rls_search(C,A,I,H,selected(D,E,F,G)),
   add_hyp(D,E,F,G),
   p1_message('rls nodes constructed'),
   p_message(H),
   p1_message('rls search time'),
   p_message(I),
   p_message('rls best result'),
   pp_dclause(E),
   setting(evalfn,J),
   show_stats(J,D),
   record_search_stats(E,H,I),
   noset(best),
   reinstate_values([caching,refine,refineop]).
reduce(scs) :-
   !,
   store_values([tries,moves,rls_type,clauselength_distribution]),
   stopwatch(G),
   ( setting(scs_sample,C)
   ->
     true
   ;
     setting(scs_percentile,A),
     A> 0,
     setting(scs_prob,B),
     B< 1,
     C is integer(log(1-B)/log(1-A/100)+1)
   ),
   ( setting(scs_type,informed)
   ->
     ( setting(clauselength_distribution,E)
     ->
       true
     ;
       setting(clauselength,D),
       estimate_clauselength_distribution(D,100,A,E),
       p1_message('using clauselength distribution'),
       p_message(E),
       set(clauselength_distribution,E)
     )
   ;
     true
   ),
   set(tries,C),
   set(moves,0),
   set(rls_type,gsat),
   reduce(rls),
   stopwatch(F),
   I is F-G,
   '$aleph_search'(rls_nodes,H),
   '$aleph_search'(rls_selected,selected(L,J,_,_)),
   p1_message('scs nodes constructed'),
   p_message(H),
   p1_message('scs search time'),
   p_message(I),
   p_message('scs best result'),
   pp_dclause(J),
   setting(evalfn,K),
   show_stats(K,L),
   record_search_stats(J,H,I),
   p1_message('scs search time'),
   p_message(I),
   reinstate_values([tries,moves,rls_type,clauselength_distribution]).
reduce(ar) :-
   !,
   clear_cache,
   ( setting(pos_fraction,B)
   ->
     true
   ;
     p_message('value required for pos_fraction parameter'),
     fail
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   interval_count(A,C),
   D is B*C,
   store_values([minpos,evalfn,explore,caching,minacc,good]),
   set(searchstrat,bf),
   set(minpos,D),
   set(evalfn,coverage),
   set(explore,true),
   set(minacc,0),
   set(good,true),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   find_clause(bf),
   show(good),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   reinstate_values([minpos,evalfn,explore,caching,minacc,good]).
reduce(ic) :-
   !,
   store_values([minpos,minscore,evalfn,explore,refineop]),
   setting(refineop,A),
   ( A=false
   ->
     set(refineop,auto)
   ;
     true
   ),
   set(minpos,0),
   set(searchstrat,bf),
   set(evalfn,coverage),
   set(explore,true),
   setting(noise,B),
   C is-B,
   set(minscore,C),
   find_clause(bf),
   reinstate_values([minpos,minscore,evalfn,explore,refineop]).
reduce(bf) :-
   !,
   find_clause(bf).
reduce(df) :-
   !,
   find_clause(df).
reduce(heuristic) :-
   !,
   find_clause(heuristic).


reduce_start_hook(_) :-
   setting(reduce_start_hook,true),
   !.
reduce_start_hook(B) :-
   setting(reduce_start_hook,A),
   prolog:call(call(user:A),B),
   !.


doreduce(A) :-
   reduce_start_hook(A),
   reduce(A),
   reduce_end_hook.


noset(A) :-
   nonvar(A),
   retract(user:'$aleph_global'(A,set(A,B))),
   !,
   rm_special_consideration(A,B),
   set_default(A).
noset(_).


sat_end_hook(_,_) :-
   setting(sat_end_hook,true),
   !.
sat_end_hook(B,C) :-
   setting(sat_end_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_sat_example(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message(sat),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_sat_example(_).


sat_prelims :-
   clean_up_sat,
   clean_up_hypothesis,
   reset_counts,
   set_up_builtins.


sat_start_hook(_,_) :-
   setting(sat_start_hook,true),
   !.
sat_start_hook(B,C) :-
   setting(sat_start_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_example(check,B,C,A) :-
   ( once(example(A,B,C))
   ->
     true
   ;
     record_example(nocheck,B,C,A),
     ( retract(user:'$aleph_global'(atoms,atoms(B,D)))
     ->
       true
     ;
       D= ([])
     ),
     ( retract(user:'$aleph_global'(atoms_left,atoms_left(B,E)))
     ->
       true
     ;
       E= ([])
     ),
     ( retract(user:'$aleph_global'(last_example,last_example(B,_)))
     ->
       true
     ;
       true
     ),
     update(D,A-A,F),
     update(E,A-A,G),
     asserta(user:'$aleph_global'(atoms,atoms(B,F))),
     asserta(user:'$aleph_global'(atoms_left,atoms_left(B,G))),
     asserta(user:'$aleph_global'(last_example,last_example(B,A)))
   ),
   !.
record_example(nocheck,A,D,C) :-
   ( retract(user:'$aleph_global'(size,size(A,B)))
   ->
     true
   ;
     B is 0
   ),
   C is B+1,
   asserta(user:'$aleph_global'(size,size(A,C))),
   ( A\=neg,
     setting(skolem_examples,true)
   ->
     setting(skolemvars,E),
     skolemize(D,G,H,E,F),
     record_skolemized(A,C,F,G,H),
     ( E=F
     ->
       true
     ;
       set(skolemvars,F)
     )
   ;
     split_clause(D,I,H),
     record_nskolemized(A,C,I,H)
   ),
   !.


aleph_subsumes(A,B) :-
   \+ \+ (numbervars(A,0,_),numbervars(B,0,_),aleph_subset1(A,B)).


redundant(C,E,[A|B]) :-
   copy_term([A|B],F),
   aleph_member(D,B),
   C=D,
   aleph_subsumes(E,F).


glist_to_goals([g(_,_,A)],A) :-
   !.
glist_to_goals([g(_,_,A) |B],(A,C)) :-
   glist_to_goals(B,C).


compile_clause2([[_|A]],B) :-
   !,
   glist_to_goals(A,B).
compile_clause2([[_|A] |C],(B,!,D)) :-
   glist_to_goals(A,B),
   compile_clause2(C,D).


join_goals([],A,A) :-
   !.
join_goals(A,[],A) :-
   !.
join_goals([g(A,D,E) |F],[g(B,G,H) |I],C) :-
   A<B,
   !,
   C=[g(A,D,E) |J],
   join_goals(F,[g(B,G,H) |I],J).
join_goals([F|E],[g(B,C,D) |G],A) :-
   A=[g(B,C,D) |H],
   join_goals(E,[F|G],H).


aleph_ord_union(A,[],A) :-
   !.
aleph_ord_union([],A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F).


aleph_ord_disjoint([],_) :-
   !.
aleph_ord_disjoint(_,[]) :-
   !.
aleph_ord_disjoint([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_disjoint(C,A,D,B,E).


add_to_sets([],A,B,[[A|B]]).
add_to_sets([[A|B] |D],C,E,[[A|B] |F]) :-
   aleph_ord_disjoint(A,C),
   !,
   add_to_sets(D,C,E,F).
add_to_sets([[A|C] |E],B,D,H) :-
   aleph_ord_union(A,B,F),
   join_goals(C,D,G),
   add_to_sets(E,F,G,H).


add_goal_to_set(g(C,B,D),A,E) :-
   add_to_sets(A,B,[g(C,B,D)],E).


get_goal_vars(A,C,D,A) :-
   vars_in_term([A],[],B),
   aleph_ord_subtract(B,C,D).


compile_clause(B,A,(A:-C)) :-
   compile_clause2(B,C).


calculate_independent_sets([],A,A).
calculate_independent_sets([A|C],B,E) :-
   add_goal_to_set(A,B,D),
   calculate_independent_sets(C,D,E).


number_goals_and_get_vars((B,F),C,A,H,I,[g(A,D,E) |J]) :-
   !,
   G is A+1,
   get_goal_vars(B,C,D,E),
   number_goals_and_get_vars(F,C,G,H,I,J).
number_goals_and_get_vars(C,D,A,A,B,[g(A,E,F) |B]) :-
   get_goal_vars(C,D,E,F).


remove_subsumed([C|A],E) :-
   aleph_delete(B,A,D),
   \+ \+redundant(B,[C|A],[C|D]),
   !,
   remove_subsumed([C|D],E).
remove_subsumed(A,A).


reorder_clause((A:-B),F) :-
   vars_in_term([A],[],C),
   number_goals_and_get_vars(B,C,1,_,[],D),
   calculate_independent_sets(D,[],E),
   compile_clause(E,A,F).


remove_redundant((A:-B),(D:-F)) :-
   goals_to_list((A,B),C),
   remove_subsumed(C,[D|E]),
   ( E= ([])
   ->
     F=true
   ;
     list_to_goals(E,F)
   ).


concat([A],A) :-
   !.
concat([C|A],F) :-
   concat(A,B),
   name(B,D),
   name(C,E),
   aleph_append(D,E,G),
   name(F,G).


aleph_writeq(A) :-
   write_term(A,[numbervars(true),quoted(true)]).


create_copy(B,C,_,_,_,A,A) :-
   B>C,
   !.
create_copy(A,K,B,H,D,F,L) :-
   example(A,B,C),
   C=..[_|E],
   I=..[D|E],
   G is F+1,
   aleph_writeq(example(G,H,I)),
   write('.'),
   nl,
   J is A+1,
   create_copy(J,K,B,H,D,G,L).


create_copy([],_,_,_,A,A).
create_copy([A-B|G],C,D,E,F,I) :-
   create_copy(A,B,C,D,E,F,H),
   create_copy(G,C,D,E,H,I).


aleph_open(A,read,B) :-
   !,
   ( exists(A)
   ->
     open(A,read,B)
   ;
     fail
   ).
aleph_open(A,B,C) :-
   open(A,B,C).


create_examples(B,F,E,D,A,[I-H]) :-
   '$aleph_global'(last_example,last_example(A,G)),
   aleph_open(B,write,C),
   set_output(C),
   create_copy(D,E,A,F,G,H),
   close(C),
   set_output(user_output),
   H>G,
   !,
   retract(user:'$aleph_global'(last_example,last_example(A,G))),
   I is G+1,
   asserta(user:'$aleph_global'(last_example,last_example(A,H))).
create_examples(_,_,_,_,_,[]).


rm_seeds1([],A,A).
rm_seeds1([A-B|D],C,F) :-
   rm_interval(A-B,C,E),
   !,
   rm_seeds1(D,E,F).


app_lit(B,(A,C),(A,D)) :-
   !,
   app_lit(B,C,D).
app_lit(B,A,(A,B)).


cwinduce :-
   store(greedy),
   set(greedy,true),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   repeat,
   '$aleph_global'(atoms_left,atoms_left(pos,[B-G|H])),
   sat(B),
   reduce,
   retract(user:'$aleph_global'(hypothesis,hypothesis(C,D,E,F))),
   asserta(user:'$aleph_search'(sphyp,hypothesis(C,D,E,F))),
   rm_seeds1(E,[B-G|H],I),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,[B-G|H]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   I= ([]),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   reinstate(greedy),
   !.
cwinduce.


gen_ab_examples(B/_,E,C) :-
   A='.alephtmp.f',
   D='.alephtmp.n',
   create_examples(A,B,neg,C,pos,F),
   create_examples(D,B,pos,E,neg,G),
   aleph_consult(A),
   aleph_consult(D),
   retractall(user:'$aleph_global'(atoms_left,_)),
   retractall(user:'$aleph_global'(size,_)),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,G))),
   interval_count(F,H),
   interval_count(G,I),
   asserta(user:'$aleph_global'(size,size(pos,H))),
   asserta(user:'$aleph_global'(size,size(neg,I))),
   delete_file(A),
   delete_file(D).


add_modes(D/_) :-
   '$aleph_global'(targetpred,targetpred(A)),
   modes(A,B),
   B=..[F,G,C],
   C=..[_|E],
   H=..[D|E],
   I=..[F,G,H],
   prolog:call(call(user:I)),
   fail.
add_modes(_).


add_determinations(D,B) :-
   '$aleph_global'(targetpred,targetpred(A)),
   determinations(A,C),
   ( B=true
   ->
     C\=A
   ;
     true
   ),
   determination(D,C),
   fail.
add_determinations(_,_).


gen_absym(C) :-
   ( retract(user:'$aleph_global'(last_ab,last_ab(A)))
   ->
     B is A+1
   ;
     B is 0
   ),
   asserta(user:'$aleph_global'(last_ab,last_ab(B))),
   concat([ab,B],C).


gcws(A,E,F,K) :-
   gen_absym(C),
   split_clause(A,B,H),
   functor(B,_,D),
   add_determinations(C/D,true),
   add_modes(C/D),
   gen_ab_examples(C/D,E,F),
   cwinduce,
   B=..[_|G],
   I=..[C|G],
   ( H=true
   ->
     J= (not I)
   ;
     app_lit(not I,H,J)
   ),
   K= (B:-J).


label_create(A,B,D) :-
   '$aleph_global'(last_example,last_example(A,C)),
   label_create(B,A,[1-C],D).


gcws :-
   setting(evalfn,P),
   repeat,
   retract(user:'$aleph_search'(sphyp,hypothesis([F,K,L|M],B,A,G))),
   ( A=_/_
   ->
     label_create(pos,B,C),
     extract_pos(C,D),
     interval_count(D,E)
   ;
     D=A,
     E=F
   ),
   ( G=_/_
   ->
     label_create(neg,B,H),
     extract_neg(H,I),
     interval_count(I,J)
   ;
     I=G,
     J=K
   ),
   ( J=0
   ->
     O=B,
     R=[E,J,L|M]
   ;
     N is E/ (2*E-1),
     set(minacc,N),
     set(noise,J),
     gcws(B,D,I,O),
     Q is L+1,
     complete_label(P,O,[F,0,Q],R)
   ),
   assertz(user:'$aleph_search'(gcwshyp,hypothesis(R,O,D,[]))),
   \+'$aleph_search'(sphyp,hypothesis(_,_,_,_)),
   !.


err_message(A) :-
   p1_message(error),
   p_message(A).


sum_gini([],_,0).
sum_gini([A-_|B],C,D) :-
   A>0,
   !,
   sum_gini(B,C,F),
   E is A/C,
   D is E* (1-E)+F.
sum_gini([_|A],B,C) :-
   sum_gini(A,B,C).


sum_entropy([],_,0).
sum_entropy([A-_|B],C,D) :-
   A>0,
   !,
   sum_entropy(B,C,E),
   D is A*log(A/C)+E.
sum_entropy([_|A],B,C) :-
   sum_entropy(A,B,C).


cont_distribution(B,C,_,A,A) :-
   B>C,
   !.
cont_distribution(A,I,B,D-[E,G],M) :-
   example(A,pos,C),
   tparg(B,C,F),
   H is A+1,
   J is D+1,
   K is E+F,
   L is G+F*F,
   cont_distribution(H,I,B,J-[K,L],M).


discr_distribution(B,C,_,A,A) :-
   B>C,
   !.
discr_distribution(A,I,B,D-F,M) :-
   example(A,pos,C),
   tparg(B,C,E),
   H is A+1,
   J is D+1,
   ( aleph_delete(G-E,F,L)
   ->
     K is G+1,
     discr_distribution(H,I,B,J-[K-E|L],M)
   ;
     discr_distribution(H,I,B,J-[1-E|F],M)
   ).


discr_distribution([],_,A,A).
discr_distribution([A-B|F],C,D-E,I) :-
   discr_distribution(A,B,C,D-E,G-H),
   discr_distribution(F,C,G-H,I).


cont_distribution([],_,A-[D,E],A-[B,C]) :-
   ( A=0
   ->
     B=0,
     C=0
   ;
     B is D/A,
     C is sqrt(E/A-B*B)
   ).
cont_distribution([A-B|F],C,D-E,I) :-
   cont_distribution(A,B,C,D-E,G-H),
   cont_distribution(F,C,G-H,I).


impurity(regression,sd,_-[_,A],A) :-
   !.
impurity(classification,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(classification,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(class_probability,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(class_probability,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(_,_,_,_) :-
   err_message('inappropriate settings for tree_type and/or evalfn'),
   fail.


treenode_cost(model,A,B,D,C,E,F) :-
   !,
   add_model(A,B,C,D,_,E,F).
treenode_cost(A,E,_,B,C,D,G) :-
   node_stats(A,B,C,D-F),
   D>0,
   impurity(A,E,D-F,G).


in(false,_) :-
   !,
   fail.
in(bottom,B) :-
   !,
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],C),
   aleph_member(B,C).
in((A:-true),A) :-
   !.
in((A:-B),C) :-
   !,
   in((A,B),C).
in((A,_),A).
in((_,A),B) :-
   !,
   in(A,B).
in(A,A).


show_split_list([],_,_).
show_split_list([H-[[_,_,L,_],[C,_,K,_]] |N],I,A) :-
   copy_term(A,B),
   split_clause(B,E,F),
   copy_term(C,D),
   numbervars(D,0,_),
   split_clause(D,E,G),
   get_goaldiffs(F,G,J),
   M is -1*H,
   tab(4),
   write(I),
   tab(4),
   write(J),
   nl,
   tab(12),
   write('Succeeded (Right Branch): '),
   write(K),
   nl,
   tab(12),
   write('Failed    (Left Branch) : '),
   write(L),
   nl,
   tab(12),
   write('Cost Reduction          : '),
   write(M),
   nl,
   nl,
   O is I+1,
   show_split_list(N,O,A).


ask_best_split(F,B,C,D) :-
   repeat,
   tab(4),
   write('-> '),
   write('Select Split Number (or "none.")'),
   nl,
   read(A),
   ( A=none
   ->
     B is(-inf),
     C= ([]),
     D= ([])
   ;
     E is integer(A),
     aleph_remove_nth(E,F,G-[C,D],_),
     B is -1*G
   ),
   !.


show_split_list(B,A) :-
   tab(4),
   write('Split Information'),
   nl,
   tab(4),
   write(-----------------),
   nl,
   nl,
   tab(4),
   write('No.'),
   tab(4),
   write('Split'),
   nl,
   tab(4),
   write(---),
   tab(4),
   write(-----),
   nl,
   show_split_list(A,1,B).


get_best_split(A,B,C,D,E) :-
   show_split_list(A,B),
   ask_best_split(B,C,D,E).


get_best_subtree(false,_,A,B,C) :-
   retract(user:'$aleph_search'(tree_gain,tree_gain(A,B,C))),
   !.
get_best_subtree(true,A,H,B,C) :-
   nl,
   write('Extending path: '),
   nl,
   write(---------------),
   nl,
   pp_dclause(A),
   prolog:findall(D-[B,C],('$aleph_search'(tree_gain,tree_gain(E,B,C)),D is -1*E),F),
   keysort(F,G),
   get_best_split(A,G,H,B,C),
   retractall(user:'$aleph_search'(tree_gain,_)).


eval_treenode(A,B,D,F,E,G,H) :-
   arg(4,A,_/C),
   treenode_cost(B,C,D,E,F,G,H).


get_goaldiffs((A,B),(A,C),D) :-
   !,
   get_goaldiffs(B,C,D).
get_goaldiffs(true,A,A) :-
   !.
get_goaldiffs(A,(A,B),B).


rm_intervals([],A,A).
rm_intervals([A|C],B,E) :-
   rm_interval(A,B,D),
   rm_intervals(C,D,E),
   !.


tree_refine_ok(model,C) :-
   '$aleph_global'(model,model(A/B)),
   functor(D,A,B),
   in(C,D),
   !,
   fail.
tree_refine_ok(_,_).


print_eval(A,C) :-
   evalfn_name(A,B),
   p1_message(B),
   p_message(C).


get_best_subtree(A,F,H,[D,W,V],I,B1,C1,D1) :-
   arg(42,A,B),
   arg(43,A,E),
   retractall(user:'$aleph_search'(tree_gain,_)),
   C is(-inf),
   ( B=false
   ->
     asserta(user:'$aleph_search'(tree_gain,tree_gain(C,[],[])))
   ;
     true
   ),
   split_clause(D,M,N),
   arg(4,A,_/Y),
   arg(13,A,K),
   auto_refine(E,D,G),
   tree_refine_ok(F,G),
   eval_treenode(A,F,G,H,I,L,J,T),
   J>=K,
   rm_intervals(L,I,R),
   split_clause(G,M,O),
   get_goaldiffs(N,O,P),
   extend_clause(D,not P,Q),
   eval_treenode(A,F,Q,H,R,S,U),
   S>=K,
   X is (J*T+S*U)/V,
   Z is W-X,
   ( B=false
   ->
     pp_dclause(G),
     print_eval(Y,T),
     pp_dclause(Q),
     print_eval(Y,U),
     p1_message('expected cost reduction'),
     p_message(Z),
     '$aleph_search'(tree_gain,tree_gain(A1,_,_)),
     Z>A1,
     retract(user:'$aleph_search'(tree_gain,tree_gain(A1,_,_))),
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ;
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ),
   X=< 0,
   !,
   get_best_subtree(B,D,B1,C1,D1).
get_best_subtree(A,_,_,[C|_],_,D,E,F) :-
   arg(42,A,B),
   get_best_subtree(B,C,D,E,F).


normalise_distribution([],_,[]).
normalise_distribution([C-A|E],D,[B-A|F]) :-
   B is C/D,
   normalise_distribution(E,D,F).


find_maj_class([A],A) :-
   !.
find_maj_class([B-E|A],D) :-
   find_maj_class(A,C-F),
   ( B>C
   ->
     D=B-E
   ;
     D=C-F
   ).


get_model_error(mse,B,C,A) :-
   A is (B-C)^2.
get_model_error(accuracy,A,B,C) :-
   ( A=B
   ->
     C is  0
   ;
     C is  1
   ).


sum_model_errors([],_,A,B,A,B).
sum_model_errors([B-C|G],A,F,D,J,K) :-
   get_model_error(A,B,C,E),
   I is D+E,
   H is F+1,
   sum_model_errors(G,A,H,I,J,K).


find_model_error(L,B,(A:-H),[G],M,N) :-
   functor(A,_,E),
   prolog:findall(J-I,(aleph_member(C,B),aleph_member3(D,C),example(D,pos,F),copy_iargs(E,F,A,G),once(call(user:H)),arg(G,A,I),arg(G,F,J)),K),
   sum_model_errors(K,L,0,0,M,N),
   !.


leaf_predicts(0,_,_) :-
   !,
   fail.
leaf_predicts(A,B,D) :-
   arg(A,B,C),
   var(C),
   C==D,
   !.
leaf_predicts(A,C,D) :-
   B is A-1,
   leaf_predicts(B,C,D).


auto_extend((A:-B),F,(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ),
   \+tautology((H:-I)),
   \+prune((H:-I)).


add_prediction(classification,A,B,C,_,D) :-
   extend_clause(A,B=C,D).
add_prediction(class_probability,A,B,C,_,D) :-
   extend_clause(A,random(B,C),D).
add_prediction(regression,A,B,C,D,E) :-
   extend_clause(A,random(B,normal(C,D)),E).


add_model(K,A,B,J,_,_,_) :-
   retractall(user:'$aleph_local'(tree_model,_,_,_)),
   D is inf,
   split_clause(A,C,_),
   tparg(B,C,H),
   asserta(user:'$aleph_local'(tree_model,false,0,D)),
   '$aleph_global'(model,model(E/F)),
   functor(G,E,F),
   auto_extend(A,G,I),
   leaf_predicts(F,G,H),
   lazy_evaluate_refinement([],I,[E/F],J,[],[],L),
   find_model_error(K,J,L,B,O,M),
   '$aleph_local'(tree_model,_,_,N),
   ( M<N
   ->
     retract(user:'$aleph_local'(tree_model,_,_,_)),
     asserta(user:'$aleph_local'(tree_model,L,O,M))
   ;
     true
   ),
   fail.
add_model(_,_,_,_,A,B,C) :-
   retract(user:'$aleph_local'(tree_model,A,B,C)).


addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,A,C,D)),
   A=[_|_],
   !,
   add_theory(B,A,C,D).
addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,_,A,_)),
   !,
   rm_seeds,
   worse_coversets(A,pos,B,C),
   ( C= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(D)),
     update_coversets(C,D,pos,B)
   ),
   !.
addhyp :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   !,
   add_hyp(A,B,C,D),
   rm_seeds,
   worse_coversets(C,pos,A,E),
   ( E= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(F)),
     update_coversets(E,F,pos,A)
   ),
   !.


add_prediction(B,A,D,E,F) :-
   split_clause(A,H,_),
   ( B=model
   ->
     setting(evalfn,C),
     add_model(C,A,D,E,F,_,_)
   ;
     node_stats(B,E,D,G),
     leaf_prediction(B,G,J,K),
     tparg(D,H,I),
     add_prediction(B,A,I,J,K,F)
   ).


aleph_mode_linked([B|A]) :-
   aleph_mode_linked(A,[B]).


strip_negs([],[]).
strip_negs([not A|B],[A|C]) :-
   !,
   strip_negs(B,C).
strip_negs([A|B],[A|C]) :-
   strip_negs(B,C).


greedy_prune_rule1(I,F,K,[A|B],C,_,_) :-
   retractall(user:'$aleph_search'(tree_besterror,_)),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|B],C))),
   '$aleph_global'(atoms_left,atoms_left(pos,H)),
   aleph_delete(_,B,D),
   strip_negs(D,E),
   aleph_mode_linked([A|E]),
   list_to_clause([A|D],G),
   prove(F,pos,G,H,J,_),
   node_stats(I,J,K,L-M),
   leaf_prediction(I,L-M,_,N),
   estimate_error(I,N,L,O),
   '$aleph_search'(tree_besterror,besterror(_,P)),
   O=<P,
   retract(user:'$aleph_search'(tree_besterror,besterror(_,P))),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|D],O))),
   fail.
greedy_prune_rule1(_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(tree_besterror,besterror(A,B))).


approx_z(A,2.58) :-
   A>= 0.99,
   !.
approx_z(A,B) :-
   A>= 0.98,
   !,
   B is  2.33+ (A- 0.98)* (2.58- 2.33)/ (0.99- 0.98).
approx_z(A,B) :-
   A>= 0.95,
   !,
   B is  1.96+ (A- 0.95)* (2.33- 1.96)/ (0.98- 0.95).
approx_z(A,B) :-
   A>= 0.9,
   !,
   B is  1.64+ (A- 0.9)* (1.96- 1.64)/ (0.95- 0.9).
approx_z(A,B) :-
   A>= 0.8,
   !,
   B is  1.28+ (A- 0.8)* (1.64- 1.28)/ (0.9- 0.8).
approx_z(A,B) :-
   A>= 0.68,
   !,
   B is  1+ (A- 0.68)* (1.28- 1)/ (0.8- 0.68).
approx_z(A,B) :-
   A>= 0.5,
   !,
   B is  0.67+ (A- 0.5)* (1- 0.67)/ (0.68- 0.5).
approx_z(_,0.67).


bound_error(classification,C,E,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   approx_z(A,D),
   B is C-D*sqrt(C* (1-C)/E),
   F is C+D*sqrt(C* (1-C)/E).


chi_square(A,F,K) :-
   A>0,
   C is 1-2/ (9*A),
   D is sqrt(2/ (9*A)),
   B is 1000,
   get_normal(B,C,D,E),
   sort(E,I),
   G is  1-F,
   H is integer(G*B),
   ( H>B
   ->
     aleph_remove_nth(B,I,J,_)
   ;
     aleph_remove_nth(H,I,J,_)
   ),
   K is A*J^3.


estimate_error(A/J,B/K,F,C,E,I) :-
   D is (A+B)/2,
   binom_lte(C,D,E,G),
   H is abs(F-G),
   ( H< 1e-05
   ->
     I is D
   ;
     ( G>F
     ->
       estimate_error(A/J,D/G,F,C,E,I)
     )
   ;
     estimate_error(D/G,B/K,F,C,E,I)
   ).


list_to_clause([A],(A:-true)) :-
   !.
list_to_clause([A|B],(A:-C)) :-
   list_to_goals(B,C).


greedy_prune_rule(A,B,C,D,E,H,I) :-
   greedy_prune_rule1(A,B,C,D,E,F,G),
   D\=F,
   !,
   greedy_prune_rule(A,B,C,F,G,H,I).
greedy_prune_rule(_,_,_,A,B,A,B).


estimate_error(classification,C,B,D) :-
   setting(confidence,A),
   estimate_error(1/ 0,0/ 1,A,B,C,D).
estimate_error(regression,A,1,A) :-
   !.
estimate_error(regression,G,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   C is  1-A,
   D is B-1,
   E is 1-C/2,
   chi_square(D,E,H),
   F is G*sqrt((B-1)/H).


leaf_prediction(classification,D-A,B,C) :-
   find_maj_class(A,E-B),
   C is D-E.
leaf_prediction(class_probability,B-A,F,0) :-
   length(A,C),
   laplace_correct(A,D),
   E is B+C,
   normalise_distribution(D,E,F).
leaf_prediction(regression,_-[A,B],A,B).


node_stats(A,B,C,E) :-
   '$aleph_search'(tree_startdistribution,d(A,D)),
   ( A=regression
   ->
     cont_distribution(B,C,D,E)
   ;
     discr_distribution(B,C,D,E)
   ).


prune_rule(A,I,C,[G,_,V],B,[R,P,U],T) :-
   node_stats(A,B,C,D-E),
   leaf_prediction(A,D-E,_,F),
   estimate_error(A,F,D,O),
   split_clause(G,M,H),
   goals_to_list(H,N),
   arg(14,I,J),
   arg(29,I,K),
   arg(34,I,L),
   greedy_prune_rule(A,J/K/L,C,[M|N],O,Q,P),
   list_to_clause(Q,R),
   ( P<O
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,S)),
     prove(J/K/L,pos,R,S,T,U)
   ;
     T=B,
     U=V
   ).


prune_rules1(class_probability,_,_) :-
   p_message('no pruning for class probability trees'),
   !.
prune_rules1(model,_,_) :-
   p_message('no pruning for model trees'),
   !.
prune_rules1(A,B,C) :-
   p_message('pruning clauses'),
   '$aleph_search'(tree_leaf,l(F,G,D,E)),
   prune_rule(A,B,C,D,E,H,I),
   retract(user:'$aleph_search'(tree_leaf,l(F,G,D,E))),
   asserta(user:'$aleph_search'(tree_newleaf,l(F,G,H,I))),
   fail.
prune_rules1(_,_,_) :-
   retract(user:'$aleph_search'(tree_newleaf,l(A,B,C,D))),
   asserta(user:'$aleph_search'(tree_leaf,l(A,B,C,D))),
   fail.
prune_rules1(_,_,_).


split_leaf(A,D,E,[B,C]) :-
   retract(user:'$aleph_search'(tree_leaf,l(A,F,[G,H,I],J))),
   gen_leaf(B),
   gen_leaf(C),
   D=[K,L,M,N],
   E=[O,P,Q,R],
   asserta(user:'$aleph_search'(tree,t(A,F,[G,H,I],J,B,C))),
   asserta(user:'$aleph_search'(tree_leaf,l(B,A,[K,L,M],N))),
   asserta(user:'$aleph_search'(tree_leaf,l(C,A,[O,P,Q],R))).


can_split(A,E,F,B,J,K) :-
   arg(21,A,D),
   '$aleph_search'(tree_leaf,l(B,_,[G,C,H],I)),
   C>=D,
   get_best_subtree(A,E,F,[G,C,H],I,L,J,K),
   L>=D,
   p_message('found clauses'),
   J=[P,Q|_],
   K=[M,O|_],
   arg(4,A,_/N),
   pp_dclause(M),
   print_eval(N,O),
   pp_dclause(P),
   print_eval(N,Q),
   p1_message('expected cost reduction'),
   p_message(L).


laplace_correct([],[]).
laplace_correct([C-A|D],[B-A|E]) :-
   B is C+1,
   laplace_correct(D,E).


initialise_distribution([],[]).
initialise_distribution([A|B],[0-A|C]) :-
   initialise_distribution(B,C).


add_tree(_,B,D) :-
   retract(user:'$aleph_search'(tree_leaf,l(_,_,A,E))),
   A=[C,G,H],
   add_prediction(B,C,D,E,F),
   p_message('best clause'),
   pp_dclause(F),
   nlits(C,I),
   J is-G,
   asserta(user:'$aleph_global'(hypothesis,hypothesis([H,0,I,J],F,E,[]))),
   addhyp,
   fail.
add_tree(_,_,_).


prune_rules(B,A,C) :-
   setting(prune_tree,true),
   prune_rules1(A,B,C),
   !.
prune_rules(_,_,_).


find_tree1([],_,_,_).
find_tree1([D|H],A,B,C) :-
   can_split(A,B,C,D,E,F),
   !,
   split_leaf(D,E,F,G),
   aleph_append(G,H,I),
   find_tree1(I,A,B,C).
find_tree1([_|A],B,C,D) :-
   find_tree1(A,B,C,D).


eval_treenode(A,J,E,L,F,G,M,N) :-
   arg(4,A,_/K),
   arg(13,A,I),
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,pos,E,F,G,H),
   H>=I,
   treenode_cost(J,K,E,G,L,M,N).


gen_leaf(A) :-
   retract(user:'$aleph_search'(tree_lastleaf,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_search'(tree_lastleaf,A)).
gen_leaf(0) :-
   asserta(user:'$aleph_search'(tree_lastleaf,0)).


auto_refine(false,D) :-
   example_saturated(A),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine(false,D) :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine((A:-B),(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   \+prune((H:-I)),
   \+tautology((H:-I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ).
auto_refine(A,B) :-
   auto_refine((A:-true),B).


stopwatch(A) :-
   A is cputime.


get_start_distribution(regression,0-[0,0]) :-
   !.
get_start_distribution(model,0-[0,0]) :-
   setting(evalfn,mse),
   !.
get_start_distribution(model,0-B) :-
   setting(evalfn,accuracy),
   !,
   ( setting(classes,A)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(A,B),
   !.
get_start_distribution(A,0-C) :-
   (
     A=classification
   ;
     A=class_probability
   ),
   ( setting(classes,B)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(B,C),
   !.
get_start_distribution(_,_) :-
   p_message('incorrect/missing setting for tree_type or evalfn'),
   fail.


find_tree(A) :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   get_start_distribution(A,B),
   asserta(user:'$aleph_search'(tree_startdistribution,d(A,B))),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   setting(dependent,E),
   p_message('constructing tree'),
   stopwatch(L),
   get_search_settings(C),
   auto_refine(false,D),
   gen_leaf(G),
   eval_treenode(C,A,(D:-true),[E],F,J,I,H),
   asserta(user:'$aleph_search'(tree_leaf,l(G,G,[D,H,I],J))),
   find_tree1([G],C,A,[E]),
   prune_rules(C,A,[E]),
   stopwatch(K),
   add_tree(C,A,[E]),
   M is K-L,
   p1_message('construction time'),
   p_message(M).


construct_tree(D) :-
   setting(searchtime,A),
   B is inf,
   A=\=B,
   C is integer(A),
   C>0,
   !,
   catch(time_bound_call(C,searchlimit,find_tree(D)),searchlimit,p_message('Time limit reached')).
construct_tree(A) :-
   find_tree(A).


aleph_hash_term([J,A,B,C,D|K],E) :-
   !,
   functor(A,I,_),
   functor(B,G,_),
   functor(C,H,_),
   functor(D,F,_),
   functor(E,F,6),
   arg(1,E,G),
   arg(2,E,H),
   arg(3,E,I),
   arg(4,E,[J,A,B,C,D|K]).
aleph_hash_term([H,A,B,C],D) :-
   !,
   functor(A,G,_),
   functor(B,F,_),
   functor(C,E,_),
   functor(D,E,5),
   arg(1,D,F),
   arg(2,D,G),
   arg(3,D,[H,A,B,C]).
aleph_hash_term([F,A,B],C) :-
   !,
   functor(A,E,_),
   functor(B,D,_),
   functor(C,D,4),
   arg(1,C,E),
   arg(2,C,[F,A,B]).
aleph_hash_term([D,A],B) :-
   !,
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[D,A]).
aleph_hash_term([A],B) :-
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[A]).


copy_args(_,_,A,B) :-
   A>B,
   !.
copy_args(B,C,A,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A+1,
   copy_args(B,C,E,F).


clear_cache :-
   retractall(user:'$aleph_search_cache'(_)),
   retractall(user:'$aleph_search_prunecache'(_)).


time_bound_call(A,B,C) :-
   prolog:alarm(A,throw(B),D),
   ( call(user:C)
   ->
     remove_alarm(D)
   ;
     remove_alarm(D),
     fail
   ).


index_prove1(false/_,_,_,_,_,_,A,B,_) :-
   A>B,
   !,
   fail.
index_prove1(_,_,_,_,A,B,_,_,A) :-
   A>B,
   !.
index_prove1(true/_,_,_,_,B,_,A,A,B) :-
   !.
index_prove1(K/I,D/E/C,B,G,A,M,H,O,P) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   L is A+1,
   N is H+1,
   ( I=true
   ->
     ( retract(user:'$aleph_local'(example_cache,J))
     ->
       asserta(user:'$aleph_local'(example_cache,[A|J]))
     ;
       asserta(user:'$aleph_local'(example_cache,[A]))
     )
   ;
     true
   ),
   index_prove1(K/I,D/E/C,B,G,L,M,N,O,P).
index_prove1(_,_,_,_,A,_,_,_,A).


index_prove(_,_,_,_,A-B,_,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D,E-F,G,N,O) :-
   index_prove1(A,B,C,D,E,F,0,G,H),
   I is H-1,
   K is H+1,
   ( I>=E
   ->
     J is G-H+E,
     ( J=0,
       A=true/_
     ->
       L= ([]),
       M=0
     ;
       index_prove(A,B,C,D,K-F,J,L,M)
     ),
     N=[E-I|L],
     O is H-E+M
   ;
     index_prove(A,B,C,D,K-F,G,N,O)
   ).


prove1(A) :-
   depth_bound_call(A),
   !.


index_prove1(_,_,_,A,B,A) :-
   A>B,
   !.
index_prove1(D/E/C,B,G,A,I,J) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   H is A+1,
   index_prove1(D/E/C,B,G,H,I,J).
index_prove1(_,_,_,A,_,A).


prove3([A-M|N],D/E/C,B,(G:-H),K,I,Q) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   J is A-1,
   I=[L-J|P],
   O is K+A-L,
   ( A>=M
   ->
     prove2(N,D/E/C,B,(G:-H),O,P,Q)
   ;
     R is A+1,
     !,
     prove2([R-M|N],D/E/C,B,(G:-H),O,P,Q)
   ).
prove3([A-B|F],G,H,I,D,C,L) :-
   ( A>=B
   ->
     C=[E-B|K],
     J is D+B-E+1,
     !,
     prove2(F,G,H,I,J,K,L)
   ;
     M is A+1,
     !,
     prove3([M-B|F],G,H,I,D,C,L)
   ).


prove1(user,_,B,A) :-
   prove(A,B),
   !.
prove1(restricted_sld,D/C,A,(B:-E)) :-
   \+ \+ (A=B,resource_bound_call(C,D,E)),
   !.
prove1(sld,B/A,C,_) :-
   \+ \+resource_bound_call(A,B,C),
   !.


prove2([],_,_,_,A,[],A).
prove2([A-I|J],D/E/C,B,(G:-H),K,L,M) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   ( A>=I
   ->
     prove2(J,D/E/C,B,(G:-H),K,L,M)
   ;
     N is A+1,
     !,
     prove2([N-I|J],D/E/C,B,(G:-H),K,L,M)
   ).
prove2([A-B|E],F,G,H,D,C,K) :-
   ( A>=B
   ->
     C=[A-A|J],
     I is D+1,
     !,
     prove2(E,F,G,H,I,J,K)
   ;
     L is A+1,
     C=[A-_|_],
     !,
     prove3([L-B|E],F,G,H,D,C,K)
   ).


index_prove(_,_,_,A-B,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D-E,I,K) :-
   index_prove1(A,B,C,D,E,F),
   G is F-1,
   H is F+1,
   ( G>=D
   ->
     index_prove(A,B,C,H-E,J,L),
     I=[D-G|J],
     K is F-D+L
   ;
     index_prove(A,B,C,H-E,I,K)
   ).


list_to_intervals1([],[]).
list_to_intervals1([A|B],[A-C|E]) :-
   list_to_interval(A,B,C,D),
   list_to_intervals1(D,E).


aleph_reverse(A,B) :-
   revzap(A,[],B).


collect_example_cache(D/G) :-
   retract(user:'$aleph_local'(example_cache,[A|B])),
   aleph_reverse([A|B],C),
   list_to_intervals1(C,D),
   E is A+1,
   '$aleph_global'(size,size(neg,F)),
   ( E>F
   ->
     G= ([])
   ;
     G=[E-F]
   ).


prove_intervals(A,I,J,C/B,L,M,N) :-
   !,
   arg(8,A,E),
   arg(12,A,D),
   arg(14,A,F),
   arg(29,A,G),
   arg(34,A,H),
   aleph_append(B,C,K),
   prove(D/E,F/G/H,I,J,K,L,M,N).
prove_intervals(A,G,H,I,J,K,L) :-
   arg(8,A,C),
   arg(12,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   prove(B/C,D/E/F,G,H,I,J,K,L).


prove_cached(A,K,S,B/M,L,_,C,O/R,P) :-
   !,
   arg(8,A,G),
   arg(12,A,F),
   arg(14,A,H),
   arg(29,A,I),
   arg(34,A,J),
   interval_count(B,D),
   E is C-D,
   E>=0,
   ( prove(F/G,H/I/J,K,L,M,E,N,Q)
   ->
     aleph_append(N,B,O),
     P is Q+D,
     find_lazy_left(A,K,O,R),
     update_cache(S,K,O/R),
     retractall(user:'$aleph_local'(example_cache,_))
   ;
     collect_example_cache(N/R),
     aleph_append(N,B,O),
     update_cache(S,K,O/R),
     fail
   ).
prove_cached(_,neg,_,A/B,_,_,_,A/B,C) :-
   !,
   interval_count(A,C).
prove_cached(C,_,_,A,_,_,E,A,B) :-
   interval_count(A,B),
   arg(12,C,D),
   ( D=true
   ->
     true
   ;
     B=<E
   ).


find_lazy_left(A,_,_,[]) :-
   arg(12,A,B),
   B=false,
   !.
find_lazy_left(_,_,[],[]).
find_lazy_left(C,B,[_-A],F) :-
   !,
   E is A+1,
   ( B=pos
   ->
     arg(16,C,D)
   ;
     ( B=neg
     ->
       arg(24,C,D)
     )
   ;
     ( B=rand
     ->
       arg(20,C,D)
     )
   ;
     D=A
   ),
   ( E>D
   ->
     F= ([])
   ;
     F=[E-D]
   ).
find_lazy_left(A,B,[_|C],D) :-
   find_lazy_left(A,B,C,D).


prove(_,_,_,_,[],_,[],0).
prove(A,B,C,D,[E|H],F,L,M) :-
   index_prove(A,B,C,D,E,F,K,G),
   !,
   I is F-G,
   prove(A,B,C,D,H,I,J,N),
   aleph_append(J,K,L),
   M is G+N.


update_cache(A,B,I) :-
   A\=false,
   functor(A,F,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   E=_/_,
   retract(user:'$aleph_search_cache'(A)),
   functor(G,F,C),
   H is D-1,
   copy_args(A,G,1,H),
   arg(D,G,I),
   J is D+1,
   copy_args(A,G,J,C),
   asserta(user:'$aleph_search_cache'(G)),
   !.
update_cache(_,_,_).


prove_intervals(C,D,E,B/A,G,H) :-
   !,
   aleph_append(A,B,F),
   prove(C,D,E,F,G,H).
prove_intervals(A,B,C,D,E,F) :-
   prove(A,B,C,D,E,F).


prove_cached(A,E,O,I/G,F,L,M,N) :-
   !,
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,E,F,G,H,_),
   aleph_append(H,I,K),
   ( E=pos
   ->
     arg(5,A,J),
     ( J=true
     ->
       intervals_intersection(K,L,M)
     ;
       M=K
     )
   ;
     M=K
   ),
   interval_count(M,N),
   update_cache(O,E,M).
prove_cached(B,A,H,D,_,E,F,G) :-
   ( A=pos
   ->
     arg(5,B,C),
     ( C=true
     ->
       intervals_intersection(D,E,F)
     ;
       F=D
     )
   ;
     F=D
   ),
   interval_count(F,G),
   update_cache(H,A,F).


potentially_good([1|_],[A|_]) :-
   !,
   A>1.
potentially_good([D,_,B|_],[C,_,A|_]) :-
   A=<B,
   !,
   C>D.
potentially_good([_,B|_],[_,A|_]) :-
   A<B.


potentially_good([],_,[]).
potentially_good([A|D],B,[A|E]) :-
   A=_-C,
   potentially_good(B,C),
   !,
   potentially_good(D,B,E).
potentially_good([_|A],B,C) :-
   potentially_good(A,B,C).


aleph_remove_nth(1,[A|B],A,B) :-
   !.
aleph_remove_nth(B,[A|D],E,[A|F]) :-
   C is B-1,
   aleph_remove_nth(C,D,E,F).


get_random(B,D) :-
   aleph_random(A),
   C is integer(A*B+ 0.5),
   ( C=0
   ->
     D=1
   ;
     ( C>B
     ->
       D=B
     )
   ;
     D=C
   ).


get_nextbest(D) :-
   peek_open_list(A),
   A=[B|C],
   retract(user:'$aleph_search_gain'(B,C,D,_)),
   assertz(user:'$aleph_search'(nextnode,D)).
get_nextbest(A) :-
   pop_open_list,
   get_nextbest(A),
   !.
get_nextbest(none).


rls_nextbest(rrr,_,A,_) :-
   get_nextbest(A).
rls_nextbest(gsat,_,H,I) :-
   peek_open_list(A),
   reset_open_list,
   A=[B|C],
   prolog:findall(D-E,'$aleph_search_gain'(B,C,D,E),F),
   length(F,G),
   get_random(G,D),
   aleph_remove_nth(D,F,H-I,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(wsat,C,D,E) :-
   setting(walk,B),
   aleph_random(A),
   A>=B,
   !,
   rls_nextbest(gsat,C,D,E).
rls_nextbest(wsat,D,G,H) :-
   p_message('random walk'),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   potentially_good(C,D,E),
   length(E,F),
   get_random(F,A),
   aleph_remove_nth(A,E,G-H,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(anneal,[J,A|_],F,G) :-
   setting(temperature,M),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   length(C,D),
   get_random(D,E),
   aleph_remove_nth(E,C,F-G,_),
   G=[H,I|_],
   K is H-I- (J-A),
   (
     J=1
   ;
     K>=0
   ;
     aleph_random(L),
     L<exp(K/M)
   ).


select_nextbest(rls,C) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   setting(rls_type,A),
   ( retract(user:'$aleph_search'(rls_parentstats,stats(B,_,_)))
   ->
     true
   ;
     true
   ),
   ( rls_nextbest(A,B,C,D)
   ->
     asserta(user:'$aleph_search'(rls_parentstats,stats(D,[],[]))),
     setting(rls_type,E),
     ( E=rrr
     ->
       true
     ;
       assertz(user:'$aleph_search'(nextnode,C))
     )
   ;
     C=none
   ),
   !.
select_nextbest(_,A) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   get_nextbest(A),
   !.
select_nextbest(_,none).


built_in_prune(coverage).
built_in_prune(compression).
built_in_prune(posonly).
built_in_prune(laplace).
built_in_prune(wracc).
built_in_prune(mestimate).
built_in_prune(auto_m).


get_node([[A|B] |_],[A|B],C) :-
   '$aleph_search_gain'(A,B,C,_).
get_node([_|A],B,C) :-
   get_node(A,B,C).


record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).
record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).


show_theory(A,D,B,E) :-
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good theory')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found theory')
   ),
   pp_dclauses(B),
   ( setting(evalfn,C)
   ->
     true
   ;
     C=accuracy
   ),
   show_stats(C,D),
   p1_message('theory label'),
   p_message(D),
   p1_message('theories constructed'),
   p_message(E),
   p_message(-------------------------------------).


update_good(_,_,_,_) :-
   setting(goodfile,_),
   !.
update_good(true,A,B,C) :-
   '$aleph_good'(A,B,C),
   !.
update_good(_,A,B,C) :-
   assertz(user:'$aleph_good'(A,B,C)),
   ( retract(user:'$aleph_search'(last_good,D))
   ->
     E is D+1
   ;
     E is 1
   ),
   assertz(user:'$aleph_search'(last_good,E)).


record_clause(good,B,D,_) :-
   setting(good,true),
   setting(goodfile_stream,A),
   !,
   set_output(A),
   B=[_,_,C|_],
   aleph_writeq('$aleph_good'(C,B,D)),
   write('.'),
   nl,
   flush_output(A),
   set_output(user_output).
record_clause(A,C,D,E) :-
   A\=good,
   setting(recordfile_stream,B),
   !,
   set_output(B),
   show_clause(A,C,D,E),
   flush_output(B),
   set_output(user_output).
record_clause(_,_,_,_).


show_clause(good,_,_,_) :-
   !.
show_clause(A,B,C,D) :-
   broadcast(clause(A,B,C,D)),
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good clause')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found clause')
   ),
   pp_dclause(C),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,B),
   has_good_clause_hook(B,C,D),
   p1_message('clause label'),
   p_message(B),
   p1_message('clauses constructed'),
   p_message(D),
   p_message(-------------------------------------).


newbest_hook(_,_,_) :-
   setting(newbest_hook,true),
   !.
newbest_hook(B,C,D) :-
   setting(newbest_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.


update_good(A,D) :-
   setting(good,true),
   !,
   A=[_,_,C|_],
   setting(check_good,B),
   update_good(B,C,A,D).
update_good(_,_).


best_value(gini,_,_,0) :-
   !.
best_value(entropy,_,_,0) :-
   !.
best_value(posonly,A,[C,_,E|_],B) :-
   arg(20,A,D),
   B is log(C)+log(D+ 2)- (E+1)/C,
   !.
best_value(wracc,_,[B|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B* (C-D)/C^2
   ;
     A is  0.25
   ),
   !.
best_value(B,_,[C,_,A|E],F) :-
   D is A+1,
   evalfn(B,[C,0,D|E],F).


add_prune_cache(false) :-
   !.
add_prune_cache(A) :-
   ( '$aleph_global'(caching,set(caching,true))
   ->
     functor(A,_,B),
     C is B-2,
     arg(C,A,D),
     asserta(user:'$aleph_search_prunecache'(D))
   ;
     true
   ).


uniq_insert(_,A,[],[A]).
uniq_insert(descending,A,[B|C],[A,B|C]) :-
   A@>B,
   !.
uniq_insert(ascending,A,[B|C],[A,B|C]) :-
   A@<B,
   !.
uniq_insert(_,A,[A|B],[A|B]) :-
   !.
uniq_insert(B,C,[A|D],[A|E]) :-
   !,
   uniq_insert(B,C,D,E).


pop_open_list :-
   ( recorded('$aleph_search_openlist',[_|B],A)
   ->
     true
   ;
     !,
     fail
   ),
   erase(A),
   recorda('$aleph_search_openlist',B,_),
   fail.
pop_open_list.


peek_open_list(A) :-
   recorded('$aleph_search_openlist',[A|_],_).


open_list(A) :-
   recorded('$aleph_search_openlist',A,_).


reset_open_list :-
   recorded('$aleph_search_openlist',_,A),
   erase(A),
   recorda('$aleph_search_openlist',[],_),
   fail.
reset_open_list.


destroy_open_list :-
   eraseall('$aleph_search_openlist').


init_open_list :-
   recorda('$aleph_search_openlist',[],_).


get_max_negs(D/B,A,C) :-
   number(A),
   ( B=:= 0
   ->
     C is D
   ;
     E is integer((1-B)*A/B),
     ( D<E
     ->
       C is D
     ;
       C is E
     )
   ),
   !.
get_max_negs(A/_,_,A).


prove_cache(exact,E,J,U,K,A,C,P,R) :-
   !,
   ( A=B/L
   ->
     interval_count(B,D),
     M is C-D,
     arg(12,E,F),
     arg(14,E,G),
     arg(29,E,H),
     arg(34,E,I),
     prove(F/false,G/H/I,J,K,L,M,N,S),
     aleph_append(N,B,O),
     find_lazy_left(E,J,O,Q),
     P=O/Q,
     R is D+S
   ;
     P=A,
     interval_count(A,R)
   ),
   arg(8,E,T),
   ( T=true
   ->
     add_cache(U,J,P)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I,J) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I,J)
   ;
     ( prove_intervals(A,D,F,G,H,K,J)
     ->
       find_lazy_left(A,D,K,L),
       add_cache(C,D,K/L),
       I=K/L,
       retractall(user:'$aleph_local'(example_cache,_))
     )
   ;
     collect_example_cache(I),
     add_cache(C,D,I),
     fail
   ).
prove_cache(upper,A,J,_,K,B,M,N/P,O) :-
   arg(8,A,F),
   arg(12,A,E),
   arg(14,A,G),
   arg(29,A,H),
   arg(34,A,I),
   ( B=D/C
   ->
     aleph_append(C,D,L),
     prove(E/F,G/H/I,J,K,L,M,N,O)
   ;
     prove(E/F,G/H/I,J,K,B,M,N,O)
   ),
   find_lazy_left(A,J,N,P).


lazy_prove_neg(B,D,E,[A,C|_],[A,_],F,G,I,J) :-
   arg(4,B,bf/coverage),
   !,
   H is C+1,
   prove_cache(D,B,neg,E,F,G,H,I,J),
   !.
lazy_prove_neg(A,F,G,_,[D,_],H,I,K,L) :-
   arg(17,A,B),
   arg(18,A,C),
   get_max_negs(B/C,D,E),
   J is E+1,
   prove_cache(F,A,neg,G,H,I,J,K,L),
   !.


prove_cache(exact,B,F,P,G,A,K,L) :-
   !,
   ( A=J/H
   ->
     arg(14,B,C),
     arg(29,B,D),
     arg(34,B,E),
     prove(C/D/E,F,G,H,I,N),
     aleph_append(I,J,K),
     interval_count(J,M),
     L is M+N
   ;
     K=A,
     interval_count(K,L)
   ),
   arg(8,B,O),
   ( O=true
   ->
     add_cache(P,F,K)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I) :-
   arg(8,A,B),
   B=true,
   !,
   arg(14,A,J),
   arg(29,A,K),
   arg(34,A,L),
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I)
   ;
     prove_intervals(J/K/L,D,F,G,H,I),
     add_cache(C,D,H)
   ).
prove_cache(upper,A,H,_,I,B,K,L) :-
   arg(14,A,E),
   arg(29,A,F),
   arg(34,A,G),
   ( B=D/C
   ->
     aleph_append(C,D,J),
     prove(E/F/G,H,I,J,K,L)
   ;
     prove(E/F/G,H,I,B,K,L)
   ).


pos_ok(A,_,_,_,_,_) :-
   arg(3,A,B),
   (
     B=rls
   ;
     B=user
   ),
   !.
pos_ok(A,E,_,[B,_],_,_) :-
   arg(13,A,C),
   B<C,
   !,
   arg(8,A,D),
   ( D=true
   ->
     add_prune_cache(E)
   ;
     true
   ),
   fail.
pos_ok(A,F,_,[C,_],_,_) :-
   arg(40,A,B),
   B> 0,
   '$aleph_search'(clauseprior,_-[D-pos,_]),
   C/D<B,
   !,
   arg(8,A,E),
   ( E=true
   ->
     add_prune_cache(F)
   ;
     true
   ),
   fail.
pos_ok(A,_,[_,_,_,H|_],[D,E],_,_) :-
   arg(4,A,_/B),
   arg(2,A,C),
   (
     (
       B=user
     ;
       C=true
     )
   ->
     true
   ;
     evalfn(B,[D,0,E],F),
     best_value(B,A,[D,0,E,F],G),
     G>H
   ),
   !.


evalfn(compression,[A,C,D|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C-D+1
   ),
   !.
evalfn(coverage,[A,C,_|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C
   ),
   !.
evalfn(laplace,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is (A+1)/ (A+C+2)
   ),
   !.
evalfn(wracc,[B,E|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B/C-D/C* ((B+E)/C)
   ;
     A is  -0.25
   ),
   !.
evalfn(entropy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     A is 0
   ;
     ( C is 0
     ->
       B is  0
     )
   ;
     D is A+C,
     E is A/D,
     F is 1-E,
     B is- (E*log(E)+F*log(F))/log(2)
   ),
   !.
evalfn(gini,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     D is A+C,
     E is A/D,
     B is 2*E* (1-E)
   ),
   !.
evalfn(accuracy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is A/ (A+C)
   ),
   !.
evalfn(pbayes,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     G is A/ (A+C),
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(F-pos,E),
     ( 0 is F-G
     ->
       B=F
     ;
       H is G* (1-G)/ (F-G)^2,
       B is (A+H*F)/ (A+C+H)
     )
   ),
   !.
evalfn(posonly,[B,0,D|_],A) :-
   '$aleph_global'(size,size(rand,C)),
   A is log(B)+log(C+ 2)- (D+1)/B,
   !.
evalfn(auto_m,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     F is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(H-pos,E),
     G is sqrt(F),
     B is (A+G*H)/ (F+G)
   ),
   !.
evalfn(mestimate,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     H is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(I-pos,E),
     ( setting(m,F)
     ->
       G=F
     ;
       G is sqrt(H)
     ),
     B is (A+G*I)/ (H+G)
   ),
   !.
evalfn(_,_,A) :-
   A is(-inf).


add_cache(false,_,_) :-
   !.
add_cache(A,B,E) :-
   ( retract(user:'$aleph_search_cache'(A))
   ->
     true
   ;
     true
   ),
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   ( arg(D,A,E)
   ->
     asserta(user:'$aleph_search_cache'(A))
   ;
     true
   ),
   !.


maxlength_neg_ok(B/D,E,C,A) :-
   (
     A>B
   ;
     C/ (C+A)<D
   ),
   !,
   add_prune_cache(E),
   fail.
maxlength_neg_ok(_,_,_,_).


prove_neg(A,_,C,_,_,_,[],[],0) :-
   arg(8,A,B),
   ( B=true
   ->
     add_cache(C,neg,[])
   ;
     true
   ),
   !.
prove_neg(A,C,D,_,_,E,F,G,H) :-
   arg(3,A,B),
   B=rls,
   !,
   prove_cache(C,A,neg,D,E,F,G,H).
prove_neg(_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(coversn,coversn(A,B)),
   !.
prove_neg(A,C,D,E,F,G,H,I,J) :-
   arg(12,A,B),
   B=true,
   !,
   lazy_prove_neg(A,C,D,E,F,G,H,I,J).
prove_neg(B,E,F,[A,0,D|_],[A,C],G,H,[],0) :-
   arg(4,B,bf/coverage),
   C is D-1,
   !,
   prove_cache(E,B,neg,F,G,H,0,[],0),
   !.
prove_neg(B,H,I,[A,F|_],[A,D],J,K,L,M) :-
   arg(4,B,bf/coverage),
   !,
   arg(7,B,C),
   ( C=D
   ->
     arg(2,B,E),
     ( E=true
     ->
       G is F
     ;
       G is F-1
     ),
     G>=0,
     prove_cache(H,B,neg,I,J,K,G,L,M),
     M=<G
   ;
     prove_cache(H,B,neg,I,J,K,L,M)
   ),
   !.
prove_neg(A,G,H,_,[F,C],I,J,L,M) :-
   arg(7,A,B),
   B=C,
   !,
   arg(17,A,D),
   arg(18,A,E),
   get_max_negs(D/E,F,K),
   prove_cache(G,A,neg,H,I,J,K,L,M),
   M=<K,
   !.
prove_neg(B,A,C,_,_,D,E,F,G) :-
   prove_cache(A,B,neg,C,D,E,F,G),
   !.


find_posgain(A,B) :-
   '$aleph_global'(greedy,set(greedy,true)),
   !,
   interval_count(A,B).
find_posgain(B,D) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_intersection(A,B,C),
   interval_count(C,D).


prove_rand(B,A,C,D,E,F,G) :-
   prove_cache(A,B,rand,C,D,E,F,G),
   !.


prove_pos(_,_,_,_,_,_,[],[],0) :-
   !.
prove_pos(C,_,D,E,F,G,_,A,B) :-
   '$aleph_search'(covers,covers(A,B)),
   !,
   pos_ok(C,D,E,F,G,A).
prove_pos(B,A,C,H,I,D,E,F,G) :-
   prove_cache(A,B,pos,C,D,E,F,G),
   pos_ok(B,C,H,I,D,F),
   !.


prove_lazy_cached(A,C,E,G,D,F) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,pos,D)
   ->
     true
   ;
     add_cache(C,pos,E),
     D=E
   ),
   ( check_cache(C,neg,F)
   ->
     true
   ;
     add_cache(C,neg,G),
     F=G
   ).
prove_lazy_cached(_,_,A,B,A,B).


resource_bound_call(A,D,C) :-
   B is inf,
   A=:=B,
   !,
   prolog:depth_bound_call(call(user:C),D).
resource_bound_call(A,C,B) :-
   catch(time_bound_call(A,prooflimit,depth_bound_call(B,C)),prooflimit,fail).


lazy_ccheck(A,D,E) :-
   arg(14,A,C),
   arg(17,A,G),
   arg(29,A,B),
   retractall(user:'$aleph_local'(subst_count,_)),
   asserta(user:'$aleph_local'(subst_count,0)),
   resource_bound_call(B,C,D),
   retract(user:'$aleph_local'(subst_count,F)),
   E is F+1,
   E>G,
   !.
lazy_ccheck(_,_,A) :-
   retract(user:'$aleph_local'(subst_count,A)).


get_aleph_lit(_,_,0) :-
   !.
get_aleph_lit(B,D,A) :-
   arg(A,B,C),
   ( var(C)
   ->
     arg(A,D,C)
   ;
     arg(A,D,aleph_const(C))
   ),
   E is A-1,
   get_aleph_lit(B,D,E),
   !.


get_aleph_lits((A,C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_lits(A,B) :-
   get_aleph_lit(A,B).


get_aleph_lit(A,B) :-
   functor(A,C,D),
   functor(B,C,D),
   get_aleph_lit(A,B,D).


integrate_head_lit(C) :-
   example_saturated(A),
   split_args(A,_,_,B,_),
   integrate_args(unknown,A,B),
   match_mode(head,A),
   flatten_matched_atoms(head),
   get_ivars1(false,1,C),
   !.
integrate_head_lit([]).


match_mode(_,true) :-
   !.
match_mode(D,A) :-
   functor(A,B,C),
   functor(E,B,C),
   ( D=head
   ->
     '$aleph_global'(modeh,modeh(_,E))
   ;
     '$aleph_global'(modeb,modeb(_,E))
   ),
   split_args(E,E,G,F,H),
   ( D=head
   ->
     update_atoms(A,mode(E,F,G,H))
   ;
     update_atoms(A,mode(E,G,F,H))
   ),
   fail.
match_mode(_,_).


flatten_matched_atoms(C) :-
   setting(i,D),
   ( retract(user:'$aleph_sat'(botsize,A))
   ->
     true
   ;
     A=0
   ),
   ( retract(user:'$aleph_sat'(lastlit,B))
   ->
     true
   ;
     B=0
   ),
   ( C=head
   ->
     flatten(0,D,A,E)
   ;
     flatten(0,D,B,E)
   ),
   asserta(user:'$aleph_sat'(botsize,E)),
   ( B<E
   ->
     asserta(user:'$aleph_sat'(lastlit,E))
   ;
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   !.
flatten_matched_atoms(_).


match_body_modes((A,B)) :-
   !,
   match_mode(body,A),
   match_body_modes(B).
match_body_modes(A) :-
   match_mode(body,A).


reinstate(searchstate) :-
   !,
   retractall(user:'$aleph_global'(atoms_left,atoms_left(_,_))),
   retractall(user:'$aleph_global'(size,size(_,_))),
   ( '$aleph_global'(save,save(searchstate,atoms_left(pos,A)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,A)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,atoms_left(neg,B)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,B)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(pos,C)))
   ->
     asserta(user:'$aleph_global'(size,size(pos,C)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(neg,D)))
   ->
     asserta(user:'$aleph_global'(size,size(neg,D)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(noise,E)))
   ->
     set(noise,E)
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(minacc,F)))
   ->
     set(minacc,F)
   ;
     true
   ),
   retractall(user:'$aleph_global'(save,save(searchstate,_))).
reinstate(A) :-
   retract(user:'$aleph_global'(save,save(A,B))),
   !,
   ( B=unknown
   ->
     noset(A)
   ;
     set(A,B)
   ).
reinstate(_).


match_lazy_bottom1(A) :-
   call(user:A),
   match_body_modes(A),
   fail.
match_lazy_bottom1(_) :-
   flatten_matched_atoms(body).


store(searchstate) :-
   !,
   retractall(user:'$aleph_global'(save,save(searchstate,_))),
   ( '$aleph_global'(atoms_left,atoms_left(pos,A))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(pos,A))))
   ;
     true
   ),
   ( '$aleph_global'(atoms_left,atoms_left(neg,B))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(neg,B))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(pos,C))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(pos,C))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(neg,D))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(neg,D))))
   ;
     true
   ),
   ( '$aleph_global'(noise,set(noise,E))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(noise,E))))
   ;
     true
   ),
   ( '$aleph_global'(minacc,set(minacc,F))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(minacc,F))))
   ;
     true
   ).
store(bottom) :-
   !,
   ( '$aleph_global'(store_bottom,set(store_bottom,true))
   ->
     store_bottom
   ;
     true
   ).
store(A) :-
   ( '$aleph_global'(A,set(A,B))
   ->
     true
   ;
     B=unknown
   ),
   retractall(user:'$aleph_global'(save,save(A,_))),
   asserta(user:'$aleph_global'(save,save(A,B))).


example_saturated(C) :-
   '$aleph_sat'(example,example(A,B)),
   example(A,B,C).


match_bot_lit(B,A) :-
   '$aleph_sat'(botsize,C),
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   A>=0,
   A=<C.


match_bot_lits((A,D),C,[B|E]) :-
   !,
   match_bot_lit(A,B),
   \+aleph_member(B,C),
   match_bot_lits(D,[B|C],E).
match_bot_lits(A,C,[B]) :-
   match_bot_lit(A,B),
   \+aleph_member(B,C).


get_aleph_clause((A:-true),B) :-
   !,
   get_aleph_lit(A,B).
get_aleph_clause((A:-C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_clause(A,B) :-
   get_aleph_lit(A,B).


match_lazy_bottom(A,F) :-
   once(get_aleph_clause(A,E)),
   copy_term(A,B),
   split_clause(B,C,D),
   example_saturated(C),
   store(stage),
   set(stage,saturation),
   match_lazy_bottom1(D),
   reinstate(stage),
   match_bot_lits(E,[],F).


match_bot(false,A,A,[]).
match_bot(reduction,A,C,B) :-
   match_lazy_bottom(A,B),
   get_pclause(B,[],C,_,_,_).
match_bot(saturation,A,D,C) :-
   once(get_aleph_clause(A,B)),
   match_bot_lits(B,[],C),
   get_pclause(C,[],D,_,_,_).


auto_refine(1,A,B) :-
   !,
   auto_refine(A,B).
auto_refine(A,C,D) :-
   B is A-1,
   auto_refine(B,C,E),
   (
     D=E
   ;
     auto_refine(E,D)
   ).


get_clause_prior(A,G,K-[H-pos,J-neg]) :-
   arg(5,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   '$aleph_global'(atoms_left,atoms_left(neg,I)),
   prove(D/E/F,pos,(G:-true),C,_,H),
   prove(D/E/F,neg,(G:-true),I,_,J),
   K is H+J.


optimise(A,C) :-
   remove_redundant(A,B),
   reorder_clause(B,C).


second_rewrite_clause(sld,_,_,(A:-A)) :-
   !.
second_rewrite_clause(restricted_sld,true,(A:-B),(C:-D)) :-
   !,
   optimise((A:-B),(C:-D)).
second_rewrite_clause(_,_,A,A).


user_clause_rewrite(A,A) :-
   setting(clause_rewrite_hook,true),
   !.
user_clause_rewrite(B,C) :-
   setting(clause_rewrite_hook,A),
   prolog:call(call(user:A),B,C),
   !.


aleph_delete_all(_,[],[]).
aleph_delete_all(A,[B|C],D) :-
   A==B,
   !,
   aleph_delete_all(A,C,D).
aleph_delete_all(B,[A|C],[A|D]) :-
   aleph_delete_all(B,C,D).


aleph_ord_subtract(A,[],A) :-
   !.
aleph_ord_subtract([],_,[]) :-
   !.
aleph_ord_subtract([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_subtract(C,A,D,B,E,F).


vars_in_term([],A,B) :-
   sort(A,B),
   !.
vars_in_term([A|B],C,D) :-
   var(A),
   !,
   vars_in_term(B,[A|C],D).
vars_in_term([A|D],C,F) :-
   A=..[_|B],
   !,
   vars_in_term(B,C,E),
   vars_in_term(D,E,F).
vars_in_term([_|A],B,C) :-
   vars_in_term(A,B,C).


newvars_ok(A,_,_) :-
   A is inf,
   !.
newvars_ok(H,A,B) :-
   vars_in_term([A],[],E),
   goals_to_list(B,C),
   vars_in_term(C,[],D),
   aleph_ord_subtract(D,E,F),
   length(F,G),
   G=<H.


lang_ok1([],_).
lang_ok1([B|A],G) :-
   length(A,D),
   aleph_delete_all(B,A,C),
   length(C,E),
   F is D-E+1,
   F=<G,
   lang_ok1(C,G).


get_psyms((A,D),[B/C|E]) :-
   !,
   functor(A,B,C),
   get_psyms(D,E).
get_psyms(true,[]) :-
   !.
get_psyms(A,[B/C]) :-
   functor(A,B,C).


lang_ok(A,_,_) :-
   A is inf,
   !.
lang_ok(D,A,B) :-
   get_psyms((A,B),C),
   lang_ok1(C,D).


execute_equality(A) :-
   functor(A,=,2),
   !,
   call(user:A).
execute_equality(_).


lit_redun(A,(B:-C)) :-
   !,
   lit_redun(A,(B,C)).
lit_redun(A,(B,_)) :-
   A==B,
   !.
lit_redun(B,(A,C)) :-
   !,
   execute_equality(A),
   lit_redun(B,C).
lit_redun(A,B) :-
   A==B.


check_cache(A,B,E) :-
   A\=false,
   '$aleph_search_cache'(A),
   !,
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   nonvar(E).


extract_neg([_,A|_],A).


extract_pos([A|_],A).


clause_ok(_,_) :-
   false,
   !,
   fail.
clause_ok(_,A) :-
   extract_pos(A,B),
   extract_neg(A,C),
   E is B/ (B+C),
   setting(noise,D),
   setting(minacc,F),
   setting(minpos,G),
   (
     C>D
   ;
     E<F
   ;
     B<G
   ),
   !,
   fail.
clause_ok(A,_) :-
   prune(A),
   !,
   fail.
clause_ok(A,_) :-
   setting(language,B),
   \+lang_ok(A,B),
   !,
   fail.
clause_ok(A,_) :-
   setting(newvars,B),
   \+newvars_ok(A,B),
   !,
   fail.
clause_ok(_,_).


update_best(B,_,_,_,A,[C,_,_,E|_]/_,A) :-
   arg(13,B,D),
   arg(19,B,F),
   (
     C<D
   ;
     E is(-inf)
   ;
     E<F
   ),
   !.
update_best(B,_,_,_,A,[D|_]/_,A) :-
   arg(40,B,C),
   C> 0,
   '$aleph_search'(clauseprior,_-[E-pos,_]),
   D/E<C,
   !.
update_best(B,_,_,_,A,[D,E,_,_|_]/_,A) :-
   arg(4,B,_/C),
   C\=posonly,
   arg(17,B,F),
   arg(18,B,I),
   arg(22,B,G),
   H is D+E,
   (
     E>F
   ;
     G\=ic,
     H>0,
     D/H<I
   ),
   !.
update_best(I,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   arg(35,I,J),
   ( J=true
   ->
     retractall(user:'$aleph_search'(best,_)),
     asserta(user:'$aleph_search'(best,B)),
     asserta(user:'$aleph_search'(good,B))
   ;
     true
   ),
   update_good(A,F),
   newbest_hook(A,F,B),
   show_clause(newbest,A,F,B),
   record_clause(newbest,A,F,B),
   record_clause(good,A,F,B).
update_best(C,G,_,_,A/B,F/E,A/B) :-
   arg(35,C,D),
   ( D=true
   ->
     asserta(user:'$aleph_search'(good,E))
   ;
     true
   ),
   update_good(F,G),
   record_clause(good,F,G,E).


clause_ok(false,A,B) :-
   aleph_subset1(A,B).


compression_ok(compression,[A,_,B|_]) :-
   !,
   A-B+1>0.
compression_ok(_,_).


estimate_label(E,[D,F|A],[G,J|A]) :-
   '$aleph_global'(atoms_left,atoms_left(pos,B)),
   '$aleph_global'(atoms_left,atoms_left(neg,C)),
   interval_count(B,I),
   interval_count(C,L),
   H is D/E,
   K is F/E,
   G is integer(H*I),
   J is integer(K*L).


reset_clause_prior(A,C) :-
   arg(3,A,B),
   B=false,
   !,
   ( '$aleph_search'(clauseprior,_)
   ->
     true
   ;
     get_clause_prior(A,C,D),
     assertz(user:'$aleph_search'(clauseprior,D))
   ).
reset_clause_prior(C,A) :-
   copy_term(A,B),
   numbervars(B,0,_),
   ( '$aleph_local'(clauseprior,prior(B,D))
   ->
     true
   ;
     get_clause_prior(C,A,D),
     assertz(user:'$aleph_local'(clauseprior,prior(B,D)))
   ),
   retractall(user:'$aleph_search'(clauseprior,_)),
   assertz(user:'$aleph_search'(clauseprior,D)).


prove_examples(B,K,E,F,L,A,N,_,O,G,H,I,J,[Q,S,A,W,U]) :-
   arg(4,B,_/C),
   C=posonly,
   !,
   arg(11,B,D),
   ( D=true,
     E=true
   ->
     prove_lazy_cached(B,F,G,H,I,J),
     interval_count(I,M),
     interval_count(J,P)
   ;
     prove_pos(B,K,F,L,[M,N],O,G,I,M),
     prove_rand(B,K,F,O,H,J,P)
   ),
   find_posgain(I,Q),
   arg(16,B,V),
   arg(20,B,R),
   T is (P+ 1)/ (R+ 2),
   X is log(Q),
   S is log(T),
   U is T*V/Q,
   Y is A/Q,
   W is X-S-Y.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   qpacks:qpacks(on),
   !,
   qpacks:qpack_add(D,E),
   F=10000,
   G=1000.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   setting(prefix_trees,true),
   !,
   trie_add(D,E),
   interval_count(A,F),
   interval_count(B,G).
prove_examples(D,_,_,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(10,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(D,_,true,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(11,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(B,F,_,G,H,A,Q,_,J,E,K,R,L,[P,M,A]) :-
   arg(3,B,C),
   (
     C=false
   ;
     C=auto
   ),
   arg(7,B,D),
   D=A,
   !,
   interval_count(E,I),
   prove_neg(B,F,G,H,[I,A],J,K,L,M),
   arg(17,B,N),
   arg(18,B,O),
   maxlength_neg_ok(N/O,G,I,M),
   prove_pos(B,F,G,H,[P,Q],J,E,R,P),
   maxlength_neg_ok(N/O,G,P,M),
   !.
prove_examples(B,C,_,D,E,A,G,_,H,I,K,J,L,[F,M,A]) :-
   prove_pos(B,C,D,E,[F,G],H,I,J,F),
   prove_neg(B,C,D,E,[F,A],H,K,L,M),
   !.


ccheck(C,(false:-A),[],[0,B|_]) :-
   ( A=true
   ->
     B is inf
   ;
     arg(11,C,D),
     ( D=false
     ->
       arg(14,C,F),
       arg(29,C,E),
       prolog:findall(G,(resource_bound_call(E,F,A),G=1),H),
       length(H,B)
     ;
       lazy_ccheck(C,A,B)
     )
   ).


rewrite_clause(C,D,A,F) :-
   user_clause_rewrite(A,B),
   discretization_rewrite(B,E),
   second_rewrite_clause(C,D,E,F).


newvars_ok((B:-C),A) :-
   !,
   ( newvars_ok(A,B,C)
   ->
     true
   ;
     p_message('outside newvars bound'),
     fail
   ).


lang_ok((B:-C),A) :-
   !,
   ( lang_ok(A,B,C)
   ->
     true
   ;
     p_message('outside language bound'),
     fail
   ).


refinement_ok(false,_) :-
   !.
refinement_ok(rls,_) :-
   !.
refinement_ok(_,false) :-
   !.
refinement_ok(_,A) :-
   (
     check_cache(A,pos,_)
   ;
     check_cache(A,neg,_)
   ),
   !,
   p_message('redundant refinement'),
   fail.
refinement_ok(_,_).


get_cache_entry(C,A,F) :-
   skolemize(A,E,B,0,_),
   length(B,D),
   C>=D+1,
   aleph_hash_term([E|B],F),
   !.
get_cache_entry(_,_,false).


skolemize((A:-B),C,G,E,F) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),E,F),
   goals_to_list(D,G).
skolemize(A,B,[],C,D) :-
   copy_term(A,B),
   numbervars(B,C,D).


abandon_branch(A,C) :-
   arg(9,A,B),
   B=true,
   prune(C),
   !,
   arg(6,A,D),
   ( D>=1
   ->
     p_message(pruned)
   ;
     true
   ).


update_best_theory(B,_,_,_,A,[E,C,_,G|_]/_,A) :-
   arg(17,B,D),
   arg(18,B,F),
   arg(19,B,H),
   (
     C>D
   ;
     E/ (E+C)<F
   ;
     G<H
   ),
   !.
update_best_theory(_,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   show_theory(newbest,A,F,B),
   record_theory(newbest,A,F,B),
   record_theory(good,A,F,B).
update_best_theory(_,C,_,_,A,B/_,A) :-
   show_theory(good,B,C,D),
   record_theory(good,B,C,D).


update_open_list([A|B],C,D) :-
   assertz(user:'$aleph_search_gain'(A,B,C,D)),
   recorded('$aleph_search_openlist',F,E),
   erase(E),
   uniq_insert(descending,[A|B],F,G),
   recorda('$aleph_search_openlist',G,_),
   fail.
update_open_list([_|_],_,_).


get_search_keys(bf,[_,_,C,A|_],[B|A]) :-
   !,
   B is -1*C.
get_search_keys(df,[_,_,A,B|_],[A|B]) :-
   !.
get_search_keys(_,[_,_,C,A|_],[A|B]) :-
   B is -1*C.


complete_label(posonly,_,A,A) :-
   !.
complete_label(user,D,[A,B,C],[A,B,C,E]) :-
   cost(D,[A,B,C],F),
   !,
   E is-F.
complete_label(entropy,_,[A,B,C],[A,B,C,D]) :-
   evalfn(entropy,[A,B,C],E),
   D is-E,
   !.
complete_label(gini,_,[A,B,C],[A,B,C,D]) :-
   evalfn(gini,[A,B,C],E),
   D is-E,
   !.
complete_label(D,_,[A,B,C],[A,B,C,E]) :-
   evalfn(D,[A,B,C],E),
   !.
complete_label(_,_,_,_) :-
   p_message1(error),
   p_message('incorrect evaluation/cost function'),
   fail.


theory_newvars_ok([],_).
theory_newvars_ok([_-[_,_,_,B] |C],A) :-
   newvars_ok(A,B),
   theory_newvars_ok(C,A).


theory_lang_ok([],_).
theory_lang_ok([_-[_,_,_,B] |C],A) :-
   lang_ok(A,B),
   theory_lang_ok(A,C).


nlits((_:-A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits((_,A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits(_,1).


lazy_evaluate_refinement([],A,C,D,E,[],G) :-
   clause_to_list(A,B),
   lazy_evaluate_refinement(B,C,[],D,E,F),
   list_to_clause(F,G),
   !.
lazy_evaluate_refinement(A,_,B,C,D,E,F) :-
   A\= ([]),
   lazy_evaluate_refinement(A,B,[],C,D,E),
   get_pclause(E,[],F,_,_,_),
   !.
lazy_evaluate_refinement(A,B,_,_,_,A,B).


get_theory_gain1(C,D,B,B1,K,L,P,N,C1) :-
   ( false
   ->
     p_message('constraint violated'),
     A=true
   ;
     A=false
   ),
   A=false,
   X is B+1,
   arg(32,C,E),
   theory_lang_ok(D,E),
   arg(38,C,F),
   theory_newvars_ok(D,F),
   arg(14,C,G),
   arg(29,C,H),
   arg(34,C,I),
   prove(G/H/I,pos,(J:-J),K,Y,M),
   prove(G/H/I,neg,(J:-J),L,Z,O),
   arg(4,C,_/T),
   Q is M+ (N-O),
   R is O+ (P-M),
   length(D,S),
   U=[Q,R,S],
   complete_label(T,D,U,V),
   get_search_keys(heuristic,V,A1),
   arg(6,C,W),
   ( W>=1
   ->
     p_message(Q/R)
   ;
     true
   ),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(X,(J:-J)))
   ;
     true
   ),
   asserta_aleph_search_node(X,D,[],0,Y,Z,[],0),
   update_open_list(A1,X,V),
   update_best_theory(C,D,Y,Z,B1,V/X,C1),
   !.
get_theory_gain1(_,_,_,A,_,_,_,_,A).


record_pclauses([]).
record_pclauses([_-[_,_,_,A] |D]) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   record_pclauses(D).


pp_dclauses(A) :-
   aleph_member(_-[_,_,_,B],A),
   pp_dclause(B),
   fail.
pp_dclauses(_) :-
   nl.


lazy_evaluate_theory([],_,_,_,[]).
lazy_evaluate_theory([A|M],D,E,F,[G|N]) :-
   A=H-[I,J,B,C],
   lazy_evaluate_refinement(B,C,D,E,F,K,L),
   G=H-[I,J,K,L],
   lazy_evaluate_theory(M,D,E,F,N).


user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,true),
   !,
   match_bot(A,B,C,D).
user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,E),
   match_bot(A,B,C,D),
   prolog:call(call(user:E),C).


get_user_refinement(auto,A,B,C,0) :-
   auto_refine(A,B,C).
get_user_refinement(user,_,A,B,0) :-
   refine(A,B).


get_refine_gain1(A,B,O,F,G,Y,Z,A1,C1) :-
   arg(23,A,C),
   B=J-[K,L,D,E],
   ( C= ([])
   ->
     H=D,
     I=E
   ;
     lazy_evaluate_refinement(D,E,C,F,G,H,I)
   ),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   X=J-[K,L,H,I],
   split_clause(I,Q,M),
   nlits(M,N),
   P is N+1,
   length_ok(A,O,P,0,T,U),
   arg(41,A,R),
   split_clause(I,Q,M),
   ( R=yap
   ->
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)),B1)
   ;
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)))
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(W))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(V))),
   arg(6,A,S),
   ( S>=1
   ->
     p_message('new refinement'),
     pp_dclause(I)
   ;
     true
   ),
   once(get_gain1(A,upper,I,P,T/U,V,W,X,[],F,G,Y,Z,A1)),
   ( R=yap
   ->
     erase(B1)
   ;
     retractall(user:'$aleph_search'(pclause,_))
   ),
   C1 is V+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(C1))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A1))),
   ( discontinue_search(A,A1,C1)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.


rls_refine(clauses,_-[_,_,_,false],A) :-
   !,
   sample_clauses(1,[A]),
   \+old_move(clauses,A).
rls_refine(clauses,E,F) :-
   setting(moves,A),
   C is A,
   once(retract(user:'$aleph_search'(rls_move,B))),
   B=<C,
   p1_message(move),
   p_message(B),
   D is B+1,
   asserta(user:'$aleph_search'(rls_move,D)),
   clause_move(G,E,F),
   p_message(G),
   \+old_move(clauses,F).
rls_refine(theories,[_-[_,_,_,false]],A) :-
   !,
   once(theory_move(add_clause,[],A)),
   \+old_move(theories,A).
rls_refine(theories,D,E) :-
   setting(moves,B),
   once(retract(user:'$aleph_search'(rls_move,A))),
   A=<B,
   p1_message(move),
   p_message(A),
   C is A+1,
   asserta(user:'$aleph_search'(rls_move,C)),
   theory_move(_,D,E),
   \+old_move(theories,E).


refine_prelims(A,B) :-
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A))),
   asserta(user:'$aleph_search'(last_refinement,last_refinement(B))).


get_gain1(B,_,C,G,_,D,A,I,_,J,K,_,L,A) :-
   abandon_branch(B,C),
   !,
   E is D+1,
   arg(3,B,H),
   arg(7,B,F),
   arg(35,B,M),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ),
   ( F=G
   ->
     true
   ;
     ( H=false
     ->
       asserta_aleph_search_node(E,0,I,0,J,K,[],L)
     )
   ;
     true
   ),
   ( M=true
   ->
     asserta(user:'$aleph_search'(bad,E)),
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ).
get_gain1(B,_,D,_,_,_,A,_,_,_,_,_,_,A) :-
   arg(8,B,C),
   C=true,
   skolemize(D,E,F,0,_),
   '$aleph_search_prunecache'([E|F]),
   !,
   arg(6,B,G),
   ( G>=1
   ->
     p_message('in prune cache')
   ;
     true
   ).
get_gain1(B,V,A,R,T1/X,E,W/Y1,S1,O1,Y,Z,Q1,V1,Z1) :-
   split_clause(A,L,M),
   arg(22,B,C),
   ( C\==ic,
     false
   ->
     p_message('constraint violated'),
     D=true
   ;
     D=false
   ),
   J is E+1,
   arg(8,B,F),
   ( F=true
   ->
     arg(15,B,G),
     get_cache_entry(G,A,H)
   ;
     H=false
   ),
   arg(35,B,I),
   (
     I=true
   ;
     ( setting(compact_node_representation,true)
     ->
       asserta(user:'$aleph_search_node'(J,A))
     )
   ;
     true
   ),
   arg(3,B,K),
   refinement_ok(K,H),
   arg(32,B,N),
   lang_ok((L:-M),N),
   arg(38,B,O),
   newvars_ok((L:-M),O),
   arg(34,B,P),
   arg(37,B,Q),
   rewrite_clause(P,Q,(L:-M),(S:-T)),
   ( C=ic
   ->
     A1= ([]),
     U=[_,_,R],
     ccheck(B,(S:-T),B1,U)
   ;
     prove_examples(B,V,D,H,W,R,X,(L:-M),(S:-T),Y,Z,A1,B1,U)
   ),
   arg(4,B,I1/D1),
   arg(40,B,C1),
   (
     (
       C1> 0
     ;
       D1=wracc
     )
   ->
     reset_clause_prior(B,S)
   ;
     true
   ),
   arg(46,B,E1),
   ( E1=true
   ->
     arg(47,B,F1),
     estimate_label(F1,U,G1)
   ;
     G1=U
   ),
   complete_label(D1,A,G1,H1),
   compression_ok(D1,H1),
   get_search_keys(I1,H1,W1),
   arg(6,B,J1),
   arg(10,B,L1),
   arg(11,B,K1),
   ( J1>=1,
     K1=false,
     L1=false
   ->
     U=[M1,N1|_],
     p_message(M1/N1)
   ;
     true
   ),
   arg(7,B,R1),
   ( K=false
   ->
     get_ovars1(false,O1,P1),
     aleph_append(P1,Q1,U1)
   ;
     true
   ),
   ( R1=R,
     K=false
   ->
     true
   ;
     ( K=false
     ->
       asserta_aleph_search_node(J,O1,S1,T1/X,A1,B1,U1,V1)
     ;
       asserta_aleph_search_node(J,0,S1,T1/X,A1,B1,[],V1)
     ),
     update_open_list(W1,J,H1)
   ),
   ( I=true
   ->
     asserta(user:'$aleph_search'(label,label(J,U)))
   ;
     true
   ),
   (
     (
       K\=false,
       D=false
     ;
       arg(28,B,X1),
       clause_ok(D,X1,U1)
     )
   ->
     update_best(B,A,A1,B1,W/Y1,H1/J,Z1)
   ;
     Z1=W/Y1
   ),
   !.
get_gain1(_,_,_,_,_,_,A,_,_,_,_,_,_,A).


split_clause((A:-true),A,true) :-
   !.
split_clause((A:-B),A,C) :-
   !,
   B=C.
split_clause([A|B],A,B) :-
   !.
split_clause([A],A,[true]) :-
   !.
split_clause(A,A,true).


length_ok(A,E,H,C,F,G) :-
   arg(3,A,B),
   ( B=false
   ->
     D=C
   ;
     D=0
   ),
   ( D<E
   ->
     F=D
   ;
     F=E
   ),
   G is H+F,
   arg(7,A,I),
   G=<I,
   !.


split_ok(false,_,_) :-
   !.
split_ok(_,C,A) :-
   functor(A,B,_),
   B\= (=),
   copy_term(C/A,E/D),
   lit_redun(D,E),
   !,
   p_message('redundant literal'),
   nl,
   fail.
split_ok(_,_,_).


get_refine_gain(A,E,C/D,F,H,I,J,K,L,M,N) :-
   arg(3,A,B),
   B=rls,
   refine_prelims(C/D,E),
   rls_refine(clauses,F,G),
   get_refine_gain1(A,G,H,I,J,K,L,M,N),
   !.
get_refine_gain(A,E,C/D,F,Q,R,S,T,U,V,W) :-
   arg(3,A,B),
   B\=rls,
   refine_prelims(C/D,E),
   F=K-[L,M,_,H],
   arg(30,A,I),
   arg(43,A,G),
   get_user_refinement(B,G,H,J,_),
   user_controlled_match_bot(I,J,O,N),
   P=K-[L,M,N,O],
   get_refine_gain1(A,P,Q,R,S,T,U,V,W),
   !.
get_refine_gain(_,_,_,_,_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(best_refinement,best_refinement(A))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(B))).


intervals_intersects([A-B|_],C,D) :-
   intervals_intersects1(A-B,C,D),
   !.
intervals_intersects([_|A],B,C) :-
   intervals_intersects(A,B,C).


intervals_intersection([],_,[]).
intervals_intersection([A-C|D],[G-B|E],F) :-
   !,
   ( A>B
   ->
     intervals_intersection([A-C|D],E,F)
   ;
     ( G>C
     ->
       intervals_intersection(D,[G-B|E],F)
     )
   ;
     ( C>B
     ->
       ( G>A
       ->
         F=[G-B|H]
       ;
         F=[A-B|H]
       ),
       intervals_intersection([A-C|D],E,H)
     )
   ;
     ( G>A
     ->
       F=[G-C|H]
     ;
       F=[A-C|H]
     ),
     intervals_intersection(D,[G-B|E],H)
   ).
intervals_intersection([_|_],[],[]).


calc_intersection(A/[D-I],B/[E-F],C/[K-M]) :-
   !,
   intervals_intersection(A,B,C),
   H is max(D,E),
   ( intervals_intersects(A,[E-F],G-_)
   ->
     true
   ;
     G=H
   ),
   ( intervals_intersects(B,[D-I],J-_)
   ->
     true
   ;
     J=H
   ),
   L is min(G,H),
   K is min(J,L),
   M is max(I,F).
calc_intersection(A/_,B,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B/_,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B,C) :-
   intervals_intersection(A,B,C).


get_sibgain(B,C,D,A,F,G,H,I,J,K,L,M,N,O,P,Q,R,S) :-
   E is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),
   !.


get_sibpncover(J,A,F,L,N,B,K,M) :-
   '$aleph_search_node'(A,B,_,_,C,D,_,_),
   ( var(C)
   ->
     recompute_cover(E,pos,C)
   ;
     true
   ),
   ( var(D)
   ->
     recompute_cover(E,neg,D)
   ;
     true
   ),
   '$aleph_sat_litinfo'(B,_,G,_,_,_),
   \+aleph_member1(B,F),
   functor(G,H,I),
   ( aleph_member1(H/I,J)
   ->
     K=L,
     M=N
   ;
     calc_intersection(L,C,K),
     calc_intersection(N,D,M)
   ).


get_sibgain(E,_,_,_,C,D,B,A,_,_,_,_,_,_,_,_,_,A,B) :-
   (
     C>D
   ;
     discontinue_search(E,A,B)
   ),
   !.
get_sibgain(A,M,X,D,C,Z,P,Q,H,R,S,T,U,E,F,V,W,C1,D1) :-
   arg(23,A,B),
   get_sibpncover(B,C,D,E,F,G,I,J),
   lazy_evaluate([G],B,H,I,J,[K]),
   get_ivars1(false,K,L),
   ( intersects(L,M)
   ->
     O=upper
   ;
     get_ovars1(false,K,N),
     ( intersects(N,M)
     ->
       O=upper
     ;
       O=exact
     )
   ),
   get_gain(A,O,P,Q,H,R,S,T,U,K,I,J,V,W,B1,A1),
   !,
   Y is C+1,
   get_sibgain(A,M,X,D,Y,Z,A1,B1,H,R,S,T,U,E,F,V,W,C1,D1),
   !.
get_sibgain(B,C,D,E,A,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) :-
   F is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),
   !.


get_gain(A,_,C,D,E,_,_,_,F,_,G,H,I,J,K,L) :-
   arg(3,A,B),
   B\=false,
   !,
   get_refine_gain(A,C,D,E,F,G,H,I,J,K,L).
get_gain(A,Q,T,U/V,W,E,C,I,K,B,X,Y,Z,A1,B1,C1) :-
   arg(26,A,G),
   arg(33,A,D),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   get_pclause([B],C,F,_,J,M),
   split_ok(D,E,F),
   !,
   extend_clause(E,F,H),
   ( G=true
   ->
     ( redundant(H,F)
     ->
       fail
     ;
       true
     )
   ;
     true
   ),
   L is I+J,
   length_ok(A,K,L,M,R,S),
   split_clause(H,N,O),
   assertz(user:'$aleph_search'(pclause,pclause(N,O))),
   arg(6,A,P),
   ( P>=1
   ->
     pp_dclause(H)
   ;
     true
   ),
   get_gain1(A,Q,H,L,R/S,T,U/V,W,B,X,Y,Z,A1,B1),
   retractall(user:'$aleph_search'(pclause,_)),
   C1 is T+1.
get_gain(_,_,B,A,_,_,_,_,_,_,_,_,_,_,A,B).


get_ivars([],_,A,A).
get_ivars([B|E],A,C,G) :-
   get_ivars1(A,B,D),
   aleph_append(C,D,F),
   get_ivars(E,A,F,G).


get_vars_in_term([],[]).
get_vars_in_term([A|B],[A|C]) :-
   integer(A),
   !,
   get_vars_in_term(B,C).
get_vars_in_term([A|C],F) :-
   A=..[_|B],
   get_vars_in_term(B,E),
   get_vars_in_term(C,D),
   update_list(D,E,F).


get_ovars([],_,A,A).
get_ovars([B|E],A,C,G) :-
   get_ovars1(A,B,D),
   aleph_append(C,D,F),
   get_ovars(E,A,F,G).


interval_sample(B,A,E) :-
   intervals_to_list(A,C),
   aleph_rsample(B,C,D),
   list_to_intervals(D,E).


check_parents([],_,[],[]).
check_parents([A|D],C,[A|E],F) :-
   get_ivars1(false,A,B),
   aleph_subset1(B,C),
   !,
   check_parents(D,C,E,F).
check_parents([A|B],C,D,[A|E]) :-
   check_parents(B,C,D,E),
   !.


get_sample_cover(A,I,J) :-
   arg(5,A,B),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     arg(16,A,D),
     C=[1-D]
   ),
   arg(4,A,_/E),
   ( E=posonly
   ->
     '$aleph_global'(atoms_left,atoms_left(rand,F))
   ;
     arg(24,A,G),
     F=[1-G]
   ),
   arg(46,A,H),
   ( H=false
   ->
     I=C,
     J=F
   ;
     arg(47,A,K),
     interval_sample(K,C,I),
     interval_sample(K,F,J)
   ).


update_max_head_count(A,0) :-
   retractall(user:'$aleph_local'(max_head_count,_)),
   asserta(user:'$aleph_local'(max_head_count,A)),
   !.
update_max_head_count(E,A) :-
   '$aleph_search_node'(A,C,_,_,B,_,_,_),
   !,
   ( var(B)
   ->
     recompute_cover(A,pos,B)
   ;
     true
   ),
   asserta(user:'$aleph_local'(head_lit,C)),
   interval_count(B,D),
   F is A-1,
   ( D>E
   ->
     update_max_head_count(D,F)
   ;
     update_max_head_count(E,F)
   ).
update_max_head_count(B,A) :-
   C is A-1,
   update_max_head_count(B,C).


get_ovars1(false,A,B) :-
   '$aleph_sat_ovars'(A,B),
   !.
get_ovars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,_,C,_),
   get_vars(B,C,D).
get_ovars1(B,A,C) :-
   '$aleph_sat_ovars'(A,B,C),
   !.
get_ovars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,D,_),
   get_vars(C,D,E).


get_search_settings(A) :-
   functor(A,set,47),
   setting(nodes,B),
   arg(1,A,B),
   setting(explore,C),
   arg(2,A,C),
   setting(refineop,D),
   arg(3,A,D),
   setting(searchstrat,E),
   setting(evalfn,F),
   arg(4,A,E/F),
   ( setting(greedy,G)
   ->
     arg(5,A,G)
   ;
     arg(5,A,false)
   ),
   setting(verbosity,H),
   arg(6,A,H),
   setting(clauselength,I),
   arg(7,A,I),
   setting(caching,J),
   arg(8,A,J),
   ( setting(prune_defs,K)
   ->
     arg(9,A,K)
   ;
     arg(9,A,false)
   ),
   setting(lazy_on_cost,L),
   arg(10,A,L),
   setting(lazy_on_contradiction,M),
   arg(11,A,M),
   setting(lazy_negs,N),
   arg(12,A,N),
   setting(minpos,O),
   arg(13,A,O),
   setting(depth,P),
   arg(14,A,P),
   setting(cache_clauselength,Q),
   arg(15,A,Q),
   ( '$aleph_global'(size,size(pos,R))
   ->
     arg(16,A,R)
   ;
     arg(16,A,0)
   ),
   setting(noise,S),
   arg(17,A,S),
   setting(minacc,T),
   arg(18,A,T),
   setting(minscore,U),
   arg(19,A,U),
   ( '$aleph_global'(size,size(rand,V))
   ->
     arg(20,A,V)
   ;
     arg(20,A,0)
   ),
   setting(mingain,W),
   arg(21,A,W),
   setting(search,X),
   arg(22,A,X),
   prolog:findall(Y/Z,'$aleph_global'(lazy_evaluate,lazy_evaluate(Y/Z)),A1),
   arg(23,A,A1),
   ( '$aleph_global'(size,size(neg,B1))
   ->
     arg(24,A,B1)
   ;
     arg(24,A,0)
   ),
   setting(openlist,C1),
   arg(25,A,C1),
   setting(check_redundant,D1),
   arg(26,A,D1),
   ( '$aleph_sat'(eq,E1)
   ->
     arg(27,A,E1)
   ;
     arg(27,A,false)
   ),
   ( '$aleph_sat'(hovars,F1)
   ->
     arg(28,A,F1)
   ;
     arg(28,A,F1)
   ),
   setting(prooftime,G1),
   arg(29,A,G1),
   setting(construct_bottom,H1),
   arg(30,A,H1),
   ( get_ovars1(false,1,I1)
   ->
     arg(31,A,I1)
   ;
     arg(31,A,[])
   ),
   setting(language,J1),
   arg(32,A,J1),
   setting(splitvars,K1),
   arg(33,A,K1),
   setting(proof_strategy,L1),
   arg(34,A,L1),
   setting(portray_search,M1),
   arg(35,A,M1),
   setting(searchtime,N1),
   arg(36,A,N1),
   setting(optimise_clauses,O1),
   arg(37,A,O1),
   setting(newvars,P1),
   arg(38,A,P1),
   ( setting(rls_type,Q1)
   ->
     arg(39,A,Q1)
   ;
     arg(39,A,false)
   ),
   setting(minposfrac,R1),
   arg(40,A,R1),
   ( setting(recursion,S1)
   ->
     true
   ;
     S1=false
   ),
   prolog_type(T1),
   arg(41,A,T1),
   setting(interactive,U1),
   arg(42,A,U1),
   setting(lookahead,V1),
   arg(43,A,V1),
   ( setting(construct_features,W1)
   ->
     arg(44,A,W1)
   ;
     arg(44,A,false)
   ),
   setting(max_features,X1),
   arg(45,A,X1),
   setting(subsample,Y1),
   arg(46,A,Y1),
   setting(subsamplesize,Z1),
   arg(47,A,Z1).


get_theory_gain(C,B,A,E,H,I,N,O,P,Q) :-
   refine_prelims(A,B),
   arg(3,C,D),
   ( D=rls
   ->
     rls_refine(theories,E,G)
   ;
     fail
   ),
   arg(23,C,F),
   ( F= ([])
   ->
     J=G
   ;
     lazy_evaluate_theory(G,F,H,I,J)
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(M))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(L))),
   arg(6,C,K),
   ( K>=1
   ->
     p_message('new refinement'),
     pp_dclauses(J)
   ;
     true
   ),
   record_pclauses(J),
   get_theory_gain1(C,J,L,M,H,I,N,O,P),
   retractall(user:'$aleph_search'(pclause,_)),
   Q is L+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(Q))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(P))),
   ( discontinue_search(C,P,Q)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.
get_theory_gain(_,_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(best_refinement,best_refinement(A)),
   '$aleph_search'(last_refinement,last_refinement(B)).


interval_count([],0).
interval_count([B-A|C],D) :-
   E is A-B+1,
   interval_count(C,F),
   D is E+F.
interval_count(A/_,B) :-
   interval_count(A,B).


get_nextbest(A,C) :-
   arg(22,A,B),
   select_nextbest(B,C).


prune_open(A,_,_) :-
   arg(25,A,B),
   C is inf,
   B=\=C,
   retractall(user:'$aleph_local'(in_beam,_)),
   asserta(user:'$aleph_local'(in_beam,0)),
   open_list(D),
   get_node(D,[G|H],I),
   '$aleph_local'(in_beam,E),
   ( E<B
   ->
     retract(user:'$aleph_local'(in_beam,E)),
     F is E+1,
     asserta(user:'$aleph_local'(in_beam,F))
   ;
     retract(user:'$aleph_search_gain'(G,H,I,_)),
     arg(6,A,J),
     ( J<1
     ->
       true
     ;
       p1_message('non-admissible removal'),
       p_message(I)
     )
   ),
   fail.
prune_open(A,_,_) :-
   arg(2,A,B),
   arg(3,A,C),
   (
     B=true
   ;
     C=rls
   ;
     C=user
   ),
   !.
prune_open(_,_/A,_/A) :-
   !.
prune_open(A,_,[_,_,_,E|_]/_) :-
   arg(4,A,_/B),
   built_in_prune(B),
   '$aleph_search_gain'(_,_,_,C),
   best_value(B,A,C,D),
   D=<E,
   retract(user:'$aleph_search_gain'(_,_,_,C)),
   fail.
prune_open(_,_,_).


discontinue_search(A,[C,_,_,E|_]/_,_) :-
   arg(39,A,B),
   B=rrr,
   arg(13,A,D),
   C>=D,
   arg(19,A,F),
   E>=F,
   !.
discontinue_search(A,_,B) :-
   arg(1,A,C),
   B>=C,
   !,
   p_message('node limit reached').
discontinue_search(A,_,_) :-
   arg(44,A,B),
   B=true,
   arg(45,A,D),
   '$aleph_search'(last_good,C),
   C>=D,
   !,
   p_message('feature limit reached').
discontinue_search(A,[_,_,_,C|_]/_,_) :-
   arg(4,A,_/B),
   B=accuracy,
   C= 1,
   !.
discontinue_search(A,E,_) :-
   arg(2,A,B),
   B=false,
   arg(4,A,_/C),
   C\=user,
   C\=posonly,
   arg(22,A,D),
   D\=ic,
   E=[F|_]/_,
   arg(16,A,F).


get_sibgains(D,A,K,L,M,N,O,P,Q,R,S,F,T,V,U) :-
   '$aleph_search_node'(A,C,_,_,_,_,_,B),
   '$aleph_search_expansion'(B,_,_,J),
   '$aleph_sat_litinfo'(C,_,_,_,_,H),
   I is A+1,
   arg(31,D,E),
   aleph_delete_list(E,F,G),
   get_sibgain(D,G,C,H,I,J,K,L,M,N,O,P,Q,R,S,F,T,U,V),
   !.


get_gains(C,A,B,_,_,_,_,_,_,_,_,_,_,A,B) :-
   discontinue_search(C,B,A),
   !.
get_gains(_,A,B,_,_,_,_,_,[],_,_,_,_,A,B) :-
   !.
get_gains(A,B,C,D,E,F,G,H,[I|P],J,K,L,M,Q,R) :-
   get_gain(A,upper,B,C,D,E,F,G,H,I,J,K,L,M,O,N),
   !,
   get_gains(A,N,O,D,E,F,G,H,P,J,K,L,M,Q,R).
get_gains(A,B,C,D,E,F,G,H,[_|I],J,K,L,M,N,O) :-
   get_gains(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),
   !.


lazy_evaluate(A,[],_,_,_,A) :-
   !.
lazy_evaluate([],_,_,_,_,[]) :-
   !.
lazy_evaluate([A|S],E,F,O,P,V) :-
   ( integer(A)
   ->
     G=true,
     '$aleph_sat_litinfo'(A,H,B,I,J,K),
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     get_pclause([A|F],[],(L:-M),_,_,_)
   ;
     G=false,
     B=A,
     H=0,
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     split_args(A,_,I,J,R),
     K= ([]),
     list_to_clause([A|F],(L:-M))
   ),
   goals_to_clause(M,N),
   lazy_prove(pos,L,N,O),
   ( '$aleph_global'(positive_only,positive_only(C/D))
   ->
     true
   ;
     lazy_prove_negs(L,N,P)
   ),
   functor(Q,C,D),
   collect_args(I,Q),
   collect_args(J,Q),
   lazy_evaluate1(G,B,H,I,J,R,K,Q,U),
   retractall(user:'$aleph_local'(lazy_evaluate,_)),
   lazy_evaluate(S,E,F,O,P,T),
   update_list(T,U,V).
lazy_evaluate([A|B],C,D,E,F,[A|G]) :-
   lazy_evaluate(B,C,D,E,F,G).


expand(false,F,A,A,L,B,R,H,I,C,M,N,O) :-
   !,
   '$aleph_search_node'(A,J,K,B/_,D,E,C,_),
   ( var(D)
   ->
     recompute_cover(A,pos,D)
   ;
     true
   ),
   ( var(E)
   ->
     recompute_cover(A,neg,E)
   ;
     true
   ),
   arg(46,F,G),
   ( G=false
   ->
     H=D,
     I=E
   ;
     get_sample_cover(F,H,I)
   ),
   aleph_append([J],K,L),
   get_pclause(L,[],M,N,O,_),
   '$aleph_sat_litinfo'(J,_,_,_,_,P),
   intersect1(P,L,_,Q),
   check_parents(Q,C,R,_).
expand(_,E,A,A,B,C,[_],F,G,D,_,_,_) :-
   retract_aleph_search_node(A,_,B,C/_,_,_,D,_),
   get_sample_cover(E,F,G).


next_node(A) :-
   once('$aleph_search'(nextnode,A)),
   !.


theorysearch(D,L) :-
   next_node(_),
   !,
   '$aleph_global'(atoms,atoms(pos,A)),
   '$aleph_global'(atoms,atoms(neg,B)),
   interval_count(A,H),
   interval_count(B,I),
   repeat,
   next_node(C),
   '$aleph_search_node'(C,G,_,_,_,_,_,_),
   once(retract(user:'$aleph_search'(current,current(_,E,F)))),
   get_theory_gain(D,E,F,G,A,B,H,I,K,J),
   asserta(user:'$aleph_search'(current,current(0,J,K))),
   ( discontinue_search(D,K,J)
   ->
     '$aleph_search'(current,current(_,L,_))
   ;
     prune_open(D,F,K),
     get_nextbest(D,M),
     M=none,
     '$aleph_search'(current,current(_,L,_))
   ),
   !.
theorysearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


tsearch(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   prolog:alarm(D,throw(searchlimit),F),
   catch(theorysearch(A,E),searchlimit,p_message('Time limit reached')),
   remove_alarm(F).
tsearch(A,B) :-
   theorysearch(A,B).


graphsearch(A,Y) :-
   next_node(_),
   !,
   arg(3,A,B),
   arg(23,A,D),
   repeat,
   next_node(C),
   once(retract(user:'$aleph_search'(current,current(J,K,L)))),
   expand(B,A,C,S,F,P,E,G,H,Q,M,N,O),
   (
     (
       D= ([])
     ;
       B\=false
     )
   ->
     I=E
   ;
     lazy_evaluate(E,D,F,G,H,I)
   ),
   R is J+1,
   get_gains(A,K,L,F,M,N,O,P,I,G,H,Q,R,T,U),
   ( B=false
   ->
     get_sibgains(A,S,T,U,F,M,N,O,P,G,H,Q,R,V,W)
   ;
     V=T,
     W=U
   ),
   asserta(user:'$aleph_search'(current,current(R,V,W))),
   X is K+1,
   asserta(user:'$aleph_search_expansion'(R,S,X,V)),
   ( discontinue_search(A,W,V)
   ->
     '$aleph_search'(current,current(_,Y,_))
   ;
     prune_open(A,L,W),
     get_nextbest(A,Z),
     Z=none,
     '$aleph_search'(current,current(_,Y,_))
   ),
   !.
graphsearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


search(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   catch(time_bound_call(D,searchlimit,graphsearch(A,_)),searchlimit,p_message('Time limit reached')),
   '$aleph_search'(current,current(_,E,_)).
search(A,B) :-
   graphsearch(A,B).


get_modes(A/B,D) :-
   functor(C,A,B),
   prolog:findall(C,'$aleph_global'(mode,mode(_,C)),D).


get_determs(A/B,D) :-
   prolog:findall(C,'$aleph_global'(determination,determination(A/B,C)),D).


unwrap_term(B,_,A,A) :-
   var(B),
   !.
unwrap_term(A,C,D,E) :-
   functor(A,_,B),
   tp_list(A,B,C,D,E).


tp_list(_,0,_,A,A) :-
   !.
tp_list(B,A,C,F,I) :-
   arg(A,B,D),
   aleph_append([A],C,E),
   unwrap_term(D,E,[D/E|F],H),
   G is A-1,
   tp_list(B,G,C,H,I).


split_tp([],[],[],[]).
split_tp([+B/A|C],[A/B|D],E,F) :-
   !,
   split_tp(C,D,E,F).
split_tp([-B/A|C],D,[A/B|E],F) :-
   !,
   split_tp(C,D,E,F).
split_tp([(#B)/A|C],D,E,[A/B|F]) :-
   !,
   split_tp(C,D,E,F).
split_tp([_|A],B,C,D) :-
   split_tp(A,B,C,D).


tp(A,C) :-
   functor(A,_,B),
   tp_list(A,B,[],[],C).


find_mode(mode,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(mode,mode(_,A)).
find_mode(modeh,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeh,modeh(_,A)).
find_mode(modeb,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeb,modeb(_,A)).


integrate_term(A,B/C) :-
   '$aleph_sat_terms'(D,A,B,C),
   '$aleph_sat_vars'(_,D,_,[_|_]),
   !.
integrate_term(E,A/B) :-
   '$aleph_sat_terms'(C,D,A,B),
   (
     B=unknown
   ;
     '$aleph_sat_vars'(_,C,_,[])
   ),
   !,
   ( D=unknown
   ->
     retract(user:'$aleph_sat_terms'(C,D,A,B)),
     asserta(user:'$aleph_sat_terms'(C,E,A,B))
   ;
     true
   ).
integrate_term(_,A/B) :-
   '$aleph_sat_terms'(_,_,A,B),
   B\=unknown,
   !.
integrate_term(E,F/G) :-
   retract(user:'$aleph_sat'(lastterm,A)),
   retract(user:'$aleph_sat'(lastvar,B)),
   C is A+1,
   D is B+1,
   asserta(user:'$aleph_sat'(lastterm,C)),
   asserta(user:'$aleph_sat'(lastvar,D)),
   asserta(user:'$aleph_sat_vars'(D,C,[],[])),
   asserta(user:'$aleph_sat_terms'(C,E,F,G)).


add_eqs([],_,_,_,A,A).
add_eqs([D|G],A,C,E,B,H) :-
   ( A=0
   ->
     add_lit(B,false,C=D,[1/E],[2/E],[C],[D],F)
   ;
     add_lit(B,false,C=D,[1/E,2/E],[],[C,D],[],F)
   ),
   add_eqs(G,A,C,E,F,H).


add_eqs([],_,_,A,A).
add_eqs([C|A],B,D,E,G) :-
   add_eqs(A,B,C,D,E,F),
   add_eqs(A,B,D,F,G).


copy_var(B,A,D) :-
   gen_var(A),
   '$aleph_sat_vars'(B,C,_,_),
   asserta(user:'$aleph_sat_vars'(A,C,[],[])),
   asserta(user:'$aleph_sat_varscopy'(A,B,D)).


add_equivalences([],_,[]).
add_equivalences([A|C],D,[A/B|E]) :-
   B=[A],
   add_equivalences(C,D,E).


get_repeats([],A,A).
get_repeats([A|B],C,E) :-
   aleph_member1(A,B),
   !,
   update(C,A,D),
   get_repeats(B,D,E).
get_repeats([_|A],B,C) :-
   get_repeats(A,B,C).


intersect1(A,[],[],A) :-
   !.
intersect1([],_,[],[]) :-
   !.
intersect1([A|C],B,[A|D],E) :-
   aleph_member1(A,B),
   !,
   intersect1(C,B,D,E).
intersect1([A|B],C,D,[A|E]) :-
   intersect1(B,C,D,E).


get_argterms(not A,B,C,D) :-
   !,
   get_argterms(A,B,C,D).
get_argterms(_,[],A,A).
get_argterms(C,[A|F],D,H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   update(D,E,G),
   get_argterms(C,F,G,H).


rename_ovars([],_,_,_,A,A).
rename_ovars([A|I],F,C,G,E,L) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   aleph_delete(D/J,E,K),
   !,
   copy_var(D,H,F),
   tparg(B,G,H),
   rename_ovars(I,F,C,G,[D/[H|J] |K],L).
rename_ovars([A|F],G,C,D,H,I) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   tparg(B,D,E),
   rename_ovars(F,G,C,D,H,I).


copy_args(_,_,[]).
copy_args(B,C,[A/_|E]) :-
   tparg(A,B,D),
   tparg(A,C,D),
   copy_args(B,C,E),
   !.


get_var_equivs(E,A,C,B,D,I) :-
   sort(A,B),
   sort(C,D),
   ( E=0
   ->
     intersect1(B,C,F,_),
     get_repeats(A,F,G)
   ;
     intersect1(B,C,G,_)
   ),
   get_repeats(C,G,H),
   add_equivalences(H,E,I).


get_args(not A,B,C,D) :-
   !,
   get_args(A,B,C,D).
get_args(_,[],A,A).
get_args(C,[A|D],F,G) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   get_args(C,D,[E|F],G).


legal_term(exact,A,C,B) :-
   '$aleph_sat_terms'(D,A,B,C),
   once('$aleph_sat_vars'(_,D,_,[_|_])).
legal_term(upper,D,B,A) :-
   '$aleph_sat_terms'(E,C,A,B),
   C\=unknown,
   C<D,
   once('$aleph_sat_vars'(_,E,_,[_|_])).


update_atoms_next(A,B) :-
   '$aleph_sat_atom'(A,B),
   !.
update_atoms_next(A,B) :-
   assertz(user:'$aleph_sat_atom'(A,B)).


get_nsuccesses(A,C,D) :-
   depth_bound_call(A),
   retract(user:'$aleph_local'(last_success,B)),
   B<C,
   E is B+1,
   update_atoms(A,D),
   asserta(user:'$aleph_local'(last_success,E)),
   ( E>=C
   ->
     !
   ;
     true
   ).


reset_succ :-
   retractall(user:'$aleph_local'(last_success,_)),
   asserta(user:'$aleph_local'(last_success,0)),
   !.


update_atoms(A,mode(B,D,E,F)) :-
   discretize(on),
   discretize_atom(A,B,C),
   !,
   update_atoms_next(C,mode(B,D,E,F)).
update_atoms(A,B) :-
   update_atoms_next(A,B).


depth_bound_call(A) :-
   '$aleph_global'(depth,set(depth,B)),
   call_with_depth_bound(A,B).


get_successes(A,1,B) :-
   depth_bound_call(A),
   update_atoms(A,B),
   !.
get_successes(A,*,B) :-
   depth_bound_call(A),
   update_atoms(A,B).
get_successes(B,A,C) :-
   integer(A),
   A>1,
   reset_succ,
   get_nsuccesses(B,A,C).


construct_call(_,_,[],true) :-
   !.
construct_call(not A,B,C,D) :-
   !,
   construct_call(A,B,C,D).
construct_call(E,B,[D/C],A) :-
   !,
   A=legal_term(upper,B,C,F),
   tparg(D,E,F).
construct_call(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(upper,D,E,F),
   construct_call(B,D,G,H).


construct_incall(_,_,[],true) :-
   !.
construct_incall(not A,B,C,D) :-
   !,
   construct_incall(A,B,C,D).
construct_incall(E,B,[D/C],A) :-
   !,
   A=legal_term(exact,B,C,F),
   tparg(D,E,F).
construct_incall(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(exact,D,E,F),
   ( var(D)
   ->
     construct_incall(B,_,G,H)
   ;
     construct_incall(B,D,G,H)
   ).


split_args(A,D,G,H,I) :-
   functor(A,B,C),
   find_mode(mode,B/C,D),
   functor(E,B,C),
   copy_modeterms(D,E,C),
   E=A,
   tp(D,F),
   split_tp(F,G,H,I).


rm_redundant(_,0) :-
   setting(check_redundant,false),
   !.
rm_redundant(A,C) :-
   mark_redundant_lits(1,A),
   get_marked(1,A,B),
   length(B,C),
   p1_message('redundant literals'),
   p_message(C/A),
   remove_lits(B).


get_unmarked(A,B,[]) :-
   A>B,
   !.
get_unmarked(A,C,D) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,[A|D]) :-
   retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,D) :-
   B is A+1,
   get_unmarked(B,C,D).


rm_uselesslits(_,0) :-
   setting(check_useless,false),
   !.
rm_uselesslits(D,F) :-
   '$aleph_sat'(hovars,A),
   A\= ([]),
   !,
   get_predecessors(A,[],B),
   '$aleph_sat'(hivars,C),
   mark_lits(B,C,0),
   get_unmarked(1,D,E),
   length(E,F),
   p1_message('useless literals'),
   p_message(F/D),
   remove_lits(E).
rm_uselesslits(_,0).


rm_commutative(_,_) :-
   '$aleph_global'(commutative,commutative(A/B)),
   p1_message('checking commutative literals'),
   p_message(A/B),
   functor(C,A,B),
   functor(G,A,B),
   '$aleph_sat_litinfo'(D,_,C,[E|F],I,_),
   \+'$aleph_local'(marked,D/0),
   get_vars(C,[E|F],M),
   '$aleph_sat_litinfo'(H,_,G,[K|L],J,_),
   D\=H,
   I=J,
   get_vars(G,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,H/0)),
   retract(user:'$aleph_sat_litinfo'(H,_,G,[K|L],_,_)),
   fail.
rm_commutative(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('commutative literals'),
   p_message(C/A),
   remove_lits(B).
rm_commutative(_,0).


equal_set([],[]).
equal_set([A|C],B) :-
   aleph_delete1(A,B,D),
   equal_set(C,D),
   !.


symmetric_match([],[]).
symmetric_match([aleph_const(A) |B],[aleph_const(A) |C]) :-
   !,
   symmetric_match(B,C).
symmetric_match([A|C],[B|D]) :-
   integer(A),
   integer(B),
   symmetric_match(C,D).


is_symmetric(not A,not B,C) :-
   !,
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).
is_symmetric(A,B,C) :-
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).


rm_symmetric(_,_) :-
   '$aleph_global'(symmetric,_),
   '$aleph_sat_litinfo'(D,_,A,[B|C],_,_),
   is_symmetric(A,G,H),
   get_vars(A,[B|C],M),
   '$aleph_sat_litinfo'(E,_,F,[K|L],_,_),
   D\=E,
   is_symmetric(F,G,H),
   A=..[_|I],
   F=..[_|J],
   symmetric_match(I,J),
   get_vars(F,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,E/0)),
   retract(user:'$aleph_sat_litinfo'(E,_,F,[K|L],_,_)),
   fail.
rm_symmetric(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('symmetric literals'),
   p_message(C/A),
   remove_lits(B).
rm_symmetric(_,0).


remove_lits(A) :-
   retract(user:'$aleph_sat_litinfo'(C,D,E,F,G,B)),
   aleph_delete_list(A,B,H),
   asserta(user:'$aleph_sat_litinfo'(C,D,E,F,G,H)),
   fail.
remove_lits(_).


rm_moderepeats(_,_) :-
   '$aleph_sat_litinfo'(B,_,A,_,_,_),
   '$aleph_sat_litinfo'(C,_,A,_,_,_),
   B>=1,
   C>B,
   retract(user:'$aleph_sat_litinfo'(C,_,A,_,_,_)),
   asserta(user:'$aleph_local'(marked,C/0)),
   fail.
rm_moderepeats(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('repeated literals'),
   p_message(C/A),
   remove_lits(B).
rm_moderepeats(_,0).


aleph_member1(A,[A|_]) :-
   !.
aleph_member1(A,[_|B]) :-
   aleph_member1(A,B).


find_last_ancestor([],_,A,_,A) :-
   !.
find_last_ancestor([A|E],B,_,D,G) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,C),
   aleph_member1(B,C),
   !,
   F is D+1,
   find_last_ancestor(E,B,D,F,G).
find_last_ancestor([_|B],C,D,A,F) :-
   E is A+1,
   find_last_ancestor(B,C,D,E,F).


extend_clause(false,A,A) :-
   !.
extend_clause((A:-C),B,(A:-D)) :-
   !,
   app_lit(B,C,D).
extend_clause(A,B,(A:-B)).


insert_lastlit(A,C,E) :-
   get_predecessors([A],B),
   aleph_delete_list(B,C,D),
   aleph_append([A|D],B,E).


aleph_remove_n(0,A,[],A) :-
   !.
aleph_remove_n(_,[],[],[]) :-
   !.
aleph_remove_n(B,[A|D],[A|E],F) :-
   C is B-1,
   aleph_remove_n(C,D,E,F).


neg_reduce([],_,_,A,_,_,_,A).
neg_reduce([A|K],C,B,J,G,E,I,O) :-
   get_pclause([A],B,D,L,_,_),
   extend_clause(C,D,F),
   prove(E,neg,F,G,N,H),
   H>I,
   !,
   M is J+1,
   neg_reduce(K,F,L,M,N,E,I,O).
neg_reduce(_,_,_,A,_,_,_,A).


p1_message(A) :-
   write('['),
   write(A),
   write('] ').


get_marked(A,B,[]) :-
   A>B,
   !.
get_marked(A,C,[A|D]) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   ( retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_))
   ->
     true
   ;
     true
   ),
   B is A+1,
   get_marked(B,C,D).
get_marked(A,C,D) :-
   B is A+1,
   get_marked(B,C,D).


neg_reduce([A|B],E,I,F,G) :-
   get_pclause([A],[],C,D,_,_),
   neg_reduce(B,C,D,2,E,F,G,H),
   H\=I,
   !,
   J is H-1,
   aleph_remove_n(J,[A|B],M,[L|K]),
   mark_lits(K),
   insert_lastlit(L,M,N),
   neg_reduce(N,E,H,F,G).
neg_reduce(_,_,_,_,_).


get_litnums(A,B,[]) :-
   A>B,
   !.
get_litnums(A,C,[A|D]) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,_),
   !,
   B is A+1,
   get_litnums(B,C,D).
get_litnums(A,C,D) :-
   B is A+1,
   get_litnums(B,C,D).


rm_nreduce(A,I) :-
   setting(nreduce_bottom,true),
   !,
   get_litnums(1,A,B),
   '$aleph_global'(atoms,atoms(neg,C)),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   setting(noise,G),
   neg_reduce(B,C,A,D/E/F,G),
   get_marked(1,A,H),
   length(H,I),
   p1_message('negative-based removal'),
   p_message(I/A).
rm_nreduce(_,0).


get_ivars1(false,A,B) :-
   '$aleph_sat_ivars'(A,B),
   !.
get_ivars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,C,_,_),
   get_vars(B,C,D).
get_ivars1(B,A,C) :-
   '$aleph_sat_ivars'(A,B,C),
   !.
get_ivars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,D,_,_),
   get_vars(C,D,E).


get_predecessors([],[]).
get_predecessors([A|E],H) :-
   ( A=1
   ->
     C= ([])
   ;
     get_ivars1(false,A,B),
     get_predecessors(B,[],C)
   ),
   get_predecessors(C,D),
   update_list(C,D,G),
   get_predecessors(E,F),
   update_list(F,G,H).


aleph_subset1([],_).
aleph_subset1([A|C],B) :-
   aleph_member1(A,B),
   !,
   aleph_subset1(C,B).


get_pclause([A],B,D,C,E,F) :-
   !,
   get_pclause1([A],B,C,D,E,F).
get_pclause([A|C],B,G,E,J,F) :-
   get_pclause1([A],B,D,H,K,_),
   get_pclause1(C,D,E,I,L,F),
   G= (H:-I),
   J is K+L.


mark_redundant_lits(A,B) :-
   A>B,
   !.
mark_redundant_lits(A,D) :-
   get_pclause([A],[],B,_,_,_),
   redundant(bottom,B),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   C is A+1,
   mark_redundant_lits(C,D).
mark_redundant_lits(A,C) :-
   B is A+1,
   mark_redundant_lits(B,C).


mark_floating_lits(A,B) :-
   A>B,
   !.
mark_floating_lits(A,E) :-
   '$aleph_sat_litinfo'(A,_,_,_,B,C),
   B\= ([]),
   (
     C= ([])
   ;
     C=[A]
   ),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   D is A+1,
   mark_floating_lits(D,E).
mark_floating_lits(A,C) :-
   B is A+1,
   mark_floating_lits(B,C).


get_predecessors([],A,A).
get_predecessors([A|D],C,F) :-
   '$aleph_sat_vars'(A,_,_,B),
   update_list(B,C,E),
   get_predecessors(D,E,F).


get_predicates([],_,[]).
get_predicates([A|F],E,[A|G]) :-
   '$aleph_sat_litinfo'(A,_,B,C,_,[]),
   get_vars(B,C,D),
   aleph_subset1(D,E),
   !,
   get_predicates(F,E,G).
get_predicates([_|A],B,C) :-
   get_predicates(A,B,C).


mark_lit(A,B,G,J,H,I) :-
   retract(user:'$aleph_sat_litinfo'(A,_,C,D,E,F)),
   asserta(user:'$aleph_local'(marked,A/B)),
   asserta(user:'$aleph_sat_litinfo'(A,B,C,D,E,F)),
   ( G=false
   ->
     H= ([]),
     I=J
   ;
     get_vars(C,E,K),
     update_list(K,J,I),
     get_predicates(F,I,L),
     mark_lits(L,B,false,[],_,J,_),
     get_vars(C,D,M),
     get_predecessors(M,[],H)
   ).


aleph_delete_list([],A,A).
aleph_delete_list([A|C],B,E) :-
   aleph_delete(A,B,D),
   !,
   aleph_delete_list(C,D,E).
aleph_delete_list([_|A],B,C) :-
   aleph_delete_list(A,B,C).


mark_lits([],_,_,A,A,B,B).
mark_lits([A|H],B,D,G,J,E,L) :-
   retract(user:'$aleph_local'(marked,A/C)),
   !,
   ( B<C
   ->
     mark_lit(A,B,D,E,F,K),
     update_list(F,G,I),
     mark_lits(H,B,D,I,J,K,L)
   ;
     asserta(user:'$aleph_local'(marked,A/C)),
     mark_lits(H,B,D,G,J,E,L)
   ).
mark_lits([A|G],B,C,F,I,D,K) :-
   mark_lit(A,B,C,D,E,J),
   !,
   update_list(E,F,H),
   mark_lits(G,B,C,H,I,J,K).
mark_lits([_|A],B,C,D,E,F,G) :-
   mark_lits(A,B,C,D,E,F,G).


mark_lits([],_,_).
mark_lits(A,C,B) :-
   mark_lits(A,B,true,[],D,C,F),
   aleph_delete_list(A,D,E),
   G is B+1,
   mark_lits(E,F,G).


mark_lits(A) :-
   aleph_member(B,A),
   asserta(user:'$aleph_local'(marked,B/0)),
   fail.
mark_lits(_).


aleph_append(A,[],A).
aleph_append(B,[A|C],[A|D]) :-
   aleph_append(B,C,D).


update_generators :-
   prolog:findall(A,('$aleph_sat_litinfo'(A,_,_,[],_,_),A>1),B),
   B\= ([]),
   !,
   retract(user:'$aleph_sat_litinfo'(1,D,E,F,G,C)),
   aleph_append(C,B,H),
   asserta(user:'$aleph_sat_litinfo'(1,D,E,F,G,H)).
update_generators.


update_dependents(_,[]).
update_dependents(C,[A|I]) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,B)),
   update(B,C,H),
   asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H)),
   update_dependents(C,I).


update([],A,[A]).
update([A|B],A,[A|B]) :-
   !.
update([A|B],C,[A|D]) :-
   update(B,C,D).


gen_nlitnum(A) :-
   retract(user:'$aleph_sat'(lastnlit,B)),
   !,
   A is B-1,
   asserta(user:'$aleph_sat'(lastnlit,A)).
gen_nlitnum(-1) :-
   asserta(user:'$aleph_sat'(lastnlit,-1)).


update_lit(A,true,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,not B,C,D,E),
   !.
update_lit(A,false,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,B,C,D,E),
   !.
update_lit(A,B,C,D,E,F) :-
   gen_nlitnum(A),
   add_litinfo(A,B,C,D,E,F),
   get_vars(C,D,G),
   get_vars(C,E,I),
   assertz(user:'$aleph_sat_ivars'(A,H,G)),
   assertz(user:'$aleph_sat_ovars'(A,H,I)),
   !.


add_litinfo(A,true,B,C,D,E) :-
   !,
   assertz(user:'$aleph_sat_litinfo'(A,0,not B,C,D,E)).
add_litinfo(A,_,B,C,D,E) :-
   assertz(user:'$aleph_sat_litinfo'(A,0,B,C,D,E)).


update_oterms(_,[],A,A).
update_oterms(C,[A|H],G,J) :-
   retract(user:'$aleph_sat_vars'(A,D,E,B)),
   update(B,C,F),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_list(E,G,I),
   update_oterms(C,H,I,J).


update_iterms(_,[]).
update_iterms(C,[A|G]) :-
   retract(user:'$aleph_sat_vars'(A,D,B,F)),
   update(B,C,E),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_dependents(C,F),
   update_iterms(C,G).


insert_eqs([],_,A,A).
insert_eqs([A/C|G],D,F,I) :-
   '$aleph_sat_vars'(A,B,_,_),
   '$aleph_sat_terms'(B,_,_,E),
   add_eqs(C,D,E,F,H),
   insert_eqs(G,D,H,I).


add_lit(A,C,D,F,G,_,_,A) :-
   setting(construct_bottom,B),
   (
     B=false
   ;
     B=reduction
   ),
   ( C=true
   ->
     E= (not D)
   ;
     E=D
   ),
   '$aleph_sat_litinfo'(_,0,E,F,G,_),
   !.
add_lit(B,E,F,G,H,C,D,A) :-
   A is B+1,
   update_iterms(A,C),
   update_oterms(A,D,[],I),
   add_litinfo(A,E,F,G,H,I),
   assertz(user:'$aleph_sat_ivars'(A,C)),
   assertz(user:'$aleph_sat_ovars'(A,D)),
   !.


split_vars(D,A,B,C,O,K,G,I,L) :-
   setting(splitvars,true),
   !,
   get_args(A,B,[],E),
   get_args(A,C,[],F),
   get_var_equivs(D,E,F,G,J,H),
   ( H= ([])
   ->
     I=J,
     K=A,
     L=H
   ;
     functor(A,M,N),
     functor(K,M,N),
     copy_args(A,K,B),
     copy_args(A,K,O),
     rename_ovars(C,D,A,K,H,L),
     get_argterms(K,C,[],I)
   ).
split_vars(_,A,B,D,_,A,C,E,[]) :-
   get_vars(A,B,C),
   get_vars(A,D,E).


rename(_,[],_,A,A) :-
   !.
rename(0,_,_,_,_) :-
   !.
rename(A,D,I,B,F) :-
   arg(A,B,C),
   aleph_member(C/E,D),
   !,
   aleph_member(G,E),
   arg(A,F,G),
   H is A-1,
   rename(H,D,[C/G|I],B,F).
rename(A,H,D,B,E) :-
   arg(A,B,C),
   ( aleph_member(C/F,D)
   ->
     arg(A,E,F)
   ;
     arg(A,E,C)
   ),
   G is A-1,
   rename(G,H,D,B,E).


update_list([],A,A).
update_list([B|C],A,E) :-
   update(A,B,D),
   !,
   update_list(C,D,E).


aleph_delete(A,[A|B],B).
aleph_delete(B,[A|C],[A|D]) :-
   aleph_delete(B,C,D).


get_equivs(A,[]) :-
   A<0,
   !.
get_equivs(A,B) :-
   '$aleph_sat_varsequiv'(A,B),
   !.
get_equivs(A,C) :-
   B is A-1,
   get_equivs(B,C).


update_equiv_lists([],A,A) :-
   !.
update_equiv_lists([A/C|E],B,H) :-
   aleph_delete(A/D,B,G),
   !,
   update_list(C,D,F),
   update_equiv_lists(E,[A/F|G],H).
update_equiv_lists([B|A],C,D) :-
   update_equiv_lists(A,[B|C],D).


update_equivs([],_) :-
   !.
update_equivs(B,A) :-
   retract(user:'$aleph_sat_varsequiv'(A,C)),
   !,
   update_equiv_lists(B,C,D),
   asserta(user:'$aleph_sat_varsequiv'(A,D)).
update_equivs(C,A) :-
   B is A-1,
   get_equivs(B,D),
   update_equiv_lists(C,D,E),
   asserta(user:'$aleph_sat_varsequiv'(A,E)).


intersects(A,C) :-
   aleph_member(B,A),
   aleph_member1(B,C),
   !.


tparg([A],B,C) :-
   !,
   arg(A,B,C).
tparg([A|C],B,E) :-
   arg(A,B,D),
   tparg(C,D,E).


flatten_consts([],_,_).
flatten_consts([A/_|E],B,C) :-
   tparg(A,B,D),
   tparg(A,C,aleph_const(D)),
   flatten_consts(E,B,C).


flatten_vars([],_,_,[]).
flatten_vars([A/D|H],B,G,[E|I]) :-
   tparg(A,B,C),
   '$aleph_sat_terms'(F,_,C,D),
   '$aleph_sat_vars'(E,F,_,_),
   \+'$aleph_sat_varscopy'(E,_,_),
   tparg(A,G,E),
   flatten_vars(H,B,G,I).


copy_modeterms(_,_,0) :-
   !.
copy_modeterms(B,F,A) :-
   arg(A,B,C),
   nonvar(C),
   functor(C,D,E),
   \+ (D= (+);D= (-);D= (#)),
   !,
   functor(G,D,E),
   arg(A,F,G),
   copy_modeterms(C,G,E),
   H is A-1,
   copy_modeterms(B,F,H).
copy_modeterms(B,C,A) :-
   D is A-1,
   copy_modeterms(B,C,D).


add_new_lit(G,B,A,L,M,Q) :-
   arg(1,A,E),
   functor(B,C,D),
   functor(F,C,D),
   once(copy_modeterms(E,F,D)),
   arg(2,A,H),
   arg(3,A,I),
   arg(4,A,J),
   split_vars(G,B,H,I,J,F,N,O,K),
   update_equivs(K,G),
   add_lit(L,M,F,H,I,N,O,P),
   insert_eqs(K,G,P,Q),
   !.


in_path(B) :-
   '$aleph_sat'(hovars,A),
   !,
   (
     A= ([])
   ;
     B= ([])
   ;
     intersects(A,B)
   ).
in_path(_).


get_vars(not A,B,C) :-
   !,
   get_vars(A,B,C).
get_vars(_,[],[]).
get_vars(C,[A|E],H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   get_vars_in_term([D],G),
   get_vars(C,E,F),
   update_list(F,G,H).


apply_equivs(A,B,D,E) :-
   get_equivs(A,C),
   rename(B,C,[],D,E).


flatten_lit(E,mode(A,D,G,I),B,F,H) :-
   functor(A,_,C),
   once(copy_modeterms(A,B,C)),
   flatten_vars(D,E,B,F),
   flatten_vars(G,E,B,H),
   flatten_consts(I,E,B).


flatten_lits(A,J,C,N,F,B,_) :-
   functor(A,D,E),
   asserta(user:'$aleph_local'(flatten_lits,B)),
   H is C-1,
   functor(G,D,E),
   flatten_lit(A,F,G,_,_),
   functor(I,D,E),
   apply_equivs(H,E,G,I),
   retract(user:'$aleph_local'(flatten_lits,M)),
   ( J=true
   ->
     arg(3,F,K),
     get_vars(I,K,L),
     ( in_path(L)
     ->
       add_new_lit(C,I,F,M,N,O)
     ;
       O=M
     )
   ;
     add_new_lit(C,I,F,M,N,O)
   ),
   asserta(user:'$aleph_local'(flatten_lits,O)),
   fail.
flatten_lits(_,_,_,_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_lits,A)).


integrate_args(_,_,[]).
integrate_args(C,B,[A/E|G]) :-
   tparg(A,B,D),
   integrate_term(C,D/E),
   ( retract(user:'$aleph_sat_terms'(F,C,D,unknown))
   ->
     asserta(user:'$aleph_sat_terms'(F,C,D,E))
   ;
     true
   ),
   integrate_args(C,B,G).


flatten_atom(B,F,C,H,A,I,J) :-
   arg(3,A,D),
   arg(4,A,E),
   integrate_args(B,C,D),
   integrate_args(B,C,E),
   ( B=F
   ->
     G=true
   ;
     G=false
   ),
   flatten_lits(C,G,B,H,A,I,J).


aleph_member(A,[A|_]).
aleph_member(A,[_|B]) :-
   aleph_member(A,B).


aleph_rpermute(A,C) :-
   length(A,B),
   aleph_rpermute(A,B,C).


flatten_atoms(true,H,I,L) :-
   prolog:findall(A-B,retract(user:'$aleph_sat_atom'(A,B)),C),
   aleph_rpermute(C,D),
   aleph_member(E-J,D),
   retract(user:'$aleph_local'(flatten_num,K)),
   ( E= (not F)
   ->
     G=true
   ;
     F=E,
     G=false
   ),
   flatten_atom(H,I,F,G,J,K,L),
   asserta(user:'$aleph_local'(flatten_num,L)),
   fail.
flatten_atoms(false,D,E,H) :-
   repeat,
   retract(user:'$aleph_sat_atom'(A,F)),
   retract(user:'$aleph_local'(flatten_num,G)),
   ( A= (not B)
   ->
     C=true
   ;
     B=A,
     C=false
   ),
   flatten_atom(D,E,B,C,F,G,H),
   asserta(user:'$aleph_local'(flatten_num,H)),
   ( '$aleph_sat_atom'(_,_)
   ->
     fail
   ;
     retract(user:'$aleph_local'(flatten_num,H))
   ),
   !.
flatten_atoms(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


flatten(C,D,A,E) :-
   retractall(user:'$aleph_local'(flatten_num,_)),
   asserta(user:'$aleph_local'(flatten_num,A)),
   '$aleph_sat_atom'(_,_),
   !,
   ( setting(permute_bottom,B)
   ->
     true
   ;
     B=false
   ),
   flatten_atoms(B,C,D,E).
flatten(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


gen_layer(A/B,J) :-
   ( A/B= (not)/1
   ->
     '$aleph_global'(modeb,modeb(H,not C)),
     functor(C,D,E),
     functor(F,D,E),
     once(copy_modeterms(C,F,E)),
     G= (not F)
   ;
     functor(C,A,B),
     functor(G,A,B),
     '$aleph_global'(modeb,modeb(H,C)),
     once(copy_modeterms(C,G,B))
   ),
   split_args(C,C,I,Q,R),
   ( I= ([])
   ->
     N=true,
     P=true
   ;
     aleph_delete(L/M,I,O),
     K is J-1,
     construct_incall(G,K,[L/M],N),
     construct_call(G,J,O,P)
   ),
   call(user:N),
   call(user:P),
   aleph_background_predicate(G),
   get_successes(G,H,mode(C,I,Q,R)),
   fail.
gen_layer(_,_).


get_atoms1([],_,_,A,A).
get_atoms1([A|E],B,C,D,G) :-
   gen_layer(A,B),
   flatten(B,C,D,F),
   get_atoms1(E,B,C,F,G).


get_atoms([],_,_,A,A) :-
   !.
get_atoms(D,A,B,E,H) :-
   A=<B,
   C is A-1,
   '$aleph_sat_terms'(_,C,_,_),
   !,
   get_atoms1(D,A,B,E,G),
   F is A+1,
   get_atoms(D,F,B,G,H).
get_atoms(_,_,_,A,A).

:- dynamic '$aleph_determination'/2.


:- dynamic '$aleph_has_ivar'/4.


:- dynamic '$aleph_has_ovar'/4.


:- dynamic '$aleph_has_vars'/3.


:- dynamic '$aleph_link_vars'/2.



dec1([],[]).
dec1([A|C],B) :-
   ( A==0
   ->
     B= ([])
   ;
     ( A>0
     ->
       C=[D|E],
       B=[A-D|F],
       dec1(E,F)
     )
   ;
     G is-A,
     B=[G-G|F],
     dec1(C,F)
   ).


zeros(0,[]) :-
   !.
zeros(A,[0|C]) :-
   B is A-1,
   zeros(B,C).


fill_rle(A,D) :-
   ( A<8
   ->
     B=A
   ;
     ( A<256
     ->
       B is 2^ (msb(A-1)+1)
     )
   ;
     B is 256* ((A-1)div 256+1)
   ),
   C is B-A,
   zeros(C,D).


c1([],A,B,A,B).
c1([A-A|D],[C|E],B,G,H) :-
   !,
   F is B+1,
   C is-A,
   c1(D,E,F,G,H).
c1([A-B|D],[A,B|E],C,G,H) :-
   F is C+2,
   c1(D,E,F,G,H).


prove(_,_,_,[],[],0).
prove(A,B,C,[D|E],H,I) :-
   index_prove(A,B,C,D,G,J),
   prove(A,B,C,E,F,K),
   aleph_append(F,G,H),
   I is J+K.


recompute_cover(A,pos,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,E),
   setting(prooftime,F),
   setting(proof_strategy,G),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,D))
   ;
     '$aleph_global'(atoms,atoms(pos,D))
   ),
   prove(E/F/G,pos,C,D,H,_).
recompute_cover(A,neg,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   '$aleph_global'(atoms_left,atoms_left(neg,G)),
   prove(D/E/F,neg,C,G,H,_).


retractall_aleph_search_node :-
   eraseall('$aleph_search_node').


retract_aleph_search_node(A,B,C,D,E,F,G,H) :-
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),I),
   erase(I).


uncompact_rle(A,C) :-
   A=..[cov|B],
   dec1(B,C).


compact_rle(A,D) :-
   c1(A,E,0,C,B),
   fill_rle(B,C),
   D=..[cov|E].


asserta_aleph_search_node(A,B,C,D,_,_,E,F) :-
   setting(compact_node_representation,true),
   !,
   recorda('$aleph_search_node',a(A,B,C,D,_,_,E,F),_).
asserta_aleph_search_node(C,D,E,F,A,B,I,J) :-
   compact_rle(A,G),
   compact_rle(B,H),
   recorda('$aleph_search_node',a(C,D,E,F,G,H,I,J),_).


'$aleph_search_node'(A,B,C,D,E,F,G,H) :-
   setting(compact_node_representation,true),
   !,
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),_).
'$aleph_search_node'(A,B,C,D,H,J,E,F) :-
   recorded('$aleph_search_node',a(A,B,C,D,G,I,E,F),_),
   uncompact_rle(G,H),
   uncompact_rle(I,J).

:- dynamic '$aleph_optimise_keys'/0.

'$aleph_optimise_keys'.

:- dynamic '$aleph_search_node'/2.


:- dynamic '$aleph_search_gain'/4.


:- dynamic '$aleph_search_expansion'/4.


:- dynamic '$aleph_search_seen'/2.


:- dynamic '$aleph_search'/2.


:- dynamic '$aleph_search_prunecache'/1.


:- dynamic '$aleph_search_cache'/1.


:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[]).

:- dynamic '$aleph_sat_vars'/4.

'$aleph_sat_vars'(2,2,[],[1]).
'$aleph_sat_vars'(1,1,[],[1]).

:- dynamic '$aleph_sat_terms'/4.

'$aleph_sat_terms'(2,0,person378_1,person).
'$aleph_sat_terms'(1,0,person309_1,person).

:- dynamic '$aleph_sat_varscopy'/3.


:- dynamic '$aleph_sat_varsequiv'/2.


:- dynamic '$aleph_sat_ivars'/2.

'$aleph_sat_ivars'(1,[]).

:- dynamic '$aleph_sat_ovars'/2.

'$aleph_sat_ovars'(1,[1,2]).

:- dynamic '$aleph_sat_atom'/2.


:- dynamic '$aleph_local'/2.


:- dynamic '$aleph_good'/3.


:- dynamic '$aleph_feature'/2.



aleph_manual('http://www.comlab.ox.ac.uk/oucl/groups/machlearn/Aleph/index.html').


aleph_version_date('Sun Mar 11 03:25:37 UTC 2007').


aleph_version(5).


aleph_background_predicate(A) :-
   predicate_property(A,B),
   (
     B=static
   ;
     B= (dynamic)
   ;
     B=built_in
   ),
   !.


broadcast(_).


aleph_reconsult(A) :-
   reconsult(A).


aleph_consult(A) :-
   consult(A).


remove_alarm(_) :-
   alarm(0,_,_).


aleph_random(A) :-
   A is random.


discretize_outputs([],[],[],A,A).
discretize_outputs([-A|E],[D|F],[C|G],B,I) :-
   discretize(A,_,_),
   !,
   B=[c2c(A,C,D) |H],
   discretize_outputs(E,F,G,H,I).
discretize_outputs([_|B],[A|C],[A|D],E,F) :-
   discretize_outputs(B,C,D,E,F).


discr_rw_body([],A,A).
discr_rw_body([A|K],E,M) :-
   functor(A,B,C),
   functor(D,B,C),
   '$aleph_global'(modeb,modeb(_,D)),
   A=..[B|G],
   D=..[B|F],
   E=[I|H],
   discretize_outputs(F,G,J,H,L),
   I=..[B|J],
   discr_rw_body(K,L,M).


do_discretization_rewrite((A:-true),(A:-true)) :-
   !.
do_discretization_rewrite((A:-B),(A:-E)) :-
   goals_to_list(B,C),
   discr_rw_body(C,D,[]),
   list_to_goals(D,E).


discretization_rewrite(A,B) :-
   discretize(on),
   !,
   do_discretization_rewrite(A,B).
discretization_rewrite(A,A).


range2value([r(A,B,D) |_],C,A) :-
   B>=C,
   C<D,
   !.
range2value([_|A],B,C) :-
   range2value(A,B,C).


c2c(A,B,D) :-
   ground(A),
   ground(B),
   discretize(A,_,C),
   range2value(C,B,D),
   !.
c2c(_,A,A).


discretize_args([],[],[]).
discretize_args([+A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([-A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([#A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).


discretize_atom(A,B,F) :-
   A=..[C|E],
   B=..[C|D],
   discretize_args(D,E,G),
   F=..[C|G].

:- dynamic discretize/2.


:- dynamic discretize/1.

discretize(off).


sat(A,B) :-
   setting(construct_bottom,false),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   asserta(user:'$aleph_sat'(hovars,[])),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   setting(construct_bottom,reduction),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   integrate_head_lit(D),
   asserta(user:'$aleph_sat'(hovars,D)),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   set(stage,saturation),
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   split_args(C,E,F,D,G),
   integrate_args(unknown,C,D),
   stopwatch(Q),
   assertz(user:'$aleph_sat_atom'(C,mode(E,D,F,G))),
   '$aleph_global'(i,set(i,H)),
   flatten(0,H,0,O),
   '$aleph_sat_litinfo'(1,_,I,_,_,_),
   get_vars(I,D,J),
   asserta(user:'$aleph_sat'(hovars,J)),
   get_vars(I,F,K),
   asserta(user:'$aleph_sat'(hivars,K)),
   functor(C,L,M),
   get_determs(L/M,N),
   ( '$aleph_global'(determination,determination(L/M,(=)/2))
   ->
     asserta(user:'$aleph_sat'(eq,true))
   ;
     asserta(user:'$aleph_sat'(eq,false))
   ),
   get_atoms(N,1,H,O,R),
   stopwatch(P),
   Z is P-Q,
   asserta(user:'$aleph_sat'(lastlit,R)),
   asserta(user:'$aleph_sat'(botsize,R)),
   update_generators,
   rm_moderepeats(R,S),
   rm_commutative(R,U),
   rm_symmetric(R,V),
   rm_redundant(R,W),
   rm_uselesslits(R,T),
   rm_nreduce(R,X),
   Y is R-S-T-U-V-W-X,
   show(bottom),
   p1_message(literals),
   p_message(Y),
   p1_message('saturation time'),
   p_message(Z),
   sat_end_hook(A,B),
   broadcast(end(sat(B,Y,Z))),
   store(bottom),
   noset(stage).
sat(_,_) :-
   noset(stage).


pp_dclause(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dclause(A,true)
   ;
     pp_dclause(A,false)
   ).


p_message(A) :-
   write('['),
   write(A),
   write(']'),
   nl,
   flush_output.


list_to_goals([A],A) :-
   !.
list_to_goals([A|B],(A,C)) :-
   list_to_goals(B,C).

:- dynamic '$aleph_sat'/2.

'$aleph_sat'(botsize,1).
'$aleph_sat'(lastlit,1).
'$aleph_sat'(eq,false).
'$aleph_sat'(hivars,[1,2]).
'$aleph_sat'(hovars,[]).
'$aleph_sat'(lastvar,2).
'$aleph_sat'(lastterm,2).
'$aleph_sat'(example,example(1,pos)).
'$aleph_sat'(lastnlit,-1).


goals_to_list((true,A),B) :-
   !,
   goals_to_list(A,B).
goals_to_list((A,B),[A|C]) :-
   !,
   goals_to_list(B,C).
goals_to_list(true,[]) :-
   !.
goals_to_list(A,[A]).


evalfn(B,C) :-
   ( setting(evalfn,A)
   ->
     true
   ;
     A=coverage
   ),
   evalfn(A,B,C).


add_hyp(end_of_file) :-
   !.
add_hyp(A) :-
   nlits(A,F),
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   extract_pos(B,H),
   extract_neg(B,I),
   setting(evalfn,C),
   complete_label(C,A,[D,E,F],G),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(G,A,H,I))).


show(settings) :-
   nl,
   p_message(settings),
   prolog:findall(A-B,'$aleph_global'(A,set(A,B)),C),
   sort(C,D),
   aleph_member(E-F,D),
   tab(8),
   write(E=F),
   nl,
   fail.
show(determinations) :-
   nl,
   p_message(determinations),
   show_global(determination,determination(_,_)).
show(modes) :-
   nl,
   p_message(modes),
   show_global(mode,mode(_,_)).
show(modehs) :-
   nl,
   p_message(modehs),
   show_global(modeh,modeh(_,_)).
show(modebs) :-
   nl,
   p_message(modebs),
   show_global(modeb,modeb(_,_)).
show(sizes) :-
   nl,
   p_message(sizes),
   show_global(size,size(_,_)).
show(bottom) :-
   nl,
   p_message('bottom clause'),
   setting(verbosity,A),
   A>0,
   '$aleph_sat'(lastlit,B),
   get_clause(1,B,[],C),
   pp_dlist(C).
show(theory) :-
   nl,
   p_message(theory),
   nl,
   '$aleph_global'(rules,rules(A)),
   aleph_reverse(A,B),
   aleph_member(C,B),
   '$aleph_global'(theory,theory(C,_,_,_,_)),
   eval_rule(C,_),
   fail.
show(theory) :-
   get_performance.
show(pos) :-
   nl,
   p_message(positives),
   store(greedy),
   examples(pos,_),
   reinstate(greedy),
   fail.
show(posleft) :-
   nl,
   p_message('positives left'),
   example(_,pos,A),
   \+call(user:A),
   write(A),
   write('.'),
   nl,
   fail.
show(neg) :-
   nl,
   p_message(negatives),
   store(greedy),
   examples(neg,_),
   reinstate(greedy),
   fail.
show(rand) :-
   nl,
   p_message(random),
   examples(rand,_),
   fail.
show(uspec) :-
   nl,
   p_message(uspec),
   examples(uspec,_),
   fail.
show(gcws) :-
   nl,
   p_message('gcws hypothesis'),
   '$aleph_search'(gcwshyp,hypothesis(_,A,_,_)),
   pp_dclause(A),
   fail.
show(abgen) :-
   nl,
   p_message('abduced hypothesis'),
   '$aleph_search'(abgenhyp,hypothesis(_,A,_,_)),
   aleph_member(B,A),
   pp_dclause(B),
   fail.
show(hypothesis) :-
   setting(portray_hypothesis,A),
   aleph_portray(hypothesis,A),
   fail.
show(search) :-
   setting(portray_search,A),
   aleph_portray(search,A).
show(good) :-
   setting(good,true),
   nl,
   p_message('good clauses'),
   ( setting(minscore,A)
   ->
     true
   ;
     A is(-inf)
   ),
   setting(evalfn,E),
   '$aleph_good'(_,B,D),
   B=[_,_,_,C|_],
   C>=A,
   pp_dclause(D),
   show_stats(E,B),
   fail.
show(good) :-
   setting(good,true),
   setting(goodfile,A),
   aleph_open(A,read,C),
   ( setting(minscore,B)
   ->
     true
   ;
     B is(-inf)
   ),
   setting(evalfn,G),
   repeat,
   read(C,D),
   ( D='$aleph_good'(_,E,H)
   ->
     E=[_,_,_,F|_],
     F>=B,
     show_stats(G,E),
     pp_dclause(H),
     fail
   ;
     close(C),
     !
   ).
show(features) :-
   setting(evalfn,A),
   ( '$aleph_feature'(feature,_)
   ->
     true
   ;
     gen_features
   ),
   p_message('features from good clauses'),
   '$aleph_feature'(feature,feature(C,B,_,D,E)),
   show_stats(A,B),
   pp_dclause(feature(C,(D:-E))),
   fail.
show(constraints) :-
   setting(good,true),
   nl,
   p_message(constraints),
   setting(noise,A),
   E is-A,
   '$aleph_good'(_,C,B),
   split_clause(B,false,_),
   C=[_,_,_,D],
   D>=E,
   pp_dclause(B),
   show_stats(coverage,C),
   fail.
show(constraints) :-
   show(false/0).
show(A/B) :-
   functor(C,A,B),
   prolog:current_predicate(A,user:C),
   nl,
   p1_message(definition),
   p_message(A/B),
   prolog:clause(user:C,D),
   \+in(D,'$aleph_search'(pclause,pclause(_,_))),
   pp_dclause((C:-D)),
   fail.
show(train_pos) :-
   setting(portray_examples,A),
   aleph_portray(train_pos,A).
show(train_neg) :-
   setting(portray_examples,A),
   aleph_portray(train_neg,A).
show(test_pos) :-
   setting(portray_examples,A),
   aleph_portray(test_pos,A).
show(test_neg) :-
   setting(portray_examples,A),
   aleph_portray(test_neg,A).
show(_).


reduce :-
   setting(search,A),
   catch(doreduce(A),abort,reinstate_values),
   !.


sat(A) :-
   integer(A),
   example(A,pos,_),
   sat(pos,A),
   !.
sat(A) :-
   record_example(check,uspec,A,B),
   sat(uspec,B),
   !.


clean_up :-
   clean_up_init,
   clean_up_sat,
   clean_up_reduce.


get_performance :-
   setting(evalfn,A),
   (
     A=sd
   ;
     A=mse
   ),
   !.
get_performance :-
   ( setting(train_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(train_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Training set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Training set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance :-
   ( setting(test_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(test_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Test set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Test set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance.


example(0,uspec,false).
example(1,pos,advisedby(person309_1,person378_1)).
example(2,pos,advisedby(person141_1,person331_1)).
example(3,pos,advisedby(person288_1,person165_1)).
example(4,pos,advisedby(person159_1,person201_1)).
example(5,pos,advisedby(person159_1,person57_1)).
example(6,pos,advisedby(person226_1,person324_1)).
example(7,pos,advisedby(person242_1,person29_1)).
example(8,pos,advisedby(person242_1,person165_1)).
example(9,pos,advisedby(person348_1,person324_1)).
example(10,pos,advisedby(person6_1,person29_1)).
example(11,pos,advisedby(person6_1,person165_1)).
example(12,pos,advisedby(person75_1,person331_1)).
example(13,pos,advisedby(person303_1,person165_1)).
example(14,pos,advisedby(person303_1,person29_1)).
example(15,pos,advisedby(person249_1,person331_1)).
example(16,pos,advisedby(person68_1,person201_1)).
example(17,pos,advisedby(person265_1,person168_1)).
example(18,pos,advisedby(person381_1,person168_1)).
example(19,pos,advisedby(person176_1,person407_1)).
example(20,pos,advisedby(person272_1,person7_1)).
example(21,pos,advisedby(person37_1,person79_1)).
example(22,pos,advisedby(person353_1,person319_1)).
example(23,pos,advisedby(person432_1,person240_1)).
example(24,pos,advisedby(person239_1,person171_1)).
example(25,pos,advisedby(person13_1,person240_1)).
example(26,pos,advisedby(person286_1,person171_1)).
example(27,pos,advisedby(person418_1,person171_1)).
example(28,pos,advisedby(person14_1,person150_1)).
example(29,pos,advisedby(person320_1,person150_1)).
example(30,pos,advisedby(person352_1,person415_1)).
example(31,pos,advisedby(person352_1,person292_1)).
example(32,pos,advisedby(person276_1,person407_1)).
example(33,pos,advisedby(person45_1,person415_1)).
example(34,pos,advisedby(person45_1,person211_1)).
example(35,pos,advisedby(person148_1,person171_1)).
example(36,pos,advisedby(person314_1,person415_1)).
example(37,pos,advisedby(person275_1,person79_1)).
example(38,pos,advisedby(person21_1,person211_1)).
example(39,pos,advisedby(person262_1,person415_1)).
example(40,pos,advisedby(person262_1,person292_1)).
example(41,pos,advisedby(person257_1,person240_1)).
example(42,pos,advisedby(person380_1,person79_1)).
example(43,pos,advisedby(person384_1,person240_1)).
example(44,pos,advisedby(person384_1,person407_1)).
example(45,pos,advisedby(person266_1,person7_1)).
example(46,pos,advisedby(person312_1,person319_1)).
example(47,pos,advisedby(person208_1,person319_1)).
example(48,pos,advisedby(person63_1,person415_1)).
example(49,pos,advisedby(person318_1,person185_1)).
example(50,pos,advisedby(person318_1,person319_1)).
example(51,pos,advisedby(person83_1,person349_1)).
example(52,pos,advisedby(person217_1,person342_1)).
example(53,pos,advisedby(person217_1,person72_1)).
example(54,pos,advisedby(person206_1,person342_1)).
example(55,pos,advisedby(person206_1,person72_1)).
example(56,pos,advisedby(person81_1,person342_1)).
example(57,pos,advisedby(person81_1,person393_1)).
example(58,pos,advisedby(person122_1,person72_1)).
example(59,pos,advisedby(person228_1,person342_1)).
example(60,pos,advisedby(person228_1,person393_1)).
example(61,pos,advisedby(person228_1,person394_1)).
example(62,pos,advisedby(person41_1,person394_1)).
example(63,pos,advisedby(person163_1,person393_1)).
example(64,pos,advisedby(person435_1,person279_1)).
example(65,pos,advisedby(person404_1,person72_1)).
example(66,pos,advisedby(person142_1,person342_1)).
example(67,pos,advisedby(person300_1,person342_1)).
example(68,pos,advisedby(person200_1,person72_1)).
example(69,pos,advisedby(person157_1,person72_1)).
example(70,pos,advisedby(person113_1,person394_1)).
example(71,pos,advisedby(person113_1,person342_1)).
example(72,pos,advisedby(person18_1,person335_1)).
example(73,pos,advisedby(person9_1,person335_1)).
example(74,pos,advisedby(person429_1,person335_1)).
example(75,pos,advisedby(person362_1,person5_1)).
example(76,pos,advisedby(person362_1,person335_1)).
example(77,pos,advisedby(person96_1,person5_1)).
example(78,pos,advisedby(person263_1,person5_1)).
example(79,pos,advisedby(person183_1,person5_1)).
example(80,pos,advisedby(person118_1,person5_1)).
example(1,neg,advisedby(person191_1,person378_1)).
example(2,neg,advisedby(person397_1,person378_1)).
example(3,neg,advisedby(person138_1,person378_1)).
example(4,neg,advisedby(person303_1,person378_1)).
example(5,neg,advisedby(person77_1,person378_1)).
example(6,neg,advisedby(person141_1,person378_1)).
example(7,neg,advisedby(person383_1,person378_1)).
example(8,neg,advisedby(person422_1,person378_1)).
example(9,neg,advisedby(person390_1,person378_1)).
example(10,neg,advisedby(person288_1,person378_1)).
example(11,neg,advisedby(person159_1,person378_1)).
example(12,neg,advisedby(person172_1,person378_1)).
example(13,neg,advisedby(person226_1,person378_1)).
example(14,neg,advisedby(person242_1,person378_1)).
example(15,neg,advisedby(person416_1,person378_1)).
example(16,neg,advisedby(person348_1,person378_1)).
example(17,neg,advisedby(person278_1,person378_1)).
example(18,neg,advisedby(person6_1,person378_1)).
example(19,neg,advisedby(person75_1,person378_1)).
example(20,neg,advisedby(person249_1,person378_1)).
example(21,neg,advisedby(person68_1,person378_1)).
example(22,neg,advisedby(person205_1,person378_1)).
example(23,neg,advisedby(person182_1,person378_1)).
example(24,neg,advisedby(person23_1,person378_1)).
example(25,neg,advisedby(person310_1,person378_1)).
example(26,neg,advisedby(person424_1,person378_1)).
example(27,neg,advisedby(person401_1,person378_1)).
example(28,neg,advisedby(person237_1,person378_1)).
example(29,neg,advisedby(person58_1,person378_1)).
example(30,neg,advisedby(person144_1,person378_1)).
example(31,neg,advisedby(person125_1,person378_1)).
example(32,neg,advisedby(person350_1,person378_1)).
example(33,neg,advisedby(person356_1,person378_1)).
example(34,neg,advisedby(person294_1,person378_1)).
example(35,neg,advisedby(person315_1,person378_1)).
example(36,neg,advisedby(person191_1,person298_1)).
example(37,neg,advisedby(person397_1,person298_1)).
example(38,neg,advisedby(person138_1,person298_1)).
example(39,neg,advisedby(person303_1,person298_1)).
example(40,neg,advisedby(person77_1,person298_1)).
example(41,neg,advisedby(person141_1,person298_1)).
example(42,neg,advisedby(person309_1,person298_1)).
example(43,neg,advisedby(person383_1,person298_1)).
example(44,neg,advisedby(person422_1,person298_1)).
example(45,neg,advisedby(person390_1,person298_1)).
example(46,neg,advisedby(person288_1,person298_1)).
example(47,neg,advisedby(person159_1,person298_1)).
example(48,neg,advisedby(person172_1,person298_1)).
example(49,neg,advisedby(person226_1,person298_1)).
example(50,neg,advisedby(person242_1,person298_1)).
example(51,neg,advisedby(person416_1,person298_1)).
example(52,neg,advisedby(person348_1,person298_1)).
example(53,neg,advisedby(person278_1,person298_1)).
example(54,neg,advisedby(person6_1,person298_1)).
example(55,neg,advisedby(person75_1,person298_1)).
example(56,neg,advisedby(person249_1,person298_1)).
example(57,neg,advisedby(person68_1,person298_1)).
example(58,neg,advisedby(person205_1,person298_1)).
example(59,neg,advisedby(person182_1,person298_1)).
example(60,neg,advisedby(person23_1,person298_1)).
example(61,neg,advisedby(person310_1,person298_1)).
example(62,neg,advisedby(person424_1,person298_1)).
example(63,neg,advisedby(person401_1,person298_1)).
example(64,neg,advisedby(person237_1,person298_1)).
example(65,neg,advisedby(person58_1,person298_1)).
example(66,neg,advisedby(person144_1,person298_1)).
example(67,neg,advisedby(person125_1,person298_1)).
example(68,neg,advisedby(person350_1,person298_1)).
example(69,neg,advisedby(person356_1,person298_1)).
example(70,neg,advisedby(person294_1,person298_1)).
example(71,neg,advisedby(person315_1,person298_1)).
example(72,neg,advisedby(person191_1,person52_1)).
example(73,neg,advisedby(person397_1,person52_1)).
example(74,neg,advisedby(person138_1,person52_1)).
example(75,neg,advisedby(person303_1,person52_1)).
example(76,neg,advisedby(person77_1,person52_1)).
example(77,neg,advisedby(person141_1,person52_1)).
example(78,neg,advisedby(person309_1,person52_1)).
example(79,neg,advisedby(person383_1,person52_1)).
example(80,neg,advisedby(person422_1,person52_1)).
example(81,neg,advisedby(person390_1,person52_1)).
example(82,neg,advisedby(person288_1,person52_1)).
example(83,neg,advisedby(person159_1,person52_1)).
example(84,neg,advisedby(person172_1,person52_1)).
example(85,neg,advisedby(person226_1,person52_1)).
example(86,neg,advisedby(person242_1,person52_1)).
example(87,neg,advisedby(person416_1,person52_1)).
example(88,neg,advisedby(person348_1,person52_1)).
example(89,neg,advisedby(person278_1,person52_1)).
example(90,neg,advisedby(person6_1,person52_1)).
example(91,neg,advisedby(person75_1,person52_1)).
example(92,neg,advisedby(person249_1,person52_1)).
example(93,neg,advisedby(person68_1,person52_1)).
example(94,neg,advisedby(person205_1,person52_1)).
example(95,neg,advisedby(person182_1,person52_1)).
example(96,neg,advisedby(person23_1,person52_1)).
example(97,neg,advisedby(person310_1,person52_1)).
example(98,neg,advisedby(person424_1,person52_1)).
example(99,neg,advisedby(person401_1,person52_1)).
example(100,neg,advisedby(person237_1,person52_1)).
example(101,neg,advisedby(person58_1,person52_1)).
example(102,neg,advisedby(person144_1,person52_1)).
example(103,neg,advisedby(person125_1,person52_1)).
example(104,neg,advisedby(person350_1,person52_1)).
example(105,neg,advisedby(person356_1,person52_1)).
example(106,neg,advisedby(person294_1,person52_1)).
example(107,neg,advisedby(person315_1,person52_1)).
example(108,neg,advisedby(person191_1,person57_1)).
example(109,neg,advisedby(person397_1,person57_1)).
example(110,neg,advisedby(person138_1,person57_1)).
example(111,neg,advisedby(person303_1,person57_1)).
example(112,neg,advisedby(person77_1,person57_1)).
example(113,neg,advisedby(person141_1,person57_1)).
example(114,neg,advisedby(person309_1,person57_1)).
example(115,neg,advisedby(person383_1,person57_1)).
example(116,neg,advisedby(person422_1,person57_1)).
example(117,neg,advisedby(person390_1,person57_1)).
example(118,neg,advisedby(person288_1,person57_1)).
example(119,neg,advisedby(person172_1,person57_1)).
example(120,neg,advisedby(person226_1,person57_1)).
example(121,neg,advisedby(person242_1,person57_1)).
example(122,neg,advisedby(person416_1,person57_1)).
example(123,neg,advisedby(person348_1,person57_1)).
example(124,neg,advisedby(person278_1,person57_1)).
example(125,neg,advisedby(person6_1,person57_1)).
example(126,neg,advisedby(person75_1,person57_1)).
example(127,neg,advisedby(person249_1,person57_1)).
example(128,neg,advisedby(person68_1,person57_1)).
example(129,neg,advisedby(person205_1,person57_1)).
example(130,neg,advisedby(person182_1,person57_1)).
example(131,neg,advisedby(person23_1,person57_1)).
example(132,neg,advisedby(person310_1,person57_1)).
example(133,neg,advisedby(person424_1,person57_1)).
example(134,neg,advisedby(person401_1,person57_1)).
example(135,neg,advisedby(person237_1,person57_1)).
example(136,neg,advisedby(person58_1,person57_1)).
example(137,neg,advisedby(person144_1,person57_1)).
example(138,neg,advisedby(person125_1,person57_1)).
example(139,neg,advisedby(person350_1,person57_1)).
example(140,neg,advisedby(person356_1,person57_1)).
example(141,neg,advisedby(person294_1,person57_1)).
example(142,neg,advisedby(person315_1,person57_1)).
example(143,neg,advisedby(person191_1,person231_1)).
example(144,neg,advisedby(person397_1,person231_1)).
example(145,neg,advisedby(person138_1,person231_1)).
example(146,neg,advisedby(person303_1,person231_1)).
example(147,neg,advisedby(person77_1,person231_1)).
example(148,neg,advisedby(person141_1,person231_1)).
example(149,neg,advisedby(person309_1,person231_1)).
example(150,neg,advisedby(person383_1,person231_1)).
example(151,neg,advisedby(person422_1,person231_1)).
example(152,neg,advisedby(person390_1,person231_1)).
example(153,neg,advisedby(person288_1,person231_1)).
example(154,neg,advisedby(person159_1,person231_1)).
example(155,neg,advisedby(person172_1,person231_1)).
example(156,neg,advisedby(person226_1,person231_1)).
example(157,neg,advisedby(person242_1,person231_1)).
example(158,neg,advisedby(person416_1,person231_1)).
example(159,neg,advisedby(person348_1,person231_1)).
example(160,neg,advisedby(person278_1,person231_1)).
example(161,neg,advisedby(person6_1,person231_1)).
example(162,neg,advisedby(person75_1,person231_1)).
example(163,neg,advisedby(person249_1,person231_1)).
example(164,neg,advisedby(person68_1,person231_1)).
example(165,neg,advisedby(person205_1,person231_1)).
example(166,neg,advisedby(person182_1,person231_1)).
example(167,neg,advisedby(person23_1,person231_1)).
example(168,neg,advisedby(person310_1,person231_1)).
example(169,neg,advisedby(person424_1,person231_1)).
example(170,neg,advisedby(person401_1,person231_1)).
example(171,neg,advisedby(person237_1,person231_1)).
example(172,neg,advisedby(person58_1,person231_1)).
example(173,neg,advisedby(person144_1,person231_1)).
example(174,neg,advisedby(person125_1,person231_1)).
example(175,neg,advisedby(person350_1,person231_1)).
example(176,neg,advisedby(person356_1,person231_1)).
example(177,neg,advisedby(person294_1,person231_1)).
example(178,neg,advisedby(person315_1,person231_1)).
example(179,neg,advisedby(person191_1,person181_1)).
example(180,neg,advisedby(person397_1,person181_1)).
example(181,neg,advisedby(person138_1,person181_1)).
example(182,neg,advisedby(person303_1,person181_1)).
example(183,neg,advisedby(person77_1,person181_1)).
example(184,neg,advisedby(person141_1,person181_1)).
example(185,neg,advisedby(person309_1,person181_1)).
example(186,neg,advisedby(person383_1,person181_1)).
example(187,neg,advisedby(person422_1,person181_1)).
example(188,neg,advisedby(person390_1,person181_1)).
example(189,neg,advisedby(person288_1,person181_1)).
example(190,neg,advisedby(person159_1,person181_1)).
example(191,neg,advisedby(person172_1,person181_1)).
example(192,neg,advisedby(person226_1,person181_1)).
example(193,neg,advisedby(person242_1,person181_1)).
example(194,neg,advisedby(person416_1,person181_1)).
example(195,neg,advisedby(person348_1,person181_1)).
example(196,neg,advisedby(person278_1,person181_1)).
example(197,neg,advisedby(person6_1,person181_1)).
example(198,neg,advisedby(person75_1,person181_1)).
example(199,neg,advisedby(person249_1,person181_1)).
example(200,neg,advisedby(person68_1,person181_1)).
example(201,neg,advisedby(person205_1,person181_1)).
example(202,neg,advisedby(person182_1,person181_1)).
example(203,neg,advisedby(person23_1,person181_1)).
example(204,neg,advisedby(person310_1,person181_1)).
example(205,neg,advisedby(person424_1,person181_1)).
example(206,neg,advisedby(person401_1,person181_1)).
example(207,neg,advisedby(person237_1,person181_1)).
example(208,neg,advisedby(person58_1,person181_1)).
example(209,neg,advisedby(person144_1,person181_1)).
example(210,neg,advisedby(person125_1,person181_1)).
example(211,neg,advisedby(person350_1,person181_1)).
example(212,neg,advisedby(person356_1,person181_1)).
example(213,neg,advisedby(person294_1,person181_1)).
example(214,neg,advisedby(person315_1,person181_1)).
example(215,neg,advisedby(person191_1,person364_1)).
example(216,neg,advisedby(person397_1,person364_1)).
example(217,neg,advisedby(person138_1,person364_1)).
example(218,neg,advisedby(person303_1,person364_1)).
example(219,neg,advisedby(person77_1,person364_1)).
example(220,neg,advisedby(person141_1,person364_1)).
example(221,neg,advisedby(person309_1,person364_1)).
example(222,neg,advisedby(person383_1,person364_1)).
example(223,neg,advisedby(person422_1,person364_1)).
example(224,neg,advisedby(person390_1,person364_1)).
example(225,neg,advisedby(person288_1,person364_1)).
example(226,neg,advisedby(person159_1,person364_1)).
example(227,neg,advisedby(person172_1,person364_1)).
example(228,neg,advisedby(person226_1,person364_1)).
example(229,neg,advisedby(person242_1,person364_1)).
example(230,neg,advisedby(person416_1,person364_1)).
example(231,neg,advisedby(person348_1,person364_1)).
example(232,neg,advisedby(person278_1,person364_1)).
example(233,neg,advisedby(person6_1,person364_1)).
example(234,neg,advisedby(person75_1,person364_1)).
example(235,neg,advisedby(person249_1,person364_1)).
example(236,neg,advisedby(person68_1,person364_1)).
example(237,neg,advisedby(person205_1,person364_1)).
example(238,neg,advisedby(person182_1,person364_1)).
example(239,neg,advisedby(person23_1,person364_1)).
example(240,neg,advisedby(person310_1,person364_1)).
example(241,neg,advisedby(person424_1,person364_1)).
example(242,neg,advisedby(person401_1,person364_1)).
example(243,neg,advisedby(person237_1,person364_1)).
example(244,neg,advisedby(person58_1,person364_1)).
example(245,neg,advisedby(person144_1,person364_1)).
example(246,neg,advisedby(person125_1,person364_1)).
example(247,neg,advisedby(person350_1,person364_1)).
example(248,neg,advisedby(person356_1,person364_1)).
example(249,neg,advisedby(person294_1,person364_1)).
example(250,neg,advisedby(person315_1,person364_1)).
example(251,neg,advisedby(person191_1,person331_1)).
example(252,neg,advisedby(person397_1,person331_1)).
example(253,neg,advisedby(person138_1,person331_1)).
example(254,neg,advisedby(person303_1,person331_1)).
example(255,neg,advisedby(person77_1,person331_1)).
example(256,neg,advisedby(person309_1,person331_1)).
example(257,neg,advisedby(person383_1,person331_1)).
example(258,neg,advisedby(person422_1,person331_1)).
example(259,neg,advisedby(person390_1,person331_1)).
example(260,neg,advisedby(person288_1,person331_1)).
example(261,neg,advisedby(person159_1,person331_1)).
example(262,neg,advisedby(person172_1,person331_1)).
example(263,neg,advisedby(person226_1,person331_1)).
example(264,neg,advisedby(person242_1,person331_1)).
example(265,neg,advisedby(person416_1,person331_1)).
example(266,neg,advisedby(person348_1,person331_1)).
example(267,neg,advisedby(person278_1,person331_1)).
example(268,neg,advisedby(person6_1,person331_1)).
example(269,neg,advisedby(person68_1,person331_1)).
example(270,neg,advisedby(person205_1,person331_1)).
example(271,neg,advisedby(person182_1,person331_1)).
example(272,neg,advisedby(person23_1,person331_1)).
example(273,neg,advisedby(person310_1,person331_1)).
example(274,neg,advisedby(person424_1,person331_1)).
example(275,neg,advisedby(person401_1,person331_1)).
example(276,neg,advisedby(person237_1,person331_1)).
example(277,neg,advisedby(person58_1,person331_1)).
example(278,neg,advisedby(person144_1,person331_1)).
example(279,neg,advisedby(person125_1,person331_1)).
example(280,neg,advisedby(person350_1,person331_1)).
example(281,neg,advisedby(person356_1,person331_1)).
example(282,neg,advisedby(person294_1,person331_1)).
example(283,neg,advisedby(person315_1,person331_1)).
example(284,neg,advisedby(person191_1,person103_1)).
example(285,neg,advisedby(person397_1,person103_1)).
example(286,neg,advisedby(person138_1,person103_1)).
example(287,neg,advisedby(person303_1,person103_1)).
example(288,neg,advisedby(person77_1,person103_1)).
example(289,neg,advisedby(person141_1,person103_1)).
example(290,neg,advisedby(person309_1,person103_1)).
example(291,neg,advisedby(person383_1,person103_1)).
example(292,neg,advisedby(person422_1,person103_1)).
example(293,neg,advisedby(person390_1,person103_1)).
example(294,neg,advisedby(person288_1,person103_1)).
example(295,neg,advisedby(person159_1,person103_1)).
example(296,neg,advisedby(person172_1,person103_1)).
example(297,neg,advisedby(person226_1,person103_1)).
example(298,neg,advisedby(person242_1,person103_1)).
example(299,neg,advisedby(person416_1,person103_1)).
example(300,neg,advisedby(person348_1,person103_1)).
example(301,neg,advisedby(person278_1,person103_1)).
example(302,neg,advisedby(person6_1,person103_1)).
example(303,neg,advisedby(person75_1,person103_1)).
example(304,neg,advisedby(person249_1,person103_1)).
example(305,neg,advisedby(person68_1,person103_1)).
example(306,neg,advisedby(person205_1,person103_1)).
example(307,neg,advisedby(person182_1,person103_1)).
example(308,neg,advisedby(person23_1,person103_1)).
example(309,neg,advisedby(person310_1,person103_1)).
example(310,neg,advisedby(person424_1,person103_1)).
example(311,neg,advisedby(person401_1,person103_1)).
example(312,neg,advisedby(person237_1,person103_1)).
example(313,neg,advisedby(person58_1,person103_1)).
example(314,neg,advisedby(person144_1,person103_1)).
example(315,neg,advisedby(person125_1,person103_1)).
example(316,neg,advisedby(person350_1,person103_1)).
example(317,neg,advisedby(person356_1,person103_1)).
example(318,neg,advisedby(person294_1,person103_1)).
example(319,neg,advisedby(person315_1,person103_1)).
example(320,neg,advisedby(person191_1,person165_1)).
example(321,neg,advisedby(person397_1,person165_1)).
example(322,neg,advisedby(person138_1,person165_1)).
example(323,neg,advisedby(person77_1,person165_1)).
example(324,neg,advisedby(person141_1,person165_1)).
example(325,neg,advisedby(person309_1,person165_1)).
example(326,neg,advisedby(person383_1,person165_1)).
example(327,neg,advisedby(person422_1,person165_1)).
example(328,neg,advisedby(person390_1,person165_1)).
example(329,neg,advisedby(person159_1,person165_1)).
example(330,neg,advisedby(person172_1,person165_1)).
example(331,neg,advisedby(person226_1,person165_1)).
example(332,neg,advisedby(person416_1,person165_1)).
example(333,neg,advisedby(person348_1,person165_1)).
example(334,neg,advisedby(person278_1,person165_1)).
example(335,neg,advisedby(person75_1,person165_1)).
example(336,neg,advisedby(person249_1,person165_1)).
example(337,neg,advisedby(person68_1,person165_1)).
example(338,neg,advisedby(person205_1,person165_1)).
example(339,neg,advisedby(person182_1,person165_1)).
example(340,neg,advisedby(person23_1,person165_1)).
example(341,neg,advisedby(person310_1,person165_1)).
example(342,neg,advisedby(person424_1,person165_1)).
example(343,neg,advisedby(person401_1,person165_1)).
example(344,neg,advisedby(person237_1,person165_1)).
example(345,neg,advisedby(person58_1,person165_1)).
example(346,neg,advisedby(person144_1,person165_1)).
example(347,neg,advisedby(person125_1,person165_1)).
example(348,neg,advisedby(person350_1,person165_1)).
example(349,neg,advisedby(person356_1,person165_1)).
example(350,neg,advisedby(person294_1,person165_1)).
example(351,neg,advisedby(person315_1,person165_1)).
example(352,neg,advisedby(person191_1,person29_1)).
example(353,neg,advisedby(person397_1,person29_1)).
example(354,neg,advisedby(person138_1,person29_1)).
example(355,neg,advisedby(person77_1,person29_1)).
example(356,neg,advisedby(person141_1,person29_1)).
example(357,neg,advisedby(person309_1,person29_1)).
example(358,neg,advisedby(person383_1,person29_1)).
example(359,neg,advisedby(person422_1,person29_1)).
example(360,neg,advisedby(person390_1,person29_1)).
example(361,neg,advisedby(person288_1,person29_1)).
example(362,neg,advisedby(person159_1,person29_1)).
example(363,neg,advisedby(person172_1,person29_1)).
example(364,neg,advisedby(person226_1,person29_1)).
example(365,neg,advisedby(person416_1,person29_1)).
example(366,neg,advisedby(person348_1,person29_1)).
example(367,neg,advisedby(person278_1,person29_1)).
example(368,neg,advisedby(person75_1,person29_1)).
example(369,neg,advisedby(person249_1,person29_1)).
example(370,neg,advisedby(person68_1,person29_1)).
example(371,neg,advisedby(person205_1,person29_1)).
example(372,neg,advisedby(person182_1,person29_1)).
example(373,neg,advisedby(person23_1,person29_1)).
example(374,neg,advisedby(person310_1,person29_1)).
example(375,neg,advisedby(person424_1,person29_1)).
example(376,neg,advisedby(person401_1,person29_1)).
example(377,neg,advisedby(person237_1,person29_1)).
example(378,neg,advisedby(person58_1,person29_1)).
example(379,neg,advisedby(person144_1,person29_1)).
example(380,neg,advisedby(person125_1,person29_1)).
example(381,neg,advisedby(person350_1,person29_1)).
example(382,neg,advisedby(person356_1,person29_1)).
example(383,neg,advisedby(person294_1,person29_1)).
example(384,neg,advisedby(person315_1,person29_1)).
example(385,neg,advisedby(person191_1,person201_1)).
example(386,neg,advisedby(person397_1,person201_1)).
example(387,neg,advisedby(person138_1,person201_1)).
example(388,neg,advisedby(person303_1,person201_1)).
example(389,neg,advisedby(person77_1,person201_1)).
example(390,neg,advisedby(person141_1,person201_1)).
example(391,neg,advisedby(person309_1,person201_1)).
example(392,neg,advisedby(person383_1,person201_1)).
example(393,neg,advisedby(person422_1,person201_1)).
example(394,neg,advisedby(person390_1,person201_1)).
example(395,neg,advisedby(person288_1,person201_1)).
example(396,neg,advisedby(person172_1,person201_1)).
example(397,neg,advisedby(person226_1,person201_1)).
example(398,neg,advisedby(person242_1,person201_1)).
example(399,neg,advisedby(person416_1,person201_1)).
example(400,neg,advisedby(person348_1,person201_1)).
example(401,neg,advisedby(person278_1,person201_1)).
example(402,neg,advisedby(person6_1,person201_1)).
example(403,neg,advisedby(person75_1,person201_1)).
example(404,neg,advisedby(person249_1,person201_1)).
example(405,neg,advisedby(person205_1,person201_1)).
example(406,neg,advisedby(person182_1,person201_1)).
example(407,neg,advisedby(person23_1,person201_1)).
example(408,neg,advisedby(person310_1,person201_1)).
example(409,neg,advisedby(person424_1,person201_1)).
example(410,neg,advisedby(person401_1,person201_1)).
example(411,neg,advisedby(person237_1,person201_1)).
example(412,neg,advisedby(person58_1,person201_1)).
example(413,neg,advisedby(person144_1,person201_1)).
example(414,neg,advisedby(person125_1,person201_1)).
example(415,neg,advisedby(person350_1,person201_1)).
example(416,neg,advisedby(person356_1,person201_1)).
example(417,neg,advisedby(person294_1,person201_1)).
example(418,neg,advisedby(person315_1,person201_1)).
example(419,neg,advisedby(person191_1,person324_1)).
example(420,neg,advisedby(person397_1,person324_1)).
example(421,neg,advisedby(person138_1,person324_1)).
example(422,neg,advisedby(person303_1,person324_1)).
example(423,neg,advisedby(person77_1,person324_1)).
example(424,neg,advisedby(person141_1,person324_1)).
example(425,neg,advisedby(person309_1,person324_1)).
example(426,neg,advisedby(person383_1,person324_1)).
example(427,neg,advisedby(person422_1,person324_1)).
example(428,neg,advisedby(person390_1,person324_1)).
example(429,neg,advisedby(person288_1,person324_1)).
example(430,neg,advisedby(person159_1,person324_1)).
example(431,neg,advisedby(person172_1,person324_1)).
example(432,neg,advisedby(person242_1,person324_1)).
example(433,neg,advisedby(person416_1,person324_1)).
example(434,neg,advisedby(person278_1,person324_1)).
example(435,neg,advisedby(person6_1,person324_1)).
example(436,neg,advisedby(person75_1,person324_1)).
example(437,neg,advisedby(person249_1,person324_1)).
example(438,neg,advisedby(person68_1,person324_1)).
example(439,neg,advisedby(person205_1,person324_1)).
example(440,neg,advisedby(person182_1,person324_1)).
example(441,neg,advisedby(person23_1,person324_1)).
example(442,neg,advisedby(person310_1,person324_1)).
example(443,neg,advisedby(person424_1,person324_1)).
example(444,neg,advisedby(person401_1,person324_1)).
example(445,neg,advisedby(person237_1,person324_1)).
example(446,neg,advisedby(person58_1,person324_1)).
example(447,neg,advisedby(person144_1,person324_1)).
example(448,neg,advisedby(person125_1,person324_1)).
example(449,neg,advisedby(person350_1,person324_1)).
example(450,neg,advisedby(person356_1,person324_1)).
example(451,neg,advisedby(person294_1,person324_1)).
example(452,neg,advisedby(person315_1,person324_1)).
example(453,neg,advisedby(person284_1,person319_1)).
example(454,neg,advisedby(person311_1,person319_1)).
example(455,neg,advisedby(person14_1,person319_1)).
example(456,neg,advisedby(person275_1,person319_1)).
example(457,neg,advisedby(person259_1,person319_1)).
example(458,neg,advisedby(person139_1,person319_1)).
example(459,neg,advisedby(person176_1,person319_1)).
example(460,neg,advisedby(person400_1,person319_1)).
example(461,neg,advisedby(person161_1,person319_1)).
example(462,neg,advisedby(person347_1,person319_1)).
example(463,neg,advisedby(person408_1,person319_1)).
example(464,neg,advisedby(person265_1,person319_1)).
example(465,neg,advisedby(person70_1,person319_1)).
example(466,neg,advisedby(person381_1,person319_1)).
example(467,neg,advisedby(person382_1,person319_1)).
example(468,neg,advisedby(person333_1,person319_1)).
example(469,neg,advisedby(person94_1,person319_1)).
example(470,neg,advisedby(person272_1,person319_1)).
example(471,neg,advisedby(person37_1,person319_1)).
example(472,neg,advisedby(person432_1,person319_1)).
example(473,neg,advisedby(person377_1,person319_1)).
example(474,neg,advisedby(person239_1,person319_1)).
example(475,neg,advisedby(person13_1,person319_1)).
example(476,neg,advisedby(person286_1,person319_1)).
example(477,neg,advisedby(person412_1,person319_1)).
example(478,neg,advisedby(person418_1,person319_1)).
example(479,neg,advisedby(person320_1,person319_1)).
example(480,neg,advisedby(person42_1,person319_1)).
example(481,neg,advisedby(person20_1,person319_1)).
example(482,neg,advisedby(person352_1,person319_1)).
example(483,neg,advisedby(person276_1,person319_1)).
example(484,neg,advisedby(person45_1,person319_1)).
example(485,neg,advisedby(person233_1,person319_1)).
example(486,neg,advisedby(person148_1,person319_1)).
example(487,neg,advisedby(person193_1,person319_1)).
example(488,neg,advisedby(person314_1,person319_1)).
example(489,neg,advisedby(person21_1,person319_1)).
example(490,neg,advisedby(person262_1,person319_1)).
example(491,neg,advisedby(person257_1,person319_1)).
example(492,neg,advisedby(person73_1,person319_1)).
example(493,neg,advisedby(person380_1,person319_1)).
example(494,neg,advisedby(person384_1,person319_1)).
example(495,neg,advisedby(person406_1,person319_1)).
example(496,neg,advisedby(person266_1,person319_1)).
example(497,neg,advisedby(person63_1,person319_1)).
example(498,neg,advisedby(person83_1,person319_1)).
example(499,neg,advisedby(person271_1,person319_1)).
example(500,neg,advisedby(person392_1,person319_1)).
example(501,neg,advisedby(person420_1,person319_1)).
example(502,neg,advisedby(person86_1,person319_1)).
example(503,neg,advisedby(person284_1,person292_1)).
example(504,neg,advisedby(person311_1,person292_1)).
example(505,neg,advisedby(person14_1,person292_1)).
example(506,neg,advisedby(person275_1,person292_1)).
example(507,neg,advisedby(person259_1,person292_1)).
example(508,neg,advisedby(person139_1,person292_1)).
example(509,neg,advisedby(person176_1,person292_1)).
example(510,neg,advisedby(person400_1,person292_1)).
example(511,neg,advisedby(person318_1,person292_1)).
example(512,neg,advisedby(person161_1,person292_1)).
example(513,neg,advisedby(person347_1,person292_1)).
example(514,neg,advisedby(person408_1,person292_1)).
example(515,neg,advisedby(person265_1,person292_1)).
example(516,neg,advisedby(person70_1,person292_1)).
example(517,neg,advisedby(person381_1,person292_1)).
example(518,neg,advisedby(person382_1,person292_1)).
example(519,neg,advisedby(person333_1,person292_1)).
example(520,neg,advisedby(person94_1,person292_1)).
example(521,neg,advisedby(person272_1,person292_1)).
example(522,neg,advisedby(person37_1,person292_1)).
example(523,neg,advisedby(person353_1,person292_1)).
example(524,neg,advisedby(person432_1,person292_1)).
example(525,neg,advisedby(person377_1,person292_1)).
example(526,neg,advisedby(person239_1,person292_1)).
example(527,neg,advisedby(person13_1,person292_1)).
example(528,neg,advisedby(person286_1,person292_1)).
example(529,neg,advisedby(person412_1,person292_1)).
example(530,neg,advisedby(person418_1,person292_1)).
example(531,neg,advisedby(person320_1,person292_1)).
example(532,neg,advisedby(person42_1,person292_1)).
example(533,neg,advisedby(person20_1,person292_1)).
example(534,neg,advisedby(person276_1,person292_1)).
example(535,neg,advisedby(person45_1,person292_1)).
example(536,neg,advisedby(person233_1,person292_1)).
example(537,neg,advisedby(person148_1,person292_1)).
example(538,neg,advisedby(person193_1,person292_1)).
example(539,neg,advisedby(person314_1,person292_1)).
example(540,neg,advisedby(person21_1,person292_1)).
example(541,neg,advisedby(person257_1,person292_1)).
example(542,neg,advisedby(person73_1,person292_1)).
example(543,neg,advisedby(person380_1,person292_1)).
example(544,neg,advisedby(person384_1,person292_1)).
example(545,neg,advisedby(person406_1,person292_1)).
example(546,neg,advisedby(person266_1,person292_1)).
example(547,neg,advisedby(person312_1,person292_1)).
example(548,neg,advisedby(person208_1,person292_1)).
example(549,neg,advisedby(person63_1,person292_1)).
example(550,neg,advisedby(person83_1,person292_1)).
example(551,neg,advisedby(person271_1,person292_1)).
example(552,neg,advisedby(person392_1,person292_1)).
example(553,neg,advisedby(person420_1,person292_1)).
example(554,neg,advisedby(person86_1,person292_1)).
example(555,neg,advisedby(person284_1,person293_1)).
example(556,neg,advisedby(person311_1,person293_1)).
example(557,neg,advisedby(person14_1,person293_1)).
example(558,neg,advisedby(person275_1,person293_1)).
example(559,neg,advisedby(person259_1,person293_1)).
example(560,neg,advisedby(person139_1,person293_1)).
example(561,neg,advisedby(person176_1,person293_1)).
example(562,neg,advisedby(person400_1,person293_1)).
example(563,neg,advisedby(person318_1,person293_1)).
example(564,neg,advisedby(person161_1,person293_1)).
example(565,neg,advisedby(person347_1,person293_1)).
example(566,neg,advisedby(person408_1,person293_1)).
example(567,neg,advisedby(person265_1,person293_1)).
example(568,neg,advisedby(person70_1,person293_1)).
example(569,neg,advisedby(person381_1,person293_1)).
example(570,neg,advisedby(person382_1,person293_1)).
example(571,neg,advisedby(person333_1,person293_1)).
example(572,neg,advisedby(person94_1,person293_1)).
example(573,neg,advisedby(person272_1,person293_1)).
example(574,neg,advisedby(person37_1,person293_1)).
example(575,neg,advisedby(person353_1,person293_1)).
example(576,neg,advisedby(person432_1,person293_1)).
example(577,neg,advisedby(person377_1,person293_1)).
example(578,neg,advisedby(person239_1,person293_1)).
example(579,neg,advisedby(person13_1,person293_1)).
example(580,neg,advisedby(person286_1,person293_1)).
example(581,neg,advisedby(person412_1,person293_1)).
example(582,neg,advisedby(person418_1,person293_1)).
example(583,neg,advisedby(person320_1,person293_1)).
example(584,neg,advisedby(person42_1,person293_1)).
example(585,neg,advisedby(person20_1,person293_1)).
example(586,neg,advisedby(person352_1,person293_1)).
example(587,neg,advisedby(person276_1,person293_1)).
example(588,neg,advisedby(person45_1,person293_1)).
example(589,neg,advisedby(person233_1,person293_1)).
example(590,neg,advisedby(person148_1,person293_1)).
example(591,neg,advisedby(person193_1,person293_1)).
example(592,neg,advisedby(person314_1,person293_1)).
example(593,neg,advisedby(person21_1,person293_1)).
example(594,neg,advisedby(person262_1,person293_1)).
example(595,neg,advisedby(person257_1,person293_1)).
example(596,neg,advisedby(person73_1,person293_1)).
example(597,neg,advisedby(person380_1,person293_1)).
example(598,neg,advisedby(person384_1,person293_1)).
example(599,neg,advisedby(person406_1,person293_1)).
example(600,neg,advisedby(person266_1,person293_1)).
example(601,neg,advisedby(person312_1,person293_1)).
example(602,neg,advisedby(person208_1,person293_1)).
example(603,neg,advisedby(person63_1,person293_1)).
example(604,neg,advisedby(person83_1,person293_1)).
example(605,neg,advisedby(person271_1,person293_1)).
example(606,neg,advisedby(person392_1,person293_1)).
example(607,neg,advisedby(person420_1,person293_1)).
example(608,neg,advisedby(person86_1,person293_1)).
example(609,neg,advisedby(person284_1,person240_1)).
example(610,neg,advisedby(person311_1,person240_1)).
example(611,neg,advisedby(person14_1,person240_1)).
example(612,neg,advisedby(person275_1,person240_1)).
example(613,neg,advisedby(person259_1,person240_1)).
example(614,neg,advisedby(person139_1,person240_1)).
example(615,neg,advisedby(person176_1,person240_1)).
example(616,neg,advisedby(person400_1,person240_1)).
example(617,neg,advisedby(person318_1,person240_1)).
example(618,neg,advisedby(person161_1,person240_1)).
example(619,neg,advisedby(person347_1,person240_1)).
example(620,neg,advisedby(person408_1,person240_1)).
example(621,neg,advisedby(person265_1,person240_1)).
example(622,neg,advisedby(person70_1,person240_1)).
example(623,neg,advisedby(person381_1,person240_1)).
example(624,neg,advisedby(person382_1,person240_1)).
example(625,neg,advisedby(person333_1,person240_1)).
example(626,neg,advisedby(person94_1,person240_1)).
example(627,neg,advisedby(person272_1,person240_1)).
example(628,neg,advisedby(person37_1,person240_1)).
example(629,neg,advisedby(person353_1,person240_1)).
example(630,neg,advisedby(person377_1,person240_1)).
example(631,neg,advisedby(person239_1,person240_1)).
example(632,neg,advisedby(person286_1,person240_1)).
example(633,neg,advisedby(person412_1,person240_1)).
example(634,neg,advisedby(person418_1,person240_1)).
example(635,neg,advisedby(person320_1,person240_1)).
example(636,neg,advisedby(person42_1,person240_1)).
example(637,neg,advisedby(person20_1,person240_1)).
example(638,neg,advisedby(person352_1,person240_1)).
example(639,neg,advisedby(person276_1,person240_1)).
example(640,neg,advisedby(person45_1,person240_1)).
example(641,neg,advisedby(person233_1,person240_1)).
example(642,neg,advisedby(person148_1,person240_1)).
example(643,neg,advisedby(person193_1,person240_1)).
example(644,neg,advisedby(person314_1,person240_1)).
example(645,neg,advisedby(person21_1,person240_1)).
example(646,neg,advisedby(person262_1,person240_1)).
example(647,neg,advisedby(person73_1,person240_1)).
example(648,neg,advisedby(person380_1,person240_1)).
example(649,neg,advisedby(person406_1,person240_1)).
example(650,neg,advisedby(person266_1,person240_1)).
example(651,neg,advisedby(person312_1,person240_1)).
example(652,neg,advisedby(person208_1,person240_1)).
example(653,neg,advisedby(person63_1,person240_1)).
example(654,neg,advisedby(person83_1,person240_1)).
example(655,neg,advisedby(person271_1,person240_1)).
example(656,neg,advisedby(person392_1,person240_1)).
example(657,neg,advisedby(person420_1,person240_1)).
example(658,neg,advisedby(person86_1,person240_1)).
example(659,neg,advisedby(person284_1,person211_1)).
example(660,neg,advisedby(person311_1,person211_1)).
example(661,neg,advisedby(person14_1,person211_1)).
example(662,neg,advisedby(person275_1,person211_1)).
example(663,neg,advisedby(person259_1,person211_1)).
example(664,neg,advisedby(person139_1,person211_1)).
example(665,neg,advisedby(person176_1,person211_1)).
example(666,neg,advisedby(person400_1,person211_1)).
example(667,neg,advisedby(person318_1,person211_1)).
example(668,neg,advisedby(person161_1,person211_1)).
example(669,neg,advisedby(person347_1,person211_1)).
example(670,neg,advisedby(person408_1,person211_1)).
example(671,neg,advisedby(person265_1,person211_1)).
example(672,neg,advisedby(person70_1,person211_1)).
example(673,neg,advisedby(person381_1,person211_1)).
example(674,neg,advisedby(person382_1,person211_1)).
example(675,neg,advisedby(person333_1,person211_1)).
example(676,neg,advisedby(person94_1,person211_1)).
example(677,neg,advisedby(person272_1,person211_1)).
example(678,neg,advisedby(person37_1,person211_1)).
example(679,neg,advisedby(person353_1,person211_1)).
example(680,neg,advisedby(person432_1,person211_1)).
example(681,neg,advisedby(person377_1,person211_1)).
example(682,neg,advisedby(person239_1,person211_1)).
example(683,neg,advisedby(person13_1,person211_1)).
example(684,neg,advisedby(person286_1,person211_1)).
example(685,neg,advisedby(person412_1,person211_1)).
example(686,neg,advisedby(person418_1,person211_1)).
example(687,neg,advisedby(person320_1,person211_1)).
example(688,neg,advisedby(person42_1,person211_1)).
example(689,neg,advisedby(person20_1,person211_1)).
example(690,neg,advisedby(person352_1,person211_1)).
example(691,neg,advisedby(person276_1,person211_1)).
example(692,neg,advisedby(person233_1,person211_1)).
example(693,neg,advisedby(person148_1,person211_1)).
example(694,neg,advisedby(person193_1,person211_1)).
example(695,neg,advisedby(person314_1,person211_1)).
example(696,neg,advisedby(person262_1,person211_1)).
example(697,neg,advisedby(person257_1,person211_1)).
example(698,neg,advisedby(person73_1,person211_1)).
example(699,neg,advisedby(person380_1,person211_1)).
example(700,neg,advisedby(person384_1,person211_1)).
example(701,neg,advisedby(person406_1,person211_1)).
example(702,neg,advisedby(person266_1,person211_1)).
example(703,neg,advisedby(person312_1,person211_1)).
example(704,neg,advisedby(person208_1,person211_1)).
example(705,neg,advisedby(person63_1,person211_1)).
example(706,neg,advisedby(person83_1,person211_1)).
example(707,neg,advisedby(person271_1,person211_1)).
example(708,neg,advisedby(person392_1,person211_1)).
example(709,neg,advisedby(person420_1,person211_1)).
example(710,neg,advisedby(person86_1,person211_1)).
example(711,neg,advisedby(person284_1,person150_1)).
example(712,neg,advisedby(person311_1,person150_1)).
example(713,neg,advisedby(person275_1,person150_1)).
example(714,neg,advisedby(person259_1,person150_1)).
example(715,neg,advisedby(person139_1,person150_1)).
example(716,neg,advisedby(person176_1,person150_1)).
example(717,neg,advisedby(person400_1,person150_1)).
example(718,neg,advisedby(person318_1,person150_1)).
example(719,neg,advisedby(person161_1,person150_1)).
example(720,neg,advisedby(person347_1,person150_1)).
example(721,neg,advisedby(person408_1,person150_1)).
example(722,neg,advisedby(person265_1,person150_1)).
example(723,neg,advisedby(person70_1,person150_1)).
example(724,neg,advisedby(person381_1,person150_1)).
example(725,neg,advisedby(person382_1,person150_1)).
example(726,neg,advisedby(person333_1,person150_1)).
example(727,neg,advisedby(person94_1,person150_1)).
example(728,neg,advisedby(person272_1,person150_1)).
example(729,neg,advisedby(person37_1,person150_1)).
example(730,neg,advisedby(person353_1,person150_1)).
example(731,neg,advisedby(person432_1,person150_1)).
example(732,neg,advisedby(person377_1,person150_1)).
example(733,neg,advisedby(person239_1,person150_1)).
example(734,neg,advisedby(person13_1,person150_1)).
example(735,neg,advisedby(person286_1,person150_1)).
example(736,neg,advisedby(person412_1,person150_1)).
example(737,neg,advisedby(person418_1,person150_1)).
example(738,neg,advisedby(person42_1,person150_1)).
example(739,neg,advisedby(person20_1,person150_1)).
example(740,neg,advisedby(person352_1,person150_1)).
example(741,neg,advisedby(person276_1,person150_1)).
example(742,neg,advisedby(person45_1,person150_1)).
example(743,neg,advisedby(person233_1,person150_1)).
example(744,neg,advisedby(person148_1,person150_1)).
example(745,neg,advisedby(person193_1,person150_1)).
example(746,neg,advisedby(person314_1,person150_1)).
example(747,neg,advisedby(person21_1,person150_1)).
example(748,neg,advisedby(person262_1,person150_1)).
example(749,neg,advisedby(person257_1,person150_1)).
example(750,neg,advisedby(person73_1,person150_1)).
example(751,neg,advisedby(person380_1,person150_1)).
example(752,neg,advisedby(person384_1,person150_1)).
example(753,neg,advisedby(person406_1,person150_1)).
example(754,neg,advisedby(person266_1,person150_1)).
example(755,neg,advisedby(person312_1,person150_1)).
example(756,neg,advisedby(person208_1,person150_1)).
example(757,neg,advisedby(person63_1,person150_1)).
example(758,neg,advisedby(person83_1,person150_1)).
example(759,neg,advisedby(person271_1,person150_1)).
example(760,neg,advisedby(person392_1,person150_1)).
example(761,neg,advisedby(person420_1,person150_1)).
example(762,neg,advisedby(person86_1,person150_1)).
example(763,neg,advisedby(person284_1,person415_1)).
example(764,neg,advisedby(person311_1,person415_1)).
example(765,neg,advisedby(person14_1,person415_1)).
example(766,neg,advisedby(person275_1,person415_1)).
example(767,neg,advisedby(person259_1,person415_1)).
example(768,neg,advisedby(person139_1,person415_1)).
example(769,neg,advisedby(person176_1,person415_1)).
example(770,neg,advisedby(person400_1,person415_1)).
example(771,neg,advisedby(person318_1,person415_1)).
example(772,neg,advisedby(person161_1,person415_1)).
example(773,neg,advisedby(person347_1,person415_1)).
example(774,neg,advisedby(person408_1,person415_1)).
example(775,neg,advisedby(person265_1,person415_1)).
example(776,neg,advisedby(person70_1,person415_1)).
example(777,neg,advisedby(person381_1,person415_1)).
example(778,neg,advisedby(person382_1,person415_1)).
example(779,neg,advisedby(person333_1,person415_1)).
example(780,neg,advisedby(person94_1,person415_1)).
example(781,neg,advisedby(person272_1,person415_1)).
example(782,neg,advisedby(person37_1,person415_1)).
example(783,neg,advisedby(person353_1,person415_1)).
example(784,neg,advisedby(person432_1,person415_1)).
example(785,neg,advisedby(person377_1,person415_1)).
example(786,neg,advisedby(person239_1,person415_1)).
example(787,neg,advisedby(person13_1,person415_1)).
example(788,neg,advisedby(person286_1,person415_1)).
example(789,neg,advisedby(person412_1,person415_1)).
example(790,neg,advisedby(person418_1,person415_1)).
example(791,neg,advisedby(person320_1,person415_1)).
example(792,neg,advisedby(person42_1,person415_1)).
example(793,neg,advisedby(person20_1,person415_1)).
example(794,neg,advisedby(person276_1,person415_1)).
example(795,neg,advisedby(person233_1,person415_1)).
example(796,neg,advisedby(person148_1,person415_1)).
example(797,neg,advisedby(person193_1,person415_1)).
example(798,neg,advisedby(person21_1,person415_1)).
example(799,neg,advisedby(person257_1,person415_1)).
example(800,neg,advisedby(person73_1,person415_1)).
example(801,neg,advisedby(person380_1,person415_1)).
example(802,neg,advisedby(person384_1,person415_1)).
example(803,neg,advisedby(person406_1,person415_1)).
example(804,neg,advisedby(person266_1,person415_1)).
example(805,neg,advisedby(person312_1,person415_1)).
example(806,neg,advisedby(person208_1,person415_1)).
example(807,neg,advisedby(person83_1,person415_1)).
example(808,neg,advisedby(person271_1,person415_1)).
example(809,neg,advisedby(person392_1,person415_1)).
example(810,neg,advisedby(person420_1,person415_1)).
example(811,neg,advisedby(person86_1,person415_1)).
example(812,neg,advisedby(person284_1,person79_1)).
example(813,neg,advisedby(person311_1,person79_1)).
example(814,neg,advisedby(person14_1,person79_1)).
example(815,neg,advisedby(person259_1,person79_1)).
example(816,neg,advisedby(person139_1,person79_1)).
example(817,neg,advisedby(person176_1,person79_1)).
example(818,neg,advisedby(person400_1,person79_1)).
example(819,neg,advisedby(person318_1,person79_1)).
example(820,neg,advisedby(person161_1,person79_1)).
example(821,neg,advisedby(person347_1,person79_1)).
example(822,neg,advisedby(person408_1,person79_1)).
example(823,neg,advisedby(person265_1,person79_1)).
example(824,neg,advisedby(person70_1,person79_1)).
example(825,neg,advisedby(person381_1,person79_1)).
example(826,neg,advisedby(person382_1,person79_1)).
example(827,neg,advisedby(person333_1,person79_1)).
example(828,neg,advisedby(person94_1,person79_1)).
example(829,neg,advisedby(person272_1,person79_1)).
example(830,neg,advisedby(person353_1,person79_1)).
example(831,neg,advisedby(person432_1,person79_1)).
example(832,neg,advisedby(person377_1,person79_1)).
example(833,neg,advisedby(person239_1,person79_1)).
example(834,neg,advisedby(person13_1,person79_1)).
example(835,neg,advisedby(person286_1,person79_1)).
example(836,neg,advisedby(person412_1,person79_1)).
example(837,neg,advisedby(person418_1,person79_1)).
example(838,neg,advisedby(person320_1,person79_1)).
example(839,neg,advisedby(person42_1,person79_1)).
example(840,neg,advisedby(person20_1,person79_1)).
example(841,neg,advisedby(person352_1,person79_1)).
example(842,neg,advisedby(person276_1,person79_1)).
example(843,neg,advisedby(person45_1,person79_1)).
example(844,neg,advisedby(person233_1,person79_1)).
example(845,neg,advisedby(person148_1,person79_1)).
example(846,neg,advisedby(person193_1,person79_1)).
example(847,neg,advisedby(person314_1,person79_1)).
example(848,neg,advisedby(person21_1,person79_1)).
example(849,neg,advisedby(person262_1,person79_1)).
example(850,neg,advisedby(person257_1,person79_1)).
example(851,neg,advisedby(person73_1,person79_1)).
example(852,neg,advisedby(person384_1,person79_1)).
example(853,neg,advisedby(person406_1,person79_1)).
example(854,neg,advisedby(person266_1,person79_1)).
example(855,neg,advisedby(person312_1,person79_1)).
example(856,neg,advisedby(person208_1,person79_1)).
example(857,neg,advisedby(person63_1,person79_1)).
example(858,neg,advisedby(person83_1,person79_1)).
example(859,neg,advisedby(person271_1,person79_1)).
example(860,neg,advisedby(person392_1,person79_1)).
example(861,neg,advisedby(person420_1,person79_1)).
example(862,neg,advisedby(person86_1,person79_1)).
example(863,neg,advisedby(person284_1,person349_1)).
example(864,neg,advisedby(person311_1,person349_1)).
example(865,neg,advisedby(person14_1,person349_1)).
example(866,neg,advisedby(person275_1,person349_1)).
example(867,neg,advisedby(person259_1,person349_1)).
example(868,neg,advisedby(person139_1,person349_1)).
example(869,neg,advisedby(person176_1,person349_1)).
example(870,neg,advisedby(person400_1,person349_1)).
example(871,neg,advisedby(person318_1,person349_1)).
example(872,neg,advisedby(person161_1,person349_1)).
example(873,neg,advisedby(person347_1,person349_1)).
example(874,neg,advisedby(person408_1,person349_1)).
example(875,neg,advisedby(person265_1,person349_1)).
example(876,neg,advisedby(person70_1,person349_1)).
example(877,neg,advisedby(person381_1,person349_1)).
example(878,neg,advisedby(person382_1,person349_1)).
example(879,neg,advisedby(person333_1,person349_1)).
example(880,neg,advisedby(person94_1,person349_1)).
example(881,neg,advisedby(person272_1,person349_1)).
example(882,neg,advisedby(person37_1,person349_1)).
example(883,neg,advisedby(person353_1,person349_1)).
example(884,neg,advisedby(person432_1,person349_1)).
example(885,neg,advisedby(person377_1,person349_1)).
example(886,neg,advisedby(person239_1,person349_1)).
example(887,neg,advisedby(person13_1,person349_1)).
example(888,neg,advisedby(person286_1,person349_1)).
example(889,neg,advisedby(person412_1,person349_1)).
example(890,neg,advisedby(person418_1,person349_1)).
example(891,neg,advisedby(person320_1,person349_1)).
example(892,neg,advisedby(person42_1,person349_1)).
example(893,neg,advisedby(person20_1,person349_1)).
example(894,neg,advisedby(person352_1,person349_1)).
example(895,neg,advisedby(person276_1,person349_1)).
example(896,neg,advisedby(person45_1,person349_1)).
example(897,neg,advisedby(person233_1,person349_1)).
example(898,neg,advisedby(person148_1,person349_1)).
example(899,neg,advisedby(person193_1,person349_1)).
example(900,neg,advisedby(person314_1,person349_1)).
example(901,neg,advisedby(person21_1,person349_1)).
example(902,neg,advisedby(person262_1,person349_1)).
example(903,neg,advisedby(person257_1,person349_1)).
example(904,neg,advisedby(person73_1,person349_1)).
example(905,neg,advisedby(person380_1,person349_1)).
example(906,neg,advisedby(person384_1,person349_1)).
example(907,neg,advisedby(person406_1,person349_1)).
example(908,neg,advisedby(person266_1,person349_1)).
example(909,neg,advisedby(person312_1,person349_1)).
example(910,neg,advisedby(person208_1,person349_1)).
example(911,neg,advisedby(person63_1,person349_1)).
example(912,neg,advisedby(person271_1,person349_1)).
example(913,neg,advisedby(person392_1,person349_1)).
example(914,neg,advisedby(person420_1,person349_1)).
example(915,neg,advisedby(person86_1,person349_1)).
example(916,neg,advisedby(person284_1,person7_1)).
example(917,neg,advisedby(person311_1,person7_1)).
example(918,neg,advisedby(person14_1,person7_1)).
example(919,neg,advisedby(person275_1,person7_1)).
example(920,neg,advisedby(person259_1,person7_1)).
example(921,neg,advisedby(person139_1,person7_1)).
example(922,neg,advisedby(person176_1,person7_1)).
example(923,neg,advisedby(person400_1,person7_1)).
example(924,neg,advisedby(person318_1,person7_1)).
example(925,neg,advisedby(person161_1,person7_1)).
example(926,neg,advisedby(person347_1,person7_1)).
example(927,neg,advisedby(person408_1,person7_1)).
example(928,neg,advisedby(person265_1,person7_1)).
example(929,neg,advisedby(person70_1,person7_1)).
example(930,neg,advisedby(person381_1,person7_1)).
example(931,neg,advisedby(person382_1,person7_1)).
example(932,neg,advisedby(person333_1,person7_1)).
example(933,neg,advisedby(person94_1,person7_1)).
example(934,neg,advisedby(person37_1,person7_1)).
example(935,neg,advisedby(person353_1,person7_1)).
example(936,neg,advisedby(person432_1,person7_1)).
example(937,neg,advisedby(person377_1,person7_1)).
example(938,neg,advisedby(person239_1,person7_1)).
example(939,neg,advisedby(person13_1,person7_1)).
example(940,neg,advisedby(person286_1,person7_1)).
example(941,neg,advisedby(person412_1,person7_1)).
example(942,neg,advisedby(person418_1,person7_1)).
example(943,neg,advisedby(person320_1,person7_1)).
example(944,neg,advisedby(person42_1,person7_1)).
example(945,neg,advisedby(person20_1,person7_1)).
example(946,neg,advisedby(person352_1,person7_1)).
example(947,neg,advisedby(person276_1,person7_1)).
example(948,neg,advisedby(person45_1,person7_1)).
example(949,neg,advisedby(person233_1,person7_1)).
example(950,neg,advisedby(person148_1,person7_1)).
example(951,neg,advisedby(person193_1,person7_1)).
example(952,neg,advisedby(person314_1,person7_1)).
example(953,neg,advisedby(person21_1,person7_1)).
example(954,neg,advisedby(person262_1,person7_1)).
example(955,neg,advisedby(person257_1,person7_1)).
example(956,neg,advisedby(person73_1,person7_1)).
example(957,neg,advisedby(person380_1,person7_1)).
example(958,neg,advisedby(person384_1,person7_1)).
example(959,neg,advisedby(person406_1,person7_1)).
example(960,neg,advisedby(person312_1,person7_1)).
example(961,neg,advisedby(person208_1,person7_1)).
example(962,neg,advisedby(person63_1,person7_1)).
example(963,neg,advisedby(person83_1,person7_1)).
example(964,neg,advisedby(person271_1,person7_1)).
example(965,neg,advisedby(person392_1,person7_1)).
example(966,neg,advisedby(person420_1,person7_1)).
example(967,neg,advisedby(person86_1,person7_1)).
example(968,neg,advisedby(person284_1,person185_1)).
example(969,neg,advisedby(person311_1,person185_1)).
example(970,neg,advisedby(person14_1,person185_1)).
example(971,neg,advisedby(person275_1,person185_1)).
example(972,neg,advisedby(person259_1,person185_1)).
example(973,neg,advisedby(person139_1,person185_1)).
example(974,neg,advisedby(person176_1,person185_1)).
example(975,neg,advisedby(person400_1,person185_1)).
example(976,neg,advisedby(person161_1,person185_1)).
example(977,neg,advisedby(person347_1,person185_1)).
example(978,neg,advisedby(person408_1,person185_1)).
example(979,neg,advisedby(person265_1,person185_1)).
example(980,neg,advisedby(person70_1,person185_1)).
example(981,neg,advisedby(person381_1,person185_1)).
example(982,neg,advisedby(person382_1,person185_1)).
example(983,neg,advisedby(person333_1,person185_1)).
example(984,neg,advisedby(person94_1,person185_1)).
example(985,neg,advisedby(person272_1,person185_1)).
example(986,neg,advisedby(person37_1,person185_1)).
example(987,neg,advisedby(person353_1,person185_1)).
example(988,neg,advisedby(person432_1,person185_1)).
example(989,neg,advisedby(person377_1,person185_1)).
example(990,neg,advisedby(person239_1,person185_1)).
example(991,neg,advisedby(person13_1,person185_1)).
example(992,neg,advisedby(person286_1,person185_1)).
example(993,neg,advisedby(person412_1,person185_1)).
example(994,neg,advisedby(person418_1,person185_1)).
example(995,neg,advisedby(person320_1,person185_1)).
example(996,neg,advisedby(person42_1,person185_1)).
example(997,neg,advisedby(person20_1,person185_1)).
example(998,neg,advisedby(person352_1,person185_1)).
example(999,neg,advisedby(person276_1,person185_1)).
example(1000,neg,advisedby(person45_1,person185_1)).
example(1001,neg,advisedby(person233_1,person185_1)).
example(1002,neg,advisedby(person148_1,person185_1)).
example(1003,neg,advisedby(person193_1,person185_1)).
example(1004,neg,advisedby(person314_1,person185_1)).
example(1005,neg,advisedby(person21_1,person185_1)).
example(1006,neg,advisedby(person262_1,person185_1)).
example(1007,neg,advisedby(person257_1,person185_1)).
example(1008,neg,advisedby(person73_1,person185_1)).
example(1009,neg,advisedby(person380_1,person185_1)).
example(1010,neg,advisedby(person384_1,person185_1)).
example(1011,neg,advisedby(person406_1,person185_1)).
example(1012,neg,advisedby(person266_1,person185_1)).
example(1013,neg,advisedby(person312_1,person185_1)).
example(1014,neg,advisedby(person208_1,person185_1)).
example(1015,neg,advisedby(person63_1,person185_1)).
example(1016,neg,advisedby(person83_1,person185_1)).
example(1017,neg,advisedby(person271_1,person185_1)).
example(1018,neg,advisedby(person392_1,person185_1)).
example(1019,neg,advisedby(person420_1,person185_1)).
example(1020,neg,advisedby(person86_1,person185_1)).
example(1021,neg,advisedby(person284_1,person171_1)).
example(1022,neg,advisedby(person311_1,person171_1)).
example(1023,neg,advisedby(person14_1,person171_1)).
example(1024,neg,advisedby(person275_1,person171_1)).
example(1025,neg,advisedby(person259_1,person171_1)).
example(1026,neg,advisedby(person139_1,person171_1)).
example(1027,neg,advisedby(person176_1,person171_1)).
example(1028,neg,advisedby(person400_1,person171_1)).
example(1029,neg,advisedby(person318_1,person171_1)).
example(1030,neg,advisedby(person161_1,person171_1)).
example(1031,neg,advisedby(person347_1,person171_1)).
example(1032,neg,advisedby(person408_1,person171_1)).
example(1033,neg,advisedby(person265_1,person171_1)).
example(1034,neg,advisedby(person70_1,person171_1)).
example(1035,neg,advisedby(person381_1,person171_1)).
example(1036,neg,advisedby(person382_1,person171_1)).
example(1037,neg,advisedby(person333_1,person171_1)).
example(1038,neg,advisedby(person94_1,person171_1)).
example(1039,neg,advisedby(person272_1,person171_1)).
example(1040,neg,advisedby(person37_1,person171_1)).
example(1041,neg,advisedby(person353_1,person171_1)).
example(1042,neg,advisedby(person432_1,person171_1)).
example(1043,neg,advisedby(person377_1,person171_1)).
example(1044,neg,advisedby(person13_1,person171_1)).
example(1045,neg,advisedby(person412_1,person171_1)).
example(1046,neg,advisedby(person320_1,person171_1)).
example(1047,neg,advisedby(person42_1,person171_1)).
example(1048,neg,advisedby(person20_1,person171_1)).
example(1049,neg,advisedby(person352_1,person171_1)).
example(1050,neg,advisedby(person276_1,person171_1)).
example(1051,neg,advisedby(person45_1,person171_1)).
example(1052,neg,advisedby(person233_1,person171_1)).
example(1053,neg,advisedby(person193_1,person171_1)).
example(1054,neg,advisedby(person314_1,person171_1)).
example(1055,neg,advisedby(person21_1,person171_1)).
example(1056,neg,advisedby(person262_1,person171_1)).
example(1057,neg,advisedby(person257_1,person171_1)).
example(1058,neg,advisedby(person73_1,person171_1)).
example(1059,neg,advisedby(person380_1,person171_1)).
example(1060,neg,advisedby(person384_1,person171_1)).
example(1061,neg,advisedby(person406_1,person171_1)).
example(1062,neg,advisedby(person266_1,person171_1)).
example(1063,neg,advisedby(person312_1,person171_1)).
example(1064,neg,advisedby(person208_1,person171_1)).
example(1065,neg,advisedby(person63_1,person171_1)).
example(1066,neg,advisedby(person83_1,person171_1)).
example(1067,neg,advisedby(person271_1,person171_1)).
example(1068,neg,advisedby(person392_1,person171_1)).
example(1069,neg,advisedby(person420_1,person171_1)).
example(1070,neg,advisedby(person86_1,person171_1)).
example(1071,neg,advisedby(person284_1,person168_1)).
example(1072,neg,advisedby(person311_1,person168_1)).
example(1073,neg,advisedby(person14_1,person168_1)).
example(1074,neg,advisedby(person275_1,person168_1)).
example(1075,neg,advisedby(person259_1,person168_1)).
example(1076,neg,advisedby(person139_1,person168_1)).
example(1077,neg,advisedby(person176_1,person168_1)).
example(1078,neg,advisedby(person400_1,person168_1)).
example(1079,neg,advisedby(person318_1,person168_1)).
example(1080,neg,advisedby(person161_1,person168_1)).
example(1081,neg,advisedby(person347_1,person168_1)).
example(1082,neg,advisedby(person408_1,person168_1)).
example(1083,neg,advisedby(person70_1,person168_1)).
example(1084,neg,advisedby(person382_1,person168_1)).
example(1085,neg,advisedby(person333_1,person168_1)).
example(1086,neg,advisedby(person94_1,person168_1)).
example(1087,neg,advisedby(person272_1,person168_1)).
example(1088,neg,advisedby(person37_1,person168_1)).
example(1089,neg,advisedby(person353_1,person168_1)).
example(1090,neg,advisedby(person432_1,person168_1)).
example(1091,neg,advisedby(person377_1,person168_1)).
example(1092,neg,advisedby(person239_1,person168_1)).
example(1093,neg,advisedby(person13_1,person168_1)).
example(1094,neg,advisedby(person286_1,person168_1)).
example(1095,neg,advisedby(person412_1,person168_1)).
example(1096,neg,advisedby(person418_1,person168_1)).
example(1097,neg,advisedby(person320_1,person168_1)).
example(1098,neg,advisedby(person42_1,person168_1)).
example(1099,neg,advisedby(person20_1,person168_1)).
example(1100,neg,advisedby(person352_1,person168_1)).
example(1101,neg,advisedby(person276_1,person168_1)).
example(1102,neg,advisedby(person45_1,person168_1)).
example(1103,neg,advisedby(person233_1,person168_1)).
example(1104,neg,advisedby(person148_1,person168_1)).
example(1105,neg,advisedby(person193_1,person168_1)).
example(1106,neg,advisedby(person314_1,person168_1)).
example(1107,neg,advisedby(person21_1,person168_1)).
example(1108,neg,advisedby(person262_1,person168_1)).
example(1109,neg,advisedby(person257_1,person168_1)).
example(1110,neg,advisedby(person73_1,person168_1)).
example(1111,neg,advisedby(person380_1,person168_1)).
example(1112,neg,advisedby(person384_1,person168_1)).
example(1113,neg,advisedby(person406_1,person168_1)).
example(1114,neg,advisedby(person266_1,person168_1)).
example(1115,neg,advisedby(person312_1,person168_1)).
example(1116,neg,advisedby(person208_1,person168_1)).
example(1117,neg,advisedby(person63_1,person168_1)).
example(1118,neg,advisedby(person83_1,person168_1)).
example(1119,neg,advisedby(person271_1,person168_1)).
example(1120,neg,advisedby(person392_1,person168_1)).
example(1121,neg,advisedby(person420_1,person168_1)).
example(1122,neg,advisedby(person86_1,person168_1)).
example(1123,neg,advisedby(person284_1,person407_1)).
example(1124,neg,advisedby(person311_1,person407_1)).
example(1125,neg,advisedby(person14_1,person407_1)).
example(1126,neg,advisedby(person275_1,person407_1)).
example(1127,neg,advisedby(person259_1,person407_1)).
example(1128,neg,advisedby(person139_1,person407_1)).
example(1129,neg,advisedby(person400_1,person407_1)).
example(1130,neg,advisedby(person318_1,person407_1)).
example(1131,neg,advisedby(person161_1,person407_1)).
example(1132,neg,advisedby(person347_1,person407_1)).
example(1133,neg,advisedby(person408_1,person407_1)).
example(1134,neg,advisedby(person265_1,person407_1)).
example(1135,neg,advisedby(person70_1,person407_1)).
example(1136,neg,advisedby(person381_1,person407_1)).
example(1137,neg,advisedby(person382_1,person407_1)).
example(1138,neg,advisedby(person333_1,person407_1)).
example(1139,neg,advisedby(person94_1,person407_1)).
example(1140,neg,advisedby(person272_1,person407_1)).
example(1141,neg,advisedby(person37_1,person407_1)).
example(1142,neg,advisedby(person353_1,person407_1)).
example(1143,neg,advisedby(person432_1,person407_1)).
example(1144,neg,advisedby(person377_1,person407_1)).
example(1145,neg,advisedby(person239_1,person407_1)).
example(1146,neg,advisedby(person13_1,person407_1)).
example(1147,neg,advisedby(person286_1,person407_1)).
example(1148,neg,advisedby(person412_1,person407_1)).
example(1149,neg,advisedby(person418_1,person407_1)).
example(1150,neg,advisedby(person320_1,person407_1)).
example(1151,neg,advisedby(person42_1,person407_1)).
example(1152,neg,advisedby(person20_1,person407_1)).
example(1153,neg,advisedby(person352_1,person407_1)).
example(1154,neg,advisedby(person45_1,person407_1)).
example(1155,neg,advisedby(person233_1,person407_1)).
example(1156,neg,advisedby(person148_1,person407_1)).
example(1157,neg,advisedby(person193_1,person407_1)).
example(1158,neg,advisedby(person314_1,person407_1)).
example(1159,neg,advisedby(person21_1,person407_1)).
example(1160,neg,advisedby(person262_1,person407_1)).
example(1161,neg,advisedby(person257_1,person407_1)).
example(1162,neg,advisedby(person73_1,person407_1)).
example(1163,neg,advisedby(person380_1,person407_1)).
example(1164,neg,advisedby(person406_1,person407_1)).
example(1165,neg,advisedby(person266_1,person407_1)).
example(1166,neg,advisedby(person312_1,person407_1)).
example(1167,neg,advisedby(person208_1,person407_1)).
example(1168,neg,advisedby(person63_1,person407_1)).
example(1169,neg,advisedby(person83_1,person407_1)).
example(1170,neg,advisedby(person271_1,person407_1)).
example(1171,neg,advisedby(person392_1,person407_1)).
example(1172,neg,advisedby(person420_1,person407_1)).
example(1173,neg,advisedby(person86_1,person407_1)).
example(1174,neg,advisedby(person38_1,person40_1)).
example(1175,neg,advisedby(person261_1,person40_1)).
example(1176,neg,advisedby(person149_1,person40_1)).
example(1177,neg,advisedby(person306_1,person40_1)).
example(1178,neg,advisedby(person410_1,person40_1)).
example(1179,neg,advisedby(person157_1,person40_1)).
example(1180,neg,advisedby(person200_1,person40_1)).
example(1181,neg,advisedby(person404_1,person40_1)).
example(1182,neg,advisedby(person122_1,person40_1)).
example(1183,neg,advisedby(person322_1,person40_1)).
example(1184,neg,advisedby(person131_1,person40_1)).
example(1185,neg,advisedby(person85_1,person40_1)).
example(1186,neg,advisedby(person241_1,person40_1)).
example(1187,neg,advisedby(person217_1,person40_1)).
example(1188,neg,advisedby(person270_1,person40_1)).
example(1189,neg,advisedby(person206_1,person40_1)).
example(1190,neg,advisedby(person81_1,person40_1)).
example(1191,neg,advisedby(person228_1,person40_1)).
example(1192,neg,advisedby(person51_1,person40_1)).
example(1193,neg,advisedby(person41_1,person40_1)).
example(1194,neg,advisedby(person163_1,person40_1)).
example(1195,neg,advisedby(person435_1,person40_1)).
example(1196,neg,advisedby(person363_1,person40_1)).
example(1197,neg,advisedby(person427_1,person40_1)).
example(1198,neg,advisedby(person142_1,person40_1)).
example(1199,neg,advisedby(person431_1,person40_1)).
example(1200,neg,advisedby(person283_1,person40_1)).
example(1201,neg,advisedby(person300_1,person40_1)).
example(1202,neg,advisedby(person113_1,person40_1)).
example(1203,neg,advisedby(person296_1,person40_1)).
example(1204,neg,advisedby(person36_1,person40_1)).
example(1205,neg,advisedby(person328_1,person40_1)).
example(1206,neg,advisedby(person31_1,person40_1)).
example(1207,neg,advisedby(person61_1,person40_1)).
example(1208,neg,advisedby(person119_1,person40_1)).
example(1209,neg,advisedby(person3_1,person40_1)).
example(1210,neg,advisedby(person317_1,person40_1)).
example(1211,neg,advisedby(person230_1,person40_1)).
example(1212,neg,advisedby(person258_1,person40_1)).
example(1213,neg,advisedby(person188_1,person40_1)).
example(1214,neg,advisedby(person327_1,person40_1)).
example(1215,neg,advisedby(person140_1,person40_1)).
example(1216,neg,advisedby(person321_1,person40_1)).
example(1217,neg,advisedby(person428_1,person40_1)).
example(1218,neg,advisedby(person158_1,person40_1)).
example(1219,neg,advisedby(person102_1,person40_1)).
example(1220,neg,advisedby(person90_1,person40_1)).
example(1221,neg,advisedby(person214_1,person40_1)).
example(1222,neg,advisedby(person146_1,person40_1)).
example(1223,neg,advisedby(person88_1,person40_1)).
example(1224,neg,advisedby(person178_1,person40_1)).
example(1225,neg,advisedby(person195_1,person40_1)).
example(1226,neg,advisedby(person38_1,person279_1)).
example(1227,neg,advisedby(person261_1,person279_1)).
example(1228,neg,advisedby(person149_1,person279_1)).
example(1229,neg,advisedby(person306_1,person279_1)).
example(1230,neg,advisedby(person410_1,person279_1)).
example(1231,neg,advisedby(person157_1,person279_1)).
example(1232,neg,advisedby(person200_1,person279_1)).
example(1233,neg,advisedby(person404_1,person279_1)).
example(1234,neg,advisedby(person122_1,person279_1)).
example(1235,neg,advisedby(person322_1,person279_1)).
example(1236,neg,advisedby(person131_1,person279_1)).
example(1237,neg,advisedby(person85_1,person279_1)).
example(1238,neg,advisedby(person241_1,person279_1)).
example(1239,neg,advisedby(person217_1,person279_1)).
example(1240,neg,advisedby(person270_1,person279_1)).
example(1241,neg,advisedby(person206_1,person279_1)).
example(1242,neg,advisedby(person81_1,person279_1)).
example(1243,neg,advisedby(person228_1,person279_1)).
example(1244,neg,advisedby(person51_1,person279_1)).
example(1245,neg,advisedby(person41_1,person279_1)).
example(1246,neg,advisedby(person163_1,person279_1)).
example(1247,neg,advisedby(person363_1,person279_1)).
example(1248,neg,advisedby(person427_1,person279_1)).
example(1249,neg,advisedby(person142_1,person279_1)).
example(1250,neg,advisedby(person431_1,person279_1)).
example(1251,neg,advisedby(person283_1,person279_1)).
example(1252,neg,advisedby(person300_1,person279_1)).
example(1253,neg,advisedby(person113_1,person279_1)).
example(1254,neg,advisedby(person296_1,person279_1)).
example(1255,neg,advisedby(person36_1,person279_1)).
example(1256,neg,advisedby(person328_1,person279_1)).
example(1257,neg,advisedby(person31_1,person279_1)).
example(1258,neg,advisedby(person61_1,person279_1)).
example(1259,neg,advisedby(person119_1,person279_1)).
example(1260,neg,advisedby(person3_1,person279_1)).
example(1261,neg,advisedby(person317_1,person279_1)).
example(1262,neg,advisedby(person230_1,person279_1)).
example(1263,neg,advisedby(person258_1,person279_1)).
example(1264,neg,advisedby(person188_1,person279_1)).
example(1265,neg,advisedby(person327_1,person279_1)).
example(1266,neg,advisedby(person140_1,person279_1)).
example(1267,neg,advisedby(person321_1,person279_1)).
example(1268,neg,advisedby(person428_1,person279_1)).
example(1269,neg,advisedby(person158_1,person279_1)).
example(1270,neg,advisedby(person102_1,person279_1)).
example(1271,neg,advisedby(person90_1,person279_1)).
example(1272,neg,advisedby(person214_1,person279_1)).
example(1273,neg,advisedby(person146_1,person279_1)).
example(1274,neg,advisedby(person88_1,person279_1)).
example(1275,neg,advisedby(person178_1,person279_1)).
example(1276,neg,advisedby(person195_1,person279_1)).
example(1277,neg,advisedby(person38_1,person394_1)).
example(1278,neg,advisedby(person261_1,person394_1)).
example(1279,neg,advisedby(person149_1,person394_1)).
example(1280,neg,advisedby(person306_1,person394_1)).
example(1281,neg,advisedby(person410_1,person394_1)).
example(1282,neg,advisedby(person157_1,person394_1)).
example(1283,neg,advisedby(person200_1,person394_1)).
example(1284,neg,advisedby(person404_1,person394_1)).
example(1285,neg,advisedby(person122_1,person394_1)).
example(1286,neg,advisedby(person322_1,person394_1)).
example(1287,neg,advisedby(person131_1,person394_1)).
example(1288,neg,advisedby(person85_1,person394_1)).
example(1289,neg,advisedby(person241_1,person394_1)).
example(1290,neg,advisedby(person217_1,person394_1)).
example(1291,neg,advisedby(person270_1,person394_1)).
example(1292,neg,advisedby(person206_1,person394_1)).
example(1293,neg,advisedby(person81_1,person394_1)).
example(1294,neg,advisedby(person51_1,person394_1)).
example(1295,neg,advisedby(person163_1,person394_1)).
example(1296,neg,advisedby(person435_1,person394_1)).
example(1297,neg,advisedby(person363_1,person394_1)).
example(1298,neg,advisedby(person427_1,person394_1)).
example(1299,neg,advisedby(person142_1,person394_1)).
example(1300,neg,advisedby(person431_1,person394_1)).
example(1301,neg,advisedby(person283_1,person394_1)).
example(1302,neg,advisedby(person300_1,person394_1)).
example(1303,neg,advisedby(person296_1,person394_1)).
example(1304,neg,advisedby(person36_1,person394_1)).
example(1305,neg,advisedby(person328_1,person394_1)).
example(1306,neg,advisedby(person31_1,person394_1)).
example(1307,neg,advisedby(person61_1,person394_1)).
example(1308,neg,advisedby(person119_1,person394_1)).
example(1309,neg,advisedby(person3_1,person394_1)).
example(1310,neg,advisedby(person317_1,person394_1)).
example(1311,neg,advisedby(person230_1,person394_1)).
example(1312,neg,advisedby(person258_1,person394_1)).
example(1313,neg,advisedby(person188_1,person394_1)).
example(1314,neg,advisedby(person327_1,person394_1)).
example(1315,neg,advisedby(person140_1,person394_1)).
example(1316,neg,advisedby(person321_1,person394_1)).
example(1317,neg,advisedby(person428_1,person394_1)).
example(1318,neg,advisedby(person158_1,person394_1)).
example(1319,neg,advisedby(person102_1,person394_1)).
example(1320,neg,advisedby(person90_1,person394_1)).
example(1321,neg,advisedby(person214_1,person394_1)).
example(1322,neg,advisedby(person146_1,person394_1)).
example(1323,neg,advisedby(person88_1,person394_1)).
example(1324,neg,advisedby(person178_1,person394_1)).
example(1325,neg,advisedby(person195_1,person394_1)).
example(1326,neg,advisedby(person38_1,person342_1)).
example(1327,neg,advisedby(person261_1,person342_1)).
example(1328,neg,advisedby(person149_1,person342_1)).
example(1329,neg,advisedby(person306_1,person342_1)).
example(1330,neg,advisedby(person410_1,person342_1)).
example(1331,neg,advisedby(person157_1,person342_1)).
example(1332,neg,advisedby(person200_1,person342_1)).
example(1333,neg,advisedby(person404_1,person342_1)).
example(1334,neg,advisedby(person122_1,person342_1)).
example(1335,neg,advisedby(person322_1,person342_1)).
example(1336,neg,advisedby(person131_1,person342_1)).
example(1337,neg,advisedby(person85_1,person342_1)).
example(1338,neg,advisedby(person241_1,person342_1)).
example(1339,neg,advisedby(person270_1,person342_1)).
example(1340,neg,advisedby(person51_1,person342_1)).
example(1341,neg,advisedby(person41_1,person342_1)).
example(1342,neg,advisedby(person163_1,person342_1)).
example(1343,neg,advisedby(person435_1,person342_1)).
example(1344,neg,advisedby(person363_1,person342_1)).
example(1345,neg,advisedby(person427_1,person342_1)).
example(1346,neg,advisedby(person431_1,person342_1)).
example(1347,neg,advisedby(person283_1,person342_1)).
example(1348,neg,advisedby(person296_1,person342_1)).
example(1349,neg,advisedby(person36_1,person342_1)).
example(1350,neg,advisedby(person328_1,person342_1)).
example(1351,neg,advisedby(person31_1,person342_1)).
example(1352,neg,advisedby(person61_1,person342_1)).
example(1353,neg,advisedby(person119_1,person342_1)).
example(1354,neg,advisedby(person3_1,person342_1)).
example(1355,neg,advisedby(person317_1,person342_1)).
example(1356,neg,advisedby(person230_1,person342_1)).
example(1357,neg,advisedby(person258_1,person342_1)).
example(1358,neg,advisedby(person188_1,person342_1)).
example(1359,neg,advisedby(person327_1,person342_1)).
example(1360,neg,advisedby(person140_1,person342_1)).
example(1361,neg,advisedby(person321_1,person342_1)).
example(1362,neg,advisedby(person428_1,person342_1)).
example(1363,neg,advisedby(person158_1,person342_1)).
example(1364,neg,advisedby(person102_1,person342_1)).
example(1365,neg,advisedby(person90_1,person342_1)).
example(1366,neg,advisedby(person214_1,person342_1)).
example(1367,neg,advisedby(person146_1,person342_1)).
example(1368,neg,advisedby(person88_1,person342_1)).
example(1369,neg,advisedby(person178_1,person342_1)).
example(1370,neg,advisedby(person195_1,person342_1)).
example(1371,neg,advisedby(person38_1,person111_1)).
example(1372,neg,advisedby(person261_1,person111_1)).
example(1373,neg,advisedby(person149_1,person111_1)).
example(1374,neg,advisedby(person306_1,person111_1)).
example(1375,neg,advisedby(person410_1,person111_1)).
example(1376,neg,advisedby(person157_1,person111_1)).
example(1377,neg,advisedby(person200_1,person111_1)).
example(1378,neg,advisedby(person404_1,person111_1)).
example(1379,neg,advisedby(person122_1,person111_1)).
example(1380,neg,advisedby(person322_1,person111_1)).
example(1381,neg,advisedby(person131_1,person111_1)).
example(1382,neg,advisedby(person85_1,person111_1)).
example(1383,neg,advisedby(person241_1,person111_1)).
example(1384,neg,advisedby(person217_1,person111_1)).
example(1385,neg,advisedby(person270_1,person111_1)).
example(1386,neg,advisedby(person206_1,person111_1)).
example(1387,neg,advisedby(person81_1,person111_1)).
example(1388,neg,advisedby(person228_1,person111_1)).
example(1389,neg,advisedby(person51_1,person111_1)).
example(1390,neg,advisedby(person41_1,person111_1)).
example(1391,neg,advisedby(person163_1,person111_1)).
example(1392,neg,advisedby(person435_1,person111_1)).
example(1393,neg,advisedby(person363_1,person111_1)).
example(1394,neg,advisedby(person427_1,person111_1)).
example(1395,neg,advisedby(person142_1,person111_1)).
example(1396,neg,advisedby(person431_1,person111_1)).
example(1397,neg,advisedby(person283_1,person111_1)).
example(1398,neg,advisedby(person300_1,person111_1)).
example(1399,neg,advisedby(person113_1,person111_1)).
example(1400,neg,advisedby(person296_1,person111_1)).
example(1401,neg,advisedby(person36_1,person111_1)).
example(1402,neg,advisedby(person328_1,person111_1)).
example(1403,neg,advisedby(person31_1,person111_1)).
example(1404,neg,advisedby(person61_1,person111_1)).
example(1405,neg,advisedby(person119_1,person111_1)).
example(1406,neg,advisedby(person3_1,person111_1)).
example(1407,neg,advisedby(person317_1,person111_1)).
example(1408,neg,advisedby(person230_1,person111_1)).
example(1409,neg,advisedby(person258_1,person111_1)).
example(1410,neg,advisedby(person188_1,person111_1)).
example(1411,neg,advisedby(person327_1,person111_1)).
example(1412,neg,advisedby(person140_1,person111_1)).
example(1413,neg,advisedby(person321_1,person111_1)).
example(1414,neg,advisedby(person428_1,person111_1)).
example(1415,neg,advisedby(person158_1,person111_1)).
example(1416,neg,advisedby(person102_1,person111_1)).
example(1417,neg,advisedby(person90_1,person111_1)).
example(1418,neg,advisedby(person214_1,person111_1)).
example(1419,neg,advisedby(person146_1,person111_1)).
example(1420,neg,advisedby(person88_1,person111_1)).
example(1421,neg,advisedby(person178_1,person111_1)).
example(1422,neg,advisedby(person195_1,person111_1)).
example(1423,neg,advisedby(person38_1,person115_1)).
example(1424,neg,advisedby(person261_1,person115_1)).
example(1425,neg,advisedby(person149_1,person115_1)).
example(1426,neg,advisedby(person306_1,person115_1)).
example(1427,neg,advisedby(person410_1,person115_1)).
example(1428,neg,advisedby(person157_1,person115_1)).
example(1429,neg,advisedby(person200_1,person115_1)).
example(1430,neg,advisedby(person404_1,person115_1)).
example(1431,neg,advisedby(person122_1,person115_1)).
example(1432,neg,advisedby(person322_1,person115_1)).
example(1433,neg,advisedby(person131_1,person115_1)).
example(1434,neg,advisedby(person85_1,person115_1)).
example(1435,neg,advisedby(person241_1,person115_1)).
example(1436,neg,advisedby(person217_1,person115_1)).
example(1437,neg,advisedby(person270_1,person115_1)).
example(1438,neg,advisedby(person206_1,person115_1)).
example(1439,neg,advisedby(person81_1,person115_1)).
example(1440,neg,advisedby(person228_1,person115_1)).
example(1441,neg,advisedby(person51_1,person115_1)).
example(1442,neg,advisedby(person41_1,person115_1)).
example(1443,neg,advisedby(person163_1,person115_1)).
example(1444,neg,advisedby(person435_1,person115_1)).
example(1445,neg,advisedby(person363_1,person115_1)).
example(1446,neg,advisedby(person427_1,person115_1)).
example(1447,neg,advisedby(person142_1,person115_1)).
example(1448,neg,advisedby(person431_1,person115_1)).
example(1449,neg,advisedby(person283_1,person115_1)).
example(1450,neg,advisedby(person300_1,person115_1)).
example(1451,neg,advisedby(person113_1,person115_1)).
example(1452,neg,advisedby(person296_1,person115_1)).
example(1453,neg,advisedby(person36_1,person115_1)).
example(1454,neg,advisedby(person328_1,person115_1)).
example(1455,neg,advisedby(person31_1,person115_1)).
example(1456,neg,advisedby(person61_1,person115_1)).
example(1457,neg,advisedby(person119_1,person115_1)).
example(1458,neg,advisedby(person3_1,person115_1)).
example(1459,neg,advisedby(person317_1,person115_1)).
example(1460,neg,advisedby(person230_1,person115_1)).
example(1461,neg,advisedby(person258_1,person115_1)).
example(1462,neg,advisedby(person188_1,person115_1)).
example(1463,neg,advisedby(person327_1,person115_1)).
example(1464,neg,advisedby(person140_1,person115_1)).
example(1465,neg,advisedby(person321_1,person115_1)).
example(1466,neg,advisedby(person428_1,person115_1)).
example(1467,neg,advisedby(person158_1,person115_1)).
example(1468,neg,advisedby(person102_1,person115_1)).
example(1469,neg,advisedby(person90_1,person115_1)).
example(1470,neg,advisedby(person214_1,person115_1)).
example(1471,neg,advisedby(person146_1,person115_1)).
example(1472,neg,advisedby(person88_1,person115_1)).
example(1473,neg,advisedby(person178_1,person115_1)).
example(1474,neg,advisedby(person195_1,person115_1)).
example(1475,neg,advisedby(person38_1,person351_1)).
example(1476,neg,advisedby(person261_1,person351_1)).
example(1477,neg,advisedby(person149_1,person351_1)).
example(1478,neg,advisedby(person306_1,person351_1)).
example(1479,neg,advisedby(person410_1,person351_1)).
example(1480,neg,advisedby(person157_1,person351_1)).
example(1481,neg,advisedby(person200_1,person351_1)).
example(1482,neg,advisedby(person404_1,person351_1)).
example(1483,neg,advisedby(person122_1,person351_1)).
example(1484,neg,advisedby(person322_1,person351_1)).
example(1485,neg,advisedby(person131_1,person351_1)).
example(1486,neg,advisedby(person85_1,person351_1)).
example(1487,neg,advisedby(person241_1,person351_1)).
example(1488,neg,advisedby(person217_1,person351_1)).
example(1489,neg,advisedby(person270_1,person351_1)).
example(1490,neg,advisedby(person206_1,person351_1)).
example(1491,neg,advisedby(person81_1,person351_1)).
example(1492,neg,advisedby(person228_1,person351_1)).
example(1493,neg,advisedby(person51_1,person351_1)).
example(1494,neg,advisedby(person41_1,person351_1)).
example(1495,neg,advisedby(person163_1,person351_1)).
example(1496,neg,advisedby(person435_1,person351_1)).
example(1497,neg,advisedby(person363_1,person351_1)).
example(1498,neg,advisedby(person427_1,person351_1)).
example(1499,neg,advisedby(person142_1,person351_1)).
example(1500,neg,advisedby(person431_1,person351_1)).
example(1501,neg,advisedby(person283_1,person351_1)).
example(1502,neg,advisedby(person300_1,person351_1)).
example(1503,neg,advisedby(person113_1,person351_1)).
example(1504,neg,advisedby(person296_1,person351_1)).
example(1505,neg,advisedby(person36_1,person351_1)).
example(1506,neg,advisedby(person328_1,person351_1)).
example(1507,neg,advisedby(person31_1,person351_1)).
example(1508,neg,advisedby(person61_1,person351_1)).
example(1509,neg,advisedby(person119_1,person351_1)).
example(1510,neg,advisedby(person3_1,person351_1)).
example(1511,neg,advisedby(person317_1,person351_1)).
example(1512,neg,advisedby(person230_1,person351_1)).
example(1513,neg,advisedby(person258_1,person351_1)).
example(1514,neg,advisedby(person188_1,person351_1)).
example(1515,neg,advisedby(person327_1,person351_1)).
example(1516,neg,advisedby(person140_1,person351_1)).
example(1517,neg,advisedby(person321_1,person351_1)).
example(1518,neg,advisedby(person428_1,person351_1)).
example(1519,neg,advisedby(person158_1,person351_1)).
example(1520,neg,advisedby(person102_1,person351_1)).
example(1521,neg,advisedby(person90_1,person351_1)).
example(1522,neg,advisedby(person214_1,person351_1)).
example(1523,neg,advisedby(person146_1,person351_1)).
example(1524,neg,advisedby(person88_1,person351_1)).
example(1525,neg,advisedby(person178_1,person351_1)).
example(1526,neg,advisedby(person195_1,person351_1)).
example(1527,neg,advisedby(person38_1,person72_1)).
example(1528,neg,advisedby(person261_1,person72_1)).
example(1529,neg,advisedby(person149_1,person72_1)).
example(1530,neg,advisedby(person306_1,person72_1)).
example(1531,neg,advisedby(person410_1,person72_1)).
example(1532,neg,advisedby(person322_1,person72_1)).
example(1533,neg,advisedby(person131_1,person72_1)).
example(1534,neg,advisedby(person85_1,person72_1)).
example(1535,neg,advisedby(person241_1,person72_1)).
example(1536,neg,advisedby(person270_1,person72_1)).
example(1537,neg,advisedby(person81_1,person72_1)).
example(1538,neg,advisedby(person228_1,person72_1)).
example(1539,neg,advisedby(person51_1,person72_1)).
example(1540,neg,advisedby(person41_1,person72_1)).
example(1541,neg,advisedby(person163_1,person72_1)).
example(1542,neg,advisedby(person435_1,person72_1)).
example(1543,neg,advisedby(person363_1,person72_1)).
example(1544,neg,advisedby(person427_1,person72_1)).
example(1545,neg,advisedby(person142_1,person72_1)).
example(1546,neg,advisedby(person431_1,person72_1)).
example(1547,neg,advisedby(person283_1,person72_1)).
example(1548,neg,advisedby(person300_1,person72_1)).
example(1549,neg,advisedby(person113_1,person72_1)).
example(1550,neg,advisedby(person296_1,person72_1)).
example(1551,neg,advisedby(person36_1,person72_1)).
example(1552,neg,advisedby(person328_1,person72_1)).
example(1553,neg,advisedby(person31_1,person72_1)).
example(1554,neg,advisedby(person61_1,person72_1)).
example(1555,neg,advisedby(person119_1,person72_1)).
example(1556,neg,advisedby(person3_1,person72_1)).
example(1557,neg,advisedby(person317_1,person72_1)).
example(1558,neg,advisedby(person230_1,person72_1)).
example(1559,neg,advisedby(person258_1,person72_1)).
example(1560,neg,advisedby(person188_1,person72_1)).
example(1561,neg,advisedby(person327_1,person72_1)).
example(1562,neg,advisedby(person140_1,person72_1)).
example(1563,neg,advisedby(person321_1,person72_1)).
example(1564,neg,advisedby(person428_1,person72_1)).
example(1565,neg,advisedby(person158_1,person72_1)).
example(1566,neg,advisedby(person102_1,person72_1)).
example(1567,neg,advisedby(person90_1,person72_1)).
example(1568,neg,advisedby(person214_1,person72_1)).
example(1569,neg,advisedby(person146_1,person72_1)).
example(1570,neg,advisedby(person88_1,person72_1)).
example(1571,neg,advisedby(person178_1,person72_1)).
example(1572,neg,advisedby(person195_1,person72_1)).
example(1573,neg,advisedby(person38_1,person393_1)).
example(1574,neg,advisedby(person261_1,person393_1)).
example(1575,neg,advisedby(person149_1,person393_1)).
example(1576,neg,advisedby(person306_1,person393_1)).
example(1577,neg,advisedby(person410_1,person393_1)).
example(1578,neg,advisedby(person157_1,person393_1)).
example(1579,neg,advisedby(person200_1,person393_1)).
example(1580,neg,advisedby(person404_1,person393_1)).
example(1581,neg,advisedby(person122_1,person393_1)).
example(1582,neg,advisedby(person322_1,person393_1)).
example(1583,neg,advisedby(person131_1,person393_1)).
example(1584,neg,advisedby(person85_1,person393_1)).
example(1585,neg,advisedby(person241_1,person393_1)).
example(1586,neg,advisedby(person217_1,person393_1)).
example(1587,neg,advisedby(person270_1,person393_1)).
example(1588,neg,advisedby(person206_1,person393_1)).
example(1589,neg,advisedby(person51_1,person393_1)).
example(1590,neg,advisedby(person41_1,person393_1)).
example(1591,neg,advisedby(person435_1,person393_1)).
example(1592,neg,advisedby(person363_1,person393_1)).
example(1593,neg,advisedby(person427_1,person393_1)).
example(1594,neg,advisedby(person142_1,person393_1)).
example(1595,neg,advisedby(person431_1,person393_1)).
example(1596,neg,advisedby(person283_1,person393_1)).
example(1597,neg,advisedby(person300_1,person393_1)).
example(1598,neg,advisedby(person113_1,person393_1)).
example(1599,neg,advisedby(person296_1,person393_1)).
example(1600,neg,advisedby(person36_1,person393_1)).
example(1601,neg,advisedby(person328_1,person393_1)).
example(1602,neg,advisedby(person31_1,person393_1)).
example(1603,neg,advisedby(person61_1,person393_1)).
example(1604,neg,advisedby(person119_1,person393_1)).
example(1605,neg,advisedby(person3_1,person393_1)).
example(1606,neg,advisedby(person317_1,person393_1)).
example(1607,neg,advisedby(person230_1,person393_1)).
example(1608,neg,advisedby(person258_1,person393_1)).
example(1609,neg,advisedby(person188_1,person393_1)).
example(1610,neg,advisedby(person327_1,person393_1)).
example(1611,neg,advisedby(person140_1,person393_1)).
example(1612,neg,advisedby(person321_1,person393_1)).
example(1613,neg,advisedby(person428_1,person393_1)).
example(1614,neg,advisedby(person158_1,person393_1)).
example(1615,neg,advisedby(person102_1,person393_1)).
example(1616,neg,advisedby(person90_1,person393_1)).
example(1617,neg,advisedby(person214_1,person393_1)).
example(1618,neg,advisedby(person146_1,person393_1)).
example(1619,neg,advisedby(person88_1,person393_1)).
example(1620,neg,advisedby(person178_1,person393_1)).
example(1621,neg,advisedby(person195_1,person393_1)).
example(1622,neg,advisedby(person18_1,person248_1)).
example(1623,neg,advisedby(person9_1,person248_1)).
example(1624,neg,advisedby(person429_1,person248_1)).
example(1625,neg,advisedby(person27_1,person248_1)).
example(1626,neg,advisedby(person362_1,person248_1)).
example(1627,neg,advisedby(person96_1,person248_1)).
example(1628,neg,advisedby(person361_1,person248_1)).
example(1629,neg,advisedby(person263_1,person248_1)).
example(1630,neg,advisedby(person183_1,person248_1)).
example(1631,neg,advisedby(person118_1,person248_1)).
example(1632,neg,advisedby(person105_1,person248_1)).
example(1633,neg,advisedby(person108_1,person248_1)).
example(1634,neg,advisedby(person203_1,person248_1)).
example(1635,neg,advisedby(person287_1,person248_1)).
example(1636,neg,advisedby(person87_1,person248_1)).
example(1637,neg,advisedby(person39_1,person248_1)).
example(1638,neg,advisedby(person35_1,person248_1)).
example(1639,neg,advisedby(person325_1,person248_1)).
example(1640,neg,advisedby(person76_1,person248_1)).
example(1641,neg,advisedby(person232_1,person248_1)).
example(1642,neg,advisedby(person18_1,person64_1)).
example(1643,neg,advisedby(person9_1,person64_1)).
example(1644,neg,advisedby(person429_1,person64_1)).
example(1645,neg,advisedby(person27_1,person64_1)).
example(1646,neg,advisedby(person362_1,person64_1)).
example(1647,neg,advisedby(person96_1,person64_1)).
example(1648,neg,advisedby(person361_1,person64_1)).
example(1649,neg,advisedby(person263_1,person64_1)).
example(1650,neg,advisedby(person183_1,person64_1)).
example(1651,neg,advisedby(person118_1,person64_1)).
example(1652,neg,advisedby(person105_1,person64_1)).
example(1653,neg,advisedby(person108_1,person64_1)).
example(1654,neg,advisedby(person203_1,person64_1)).
example(1655,neg,advisedby(person287_1,person64_1)).
example(1656,neg,advisedby(person87_1,person64_1)).
example(1657,neg,advisedby(person39_1,person64_1)).
example(1658,neg,advisedby(person35_1,person64_1)).
example(1659,neg,advisedby(person325_1,person64_1)).
example(1660,neg,advisedby(person76_1,person64_1)).
example(1661,neg,advisedby(person232_1,person64_1)).
example(1662,neg,advisedby(person18_1,person166_1)).
example(1663,neg,advisedby(person9_1,person166_1)).
example(1664,neg,advisedby(person429_1,person166_1)).
example(1665,neg,advisedby(person27_1,person166_1)).
example(1666,neg,advisedby(person362_1,person166_1)).
example(1667,neg,advisedby(person96_1,person166_1)).
example(1668,neg,advisedby(person361_1,person166_1)).
example(1669,neg,advisedby(person263_1,person166_1)).
example(1670,neg,advisedby(person183_1,person166_1)).
example(1671,neg,advisedby(person118_1,person166_1)).
example(1672,neg,advisedby(person105_1,person166_1)).
example(1673,neg,advisedby(person108_1,person166_1)).
example(1674,neg,advisedby(person203_1,person166_1)).
example(1675,neg,advisedby(person287_1,person166_1)).
example(1676,neg,advisedby(person87_1,person166_1)).
example(1677,neg,advisedby(person39_1,person166_1)).
example(1678,neg,advisedby(person35_1,person166_1)).
example(1679,neg,advisedby(person325_1,person166_1)).
example(1680,neg,advisedby(person76_1,person166_1)).
example(1681,neg,advisedby(person232_1,person166_1)).
example(1682,neg,advisedby(person18_1,person370_1)).
example(1683,neg,advisedby(person9_1,person370_1)).
example(1684,neg,advisedby(person429_1,person370_1)).
example(1685,neg,advisedby(person27_1,person370_1)).
example(1686,neg,advisedby(person362_1,person370_1)).
example(1687,neg,advisedby(person96_1,person370_1)).
example(1688,neg,advisedby(person361_1,person370_1)).
example(1689,neg,advisedby(person263_1,person370_1)).
example(1690,neg,advisedby(person183_1,person370_1)).
example(1691,neg,advisedby(person118_1,person370_1)).
example(1692,neg,advisedby(person105_1,person370_1)).
example(1693,neg,advisedby(person108_1,person370_1)).
example(1694,neg,advisedby(person203_1,person370_1)).
example(1695,neg,advisedby(person287_1,person370_1)).
example(1696,neg,advisedby(person87_1,person370_1)).
example(1697,neg,advisedby(person39_1,person370_1)).
example(1698,neg,advisedby(person35_1,person370_1)).
example(1699,neg,advisedby(person325_1,person370_1)).
example(1700,neg,advisedby(person76_1,person370_1)).
example(1701,neg,advisedby(person232_1,person370_1)).
example(1702,neg,advisedby(person27_1,person335_1)).
example(1703,neg,advisedby(person96_1,person335_1)).
example(1704,neg,advisedby(person361_1,person335_1)).
example(1705,neg,advisedby(person263_1,person335_1)).
example(1706,neg,advisedby(person183_1,person335_1)).
example(1707,neg,advisedby(person118_1,person335_1)).
example(1708,neg,advisedby(person105_1,person335_1)).
example(1709,neg,advisedby(person108_1,person335_1)).
example(1710,neg,advisedby(person203_1,person335_1)).
example(1711,neg,advisedby(person287_1,person335_1)).
example(1712,neg,advisedby(person87_1,person335_1)).
example(1713,neg,advisedby(person39_1,person335_1)).
example(1714,neg,advisedby(person35_1,person335_1)).
example(1715,neg,advisedby(person325_1,person335_1)).
example(1716,neg,advisedby(person76_1,person335_1)).
example(1717,neg,advisedby(person232_1,person335_1)).
example(1718,neg,advisedby(person18_1,person46_1)).
example(1719,neg,advisedby(person9_1,person46_1)).
example(1720,neg,advisedby(person429_1,person46_1)).
example(1721,neg,advisedby(person27_1,person46_1)).
example(1722,neg,advisedby(person362_1,person46_1)).
example(1723,neg,advisedby(person96_1,person46_1)).
example(1724,neg,advisedby(person361_1,person46_1)).
example(1725,neg,advisedby(person263_1,person46_1)).
example(1726,neg,advisedby(person183_1,person46_1)).
example(1727,neg,advisedby(person118_1,person46_1)).
example(1728,neg,advisedby(person105_1,person46_1)).
example(1729,neg,advisedby(person108_1,person46_1)).
example(1730,neg,advisedby(person203_1,person46_1)).
example(1731,neg,advisedby(person287_1,person46_1)).
example(1732,neg,advisedby(person87_1,person46_1)).
example(1733,neg,advisedby(person39_1,person46_1)).
example(1734,neg,advisedby(person35_1,person46_1)).
example(1735,neg,advisedby(person325_1,person46_1)).
example(1736,neg,advisedby(person76_1,person46_1)).
example(1737,neg,advisedby(person232_1,person46_1)).
example(1738,neg,advisedby(person18_1,person189_1)).
example(1739,neg,advisedby(person9_1,person189_1)).
example(1740,neg,advisedby(person429_1,person189_1)).
example(1741,neg,advisedby(person27_1,person189_1)).
example(1742,neg,advisedby(person362_1,person189_1)).
example(1743,neg,advisedby(person96_1,person189_1)).
example(1744,neg,advisedby(person361_1,person189_1)).
example(1745,neg,advisedby(person263_1,person189_1)).
example(1746,neg,advisedby(person183_1,person189_1)).
example(1747,neg,advisedby(person118_1,person189_1)).
example(1748,neg,advisedby(person105_1,person189_1)).
example(1749,neg,advisedby(person108_1,person189_1)).
example(1750,neg,advisedby(person203_1,person189_1)).
example(1751,neg,advisedby(person287_1,person189_1)).
example(1752,neg,advisedby(person87_1,person189_1)).
example(1753,neg,advisedby(person39_1,person189_1)).
example(1754,neg,advisedby(person35_1,person189_1)).
example(1755,neg,advisedby(person325_1,person189_1)).
example(1756,neg,advisedby(person76_1,person189_1)).
example(1757,neg,advisedby(person232_1,person189_1)).
example(1758,neg,advisedby(person18_1,person5_1)).
example(1759,neg,advisedby(person9_1,person5_1)).
example(1760,neg,advisedby(person429_1,person5_1)).
example(1761,neg,advisedby(person27_1,person5_1)).
example(1762,neg,advisedby(person361_1,person5_1)).
example(1763,neg,advisedby(person105_1,person5_1)).
example(1764,neg,advisedby(person108_1,person5_1)).
example(1765,neg,advisedby(person203_1,person5_1)).
example(1766,neg,advisedby(person287_1,person5_1)).
example(1767,neg,advisedby(person87_1,person5_1)).
example(1768,neg,advisedby(person39_1,person5_1)).
example(1769,neg,advisedby(person35_1,person5_1)).
example(1770,neg,advisedby(person325_1,person5_1)).
example(1771,neg,advisedby(person76_1,person5_1)).
example(1772,neg,advisedby(person232_1,person5_1)).

:- dynamic '$aleph_global'/2.

'$aleph_global'(targetpred,targetpred(advisedby/2)).
'$aleph_global'(last_clause,last_clause(0)).
'$aleph_global'(last_example,last_example(neg,1772)).
'$aleph_global'(atoms_left,atoms_left(neg,[1-1772])).
'$aleph_global'(atoms,atoms(neg,[1-1772])).
'$aleph_global'(size,size(neg,1772)).
'$aleph_global'(last_example,last_example(pos,80)).
'$aleph_global'(atoms_left,atoms_left(pos,[1-80])).
'$aleph_global'(atoms,atoms(pos,[1-80])).
'$aleph_global'(size,size(pos,80)).
'$aleph_global'(abduce,set(abduce,false)).
'$aleph_global'(best_clause_hook,set(best_clause_hook,true)).
'$aleph_global'(cache_clauselength,set(cache_clauselength,3)).
'$aleph_global'(caching,set(caching,false)).
'$aleph_global'(check_redundant,set(check_redundant,false)).
'$aleph_global'(check_good,set(check_good,false)).
'$aleph_global'(check_useless,set(check_useless,false)).
'$aleph_global'(clause_rewrite_hook,set(clause_rewrite_hook,true)).
'$aleph_global'(condition,set(condition,false)).
'$aleph_global'(confidence,set(confidence,0.95)).
'$aleph_global'(construct_bottom,set(construct_bottom,saturation)).
'$aleph_global'(depth,set(depth,10)).
'$aleph_global'(good,set(good,false)).
'$aleph_global'(gsamplesize,set(gsamplesize,100)).
'$aleph_global'(interactive,set(interactive,false)).
'$aleph_global'(language,set(language,(+inf))).
'$aleph_global'(lazy_negs,set(lazy_negs,false)).
'$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)).
'$aleph_global'(lazy_on_cost,set(lazy_on_cost,false)).
'$aleph_global'(lookahead,set(lookahead,1)).
'$aleph_global'(max_abducibles,set(max_abducibles,2)).
'$aleph_global'(match_bottom_hook,set(match_bottom_hook,true)).
'$aleph_global'(max_features,set(max_features,(+inf))).
'$aleph_global'(mingain,set(mingain,0.05)).
'$aleph_global'(minposfrac,set(minposfrac,0)).
'$aleph_global'(minscore,set(minscore,(-inf))).
'$aleph_global'(moves,set(moves,5)).
'$aleph_global'(newbest_hook,set(newbest_hook,true)).
'$aleph_global'(good_clause_hook,set(good_clause_hook,true)).
'$aleph_global'(newvars,set(newvars,(+inf))).
'$aleph_global'(nreduce_bottom,set(nreduce_bottom,false)).
'$aleph_global'(openlist,set(openlist,(+inf))).
'$aleph_global'(optimise_clauses,set(optimise_clauses,false)).
'$aleph_global'(permute_bottom,set(permute_bottom,false)).
'$aleph_global'(portray_examples,set(portray_examples,false)).
'$aleph_global'(portray_hypothesis,set(portray_hypothesis,false)).
'$aleph_global'(portray_literals,set(portray_literals,false)).
'$aleph_global'(portray_search,set(portray_search,false)).
'$aleph_global'(prefix_trees,set(prefix_trees,false)).
'$aleph_global'(print,set(print,4)).
'$aleph_global'(proof_strategy,set(proof_strategy,restricted_sld)).
'$aleph_global'(prooftime,set(prooftime,(+inf))).
'$aleph_global'(prune_tree,set(prune_tree,false)).
'$aleph_global'(record_testclause_hook,set(record_testclause_hook,true)).
'$aleph_global'(reduce_end_hook,set(reduce_end_hook,true)).
'$aleph_global'(reduce_start_hook,set(reduce_start_hook,true)).
'$aleph_global'(reduce_prelims_hook,set(reduce_prelims_hook,true)).
'$aleph_global'(refine,set(refine,false)).
'$aleph_global'(refineop,set(refineop,false)).
'$aleph_global'(resample,set(resample,1)).
'$aleph_global'(rls_type,set(rls_type,gsat)).
'$aleph_global'(samplesize,set(samplesize,0)).
'$aleph_global'(sat_end_hook,set(sat_end_hook,true)).
'$aleph_global'(sat_start_hook,set(sat_start_hook,true)).
'$aleph_global'(search,set(search,bf)).
'$aleph_global'(searchstrat,set(searchstrat,bf)).
'$aleph_global'(recompute_cover,set(recompute_cover,false)).
'$aleph_global'(searchtime,set(searchtime,(+inf))).
'$aleph_global'(skolemvars,set(skolemvars,10000)).
'$aleph_global'(skolem_examples,set(skolem_examples,true)).
'$aleph_global'(splitvars,set(splitvars,false)).
'$aleph_global'(store_bottom,set(store_bottom,false)).
'$aleph_global'(subsample,set(subsample,false)).
'$aleph_global'(subsamplesize,set(subsamplesize,(+inf))).
'$aleph_global'(threads,set(threads,1)).
'$aleph_global'(trace_memory_usage,set(trace_memory_usage,false)).
'$aleph_global'(tries,set(tries,10)).
'$aleph_global'(typeoverlap,set(typeoverlap,0.95)).
'$aleph_global'(uniform_sample,set(uniform_sample,false)).
'$aleph_global'(updateback,set(updateback,true)).
'$aleph_global'(version,set(version,5)).
'$aleph_global'(clauselength,set(clauselength,10)).
'$aleph_global'(i,set(i,5)).
'$aleph_global'(noise,set(noise,1000)).
'$aleph_global'(minacc,set(minacc,0.1)).
'$aleph_global'(explore,set(explore,true)).
'$aleph_global'(nodes,set(nodes,500000)).
'$aleph_global'(evalfn,set(evalfn,f)).
'$aleph_global'(test_pos,set(test_pos,'test.f')).
'$aleph_global'(test_neg,set(test_neg,'test.n')).
'$aleph_global'(verbosity,set(verbosity,0)).
'$aleph_global'(minpos,set(minpos,10)).
'$aleph_global'(record,set(record,true)).
'$aleph_global'(recordfile,set(recordfile,'test.out')).
'$aleph_global'(recordfile_stream,set(recordfile_stream,'$stream'(4))).
'$aleph_global'(determination,determination(advisedby/2,taughtby/3)).
'$aleph_global'(determination,determination(advisedby/2,courselevel/2)).
'$aleph_global'(determination,determination(advisedby/2,position/2)).
'$aleph_global'(determination,determination(advisedby/2,projectmember/2)).
'$aleph_global'(determination,determination(advisedby/2,phase/2)).
'$aleph_global'(determination,determination(advisedby/2,tempadvisedby/2)).
'$aleph_global'(determination,determination(advisedby/2,yearsinprogram/2)).
'$aleph_global'(determination,determination(advisedby/2,ta/3)).
'$aleph_global'(determination,determination(advisedby/2,professor/1)).
'$aleph_global'(determination,determination(advisedby/2,student/1)).
'$aleph_global'(determination,determination(advisedby/2,allpublicationswith/2)).
'$aleph_global'(determination,determination(advisedby/2,nofpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpub/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubsratio/2)).
'$aleph_global'(modeb,modeb(*,taughtby(+course,-person,-date))).
'$aleph_global'(mode,mode(*,taughtby(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,taughtby(-course,+person,-date))).
'$aleph_global'(mode,mode(*,taughtby(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,-level))).
'$aleph_global'(mode,mode(*,courselevel(+course,-level))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,#level))).
'$aleph_global'(mode,mode(*,courselevel(+course,#level))).
'$aleph_global'(modeb,modeb(*,position(+person,-faculty))).
'$aleph_global'(mode,mode(*,position(+person,-faculty))).
'$aleph_global'(modeb,modeb(*,position(+person,#faculty))).
'$aleph_global'(mode,mode(*,position(+person,#faculty))).
'$aleph_global'(modeb,modeb(*,projectmember(+project,-person))).
'$aleph_global'(mode,mode(*,projectmember(+project,-person))).
'$aleph_global'(modeb,modeb(*,projectmember(-project,+person))).
'$aleph_global'(mode,mode(*,projectmember(-project,+person))).
'$aleph_global'(modeh,modeh(*,advisedby(+person,+person))).
'$aleph_global'(mode,mode(*,advisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,phase(+person,-phase))).
'$aleph_global'(mode,mode(*,phase(+person,-phase))).
'$aleph_global'(modeb,modeb(*,phase(+person,#phase))).
'$aleph_global'(mode,mode(*,phase(+person,#phase))).
'$aleph_global'(modeb,modeb(*,tempadvisedby(+person,+person))).
'$aleph_global'(mode,mode(*,tempadvisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,yearsinprogram(+person,-number))).
'$aleph_global'(mode,mode(*,yearsinprogram(+person,-number))).
'$aleph_global'(modeb,modeb(*,ta(+course,-person,-date))).
'$aleph_global'(mode,mode(*,ta(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,ta(-course,+person,-date))).
'$aleph_global'(mode,mode(*,ta(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,professor(+person))).
'$aleph_global'(mode,mode(*,professor(+person))).
'$aleph_global'(modeb,modeb(*,student(+person))).
'$aleph_global'(mode,mode(*,student(+person))).
'$aleph_global'(determination,determination(advisedby/2,geq/2)).
'$aleph_global'(modeb,modeb(1,geq(+number,#number))).
'$aleph_global'(mode,mode(1,geq(+number,#number))).
'$aleph_global'(modeb,modeb(1,geq(+number,+number))).
'$aleph_global'(mode,mode(1,geq(+number,+number))).
'$aleph_global'(determination,determination(advisedby/2,diff/2)).
'$aleph_global'(modeb,modeb(1,diff(+number,+number))).
'$aleph_global'(mode,mode(1,diff(+number,+number))).
'$aleph_global'(train_pos,set(train_pos,'advisedby.f')).
'$aleph_global'(train_neg,set(train_neg,'advisedby.n')).
'$aleph_global'(prior,set(prior,[0.0431965-pos,0.956803-neg])).
'$aleph_global'(stage,set(stage,command)).


set(qpacks,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks(_)),
   assert(qpacks:qpacks(A)).
set(discretize,A) :-
   ( A=on
   ->
     B=on
   ;
     ( A==off
     ->
       B=off
     )
   ;
     ( atom(A)
     ->
       B=on
     )
   ),
   !,
   ( A=on
   ->
     true
   ;
     ( A=off
     ->
       true
     )
   ;
     ensure_loaded(A)
   ),
   retractall(user:discretize(_)),
   assert(user:discretize(B)).
set(qpacks_compact,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks_compact(_)),
   assert(qpacks:qpacks_compact(A)).
set(A,B) :-
   check_setting(A,B),
   ( B=inf
   ->
     C is inf
   ;
     ( B=(+inf)
     ->
       C is inf
     )
   ;
     ( B=(-inf)
     ->
       C is(-inf)
     )
   ;
     C=B
   ),
   retractall(user:'$aleph_global'(A,set(A,_))),
   assertz(user:'$aleph_global'(A,set(A,C))),
   broadcast(set(A,C)),
   special_consideration(A,B).


setting(A,B) :-
   nonvar(A),
   '$aleph_global'(A,set(A,C)),
   !,
   B=C.
setting(A,B) :-
   default_setting(A,B).


init(yap) :-
   source,
   load_files(library(dbusage),[]),
   load_files(library(nb),[]),
   load_files(library(tries),[]),
   use_module(qpacks),
   use_module(prefix_trees),
   use_module(c2c),
   use_module(utils),
   ( prolog:predicate_property(user:false,built_in)
   ->
     prolog:hide_predicate(user:false)
   ;
     true
   ),
   style_check(single_var),
   yap_flag(unknown,error),
   prolog:assert_static(user: (aleph_random(A):-A is random)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     prolog:assert_static(user: (remove_alarm(A):-alarm(0,_,_)))
   ;
     prolog:assert_static(user:alarm(_,_,_)),
     prolog:assert_static(user:remove_alarm(_))
   ),
   prolog:assert_static(user: (aleph_consult(B):-consult(B))),
   prolog:assert_static(user: (aleph_reconsult(B):-reconsult(B))),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     prolog:assert_static(user: (thread_local  _))
   ),
   prolog:assert_static(user:broadcast(_)),
   prolog:assert_static(user: (aleph_background_predicate(C):-predicate_property(C,D),(D=static;D= (dynamic);D=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).
init(swi) :-
   redefine_system_predicate(false),
   style_check(+singleton),
   style_check(- (discontiguous)),
   dynamic false/0,
   dynamic example/3,
   assert(user: (aleph_random(A):-B=1000000,A is float(random(B-1))/float(B))),
   arithmetic_function(inf/0),
   assert(user:inf(1e+10)),
   assert(user: (gc:-garbage_collect)),
   assert(user: (depth_bound_call(C,D):-call_with_depth_limit(C,D,E),E\=depth_limit_exceeded)),
   ( prolog:predicate_property(user:numbervars(_,_,_),built_in)
   ->
     true
   ;
     assert(user: (numbervars(F,G,H):-numbervars(F,'$VAR',G,H)))
   ),
   assert(user: (assert_static(A):-assert(A))),
   assert(user: (system(A):-shell(A))),
   assert(user: (exists(A):-exists_file(A))),
   assert(user: (aleph_reconsult(I):-consult(I))),
   assert(user: (aleph_consult(A):-aleph_open(A,read,J),repeat,read(J,I),(I=end_of_file->close(J),!;assertz(I),fail))),
   use_module(library(broadcast)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     use_module(library(time))
   ;
     assert(user:alarm(_,_,_)),
     assert(user:remove_alarm(_))
   ),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     assert(user: (thread_local  _))
   ),
   assert(user: (aleph_background_predicate(K):-predicate_property(K,L),(L=interpreted;L=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).


prolog_type(yap) :-
   prolog:predicate_property(user:yap_flag(_,_),built_in),
   !.
prolog_type(swi).

:- dynamic message_hook/3.


:- dynamic portray_message/2.


:- dynamic term_expansion/2.


:- dynamic exception/3.


:- dynamic library_directory/1.

library_directory(A) :-
   current_prolog_flag(prolog_library_directory,A),
   A\=''.
library_directory(A) :-
   getenv('YAPSHAREDIR',A).
library_directory('~/share/Yap').
library_directory('.').
library_directory(A) :-
   system_library(A).

:- dynamic commons_directory/1.

commons_directory(A) :-
   system_commons(A).

:- dynamic foreign_directory/1.

foreign_directory(A) :-
   current_prolog_flag(prolog_foreign_directory,A),
   A\=''.
foreign_directory(A) :-
   current_prolog_flag(windows,true),
   file_search_path(path,A).
foreign_directory('.').
foreign_directory(yap('lib/Yap')).

:- dynamic prolog_file_type/2.

prolog_file_type(yap,prolog).
prolog_file_type(pl,prolog).
prolog_file_type(prolog,prolog).
prolog_file_type(A,prolog) :-
   current_prolog_flag(associate,A),
   A\==prolog,
   A\==pl,
   A\==yap.
prolog_file_type(qly,qly).
prolog_file_type(A,executable) :-
   current_prolog_flag(shared_object_extension,A).
prolog_file_type(pyd,executable).

:- dynamic file_search_path/2.

file_search_path(library,A) :-
   library_directory(A).
file_search_path(commons,A) :-
   commons_directory(A).
file_search_path(swi,A) :-
   current_prolog_flag(home,A).
file_search_path(yap,A) :-
   current_prolog_flag(home,A).
file_search_path(system,A) :-
   prolog_flag(host_type,A).
file_search_path(foreign,A) :-
   foreign_directory(A).
file_search_path(executable,A) :-
   foreign_directory(A).
file_search_path(path,C) :-
   getenv('PATH',A),
   ( current_prolog_flag(windows,true)
   ->
     atomic_list_concat(B,;,A)
   ;
     atomic_list_concat(B,:,A)
   ),
   lists:member(C,B).

:- dynamic goal_expansion/3.


:- dynamic unknown_predicate_handler/3.

[sat] [1]
[advisedby(person309_1,person378_1)]
[sat] [1]
[repeated literals] [117/422]

[bottom clause]
[literals] [305]
[saturation time] [0.066]


yearsinprogram(person100_1,5).
yearsinprogram(person113_1,4).
yearsinprogram(person116_1,3).
yearsinprogram(person118_1,4).
yearsinprogram(person122_1,4).
yearsinprogram(person126_1,5).
yearsinprogram(person129_1,6).
yearsinprogram(person130_1,8).
yearsinprogram(person13_1,7).
yearsinprogram(person139_1,3).
yearsinprogram(person14_1,10).
yearsinprogram(person141_1,6).
yearsinprogram(person142_1,9).
yearsinprogram(person148_1,5).
yearsinprogram(person149_1,5).
yearsinprogram(person15_1,3).
yearsinprogram(person154_1,4).
yearsinprogram(person155_1,2).
yearsinprogram(person157_1,4).
yearsinprogram(person159_1,2).
yearsinprogram(person161_1,7).
yearsinprogram(person163_1,4).
yearsinprogram(person172_1,1).
yearsinprogram(person175_1,2).
yearsinprogram(person176_1,2).
yearsinprogram(person18_1,3).
yearsinprogram(person182_1,3).
yearsinprogram(person183_1,4).
yearsinprogram(person186_1,1).
yearsinprogram(person187_1,1).
yearsinprogram(person19_1,1).
yearsinprogram(person191_1,4).
yearsinprogram(person193_1,1).
yearsinprogram(person200_1,4).
yearsinprogram(person20_1,1).
yearsinprogram(person204_1,6).
yearsinprogram(person205_1,1).
yearsinprogram(person206_1,6).
yearsinprogram(person208_1,4).
yearsinprogram(person21_1,5).
yearsinprogram(person212_1,7).
yearsinprogram(person217_1,5).
yearsinprogram(person218_1,12).
yearsinprogram(person222_1,1).
yearsinprogram(person226_1,4).
yearsinprogram(person228_1,3).
yearsinprogram(person233_1,1).
yearsinprogram(person239_1,4).
yearsinprogram(person241_1,3).
yearsinprogram(person242_1,5).
yearsinprogram(person249_1,7).
yearsinprogram(person253_1,5).
yearsinprogram(person255_1,5).
yearsinprogram(person257_1,7).
yearsinprogram(person262_1,7).
yearsinprogram(person263_1,6).
yearsinprogram(person265_1,9).
yearsinprogram(person266_1,5).
yearsinprogram(person270_1,1).
yearsinprogram(person27_1,1).
yearsinprogram(person272_1,2).
yearsinprogram(person275_1,5).
yearsinprogram(person276_1,3).
yearsinprogram(person277_1,1).
yearsinprogram(person278_1,2).
yearsinprogram(person280_1,3).
yearsinprogram(person283_1,1).
yearsinprogram(person284_1,3).
yearsinprogram(person286_1,3).
yearsinprogram(person288_1,5).
yearsinprogram(person299_1,3).
yearsinprogram(person300_1,8).
yearsinprogram(person303_1,4).
yearsinprogram(person309_1,3).
yearsinprogram(person311_1,3).
yearsinprogram(person312_1,4).
yearsinprogram(person314_1,4).
yearsinprogram(person318_1,5).
yearsinprogram(person320_1,3).
yearsinprogram(person333_1,2).
yearsinprogram(person343_1,1).
yearsinprogram(person348_1,3).
yearsinprogram(person352_1,5).
yearsinprogram(person353_1,4).
yearsinprogram(person357_1,4).
yearsinprogram(person361_1,6).
yearsinprogram(person362_1,3).
yearsinprogram(person363_1,3).
yearsinprogram(person368_1,4).
yearsinprogram(person37_1,1).
yearsinprogram(person374_1,12).
yearsinprogram(person376_1,4).
yearsinprogram(person377_1,1).
yearsinprogram(person380_1,6).
yearsinprogram(person381_1,10).
yearsinprogram(person382_1,3).
yearsinprogram(person383_1,2).
yearsinprogram(person384_1,3).
yearsinprogram(person390_1,2).
yearsinprogram(person391_1,4).
yearsinprogram(person398_1,1).
yearsinprogram(person402_1,2).
yearsinprogram(person403_1,12).
yearsinprogram(person404_1,4).
yearsinprogram(person406_1,5).
yearsinprogram(person408_1,2).
yearsinprogram(person411_1,6).
yearsinprogram(person41_1,5).
yearsinprogram(person412_1,3).
yearsinprogram(person416_1,1).
yearsinprogram(person417_1,1).
yearsinprogram(person418_1,3).
yearsinprogram(person419_1,7).
yearsinprogram(person42_1,1).
yearsinprogram(person422_1,3).
yearsinprogram(person426_1,5).
yearsinprogram(person427_1,4).
yearsinprogram(person429_1,5).
yearsinprogram(person431_1,2).
yearsinprogram(person432_1,5).
yearsinprogram(person435_1,4).
yearsinprogram(person45_1,5).
yearsinprogram(person51_1,2).
yearsinprogram(person6_1,2).
yearsinprogram(person62_1,2).
yearsinprogram(person63_1,5).
yearsinprogram(person67_1,6).
yearsinprogram(person68_1,5).
yearsinprogram(person70_1,1).
yearsinprogram(person73_1,4).
yearsinprogram(person75_1,6).
yearsinprogram(person80_1,6).
yearsinprogram(person81_1,6).
yearsinprogram(person83_1,5).
yearsinprogram(person89_1,5).
yearsinprogram(person9_1,5).
yearsinprogram(person92_1,5).
yearsinprogram(person94_1,1).
yearsinprogram(person96_1,5).
yearsinprogram(person99_1,2).


tempadvisedby(person172_1,person331_1).
tempadvisedby(person175_1,person107_1).
tempadvisedby(person182_1,person201_1).
tempadvisedby(person186_1,person290_1).
tempadvisedby(person187_1,person180_1).
tempadvisedby(person191_1,person298_1).
tempadvisedby(person19_1,person98_1).
tempadvisedby(person193_1,person415_1).
tempadvisedby(person20_1,person240_1).
tempadvisedby(person205_1,person324_1).
tempadvisedby(person233_1,person319_1).
tempadvisedby(person241_1,person393_1).
tempadvisedby(person270_1,person393_1).
tempadvisedby(person27_1,person335_1).
tempadvisedby(person277_1,person235_1).
tempadvisedby(person278_1,person378_1).
tempadvisedby(person283_1,person394_1).
tempadvisedby(person284_1,person211_1).
tempadvisedby(person299_1,person235_1).
tempadvisedby(person333_1,person211_1).
tempadvisedby(person343_1,person213_1).
tempadvisedby(person363_1,person72_1).
tempadvisedby(person377_1,person292_1).
tempadvisedby(person382_1,person415_1).
tempadvisedby(person383_1,person165_1).
tempadvisedby(person390_1,person331_1).
tempadvisedby(person398_1,person213_1).
tempadvisedby(person402_1,person234_1).
tempadvisedby(person408_1,person150_1).
tempadvisedby(person412_1,person168_1).
tempadvisedby(person416_1,person52_1).
tempadvisedby(person417_1,person104_1).
tempadvisedby(person42_1,person150_1).
tempadvisedby(person427_1,person393_1).
tempadvisedby(person431_1,person393_1).
tempadvisedby(person51_1,person72_1).
tempadvisedby(person94_1,person79_1).


taughtby(course0_4,person40_1,spring_0001_6).
taughtby(course101_4,person279_1,spring_0001_6).
taughtby(course101_4,person279_1,spring_0304_6).
taughtby(course101_4,person394_1,spring_0203_6).
taughtby(course103_4,person201_1,autumn_0102_6).
taughtby(course103_4,person201_1,autumn_0304_6).
taughtby(course104_4,person165_1,autumn_0203_6).
taughtby(course104_4,person181_1,autumn_0304_6).
taughtby(course104_4,person364_1,autumn_0102_6).
taughtby(course108_4,person279_1,autumn_0203_6).
taughtby(course110_4,person351_1,autumn_0102_6).
taughtby(course110_4,person351_1,autumn_0203_6).
taughtby(course110_4,person351_1,autumn_0304_6).
taughtby(course110_4,person351_1,winter_0001_6).
taughtby(course11_4,person298_1,autumn_0304_6).
taughtby(course11_4,person298_1,winter_0001_6).
taughtby(course11_4,person324_1,spring_0102_6).
taughtby(course11_4,person324_1,spring_0203_6).
taughtby(course11_4,person331_1,spring_0001_6).
taughtby(course11_4,person52_1,spring_0304_6).
taughtby(course11_4,person57_1,autumn_0001_6).
taughtby(course115_4,person342_1,spring_0001_6).
taughtby(course115_4,person342_1,spring_0203_6).
taughtby(course115_4,person72_1,spring_0102_6).
taughtby(course116_4,person375_1,spring_0102_6).
taughtby(course117_4,person181_1,spring_0203_6).
taughtby(course118_4,person351_1,summer_0203_6).
taughtby(course119_4,person324_1,winter_0203_6).
taughtby(course120_4,person235_1,spring_0001_6).
taughtby(course120_4,person235_1,spring_0102_6).
taughtby(course120_4,person235_1,spring_0203_6).
taughtby(course120_4,person235_1,spring_0304_6).
taughtby(course120_4,person82_1,spring_0304_6).
taughtby(course121_4,person52_1,winter_0203_6).
taughtby(course122,person378_1,autumn_0304_6).
taughtby(course122,person378_1,spring_0203_6).
taughtby(course123_4,person150_1,autumn_0001_6).
taughtby(course123_4,person150_1,spring_0102_6).
taughtby(course124_4,person335_1,spring_0001_6).
taughtby(course124_4,person46_1,spring_0304_6).
taughtby(course124_4,person9_1,winter_0304_6).
taughtby(course12_4,person211_1,autumn_0001_6).
taughtby(course12_4,person211_1,winter_0203_6).
taughtby(course12_4,person407_1,autumn_0304_6).
taughtby(course12_4,person79_1,autumn_0102_6).
taughtby(course125_4,person351_1,winter_0102_6).
taughtby(course125_4,person351_1,winter_0203_6).
taughtby(course125_4,person351_1,winter_0304_6).
taughtby(course126_4,person165_1,winter_0102_6).
taughtby(course126_4,person165_1,winter_0304_6).
taughtby(course128,person150_1,winter_0304_6).
taughtby(course129_4,person213_1,autumn_0203_6).
taughtby(course129_4,person213_1,winter_0102_6).
taughtby(course129_4,person213_1,winter_0304_6).
taughtby(course129_4,person373_1,winter_0001_6).
taughtby(course132,person319_1,autumn_0304_6).
taughtby(course134_4,person240_1,spring_0203_6).
taughtby(course13_4,person342_1,winter_0102_6).
taughtby(course13_4,person342_1,winter_0203_6).
taughtby(course13_4,person342_1,winter_0304_6).
taughtby(course13_4,person72_1,winter_0001_6).
taughtby(course136_4,person394_1,spring_0304_6).
taughtby(course137,person165_1,winter_0102_6).
taughtby(course137,person165_1,winter_0304_6).
taughtby(course138_4,person335_1,autumn_0304_6).
taughtby(course139_4,person235_1,winter_0203_6).
taughtby(course141_4,person150_1,winter_0203_6).
taughtby(course143_4,person211_1,winter_0001_6).
taughtby(course143_4,person407_1,winter_0102_6).
taughtby(course144_4,person278_1,summer_0203_6).
taughtby(course144_4,person331_1,autumn_0304_6).
taughtby(course14_4,person124_1,spring_0102_6).
taughtby(course146_4,person335_1,spring_0203_6).
taughtby(course146_4,person335_1,spring_0304_6).
taughtby(course147_4,person165_1,autumn_0304_6).
taughtby(course147_4,person165_1,winter_0001_6).
taughtby(course147_4,person165_1,winter_0203_6).
taughtby(course147_4,person201_1,autumn_0001_6).
taughtby(course147_4,person324_1,winter_0102_6).
taughtby(course147_4,person331_1,winter_0304_6).
taughtby(course147_4,person364_1,spring_0102_6).
taughtby(course147_4,person52_1,spring_0203_6).
taughtby(course147_4,person57_1,spring_0001_6).
taughtby(course148_4,person351_1,winter_0102_6).
taughtby(course148_4,person351_1,winter_0203_6).
taughtby(course149,person331_1,autumn_0304_6).
taughtby(course1_4,person40_1,winter_0102_6).
taughtby(course150,person351_1,summer_0102_6).
taughtby(course151_4,person179_1,autumn_0102_6).
taughtby(course151_4,person179_1,autumn_0304_6).
taughtby(course151_4,person179_1,winter_0203_6).
taughtby(course151_4,person234_1,spring_0102_6).
taughtby(course151_4,person234_1,spring_0203_6).
taughtby(course151_4,person234_1,spring_0304_6).
taughtby(course151_4,person235_1,winter_0001_6).
taughtby(course151_4,person267_1,autumn_0203_6).
taughtby(course151_4,person267_1,spring_0001_6).
taughtby(course151_4,person290_1,autumn_0001_6).
taughtby(course151_4,person290_1,winter_0102_6).
taughtby(course151_4,person82_1,winter_0304_6).
taughtby(course153_4,person342_1,spring_0102_6).
taughtby(course153_4,person394_1,spring_0001_6).
taughtby(course15_4,person292_1,spring_0203_6).
taughtby(course15_4,person292_1,winter_0001_6).
taughtby(course156_4,person240_1,autumn_0102_6).
taughtby(course156_4,person240_1,autumn_0304_6).
taughtby(course157_4,person342_1,autumn_0001_6).
taughtby(course157_4,person342_1,spring_0304_6).
taughtby(course157_4,person394_1,spring_0102_6).
taughtby(course157_4,person72_1,autumn_0102_6).
taughtby(course157_4,person72_1,autumn_0203_6).
taughtby(course157_4,person72_1,spring_0001_6).
taughtby(course157_4,person72_1,spring_0203_6).
taughtby(course158_4,person240_1,spring_0304_6).
taughtby(course158_4,person240_1,winter_0001_6).
taughtby(course159_4,person394_1,winter_0102_6).
taughtby(course160_4,person331_1,autumn_0001_6).
taughtby(course161_4,person201_1,winter_0001_6).
taughtby(course161_4,person201_1,winter_0304_6).
taughtby(course161_4,person298_1,winter_0102_6).
taughtby(course161_4,person331_1,winter_0203_6).
taughtby(course162_4,person213_1,spring_0102_6).
taughtby(course164_4,person351_1,spring_0001_6).
taughtby(course164_4,person351_1,spring_0102_6).
taughtby(course164_4,person351_1,spring_0203_6).
taughtby(course164_4,person351_1,spring_0304_6).
taughtby(course16_4,person240_1,spring_0001_6).
taughtby(course16_4,person79_1,winter_0203_6).
taughtby(course165_4,person141_1,spring_0102_6).
taughtby(course165_4,person181_1,winter_0304_6).
taughtby(course165_4,person231_1,autumn_0102_6).
taughtby(course165_4,person364_1,winter_0001_6).
taughtby(course165_4,person75_1,autumn_0304_6).
taughtby(course166_4,person235_1,winter_0102_6).
taughtby(course167_4,person98_1,winter_0203_6).
taughtby(course168_4,person240_1,spring_0203_6).
taughtby(course170_4,person211_1,winter_0102_6).
taughtby(course170_4,person407_1,spring_0203_6).
taughtby(course170_4,person79_1,winter_0001_6).
taughtby(course170_4,person79_1,winter_0304_6).
taughtby(course172_4,person335_1,autumn_0001_6).
taughtby(course172_4,person335_1,autumn_0203_6).
taughtby(course172_4,person46_1,autumn_0304_6).
taughtby(course173_4,person171_1,spring_0001_6).
taughtby(course174,person267_1,spring_0102_6).
taughtby(course18_4,person107_1,autumn_0203_6).
taughtby(course18_4,person107_1,spring_0001_6).
taughtby(course18_4,person107_1,winter_0102_6).
taughtby(course18_4,person213_1,autumn_0102_6).
taughtby(course18_4,person290_1,winter_0203_6).
taughtby(course18_4,person290_1,winter_0304_6).
taughtby(course18_4,person326_1,spring_0102_6).
taughtby(course18_4,person326_1,winter_0001_6).
taughtby(course18_4,person373_1,autumn_0001_6).
taughtby(course18_4,person375_1,spring_0203_6).
taughtby(course18_4,person375_1,spring_0304_6).
taughtby(course19_4,person370_1,spring_0304_6).
taughtby(course19_4,person5_1,winter_0102_6).
taughtby(course20_4,person180_1,winter_0001_6).
taughtby(course20_4,person180_1,winter_0102_6).
taughtby(course20_4,person180_1,winter_0304_6).
taughtby(course21_4,person22_1,spring_0203_6).
taughtby(course21_4,person99_1,autumn_0001_6).
taughtby(course23_4,person179_1,winter_0304_6).
taughtby(course24_4,person150_1,spring_0001_6).
taughtby(course24_4,person211_1,autumn_0102_6).
taughtby(course24_4,person211_1,spring_0203_6).
taughtby(course24_4,person240_1,autumn_0001_6).
taughtby(course24_4,person240_1,autumn_0203_6).
taughtby(course24_4,person240_1,spring_0102_6).
taughtby(course24_4,person407_1,spring_0304_6).
taughtby(course24_4,person79_1,autumn_0304_6).
taughtby(course2_4,person180_1,winter_0001_6).
taughtby(course2_4,person180_1,winter_0102_6).
taughtby(course27_4,person165_1,spring_0001_6).
taughtby(course27_4,person165_1,spring_0102_6).
taughtby(course27_4,person165_1,spring_0304_6).
taughtby(course27_4,person331_1,spring_0203_6).
taughtby(course28_4,person394_1,winter_0102_6).
taughtby(course29_4,person298_1,winter_0001_6).
taughtby(course30_4,person290_1,autumn_0203_6).
taughtby(course30_4,person290_1,spring_0001_6).
taughtby(course30_4,person290_1,spring_0102_6).
taughtby(course30_4,person290_1,spring_0203_6).
taughtby(course30_4,person290_1,spring_0304_6).
taughtby(course32_4,person319_1,winter_0001_6).
taughtby(course34_4,person179_1,winter_0102_6).
taughtby(course36_4,person181_1,spring_0203_6).
taughtby(course38_4,person104_1,autumn_0102_6).
taughtby(course38_4,person104_1,autumn_0203_6).
taughtby(course38_4,person104_1,winter_0001_6).
taughtby(course38_4,person104_1,winter_0203_6).
taughtby(course38_4,person124_1,autumn_0304_6).
taughtby(course38_4,person124_1,winter_0102_6).
taughtby(course38_4,person204_1,autumn_0001_6).
taughtby(course38_4,person255_1,winter_0304_6).
taughtby(course39_4,person415_1,spring_0102_6).
taughtby(course3,person279_1,autumn_0203_6).
taughtby(course40_4,person165_1,spring_0203_6).
taughtby(course40_4,person298_1,spring_0102_6).
taughtby(course40_4,person298_1,winter_0304_6).
taughtby(course40_4,person378_1,spring_0001_6).
taughtby(course41,person351_1,winter_0304_6).
taughtby(course44_4,person171_1,autumn_0001_6).
taughtby(course44_4,person171_1,autumn_0102_6).
taughtby(course44_4,person171_1,autumn_0203_6).
taughtby(course44_4,person171_1,autumn_0304_6).
taughtby(course44_4,person293_1,winter_0001_6).
taughtby(course44_4,person415_1,spring_0102_6).
taughtby(course44_4,person415_1,winter_0203_6).
taughtby(course44_4,person415_1,winter_0304_6).
taughtby(course4_4,person107_1,autumn_0102_6).
taughtby(course4_4,person107_1,spring_0203_6).
taughtby(course46_4,person335_1,winter_0001_6).
taughtby(course46_4,person335_1,winter_0203_6).
taughtby(course46_4,person335_1,winter_0304_6).
taughtby(course48_4,person107_1,autumn_0001_6).
taughtby(course48_4,person213_1,autumn_0304_6).
taughtby(course48_4,person375_1,autumn_0102_6).
taughtby(course48_4,person375_1,autumn_0203_6).
taughtby(course49_4,person189_1,spring_0304_6).
taughtby(course49_4,person248_1,spring_0203_6).
taughtby(course49_4,person248_1,winter_0203_6).
taughtby(course49_4,person263_1,winter_0102_6).
taughtby(course49_4,person64_1,summer_0102_6).
taughtby(course49_4,person64_1,summer_0203_6).
taughtby(course49_4,person64_1,winter_0304_6).
taughtby(course50_4,person171_1,spring_0102_6).
taughtby(course50_4,person171_1,spring_0304_6).
taughtby(course50_4,person171_1,winter_0001_6).
taughtby(course51_4,person166_1,autumn_0102_6).
taughtby(course51_4,person18_1,autumn_0203_6).
taughtby(course51_4,person5_1,autumn_0001_6).
taughtby(course52_4,person168_1,spring_0001_6).
taughtby(course52_4,person168_1,spring_0102_6).
taughtby(course52_4,person168_1,winter_0203_6).
taughtby(course52_4,person168_1,winter_0304_6).
taughtby(course53_4,person189_1,autumn_0304_6).
taughtby(course53_4,person248_1,autumn_0203_6).
taughtby(course53_4,person248_1,autumn_0304_6).
taughtby(course57_4,person150_1,winter_0304_6).
taughtby(course61_4,person107_1,spring_0203_6).
taughtby(course62_4,person101_1,winter_0001_6).
taughtby(course62_4,person101_1,winter_0102_6).
taughtby(course63_4,person335_1,spring_0102_6).
taughtby(course64_4,person79_1,spring_0001_6).
taughtby(course64_4,person79_1,spring_0203_6).
taughtby(course66_4,person165_1,autumn_0102_6).
taughtby(course66_4,person298_1,autumn_0001_6).
taughtby(course67_4,person394_1,winter_0001_6).
taughtby(course68_4,person201_1,winter_0102_6).
taughtby(course68_4,person324_1,winter_0304_6).
taughtby(course68_4,person331_1,autumn_0203_6).
taughtby(course68_4,person331_1,winter_0001_6).
taughtby(course71_4,person5_1,winter_0001_6).
taughtby(course74_4,person104_1,autumn_0304_6).
taughtby(course74_4,person104_1,spring_0102_6).
taughtby(course74_4,person124_1,autumn_0203_6).
taughtby(course74_4,person124_1,spring_0001_6).
taughtby(course7_4,person415_1,spring_0304_6).
taughtby(course75_4,person267_1,spring_0102_6).
taughtby(course75_4,person267_1,winter_0203_6).
taughtby(course75_4,person267_1,winter_0304_6).
taughtby(course76_4,person319_1,autumn_0304_6).
taughtby(course76_4,person319_1,spring_0102_6).
taughtby(course77_4,person165_1,autumn_0001_6).
taughtby(course77_4,person324_1,autumn_0102_6).
taughtby(course77_4,person52_1,autumn_0203_6).
taughtby(course77_4,person52_1,autumn_0304_6).
taughtby(course79_4,person72_1,autumn_0304_6).
taughtby(course80_4,person101_1,spring_0304_6).
taughtby(course80_4,person180_1,spring_0001_6).
taughtby(course80_4,person98_1,spring_0102_6).
taughtby(course80_4,person98_1,spring_0203_6).
taughtby(course82,person407_1,winter_0102_6).
taughtby(course84_4,person324_1,winter_0203_6).
taughtby(course8_4,person297_1,spring_0001_6).
taughtby(course8_4,person297_1,spring_0102_6).
taughtby(course88,person235_1,winter_0304_6).
taughtby(course89_4,person394_1,winter_0203_6).
taughtby(course89_4,person394_1,winter_0304_6).
taughtby(course91_4,person331_1,spring_0304_6).
taughtby(course93_4,person351_1,spring_0102_6).
taughtby(course9_4,person235_1,winter_0304_6).
taughtby(course97_4,person324_1,spring_0304_6).
taughtby(course98,person103_1,winter_0102_6).


ta(course101_4,person241_1,spring_0203_6).
ta(course103_4,person182_1,autumn_0304_6).
ta(course104_4,person182_1,spring_0102_6).
ta(course104_4,person191_1,spring_0102_6).
ta(course104_4,person237_1,autumn_0203_6).
ta(course104_4,person237_1,winter_0203_6).
ta(course104_4,person278_1,autumn_0203_6).
ta(course104_4,person401_1,autumn_0304_6).
ta(course104_4,person424_1,winter_0304_6).
ta(course110_4,person317_1,autumn_0203_6).
ta(course110_4,person327_1,autumn_0203_6).
ta(course110_4,person36_1,autumn_0304_6).
ta(course110_4,person61_1,autumn_0304_6).
ta(course11_4,person125_1,autumn_0203_6).
ta(course11_4,person144_1,spring_0203_6).
ta(course11_4,person172_1,autumn_0304_6).
ta(course11_4,person205_1,autumn_0304_6).
ta(course11_4,person310_1,autumn_0203_6).
ta(course11_4,person390_1,autumn_0203_6).
ta(course11_4,person422_1,spring_0102_6).
ta(course11_4,person58_1,spring_0203_6).
ta(course118_4,person296_1,summer_0203_6).
ta(course118_4,person317_1,summer_0203_6).
ta(course124_4,person105_1,autumn_0304_6).
ta(course124_4,person108_1,autumn_0203_6).
ta(course124_4,person108_1,spring_0203_6).
ta(course124_4,person18_1,winter_0203_6).
ta(course124_4,person203_1,autumn_0203_6).
ta(course124_4,person203_1,spring_0203_6).
ta(course124_4,person35_1,winter_0203_6).
ta(course124_4,person76_1,winter_0102_6).
ta(course124_4,person9_1,winter_0102_6).
ta(course12_4,person21_1,winter_0203_6).
ta(course128_4,person271_1,winter_0304_6).
ta(course128_4,person392_1,winter_0304_6).
ta(course129_4,person340_1,winter_0102_6).
ta(course129_4,person67_1,winter_0304_6).
ta(course132_4,person94_1,autumn_0304_6).
ta(course13_4,person217_1,winter_0102_6).
ta(course13_4,person431_1,winter_0304_6).
ta(course13_4,person51_1,winter_0203_6).
ta(course137_4,person288_1,winter_0102_6).
ta(course137_4,person383_1,winter_0304_6).
ta(course138_4,person18_1,autumn_0304_6).
ta(course141_4,person14_1,winter_0203_6).
ta(course14_4,person15_1,spring_0102_6).
ta(course147_4,person125_1,winter_0203_6).
ta(course147_4,person23_1,winter_0304_6).
ta(course147_4,person309_1,spring_0102_6).
ta(course147_4,person310_1,autumn_0304_6).
ta(course147_4,person310_1,spring_0203_6).
ta(course147_4,person356_1,spring_0102_6).
ta(course147_4,person356_1,winter_0102_6).
ta(course147_4,person390_1,spring_0203_6).
ta(course147_4,person6_1,winter_0203_6).
ta(course147_4,person75_1,winter_0102_6).
ta(course148_4,person140_1,winter_0203_6).
ta(course148_4,person31_1,winter_0102_6).
ta(course148_4,person327_1,winter_0203_6).
ta(course149_4,person390_1,autumn_0304_6).
ta(course150_4,person102_1,summer_0102_6).
ta(course150_4,person327_1,summer_0102_6).
ta(course151_4,person129_1,autumn_0304_6).
ta(course151_4,person155_1,winter_0203_6).
ta(course151_4,person167_1,autumn_0203_6).
ta(course151_4,person186_1,autumn_0203_6).
ta(course151_4,person223_1,winter_0102_6).
ta(course151_4,person269_1,spring_0203_6).
ta(course151_4,person299_1,spring_0102_6).
ta(course151_4,person299_1,winter_0102_6).
ta(course151_4,person299_1,winter_0304_6).
ta(course151_4,person4_1,autumn_0304_6).
ta(course151_4,person4_1,winter_0304_6).
ta(course151_4,person71_1,winter_0304_6).
ta(course153_4,person195_1,spring_0102_6).
ta(course153_4,person428_1,spring_0102_6).
ta(course155_4,person226_1,autumn_0203_6).
ta(course156_4,person257_1,autumn_0304_6).
ta(course157_4,person119_1,spring_0203_6).
ta(course157_4,person146_1,spring_0102_6).
ta(course157_4,person158_1,autumn_0203_6).
ta(course157_4,person214_1,spring_0102_6).
ta(course157_4,person230_1,spring_0203_6).
ta(course157_4,person258_1,spring_0203_6).
ta(course157_4,person31_1,autumn_0304_6).
ta(course157_4,person3_1,autumn_0203_6).
ta(course157_4,person3_1,spring_0203_6).
ta(course157_4,person321_1,autumn_0203_6).
ta(course157_4,person328_1,autumn_0304_6).
ta(course157_4,person428_1,autumn_0203_6).
ta(course157_4,person88_1,spring_0102_6).
ta(course157_4,person90_1,spring_0102_6).
ta(course159_4,person113_1,winter_0102_6).
ta(course161_4,person191_1,winter_0304_6).
ta(course161_4,person249_1,winter_0102_6).
ta(course161_4,person350_1,winter_0203_6).
ta(course161_4,person390_1,winter_0203_6).
ta(course165_4,person141_1,winter_0304_6).
ta(course165_4,person191_1,autumn_0203_6).
ta(course165_4,person294_1,spring_0102_6).
ta(course165_4,person315_1,winter_0102_6).
ta(course165_4,person416_1,autumn_0304_6).
ta(course165_4,person422_1,winter_0203_6).
ta(course165_4,person58_1,winter_0203_6).
ta(course166_4,person100_1,winter_0102_6).
ta(course172_4,person325_1,autumn_0203_6).
ta(course174_4,person123_1,spring_0102_6).
ta(course18_4,person116_1,winter_0203_6).
ta(course18_4,person15_1,winter_0102_6).
ta(course18_4,person155_1,autumn_0203_6).
ta(course18_4,person274_1,spring_0203_6).
ta(course18_4,person274_1,winter_0304_6).
ta(course18_4,person277_1,autumn_0304_6).
ta(course18_4,person280_1,winter_0102_6).
ta(course18_4,person354_1,autumn_0203_6).
ta(course18_4,person398_1,winter_0304_6).
ta(course18_4,person67_1,autumn_0304_6).
ta(course18_4,person67_1,spring_0102_6).
ta(course19_4,person232_1,winter_0102_6).
ta(course20_4,person368_1,winter_0304_6).
ta(course20_4,person84_1,winter_0102_6).
ta(course21_4,person198_1,spring_0203_6).
ta(course23_4,person116_1,winter_0304_6).
ta(course24_4,person21_1,spring_0203_6).
ta(course24_4,person70_1,autumn_0304_6).
ta(course27_4,person249_1,spring_0203_6).
ta(course27_4,person75_1,spring_0102_6).
ta(course30_4,person116_1,spring_0102_6).
ta(course3_4,person431_1,autumn_0203_6).
ta(course36_4,person278_1,spring_0203_6).
ta(course38_4,person154_1,autumn_0203_6).
ta(course38_4,person190_1,autumn_0304_6).
ta(course38_4,person207_1,autumn_0304_6).
ta(course38_4,person207_1,winter_0304_6).
ta(course38_4,person222_1,autumn_0304_6).
ta(course38_4,person222_1,winter_0304_6).
ta(course38_4,person255_1,winter_0102_6).
ta(course38_4,person357_1,winter_0102_6).
ta(course38_4,person62_1,winter_0203_6).
ta(course38_4,person92_1,winter_0102_6).
ta(course39_4,person73_1,spring_0102_6).
ta(course40_4,person303_1,spring_0102_6).
ta(course40_4,person303_1,spring_0203_6).
ta(course40_4,person390_1,winter_0304_6).
ta(course41_4,person296_1,winter_0304_6).
ta(course41_4,person36_1,winter_0304_6).
ta(course44_4,person193_1,winter_0304_6).
ta(course44_4,person286_1,autumn_0203_6).
ta(course44_4,person377_1,autumn_0304_6).
ta(course44_4,person382_1,spring_0102_6).
ta(course44_4,person382_1,winter_0203_6).
ta(course44_4,person420_1,winter_0203_6).
ta(course44_4,person86_1,spring_0102_6).
ta(course45_4,person155_1,autumn_0304_6).
ta(course45_4,person358_1,autumn_0203_6).
ta(course45_4,person71_1,autumn_0304_6).
ta(course46_4,person429_1,winter_0203_6).
ta(course46_4,person429_1,winter_0304_6).
ta(course48_4,person155_1,autumn_0304_6).
ta(course49_4,person287_1,spring_0203_6).
ta(course49_4,person287_1,winter_0203_6).
ta(course49_4,person361_1,summer_0102_6).
ta(course49_4,person361_1,summer_0203_6).
ta(course49_4,person361_1,winter_0304_6).
ta(course49_4,person87_1,spring_0203_6).
ta(course49_4,person87_1,winter_0203_6).
ta(course49_4,person96_1,winter_0102_6).
ta(course50_4,person314_1,spring_0102_6).
ta(course51_4,person27_1,autumn_0304_6).
ta(course51_4,person39_1,spring_0102_6).
ta(course51_4,person96_1,spring_0203_6).
ta(course52_4,person318_1,spring_0102_6).
ta(course52_4,person70_1,winter_0304_6).
ta(course53_4,person287_1,autumn_0203_6).
ta(course61_4,person155_1,spring_0203_6).
ta(course62_4,person126_1,winter_0102_6).
ta(course68_4,person191_1,winter_0102_6).
ta(course68_4,person309_1,winter_0102_6).
ta(course68_4,person356_1,autumn_0203_6).
ta(course68_4,person416_1,winter_0304_6).
ta(course74_4,person204_1,spring_0102_6).
ta(course74_4,person255_1,autumn_0203_6).
ta(course79_4,person119_1,autumn_0304_6).
ta(course79_4,person157_1,autumn_0304_6).
ta(course80_4,person358_1,spring_0203_6).
ta(course82_4,person381_1,winter_0102_6).
ta(course84_4,person141_1,winter_0203_6).
ta(course88_4,person130_1,winter_0304_6).
ta(course89_4,person188_1,winter_0203_6).
ta(course89_4,person228_1,winter_0304_6).
ta(course89_4,person41_1,winter_0203_6).
ta(course93_4,person178_1,spring_0102_6).
ta(course93_4,person228_1,spring_0102_6).
ta(course93_4,person31_1,spring_0102_6).
ta(course98_4,person303_1,winter_0102_6).


student(person100_1).
student(person102_1).
student(person105_1).
student(person108_1).
student(person113_1).
student(person116_1).
student(person118_1).
student(person119_1).
student(person122_1).
student(person123_1).
student(person125_1).
student(person126_1).
student(person129_1).
student(person130_1).
student(person13_1).
student(person131_1).
student(person138_1).
student(person139_1).
student(person140_1).
student(person14_1).
student(person141_1).
student(person142_1).
student(person144_1).
student(person146_1).
student(person148_1).
student(person149_1).
student(person15_1).
student(person154_1).
student(person155_1).
student(person157_1).
student(person158_1).
student(person159_1).
student(person161_1).
student(person163_1).
student(person167_1).
student(person172_1).
student(person175_1).
student(person176_1).
student(person178_1).
student(person18_1).
student(person182_1).
student(person183_1).
student(person186_1).
student(person187_1).
student(person188_1).
student(person190_1).
student(person19_1).
student(person191_1).
student(person193_1).
student(person195_1).
student(person198_1).
student(person200_1).
student(person20_1).
student(person203_1).
student(person204_1).
student(person205_1).
student(person206_1).
student(person207_1).
student(person208_1).
student(person21_1).
student(person212_1).
student(person214_1).
student(person217_1).
student(person218_1).
student(person222_1).
student(person223_1).
student(person226_1).
student(person228_1).
student(person230_1).
student(person23_1).
student(person232_1).
student(person233_1).
student(person237_1).
student(person239_1).
student(person241_1).
student(person242_1).
student(person249_1).
student(person253_1).
student(person255_1).
student(person257_1).
student(person258_1).
student(person259_1).
student(person261_1).
student(person262_1).
student(person263_1).
student(person265_1).
student(person266_1).
student(person269_1).
student(person270_1).
student(person27_1).
student(person271_1).
student(person272_1).
student(person274_1).
student(person275_1).
student(person276_1).
student(person277_1).
student(person278_1).
student(person280_1).
student(person283_1).
student(person284_1).
student(person286_1).
student(person287_1).
student(person288_1).
student(person294_1).
student(person296_1).
student(person299_1).
student(person300_1).
student(person303_1).
student(person306_1).
student(person309_1).
student(person3_1).
student(person310_1).
student(person31_1).
student(person311_1).
student(person312_1).
student(person314_1).
student(person315_1).
student(person317_1).
student(person318_1).
student(person320_1).
student(person321_1).
student(person322_1).
student(person325_1).
student(person327_1).
student(person328_1).
student(person333_1).
student(person340_1).
student(person343_1).
student(person347_1).
student(person348_1).
student(person350_1).
student(person35_1).
student(person352_1).
student(person353_1).
student(person354_1).
student(person356_1).
student(person357_1).
student(person358_1).
student(person36_1).
student(person361_1).
student(person362_1).
student(person363_1).
student(person368_1).
student(person37_1).
student(person374_1).
student(person376_1).
student(person377_1).
student(person380_1).
student(person38_1).
student(person381_1).
student(person382_1).
student(person383_1).
student(person384_1).
student(person390_1).
student(person39_1).
student(person391_1).
student(person392_1).
student(person397_1).
student(person398_1).
student(person400_1).
student(person401_1).
student(person402_1).
student(person403_1).
student(person404_1).
student(person406_1).
student(person408_1).
student(person4_1).
student(person410_1).
student(person41_1).
student(person411_1).
student(person412_1).
student(person416_1).
student(person417_1).
student(person418_1).
student(person419_1).
student(person420_1).
student(person42_1).
student(person422_1).
student(person424_1).
student(person426_1).
student(person427_1).
student(person428_1).
student(person429_1).
student(person431_1).
student(person432_1).
student(person435_1).
student(person45_1).
student(person51_1).
student(person58_1).
student(person6_1).
student(person61_1).
student(person62_1).
student(person63_1).
student(person67_1).
student(person68_1).
student(person70_1).
student(person71_1).
student(person73_1).
student(person75_1).
student(person76_1).
student(person77_1).
student(person80_1).
student(person81_1).
student(person83_1).
student(person84_1).
student(person85_1).
student(person86_1).
student(person87_1).
student(person88_1).
student(person89_1).
student(person90_1).
student(person9_1).
student(person92_1).
student(person94_1).
student(person96_1).
student(person99_1).


sameproject(project0_5,project0_5).
sameproject(project100_5,project100_5).
sameproject(project101_5,project101_5).
sameproject(project102_5,project102_5).
sameproject(project103_5,project103_5).
sameproject(project104_5,project104_5).
sameproject(project105_5,project105_5).
sameproject(project10_5,project10_5).
sameproject(project106_5,project106_5).
sameproject(project107_5,project107_5).
sameproject(project108_5,project108_5).
sameproject(project109_5,project109_5).
sameproject(project110_5,project110_5).
sameproject(project111_5,project111_5).
sameproject(project112_5,project112_5).
sameproject(project113_5,project113_5).
sameproject(project114_5,project114_5).
sameproject(project115_5,project115_5).
sameproject(project11_5,project11_5).
sameproject(project116_5,project116_5).
sameproject(project117_5,project117_5).
sameproject(project118_5,project118_5).
sameproject(project119_5,project119_5).
sameproject(project120_5,project120_5).
sameproject(project121_5,project121_5).
sameproject(project122_5,project122_5).
sameproject(project123_5,project123_5).
sameproject(project124_5,project124_5).
sameproject(project125_5,project125_5).
sameproject(project12_5,project12_5).
sameproject(project126_5,project126_5).
sameproject(project127_5,project127_5).
sameproject(project128_5,project128_5).
sameproject(project130_5,project130_5).
sameproject(project131_5,project131_5).
sameproject(project132_5,project132_5).
sameproject(project133_5,project133_5).
sameproject(project134_5,project134_5).
sameproject(project135_5,project135_5).
sameproject(project13_5,project13_5).
sameproject(project136_5,project136_5).
sameproject(project138_5,project138_5).
sameproject(project139_5,project139_5).
sameproject(project140_5,project140_5).
sameproject(project141_5,project141_5).
sameproject(project142_5,project142_5).
sameproject(project143_5,project143_5).
sameproject(project144_5,project144_5).
sameproject(project145_5,project145_5).
sameproject(project14_5,project14_5).
sameproject(project146_5,project146_5).
sameproject(project147_5,project147_5).
sameproject(project148_5,project148_5).
sameproject(project149_5,project149_5).
sameproject(project150_5,project150_5).
sameproject(project151_5,project151_5).
sameproject(project152_5,project152_5).
sameproject(project15_5,project15_5).
sameproject(project1_5,project1_5).
sameproject(project16_5,project16_5).
sameproject(project17_5,project17_5).
sameproject(project18_5,project18_5).
sameproject(project19_5,project19_5).
sameproject(project20_5,project20_5).
sameproject(project21_5,project21_5).
sameproject(project22_5,project22_5).
sameproject(project23_5,project23_5).
sameproject(project24_5,project24_5).
sameproject(project25_5,project25_5).
sameproject(project2_5,project2_5).
sameproject(project26_5,project26_5).
sameproject(project27_5,project27_5).
sameproject(project28_5,project28_5).
sameproject(project29_5,project29_5).
sameproject(project30_5,project30_5).
sameproject(project31_5,project31_5).
sameproject(project32_5,project32_5).
sameproject(project33_5,project33_5).
sameproject(project34_5,project34_5).
sameproject(project35_5,project35_5).
sameproject(project3_5,project3_5).
sameproject(project36_5,project36_5).
sameproject(project37_5,project37_5).
sameproject(project38_5,project38_5).
sameproject(project39_5,project39_5).
sameproject(project40_5,project40_5).
sameproject(project41_5,project41_5).
sameproject(project42_5,project42_5).
sameproject(project43_5,project43_5).
sameproject(project44_5,project44_5).
sameproject(project45_5,project45_5).
sameproject(project4_5,project4_5).
sameproject(project46_5,project46_5).
sameproject(project47_5,project47_5).
sameproject(project48_5,project48_5).
sameproject(project49_5,project49_5).
sameproject(project50_5,project50_5).
sameproject(project51_5,project51_5).
sameproject(project52_5,project52_5).
sameproject(project53_5,project53_5).
sameproject(project54_5,project54_5).
sameproject(project55_5,project55_5).
sameproject(project5_5,project5_5).
sameproject(project56_5,project56_5).
sameproject(project57_5,project57_5).
sameproject(project58_5,project58_5).
sameproject(project59_5,project59_5).
sameproject(project60_5,project60_5).
sameproject(project61_5,project61_5).
sameproject(project62_5,project62_5).
sameproject(project63_5,project63_5).
sameproject(project64_5,project64_5).
sameproject(project65_5,project65_5).
sameproject(project6_5,project6_5).
sameproject(project66_5,project66_5).
sameproject(project67_5,project67_5).
sameproject(project68_5,project68_5).
sameproject(project69_5,project69_5).
sameproject(project70_5,project70_5).
sameproject(project71_5,project71_5).
sameproject(project72_5,project72_5).
sameproject(project73_5,project73_5).
sameproject(project74_5,project74_5).
sameproject(project75_5,project75_5).
sameproject(project7_5,project7_5).
sameproject(project76_5,project76_5).
sameproject(project77_5,project77_5).
sameproject(project78_5,project78_5).
sameproject(project79_5,project79_5).
sameproject(project80_5,project80_5).
sameproject(project81_5,project81_5).
sameproject(project82_5,project82_5).
sameproject(project83_5,project83_5).
sameproject(project84_5,project84_5).
sameproject(project85_5,project85_5).
sameproject(project8_5,project8_5).
sameproject(project86_5,project86_5).
sameproject(project87_5,project87_5).
sameproject(project88_5,project88_5).
sameproject(project89_5,project89_5).
sameproject(project90_5,project90_5).
sameproject(project91_5,project91_5).
sameproject(project92_5,project92_5).
sameproject(project93_5,project93_5).
sameproject(project94_5,project94_5).
sameproject(project95_5,project95_5).
sameproject(project9_5,project9_5).
sameproject(project96_5,project96_5).
sameproject(project97_5,project97_5).
sameproject(project98_5,project98_5).
sameproject(project99_5,project99_5).


sameperson(person100_1,person100_1).
sameperson(person101_1,person101_1).
sameperson(person102_1,person102_1).
sameperson(person103_1,person103_1).
sameperson(person104_1,person104_1).
sameperson(person105_1,person105_1).
sameperson(person107_1,person107_1).
sameperson(person108_1,person108_1).
sameperson(person111_1,person111_1).
sameperson(person113_1,person113_1).
sameperson(person115_1,person115_1).
sameperson(person116_1,person116_1).
sameperson(person118_1,person118_1).
sameperson(person119_1,person119_1).
sameperson(person122_1,person122_1).
sameperson(person123_1,person123_1).
sameperson(person124_1,person124_1).
sameperson(person125_1,person125_1).
sameperson(person126_1,person126_1).
sameperson(person129_1,person129_1).
sameperson(person130_1,person130_1).
sameperson(person131_1,person131_1).
sameperson(person13_1,person13_1).
sameperson(person138_1,person138_1).
sameperson(person139_1,person139_1).
sameperson(person140_1,person140_1).
sameperson(person141_1,person141_1).
sameperson(person14_1,person14_1).
sameperson(person142_1,person142_1).
sameperson(person144_1,person144_1).
sameperson(person146_1,person146_1).
sameperson(person148_1,person148_1).
sameperson(person149_1,person149_1).
sameperson(person150_1,person150_1).
sameperson(person15_1,person15_1).
sameperson(person154_1,person154_1).
sameperson(person155_1,person155_1).
sameperson(person157_1,person157_1).
sameperson(person158_1,person158_1).
sameperson(person159_1,person159_1).
sameperson(person161_1,person161_1).
sameperson(person163_1,person163_1).
sameperson(person165_1,person165_1).
sameperson(person166_1,person166_1).
sameperson(person167_1,person167_1).
sameperson(person168_1,person168_1).
sameperson(person171_1,person171_1).
sameperson(person172_1,person172_1).
sameperson(person175_1,person175_1).
sameperson(person176_1,person176_1).
sameperson(person178_1,person178_1).
sameperson(person179_1,person179_1).
sameperson(person180_1,person180_1).
sameperson(person181_1,person181_1).
sameperson(person18_1,person18_1).
sameperson(person182_1,person182_1).
sameperson(person183_1,person183_1).
sameperson(person185_1,person185_1).
sameperson(person186_1,person186_1).
sameperson(person187_1,person187_1).
sameperson(person188_1,person188_1).
sameperson(person189_1,person189_1).
sameperson(person190_1,person190_1).
sameperson(person191_1,person191_1).
sameperson(person19_1,person19_1).
sameperson(person193_1,person193_1).
sameperson(person195_1,person195_1).
sameperson(person198_1,person198_1).
sameperson(person200_1,person200_1).
sameperson(person201_1,person201_1).
sameperson(person20_1,person20_1).
sameperson(person203_1,person203_1).
sameperson(person204_1,person204_1).
sameperson(person205_1,person205_1).
sameperson(person206_1,person206_1).
sameperson(person207_1,person207_1).
sameperson(person208_1,person208_1).
sameperson(person211_1,person211_1).
sameperson(person21_1,person21_1).
sameperson(person212_1,person212_1).
sameperson(person213_1,person213_1).
sameperson(person214_1,person214_1).
sameperson(person217_1,person217_1).
sameperson(person218_1,person218_1).
sameperson(person22_1,person22_1).
sameperson(person222_1,person222_1).
sameperson(person223_1,person223_1).
sameperson(person226_1,person226_1).
sameperson(person228_1,person228_1).
sameperson(person230_1,person230_1).
sameperson(person231_1,person231_1).
sameperson(person23_1,person23_1).
sameperson(person232_1,person232_1).
sameperson(person233_1,person233_1).
sameperson(person234_1,person234_1).
sameperson(person235_1,person235_1).
sameperson(person237_1,person237_1).
sameperson(person239_1,person239_1).
sameperson(person240_1,person240_1).
sameperson(person241_1,person241_1).
sameperson(person242_1,person242_1).
sameperson(person248_1,person248_1).
sameperson(person249_1,person249_1).
sameperson(person253_1,person253_1).
sameperson(person255_1,person255_1).
sameperson(person257_1,person257_1).
sameperson(person258_1,person258_1).
sameperson(person259_1,person259_1).
sameperson(person261_1,person261_1).
sameperson(person262_1,person262_1).
sameperson(person263_1,person263_1).
sameperson(person265_1,person265_1).
sameperson(person266_1,person266_1).
sameperson(person267_1,person267_1).
sameperson(person269_1,person269_1).
sameperson(person270_1,person270_1).
sameperson(person271_1,person271_1).
sameperson(person27_1,person27_1).
sameperson(person272_1,person272_1).
sameperson(person274_1,person274_1).
sameperson(person275_1,person275_1).
sameperson(person276_1,person276_1).
sameperson(person277_1,person277_1).
sameperson(person278_1,person278_1).
sameperson(person279_1,person279_1).
sameperson(person280_1,person280_1).
sameperson(person283_1,person283_1).
sameperson(person284_1,person284_1).
sameperson(person286_1,person286_1).
sameperson(person287_1,person287_1).
sameperson(person288_1,person288_1).
sameperson(person290_1,person290_1).
sameperson(person29_1,person29_1).
sameperson(person292_1,person292_1).
sameperson(person293_1,person293_1).
sameperson(person294_1,person294_1).
sameperson(person296_1,person296_1).
sameperson(person297_1,person297_1).
sameperson(person298_1,person298_1).
sameperson(person299_1,person299_1).
sameperson(person300_1,person300_1).
sameperson(person303_1,person303_1).
sameperson(person306_1,person306_1).
sameperson(person309_1,person309_1).
sameperson(person310_1,person310_1).
sameperson(person311_1,person311_1).
sameperson(person31_1,person31_1).
sameperson(person312_1,person312_1).
sameperson(person314_1,person314_1).
sameperson(person315_1,person315_1).
sameperson(person317_1,person317_1).
sameperson(person318_1,person318_1).
sameperson(person319_1,person319_1).
sameperson(person3_1,person3_1).
sameperson(person320_1,person320_1).
sameperson(person321_1,person321_1).
sameperson(person322_1,person322_1).
sameperson(person324_1,person324_1).
sameperson(person325_1,person325_1).
sameperson(person326_1,person326_1).
sameperson(person327_1,person327_1).
sameperson(person328_1,person328_1).
sameperson(person331_1,person331_1).
sameperson(person333_1,person333_1).
sameperson(person335_1,person335_1).
sameperson(person340_1,person340_1).
sameperson(person342_1,person342_1).
sameperson(person343_1,person343_1).
sameperson(person347_1,person347_1).
sameperson(person348_1,person348_1).
sameperson(person349_1,person349_1).
sameperson(person350_1,person350_1).
sameperson(person351_1,person351_1).
sameperson(person35_1,person35_1).
sameperson(person352_1,person352_1).
sameperson(person353_1,person353_1).
sameperson(person354_1,person354_1).
sameperson(person356_1,person356_1).
sameperson(person357_1,person357_1).
sameperson(person358_1,person358_1).
sameperson(person361_1,person361_1).
sameperson(person36_1,person36_1).
sameperson(person362_1,person362_1).
sameperson(person363_1,person363_1).
sameperson(person364_1,person364_1).
sameperson(person368_1,person368_1).
sameperson(person370_1,person370_1).
sameperson(person37_1,person37_1).
sameperson(person373_1,person373_1).
sameperson(person374_1,person374_1).
sameperson(person375_1,person375_1).
sameperson(person376_1,person376_1).
sameperson(person377_1,person377_1).
sameperson(person378_1,person378_1).
sameperson(person380_1,person380_1).
sameperson(person381_1,person381_1).
sameperson(person38_1,person38_1).
sameperson(person382_1,person382_1).
sameperson(person383_1,person383_1).
sameperson(person384_1,person384_1).
sameperson(person390_1,person390_1).
sameperson(person391_1,person391_1).
sameperson(person39_1,person39_1).
sameperson(person392_1,person392_1).
sameperson(person393_1,person393_1).
sameperson(person394_1,person394_1).
sameperson(person397_1,person397_1).
sameperson(person398_1,person398_1).
sameperson(person400_1,person400_1).
sameperson(person401_1,person401_1).
sameperson(person40_1,person40_1).
sameperson(person402_1,person402_1).
sameperson(person403_1,person403_1).
sameperson(person404_1,person404_1).
sameperson(person406_1,person406_1).
sameperson(person407_1,person407_1).
sameperson(person408_1,person408_1).
sameperson(person410_1,person410_1).
sameperson(person411_1,person411_1).
sameperson(person41_1,person41_1).
sameperson(person412_1,person412_1).
sameperson(person415_1,person415_1).
sameperson(person416_1,person416_1).
sameperson(person417_1,person417_1).
sameperson(person418_1,person418_1).
sameperson(person419_1,person419_1).
sameperson(person4_1,person4_1).
sameperson(person420_1,person420_1).
sameperson(person42_1,person42_1).
sameperson(person422_1,person422_1).
sameperson(person424_1,person424_1).
sameperson(person426_1,person426_1).
sameperson(person427_1,person427_1).
sameperson(person428_1,person428_1).
sameperson(person429_1,person429_1).
sameperson(person431_1,person431_1).
sameperson(person432_1,person432_1).
sameperson(person435_1,person435_1).
sameperson(person45_1,person45_1).
sameperson(person46_1,person46_1).
sameperson(person51_1,person51_1).
sameperson(person5_1,person5_1).
sameperson(person52_1,person52_1).
sameperson(person57_1,person57_1).
sameperson(person58_1,person58_1).
sameperson(person61_1,person61_1).
sameperson(person6_1,person6_1).
sameperson(person62_1,person62_1).
sameperson(person63_1,person63_1).
sameperson(person64_1,person64_1).
sameperson(person67_1,person67_1).
sameperson(person68_1,person68_1).
sameperson(person70_1,person70_1).
sameperson(person71_1,person71_1).
sameperson(person7_1,person7_1).
sameperson(person72_1,person72_1).
sameperson(person73_1,person73_1).
sameperson(person75_1,person75_1).
sameperson(person76_1,person76_1).
sameperson(person77_1,person77_1).
sameperson(person79_1,person79_1).
sameperson(person80_1,person80_1).
sameperson(person81_1,person81_1).
sameperson(person82_1,person82_1).
sameperson(person83_1,person83_1).
sameperson(person84_1,person84_1).
sameperson(person85_1,person85_1).
sameperson(person86_1,person86_1).
sameperson(person87_1,person87_1).
sameperson(person88_1,person88_1).
sameperson(person89_1,person89_1).
sameperson(person90_1,person90_1).
sameperson(person9_1,person9_1).
sameperson(person92_1,person92_1).
sameperson(person94_1,person94_1).
sameperson(person96_1,person96_1).
sameperson(person98_1,person98_1).
sameperson(person99_1,person99_1).


samecourse(course0_4,course0_4).
samecourse(course101_4,course101_4).
samecourse(course103_4,course103_4).
samecourse(course104_4,course104_4).
samecourse(course107_4,course107_4).
samecourse(course108_4,course108_4).
samecourse(course109_4,course109_4).
samecourse(course110_4,course110_4).
samecourse(course114_4,course114_4).
samecourse(course11_4,course11_4).
samecourse(course115_4,course115_4).
samecourse(course116_4,course116_4).
samecourse(course117_4,course117_4).
samecourse(course118_4,course118_4).
samecourse(course119_4,course119_4).
samecourse(course120_4,course120_4).
samecourse(course121_4,course121_4).
samecourse(course122_4,course122_4).
samecourse(course123_4,course123_4).
samecourse(course124_4,course124_4).
samecourse(course12_4,course12_4).
samecourse(course125_4,course125_4).
samecourse(course126_4,course126_4).
samecourse(course128_4,course128_4).
samecourse(course129_4,course129_4).
samecourse(course131_4,course131_4).
samecourse(course132_4,course132_4).
samecourse(course134_4,course134_4).
samecourse(course13_4,course13_4).
samecourse(course135_4,course135_4).
samecourse(course136_4,course136_4).
samecourse(course137_4,course137_4).
samecourse(course138_4,course138_4).
samecourse(course139_4,course139_4).
samecourse(course141_4,course141_4).
samecourse(course143_4,course143_4).
samecourse(course144_4,course144_4).
samecourse(course14_4,course14_4).
samecourse(course146_4,course146_4).
samecourse(course147_4,course147_4).
samecourse(course148_4,course148_4).
samecourse(course149_4,course149_4).
samecourse(course1_4,course1_4).
samecourse(course150_4,course150_4).
samecourse(course151_4,course151_4).
samecourse(course152_4,course152_4).
samecourse(course153_4,course153_4).
samecourse(course154_4,course154_4).
samecourse(course15_4,course15_4).
samecourse(course155_4,course155_4).
samecourse(course156_4,course156_4).
samecourse(course157_4,course157_4).
samecourse(course158_4,course158_4).
samecourse(course159_4,course159_4).
samecourse(course160_4,course160_4).
samecourse(course161_4,course161_4).
samecourse(course162_4,course162_4).
samecourse(course164_4,course164_4).
samecourse(course16_4,course16_4).
samecourse(course165_4,course165_4).
samecourse(course166_4,course166_4).
samecourse(course167_4,course167_4).
samecourse(course168_4,course168_4).
samecourse(course169_4,course169_4).
samecourse(course170_4,course170_4).
samecourse(course172_4,course172_4).
samecourse(course173_4,course173_4).
samecourse(course174_4,course174_4).
samecourse(course18_4,course18_4).
samecourse(course19_4,course19_4).
samecourse(course20_4,course20_4).
samecourse(course21_4,course21_4).
samecourse(course23_4,course23_4).
samecourse(course24_4,course24_4).
samecourse(course2_4,course2_4).
samecourse(course27_4,course27_4).
samecourse(course28_4,course28_4).
samecourse(course29_4,course29_4).
samecourse(course30_4,course30_4).
samecourse(course32_4,course32_4).
samecourse(course34_4,course34_4).
samecourse(course3_4,course3_4).
samecourse(course35_4,course35_4).
samecourse(course36_4,course36_4).
samecourse(course38_4,course38_4).
samecourse(course39_4,course39_4).
samecourse(course40_4,course40_4).
samecourse(course41_4,course41_4).
samecourse(course44_4,course44_4).
samecourse(course4_4,course4_4).
samecourse(course45_4,course45_4).
samecourse(course46_4,course46_4).
samecourse(course48_4,course48_4).
samecourse(course49_4,course49_4).
samecourse(course50_4,course50_4).
samecourse(course51_4,course51_4).
samecourse(course52_4,course52_4).
samecourse(course53_4,course53_4).
samecourse(course54_4,course54_4).
samecourse(course5_4,course5_4).
samecourse(course56_4,course56_4).
samecourse(course57_4,course57_4).
samecourse(course61_4,course61_4).
samecourse(course62_4,course62_4).
samecourse(course63_4,course63_4).
samecourse(course64_4,course64_4).
samecourse(course65_4,course65_4).
samecourse(course66_4,course66_4).
samecourse(course67_4,course67_4).
samecourse(course68_4,course68_4).
samecourse(course71_4,course71_4).
samecourse(course74_4,course74_4).
samecourse(course7_4,course7_4).
samecourse(course75_4,course75_4).
samecourse(course76_4,course76_4).
samecourse(course77_4,course77_4).
samecourse(course79_4,course79_4).
samecourse(course80_4,course80_4).
samecourse(course82_4,course82_4).
samecourse(course83_4,course83_4).
samecourse(course84_4,course84_4).
samecourse(course8_4,course8_4).
samecourse(course85_4,course85_4).
samecourse(course86_4,course86_4).
samecourse(course87_4,course87_4).
samecourse(course88_4,course88_4).
samecourse(course89_4,course89_4).
samecourse(course91_4,course91_4).
samecourse(course93_4,course93_4).
samecourse(course9_4,course9_4).
samecourse(course97_4,course97_4).
samecourse(course98_4,course98_4).


publication(title0_3,person240_1).
publication(title0_3,person415_1).
publication(title100_3,person113_1).
publication(title100_3,person41_1).
publication(title101_3,person234_1).
publication(title101_3,person80_1).
publication(title102_3,person240_1).
publication(title102_3,person257_1).
publication(title103_3,person240_1).
publication(title103_3,person292_1).
publication(title103_3,person352_1).
publication(title103_3,person415_1).
publication(title10_3,person13_1).
publication(title10_3,person240_1).
publication(title104_3,person165_1).
publication(title104_3,person242_1).
publication(title104_3,person29_1).
publication(title105_3,person324_1).
publication(title105_3,person331_1).
publication(title106_3,person335_1).
publication(title106_3,person5_1).
publication(title107_3,person314_1).
publication(title107_3,person415_1).
publication(title108_3,person235_1).
publication(title108_3,person402_1).
publication(title109_3,person342_1).
publication(title109_3,person393_1).
publication(title109_3,person81_1).
publication(title110_3,person14_1).
publication(title110_3,person407_1).
publication(title111_3,person306_1).
publication(title111_3,person393_1).
publication(title112_3,person347_1).
publication(title113_3,person211_1).
publication(title113_3,person407_1).
publication(title11_3,person211_1).
publication(title11_3,person407_1).
publication(title114_3,person211_1).
publication(title114_3,person407_1).
publication(title115_3,person380_1).
publication(title115_3,person79_1).
publication(title116_3,person342_1).
publication(title116_3,person393_1).
publication(title116_3,person410_1).
publication(title116_3,person81_1).
publication(title117_3,person234_1).
publication(title117_3,person375_1).
publication(title118_3,person14_1).
publication(title118_3,person150_1).
publication(title118_3,person208_1).
publication(title118_3,person318_1).
publication(title118_3,person353_1).
publication(title118_3,person408_1).
publication(title119_3,person240_1).
publication(title119_3,person257_1).
publication(title120_3,person347_1).
publication(title120_3,person407_1).
publication(title121_3,person234_1).
publication(title121_3,person82_1).
publication(title122_3,person262_1).
publication(title122_3,person415_1).
publication(title123_3,person142_1).
publication(title123_3,person393_1).
publication(title12_3,person407_1).
publication(title12_3,person415_1).
publication(title124_3,person107_1).
publication(title124_3,person376_1).
publication(title125_3,person148_1).
publication(title125_3,person171_1).
publication(title126_3,person298_1).
publication(title126_3,person77_1).
publication(title127_3,person331_1).
publication(title127_3,person378_1).
publication(title128_3,person298_1).
publication(title128_3,person77_1).
publication(title129_3,person165_1).
publication(title129_3,person29_1).
publication(title130_3,person335_1).
publication(title130_3,person5_1).
publication(title131_3,person101_1).
publication(title131_3,person253_1).
publication(title132_3,person211_1).
publication(title132_3,person407_1).
publication(title133_3,person101_1).
publication(title133_3,person124_1).
publication(title13_3,person13_1).
publication(title13_3,person240_1).
publication(title135_3,person342_1).
publication(title135_3,person393_1).
publication(title136_3,person331_1).
publication(title136_3,person378_1).
publication(title137_3,person206_1).
publication(title137_3,person322_1).
publication(title137_3,person342_1).
publication(title137_3,person72_1).
publication(title138_3,person165_1).
publication(title138_3,person331_1).
publication(title139_3,person101_1).
publication(title139_3,person98_1).
publication(title1_3,person393_1).
publication(title1_3,person40_1).
publication(title140_3,person240_1).
publication(title140_3,person415_1).
publication(title141_3,person101_1).
publication(title141_3,person104_1).
publication(title141_3,person124_1).
publication(title141_3,person126_1).
publication(title141_3,person234_1).
publication(title141_3,person235_1).
publication(title141_3,person255_1).
publication(title141_3,person357_1).
publication(title142_3,person183_1).
publication(title142_3,person429_1).
publication(title143_3,person179_1).
publication(title143_3,person419_1).
publication(title14_3,person335_1).
publication(title14_3,person429_1).
publication(title144_3,person234_1).
publication(title144_3,person82_1).
publication(title146_3,person373_1).
publication(title146_3,person411_1).
publication(title147_3,person171_1).
publication(title147_3,person415_1).
publication(title147_3,person63_1).
publication(title148_3,person101_1).
publication(title148_3,person98_1).
publication(title149_3,person104_1).
publication(title149_3,person204_1).
publication(title150_3,person148_1).
publication(title150_3,person171_1).
publication(title152_3,person331_1).
publication(title152_3,person378_1).
publication(title153_3,person306_1).
publication(title153_3,person393_1).
publication(title15_3,person342_1).
publication(title15_3,person410_1).
publication(title154_3,person331_1).
publication(title154_3,person378_1).
publication(title155_3,person165_1).
publication(title155_3,person29_1).
publication(title157_3,person101_1).
publication(title157_3,person253_1).
publication(title158_3,person324_1).
publication(title158_3,person331_1).
publication(title159_3,person331_1).
publication(title159_3,person75_1).
publication(title160_3,person211_1).
publication(title160_3,person407_1).
publication(title161_3,person13_1).
publication(title161_3,person240_1).
publication(title162_3,person185_1).
publication(title162_3,person193_1).
publication(title163_3,person290_1).
publication(title163_3,person82_1).
publication(title164_3,person331_1).
publication(title164_3,person378_1).
publication(title165_3,person211_1).
publication(title165_3,person407_1).
publication(title166_3,person292_1).
publication(title166_3,person352_1).
publication(title167_3,person240_1).
publication(title167_3,person407_1).
publication(title168_3,person234_1).
publication(title168_3,person80_1).
publication(title169_3,person107_1).
publication(title169_3,person234_1).
publication(title169_3,person403_1).
publication(title169_3,person80_1).
publication(title170_3,person171_1).
publication(title170_3,person314_1).
publication(title171_3,person161_1).
publication(title171_3,person407_1).
publication(title172_3,person314_1).
publication(title172_3,person415_1).
publication(title173_3,person180_1).
publication(title173_3,person212_1).
publication(title17_3,person107_1).
publication(title17_3,person234_1).
publication(title17_3,person80_1).
publication(title174_3,person101_1).
publication(title174_3,person98_1).
publication(title175_3,person165_1).
publication(title175_3,person242_1).
publication(title175_3,person29_1).
publication(title176_3,person107_1).
publication(title176_3,person234_1).
publication(title176_3,person80_1).
publication(title177_3,person240_1).
publication(title177_3,person407_1).
publication(title178_3,person171_1).
publication(title178_3,person63_1).
publication(title179_3,person407_1).
publication(title179_3,person415_1).
publication(title180_3,person104_1).
publication(title180_3,person99_1).
publication(title181_3,person300_1).
publication(title181_3,person342_1).
publication(title181_3,person393_1).
publication(title182_3,person407_1).
publication(title182_3,person415_1).
publication(title182_3,person63_1).
publication(title183_3,person394_1).
publication(title183_3,person72_1).
publication(title18_3,person298_1).
publication(title18_3,person77_1).
publication(title184_3,person165_1).
publication(title184_3,person29_1).
publication(title185_3,person113_1).
publication(title185_3,person404_1).
publication(title186_3,person104_1).
publication(title186_3,person124_1).
publication(title186_3,person204_1).
publication(title186_3,person99_1).
publication(title187_3,person290_1).
publication(title187_3,person82_1).
publication(title189_3,person234_1).
publication(title189_3,person80_1).
publication(title190_3,person211_1).
publication(title190_3,person407_1).
publication(title192_3,person240_1).
publication(title192_3,person407_1).
publication(title193_3,person165_1).
publication(title193_3,person378_1).
publication(title19_3,person324_1).
publication(title19_3,person331_1).
publication(title194_3,person234_1).
publication(title194_3,person375_1).
publication(title195_3,person380_1).
publication(title195_3,person79_1).
publication(title196_3,person234_1).
publication(title196_3,person82_1).
publication(title197_3,person101_1).
publication(title197_3,person98_1).
publication(title198_3,person107_1).
publication(title198_3,person234_1).
publication(title199_3,person211_1).
publication(title199_3,person407_1).
publication(title200_3,person165_1).
publication(title200_3,person29_1).
publication(title201_3,person404_1).
publication(title201_3,person72_1).
publication(title202_3,person331_1).
publication(title202_3,person378_1).
publication(title203_3,person113_1).
publication(title203_3,person404_1).
publication(title20_3,person331_1).
publication(title20_3,person75_1).
publication(title204_3,person234_1).
publication(title204_3,person82_1).
publication(title205_3,person165_1).
publication(title205_3,person242_1).
publication(title205_3,person29_1).
publication(title206_3,person15_1).
publication(title206_3,person89_1).
publication(title206_3,person92_1).
publication(title207_3,person211_1).
publication(title207_3,person407_1).
publication(title208_3,person240_1).
publication(title208_3,person352_1).
publication(title208_3,person415_1).
publication(title209_3,person107_1).
publication(title209_3,person234_1).
publication(title210_3,person138_1).
publication(title210_3,person324_1).
publication(title211_3,person290_1).
publication(title211_3,person82_1).
publication(title212_3,person211_1).
publication(title212_3,person407_1).
publication(title213_3,person234_1).
publication(title213_3,person375_1).
publication(title21_3,person324_1).
publication(title21_3,person331_1).
publication(title214_3,person101_1).
publication(title214_3,person124_1).
publication(title214_3,person253_1).
publication(title215_3,person165_1).
publication(title215_3,person242_1).
publication(title215_3,person29_1).
publication(title216_3,person298_1).
publication(title216_3,person77_1).
publication(title217_3,person161_1).
publication(title217_3,person240_1).
publication(title217_3,person407_1).
publication(title218_3,person211_1).
publication(title218_3,person407_1).
publication(title220_3,person142_1).
publication(title220_3,person393_1).
publication(title221_3,person290_1).
publication(title221_3,person82_1).
publication(title222_3,person314_1).
publication(title222_3,person415_1).
publication(title222_3,person63_1).
publication(title223_3,person101_1).
publication(title223_3,person98_1).
publication(title224_3,person347_1).
publication(title224_3,person407_1).
publication(title225_3,person171_1).
publication(title225_3,person63_1).
publication(title226_3,person380_1).
publication(title226_3,person79_1).
publication(title227_3,person104_1).
publication(title227_3,person124_1).
publication(title228_3,person211_1).
publication(title228_3,person407_1).
publication(title229_3,person211_1).
publication(title229_3,person407_1).
publication(title231_3,person380_1).
publication(title231_3,person79_1).
publication(title232_3,person290_1).
publication(title232_3,person82_1).
publication(title233_3,person211_1).
publication(title233_3,person407_1).
publication(title23_3,person290_1).
publication(title23_3,person82_1).
publication(title234_3,person234_1).
publication(title234_3,person82_1).
publication(title235_3,person298_1).
publication(title235_3,person77_1).
publication(title236_3,person415_1).
publication(title236_3,person63_1).
publication(title237_3,person234_1).
publication(title237_3,person80_1).
publication(title238_3,person211_1).
publication(title238_3,person407_1).
publication(title239_3,person234_1).
publication(title239_3,person375_1).
publication(title2_3,person101_1).
publication(title2_3,person98_1).
publication(title240_3,person211_1).
publication(title240_3,person407_1).
publication(title241_3,person211_1).
publication(title241_3,person407_1).
publication(title242_3,person89_1).
publication(title242_3,person92_1).
publication(title243_3,person331_1).
publication(title243_3,person378_1).
publication(title24_3,person211_1).
publication(title24_3,person407_1).
publication(title244_3,person107_1).
publication(title244_3,person376_1).
publication(title245_3,person101_1).
publication(title245_3,person124_1).
publication(title245_3,person253_1).
publication(title246_3,person104_1).
publication(title246_3,person124_1).
publication(title247_3,person234_1).
publication(title247_3,person80_1).
publication(title248_3,person13_1).
publication(title248_3,person240_1).
publication(title249_3,person234_1).
publication(title249_3,person82_1).
publication(title250_3,person161_1).
publication(title250_3,person407_1).
publication(title251_3,person290_1).
publication(title251_3,person82_1).
publication(title253_3,person124_1).
publication(title253_3,person290_1).
publication(title25_3,person21_1).
publication(title25_3,person211_1).
publication(title25_3,person284_1).
publication(title25_3,person407_1).
publication(title254_3,person240_1).
publication(title254_3,person257_1).
publication(title255_3,person211_1).
publication(title255_3,person407_1).
publication(title256_3,person290_1).
publication(title256_3,person82_1).
publication(title257_3,person183_1).
publication(title257_3,person429_1).
publication(title258_3,person407_1).
publication(title258_3,person415_1).
publication(title259_3,person211_1).
publication(title259_3,person407_1).
publication(title260_3,person347_1).
publication(title260_3,person407_1).
publication(title261_3,person262_1).
publication(title261_3,person352_1).
publication(title261_3,person406_1).
publication(title261_3,person63_1).
publication(title262_3,person100_1).
publication(title262_3,person89_1).
publication(title263_3,person142_1).
publication(title263_3,person342_1).
publication(title26_3,person13_1).
publication(title26_3,person240_1).
publication(title264_3,person107_1).
publication(title264_3,person376_1).
publication(title266_3,person407_1).
publication(title266_3,person415_1).
publication(title267_3,person104_1).
publication(title267_3,person124_1).
publication(title268_3,person161_1).
publication(title268_3,person240_1).
publication(title268_3,person407_1).
publication(title269_3,person171_1).
publication(title269_3,person415_1).
publication(title269_3,person73_1).
publication(title270_3,person240_1).
publication(title270_3,person407_1).
publication(title271_3,person161_1).
publication(title271_3,person407_1).
publication(title272_3,person342_1).
publication(title272_3,person393_1).
publication(title272_3,person410_1).
publication(title273_3,person407_1).
publication(title273_3,person415_1).
publication(title27_3,person324_1).
publication(title27_3,person331_1).
publication(title274_3,person240_1).
publication(title274_3,person257_1).
publication(title275_3,person13_1).
publication(title275_3,person240_1).
publication(title276_3,person249_1).
publication(title276_3,person331_1).
publication(title277_3,person104_1).
publication(title277_3,person204_1).
publication(title279_3,person242_1).
publication(title279_3,person29_1).
publication(title280_3,person290_1).
publication(title280_3,person82_1).
publication(title281_3,person100_1).
publication(title281_3,person154_1).
publication(title281_3,person235_1).
publication(title282_3,person101_1).
publication(title282_3,person124_1).
publication(title282_3,person253_1).
publication(title283_3,person407_1).
publication(title283_3,person415_1).
publication(title28_3,person234_1).
publication(title28_3,person80_1).
publication(title284_3,person14_1).
publication(title284_3,person407_1).
publication(title285_3,person234_1).
publication(title285_3,person80_1).
publication(title286_3,person204_1).
publication(title286_3,person99_1).
publication(title287_3,person138_1).
publication(title287_3,person242_1).
publication(title287_3,person77_1).
publication(title289_3,person234_1).
publication(title289_3,person403_1).
publication(title290_3,person262_1).
publication(title290_3,person415_1).
publication(title291_3,person165_1).
publication(title291_3,person242_1).
publication(title291_3,person29_1).
publication(title292_3,person211_1).
publication(title292_3,person407_1).
publication(title29_3,person262_1).
publication(title29_3,person415_1).
publication(title294_3,person101_1).
publication(title294_3,person124_1).
publication(title294_3,person126_1).
publication(title294_3,person234_1).
publication(title294_3,person235_1).
publication(title294_3,person255_1).
publication(title294_3,person357_1).
publication(title295_3,person314_1).
publication(title295_3,person415_1).
publication(title297_3,person407_1).
publication(title297_3,person415_1).
publication(title298_3,person298_1).
publication(title298_3,person77_1).
publication(title299_3,person290_1).
publication(title299_3,person82_1).
publication(title300_3,person107_1).
publication(title300_3,person80_1).
publication(title301_3,person314_1).
publication(title301_3,person415_1).
publication(title301_3,person63_1).
publication(title302_3,person217_1).
publication(title302_3,person342_1).
publication(title302_3,person72_1).
publication(title303_3,person107_1).
publication(title303_3,person376_1).
publication(title30_3,person394_1).
publication(title30_3,person72_1).
publication(title304_3,person241_1).
publication(title304_3,person342_1).
publication(title304_3,person393_1).
publication(title304_3,person81_1).
publication(title306_3,person290_1).
publication(title306_3,person82_1).
publication(title307_3,person165_1).
publication(title307_3,person29_1).
publication(title308_3,person331_1).
publication(title308_3,person378_1).
publication(title309_3,person298_1).
publication(title309_3,person77_1).
publication(title310_3,person211_1).
publication(title310_3,person407_1).
publication(title311_3,person298_1).
publication(title311_3,person77_1).
publication(title312_3,person407_1).
publication(title312_3,person415_1).
publication(title31_3,person101_1).
publication(title31_3,person419_1).
publication(title314_3,person262_1).
publication(title314_3,person352_1).
publication(title314_3,person406_1).
publication(title314_3,person63_1).
publication(title315_3,person234_1).
publication(title315_3,person82_1).
publication(title316_3,person14_1).
publication(title316_3,person407_1).
publication(title317_3,person298_1).
publication(title317_3,person77_1).
publication(title318_3,person380_1).
publication(title318_3,person79_1).
publication(title320_3,person107_1).
publication(title320_3,person376_1).
publication(title321_3,person165_1).
publication(title321_3,person242_1).
publication(title321_3,person29_1).
publication(title322_3,person393_1).
publication(title322_3,person40_1).
publication(title323_3,person211_1).
publication(title323_3,person407_1).
publication(title32_3,person290_1).
publication(title32_3,person82_1).
publication(title324_3,person165_1).
publication(title324_3,person29_1).
publication(title325_3,person211_1).
publication(title325_3,person415_1).
publication(title325_3,person45_1).
publication(title325_3,person83_1).
publication(title326_3,person378_1).
publication(title326_3,person397_1).
publication(title327_3,person331_1).
publication(title327_3,person378_1).
publication(title328_3,person331_1).
publication(title328_3,person378_1).
publication(title329_3,person211_1).
publication(title329_3,person415_1).
publication(title329_3,person45_1).
publication(title330_3,person165_1).
publication(title330_3,person242_1).
publication(title330_3,person29_1).
publication(title331_3,person161_1).
publication(title331_3,person240_1).
publication(title331_3,person407_1).
publication(title332_3,person234_1).
publication(title332_3,person82_1).
publication(title333_3,person13_1).
publication(title333_3,person240_1).
publication(title33_3,person240_1).
publication(title33_3,person407_1).
publication(title334_3,person331_1).
publication(title334_3,person378_1).
publication(title335_3,person211_1).
publication(title335_3,person407_1).
publication(title337_3,person240_1).
publication(title337_3,person415_1).
publication(title338_3,person179_1).
publication(title338_3,person235_1).
publication(title338_3,person347_1).
publication(title339_3,person234_1).
publication(title339_3,person403_1).
publication(title339_3,person80_1).
publication(title3_3,person204_1).
publication(title3_3,person234_1).
publication(title340_3,person240_1).
publication(title340_3,person415_1).
publication(title341_3,person211_1).
publication(title341_3,person407_1).
publication(title342_3,person234_1).
publication(title342_3,person80_1).
publication(title343_3,person290_1).
publication(title343_3,person82_1).
publication(title34_3,person290_1).
publication(title34_3,person82_1).
publication(title344_3,person13_1).
publication(title344_3,person240_1).
publication(title345_3,person211_1).
publication(title345_3,person407_1).
publication(title346_3,person393_1).
publication(title346_3,person40_1).
publication(title347_3,person407_1).
publication(title347_3,person415_1).
publication(title35_3,person300_1).
publication(title35_3,person342_1).
publication(title35_3,person393_1).
publication(title36_3,person290_1).
publication(title36_3,person82_1).
publication(title37_3,person100_1).
publication(title37_3,person154_1).
publication(title37_3,person235_1).
publication(title38_3,person407_1).
publication(title38_3,person415_1).
publication(title40_3,person239_1).
publication(title40_3,person293_1).
publication(title41_3,person262_1).
publication(title41_3,person292_1).
publication(title41_3,person415_1).
publication(title42_3,person235_1).
publication(title42_3,person402_1).
publication(title43_3,person234_1).
publication(title43_3,person403_1).
publication(title4_3,person300_1).
publication(title4_3,person393_1).
publication(title44_3,person211_1).
publication(title44_3,person415_1).
publication(title44_3,person45_1).
publication(title45_3,person342_1).
publication(title45_3,person393_1).
publication(title45_3,person410_1).
publication(title45_3,person81_1).
publication(title46_3,person234_1).
publication(title46_3,person403_1).
publication(title46_3,person80_1).
publication(title47_3,person240_1).
publication(title47_3,person292_1).
publication(title47_3,person352_1).
publication(title47_3,person415_1).
publication(title48_3,person104_1).
publication(title48_3,person124_1).
publication(title48_3,person234_1).
publication(title49_3,person211_1).
publication(title49_3,person407_1).
publication(title50_3,person292_1).
publication(title50_3,person352_1).
publication(title51_3,person179_1).
publication(title51_3,person235_1).
publication(title52_3,person101_1).
publication(title52_3,person218_1).
publication(title53_3,person234_1).
publication(title53_3,person403_1).
publication(title5_3,person407_1).
publication(title5_3,person415_1).
publication(title5_3,person63_1).
publication(title54_3,person13_1).
publication(title54_3,person240_1).
publication(title55_3,person161_1).
publication(title55_3,person407_1).
publication(title56_3,person101_1).
publication(title56_3,person253_1).
publication(title58_3,person234_1).
publication(title58_3,person403_1).
publication(title59_3,person211_1).
publication(title59_3,person407_1).
publication(title60_3,person393_1).
publication(title60_3,person410_1).
publication(title61_3,person290_1).
publication(title61_3,person82_1).
publication(title62_3,person138_1).
publication(title62_3,person324_1).
publication(title63_3,person171_1).
publication(title63_3,person415_1).
publication(title63_3,person73_1).
publication(title6_3,person290_1).
publication(title6_3,person82_1).
publication(title64_3,person179_1).
publication(title64_3,person419_1).
publication(title65_3,person234_1).
publication(title65_3,person80_1).
publication(title66_3,person242_1).
publication(title66_3,person29_1).
publication(title67_3,person101_1).
publication(title67_3,person218_1).
publication(title68_3,person101_1).
publication(title68_3,person253_1).
publication(title69_3,person204_1).
publication(title69_3,person234_1).
publication(title70_3,person171_1).
publication(title70_3,person415_1).
publication(title71_3,person14_1).
publication(title71_3,person211_1).
publication(title71_3,person407_1).
publication(title72_3,person262_1).
publication(title72_3,person292_1).
publication(title72_3,person415_1).
publication(title73_3,person249_1).
publication(title73_3,person331_1).
publication(title7_3,person234_1).
publication(title7_3,person403_1).
publication(title74_3,person234_1).
publication(title74_3,person375_1).
publication(title75_3,person101_1).
publication(title75_3,person253_1).
publication(title76_3,person234_1).
publication(title76_3,person82_1).
publication(title77_3,person298_1).
publication(title77_3,person77_1).
publication(title79_3,person211_1).
publication(title79_3,person352_1).
publication(title79_3,person415_1).
publication(title79_3,person45_1).
publication(title80_3,person234_1).
publication(title80_3,person82_1).
publication(title81_3,person234_1).
publication(title81_3,person82_1).
publication(title82_3,person240_1).
publication(title82_3,person352_1).
publication(title82_3,person415_1).
publication(title8_3,person101_1).
publication(title8_3,person98_1).
publication(title84_3,person13_1).
publication(title84_3,person240_1).
publication(title85_3,person342_1).
publication(title85_3,person393_1).
publication(title86_3,person262_1).
publication(title86_3,person347_1).
publication(title86_3,person352_1).
publication(title86_3,person406_1).
publication(title86_3,person63_1).
publication(title87_3,person352_1).
publication(title87_3,person415_1).
publication(title88_3,person211_1).
publication(title88_3,person407_1).
publication(title89_3,person211_1).
publication(title89_3,person407_1).
publication(title90_3,person148_1).
publication(title90_3,person171_1).
publication(title91_3,person234_1).
publication(title91_3,person375_1).
publication(title92_3,person240_1).
publication(title92_3,person407_1).
publication(title93_3,person393_1).
publication(title93_3,person410_1).
publication(title9_3,person290_1).
publication(title9_3,person375_1).
publication(title9_3,person82_1).
publication(title94_3,person171_1).
publication(title94_3,person415_1).
publication(title95_3,person249_1).
publication(title95_3,person331_1).
publication(title96_3,person107_1).
publication(title96_3,person234_1).
publication(title96_3,person403_1).
publication(title96_3,person80_1).
publication(title97_3,person347_1).
publication(title97_3,person63_1).
publication(title99_3,person300_1).
publication(title99_3,person435_1).


projectmember(project119_5,person201_1).
projectmember(project130_5,person324_1).
projectmember(project152_5,person201_1).
projectmember(project62_5,person319_1).
projectmember(project94_5,person324_1).


professor(person101_1).
professor(person103_1).
professor(person104_1).
professor(person107_1).
professor(person111_1).
professor(person115_1).
professor(person124_1).
professor(person150_1).
professor(person165_1).
professor(person166_1).
professor(person168_1).
professor(person171_1).
professor(person179_1).
professor(person180_1).
professor(person181_1).
professor(person185_1).
professor(person189_1).
professor(person201_1).
professor(person211_1).
professor(person213_1).
professor(person22_1).
professor(person231_1).
professor(person234_1).
professor(person235_1).
professor(person240_1).
professor(person248_1).
professor(person267_1).
professor(person279_1).
professor(person290_1).
professor(person29_1).
professor(person292_1).
professor(person293_1).
professor(person297_1).
professor(person298_1).
professor(person319_1).
professor(person324_1).
professor(person326_1).
professor(person331_1).
professor(person335_1).
professor(person342_1).
professor(person349_1).
professor(person351_1).
professor(person364_1).
professor(person370_1).
professor(person373_1).
professor(person375_1).
professor(person378_1).
professor(person393_1).
professor(person394_1).
professor(person40_1).
professor(person407_1).
professor(person415_1).
professor(person46_1).
professor(person5_1).
professor(person52_1).
professor(person57_1).
professor(person64_1).
professor(person7_1).
professor(person72_1).
professor(person79_1).
professor(person82_1).
professor(person98_1).


position(person101_1,faculty_8).
position(person103_1,faculty_affiliate_8).
position(person104_1,faculty_8).
position(person107_1,faculty_8).
position(person111_1,faculty_adjunct_8).
position(person115_1,faculty_8).
position(person124_1,faculty_8).
position(person150_1,faculty_8).
position(person165_1,faculty_8).
position(person168_1,faculty_8).
position(person171_1,faculty_8).
position(person179_1,faculty_8).
position(person180_1,faculty_8).
position(person185_1,faculty_adjunct_8).
position(person189_1,faculty_adjunct_8).
position(person201_1,faculty_8).
position(person211_1,faculty_8).
position(person213_1,faculty_8).
position(person22_1,faculty_emeritus_8).
position(person234_1,faculty_8).
position(person235_1,faculty_8).
position(person240_1,faculty_8).
position(person279_1,faculty_8).
position(person290_1,faculty_8).
position(person29_1,faculty_adjunct_8).
position(person292_1,faculty_affiliate_8).
position(person293_1,faculty_affiliate_8).
position(person297_1,faculty_emeritus_8).
position(person298_1,faculty_8).
position(person319_1,faculty_8).
position(person324_1,faculty_8).
position(person331_1,faculty_8).
position(person335_1,faculty_8).
position(person342_1,faculty_8).
position(person349_1,faculty_adjunct_8).
position(person351_1,faculty_8).
position(person373_1,faculty_8).
position(person375_1,faculty_emeritus_8).
position(person378_1,faculty_8).
position(person393_1,faculty_8).
position(person394_1,faculty_8).
position(person40_1,faculty_8).
position(person407_1,faculty_8).
position(person415_1,faculty_8).
position(person46_1,faculty_8).
position(person5_1,faculty_8).
position(person52_1,faculty_8).
position(person7_1,faculty_adjunct_8).
position(person72_1,faculty_8).
position(person79_1,faculty_8).
position(person82_1,faculty_8).
position(person98_1,faculty_8).


phase(person100_1,post_quals_9).
phase(person113_1,post_generals_9).
phase(person116_1,pre_quals_9).
phase(person118_1,post_generals_9).
phase(person122_1,post_quals_9).
phase(person126_1,post_quals_9).
phase(person129_1,post_generals_9).
phase(person130_1,post_generals_9).
phase(person13_1,post_generals_9).
phase(person139_1,post_quals_9).
phase(person141_1,post_generals_9).
phase(person14_1,post_generals_9).
phase(person142_1,post_generals_9).
phase(person148_1,post_quals_9).
phase(person149_1,post_quals_9).
phase(person15_1,post_quals_9).
phase(person154_1,post_quals_9).
phase(person155_1,pre_quals_9).
phase(person157_1,post_quals_9).
phase(person159_1,post_quals_9).
phase(person161_1,post_generals_9).
phase(person163_1,post_quals_9).
phase(person172_1,pre_quals_9).
phase(person175_1,post_generals_9).
phase(person176_1,post_quals_9).
phase(person18_1,pre_quals_9).
phase(person182_1,post_quals_9).
phase(person183_1,pre_quals_9).
phase(person186_1,pre_quals_9).
phase(person187_1,pre_quals_9).
phase(person191_1,post_quals_9).
phase(person19_1,pre_quals_9).
phase(person193_1,pre_quals_9).
phase(person200_1,post_quals_9).
phase(person20_1,pre_quals_9).
phase(person204_1,post_generals_9).
phase(person205_1,pre_quals_9).
phase(person206_1,post_generals_9).
phase(person208_1,post_quals_9).
phase(person21_1,post_generals_9).
phase(person212_1,post_generals_9).
phase(person217_1,post_generals_9).
phase(person218_1,post_generals_9).
phase(person222_1,pre_quals_9).
phase(person226_1,post_quals_9).
phase(person228_1,post_quals_9).
phase(person233_1,pre_quals_9).
phase(person239_1,post_quals_9).
phase(person241_1,post_quals_9).
phase(person242_1,post_generals_9).
phase(person249_1,post_generals_9).
phase(person253_1,post_generals_9).
phase(person255_1,post_generals_9).
phase(person257_1,post_generals_9).
phase(person262_1,post_generals_9).
phase(person263_1,post_generals_9).
phase(person265_1,post_generals_9).
phase(person266_1,post_quals_9).
phase(person270_1,pre_quals_9).
phase(person27_1,pre_quals_9).
phase(person272_1,post_quals_9).
phase(person275_1,post_generals_9).
phase(person276_1,pre_quals_9).
phase(person277_1,pre_quals_9).
phase(person278_1,pre_quals_9).
phase(person280_1,pre_quals_9).
phase(person283_1,pre_quals_9).
phase(person284_1,post_quals_9).
phase(person286_1,post_quals_9).
phase(person288_1,post_generals_9).
phase(person299_1,pre_quals_9).
phase(person300_1,post_generals_9).
phase(person303_1,post_quals_9).
phase(person309_1,post_quals_9).
phase(person311_1,post_quals_9).
phase(person312_1,pre_quals_9).
phase(person314_1,post_generals_9).
phase(person318_1,pre_quals_9).
phase(person320_1,post_quals_9).
phase(person333_1,pre_quals_9).
phase(person343_1,pre_quals_9).
phase(person348_1,post_quals_9).
phase(person352_1,post_generals_9).
phase(person353_1,post_quals_9).
phase(person357_1,post_quals_9).
phase(person361_1,post_generals_9).
phase(person362_1,post_quals_9).
phase(person363_1,pre_quals_9).
phase(person368_1,post_generals_9).
phase(person37_1,pre_quals_9).
phase(person374_1,post_generals_9).
phase(person376_1,post_quals_9).
phase(person377_1,pre_quals_9).
phase(person380_1,post_generals_9).
phase(person381_1,post_generals_9).
phase(person382_1,post_quals_9).
phase(person383_1,pre_quals_9).
phase(person384_1,post_quals_9).
phase(person390_1,pre_quals_9).
phase(person391_1,post_quals_9).
phase(person398_1,pre_quals_9).
phase(person402_1,pre_quals_9).
phase(person403_1,post_generals_9).
phase(person404_1,post_generals_9).
phase(person406_1,post_generals_9).
phase(person408_1,pre_quals_9).
phase(person411_1,post_generals_9).
phase(person41_1,post_quals_9).
phase(person412_1,post_quals_9).
phase(person416_1,pre_quals_9).
phase(person417_1,pre_quals_9).
phase(person418_1,post_quals_9).
phase(person419_1,post_generals_9).
phase(person42_1,pre_quals_9).
phase(person422_1,post_quals_9).
phase(person426_1,post_quals_9).
phase(person427_1,post_quals_9).
phase(person429_1,post_quals_9).
phase(person431_1,pre_quals_9).
phase(person432_1,post_quals_9).
phase(person435_1,post_quals_9).
phase(person45_1,post_generals_9).
phase(person51_1,pre_quals_9).
phase(person6_1,post_quals_9).
phase(person62_1,pre_quals_9).
phase(person63_1,post_generals_9).
phase(person67_1,post_generals_9).
phase(person68_1,post_generals_9).
phase(person70_1,pre_quals_9).
phase(person73_1,post_quals_9).
phase(person75_1,post_generals_9).
phase(person80_1,post_generals_9).
phase(person81_1,post_generals_9).
phase(person83_1,post_quals_9).
phase(person89_1,post_generals_9).
phase(person9_1,post_generals_9).
phase(person92_1,post_generals_9).
phase(person94_1,pre_quals_9).
phase(person96_1,post_generals_9).
phase(person99_1,post_quals_9).


courselevel(course0_4,level_500_7).
courselevel(course101_4,level_500_7).
courselevel(course103_4,level_500_7).
courselevel(course104_4,level_300_7).
courselevel(course107_4,level_400_7).
courselevel(course108_4,level_500_7).
courselevel(course109_4,level_500_7).
courselevel(course110_4,level_400_7).
courselevel(course114_4,level_500_7).
courselevel(course11_4,level_300_7).
courselevel(course115_4,level_500_7).
courselevel(course116_4,level_500_7).
courselevel(course117_4,level_500_7).
courselevel(course118_4,level_400_7).
courselevel(course119_4,level_500_7).
courselevel(course120_4,level_500_7).
courselevel(course121_4,level_500_7).
courselevel(course122_4,level_400_7).
courselevel(course123_4,level_500_7).
courselevel(course124_4,level_300_7).
courselevel(course12_4,level_500_7).
courselevel(course125_4,level_400_7).
courselevel(course126_4,level_400_7).
courselevel(course128_4,level_400_7).
courselevel(course129_4,level_500_7).
courselevel(course131_4,level_500_7).
courselevel(course132_4,level_500_7).
courselevel(course134_4,level_500_7).
courselevel(course13_4,level_500_7).
courselevel(course135_4,level_500_7).
courselevel(course136_4,level_500_7).
courselevel(course137_4,level_400_7).
courselevel(course138_4,level_500_7).
courselevel(course139_4,level_500_7).
courselevel(course141_4,level_500_7).
courselevel(course143_4,level_400_7).
courselevel(course144_4,level_500_7).
courselevel(course14_4,level_500_7).
courselevel(course146_4,level_300_7).
courselevel(course147_4,level_300_7).
courselevel(course148_4,level_400_7).
courselevel(course149_4,level_500_7).
courselevel(course1_4,level_500_7).
courselevel(course150_4,level_500_7).
courselevel(course151_4,level_400_7).
courselevel(course152_4,level_500_7).
courselevel(course153_4,level_500_7).
courselevel(course154_4,level_400_7).
courselevel(course15_4,level_500_7).
courselevel(course155_4,level_500_7).
courselevel(course156_4,level_500_7).
courselevel(course157_4,level_400_7).
courselevel(course158_4,level_500_7).
courselevel(course159_4,level_400_7).
courselevel(course160_4,level_500_7).
courselevel(course161_4,level_400_7).
courselevel(course162_4,level_500_7).
courselevel(course164_4,level_400_7).
courselevel(course16_4,level_500_7).
courselevel(course165_4,level_300_7).
courselevel(course166_4,level_500_7).
courselevel(course167_4,level_500_7).
courselevel(course168_4,level_500_7).
courselevel(course169_4,level_500_7).
courselevel(course170_4,level_500_7).
courselevel(course172_4,level_500_7).
courselevel(course173_4,level_500_7).
courselevel(course174_4,level_400_7).
courselevel(course18_4,level_300_7).
courselevel(course19_4,level_500_7).
courselevel(course20_4,level_400_7).
courselevel(course21_4,level_400_7).
courselevel(course23_4,level_500_7).
courselevel(course24_4,level_400_7).
courselevel(course2_4,level_500_7).
courselevel(course27_4,level_400_7).
courselevel(course28_4,level_400_7).
courselevel(course29_4,level_500_7).
courselevel(course30_4,level_400_7).
courselevel(course32_4,level_500_7).
courselevel(course34_4,level_500_7).
courselevel(course3_4,level_500_7).
courselevel(course35_4,level_500_7).
courselevel(course36_4,level_500_7).
courselevel(course38_4,level_400_7).
courselevel(course39_4,level_500_7).
courselevel(course40_4,level_500_7).
courselevel(course41_4,level_400_7).
courselevel(course44_4,level_400_7).
courselevel(course4_4,level_500_7).
courselevel(course45_4,level_400_7).
courselevel(course46_4,level_500_7).
courselevel(course48_4,level_400_7).
courselevel(course49_4,level_400_7).
courselevel(course50_4,level_500_7).
courselevel(course51_4,level_400_7).
courselevel(course52_4,level_400_7).
courselevel(course53_4,level_400_7).
courselevel(course54_4,level_500_7).
courselevel(course5_4,level_300_7).
courselevel(course56_4,level_500_7).
courselevel(course57_4,level_400_7).
courselevel(course61_4,level_500_7).
courselevel(course62_4,level_400_7).
courselevel(course63_4,level_500_7).
courselevel(course64_4,level_500_7).
courselevel(course65_4,level_500_7).
courselevel(course66_4,level_500_7).
courselevel(course67_4,level_500_7).
courselevel(course68_4,level_400_7).
courselevel(course71_4,level_500_7).
courselevel(course74_4,level_500_7).
courselevel(course7_4,level_500_7).
courselevel(course75_4,level_400_7).
courselevel(course76_4,level_500_7).
courselevel(course77_4,level_500_7).
courselevel(course79_4,level_500_7).
courselevel(course80_4,level_400_7).
courselevel(course82_4,level_400_7).
courselevel(course83_4,level_500_7).
courselevel(course84_4,level_500_7).
courselevel(course8_4,level_400_7).
courselevel(course85_4,level_500_7).
courselevel(course86_4,level_500_7).
courselevel(course87_4,level_500_7).
courselevel(course88_4,level_500_7).
courselevel(course89_4,level_400_7).
courselevel(course91_4,level_500_7).
courselevel(course93_4,level_400_7).
courselevel(course9_4,level_500_7).
courselevel(course97_4,level_400_7).
courselevel(course98_4,level_500_7).


interesting_threshold(1).


diff(A,B) :-
   A\=B.


geq(B,A) :-
   var(A),
   !,
   B=A.
geq(A,B) :-
   A>=B.


allpublicationswith(A,B) :-
   nofpubs(A,C),
   commonpubs(A,B,C).


commonpubsratio(A,B,C) :-
   nofpubs(A,E),
   commonpubs(A,B,D),
   C is integer(D*100/E).


commonpubs(B,C,E) :-
   prolog:setof(A,(publication(A,B),publication(A,C)),D),
   length(D,E).


member(A,[A|_]).
member(A,[_|B]) :-
   member(A,B).


commonpub(C,A) :-
   prolog:setof(A,B^ (publication(B,C),publication(B,A)),D),
   member(A,D).


nofpubs(B,D) :-
   prolog:setof(A,publication(A,B),C),
   !,
   length(C,D).
nofpubs(_,0).


load_bg(0) :-
   [graphics,language,systems,theory].
load_bg(1) :-
   [ai,language,systems,theory].
load_bg(2) :-
   [ai,graphics,systems,theory].
load_bg(3) :-
   [ai,graphics,language,theory].
load_bg(4) :-
   [ai,graphics,language,systems].

:- dynamic advisedby/2.

advisedby(A,B) :-
   '$aleph_search'(pclause,pclause(advisedby(A,B),C)),
   C,
   !.
advisedby(person100_1,person104_1).
advisedby(person100_1,person235_1).
advisedby(person113_1,person342_1).
advisedby(person113_1,person394_1).
advisedby(person116_1,person124_1).
advisedby(person118_1,person5_1).
advisedby(person122_1,person72_1).
advisedby(person126_1,person213_1).
advisedby(person129_1,person179_1).
advisedby(person129_1,person234_1).
advisedby(person130_1,person124_1).
advisedby(person13_1,person240_1).
advisedby(person141_1,person331_1).
advisedby(person14_1,person150_1).
advisedby(person142_1,person342_1).
advisedby(person148_1,person171_1).
advisedby(person154_1,person124_1).
advisedby(person154_1,person235_1).
advisedby(person155_1,person101_1).
advisedby(person157_1,person72_1).
advisedby(person159_1,person201_1).
advisedby(person159_1,person57_1).
advisedby(person163_1,person393_1).
advisedby(person176_1,person407_1).
advisedby(person18_1,person335_1).
advisedby(person183_1,person5_1).
advisedby(person200_1,person72_1).
advisedby(person204_1,person104_1).
advisedby(person206_1,person342_1).
advisedby(person206_1,person72_1).
advisedby(person208_1,person319_1).
advisedby(person21_1,person211_1).
advisedby(person212_1,person180_1).
advisedby(person217_1,person342_1).
advisedby(person217_1,person72_1).
advisedby(person218_1,person101_1).
advisedby(person226_1,person324_1).
advisedby(person228_1,person342_1).
advisedby(person228_1,person393_1).
advisedby(person228_1,person394_1).
advisedby(person239_1,person171_1).
advisedby(person242_1,person165_1).
advisedby(person242_1,person29_1).
advisedby(person249_1,person331_1).
advisedby(person253_1,person101_1).
advisedby(person257_1,person240_1).
advisedby(person262_1,person292_1).
advisedby(person262_1,person415_1).
advisedby(person263_1,person5_1).
advisedby(person265_1,person168_1).
advisedby(person266_1,person7_1).
advisedby(person272_1,person7_1).
advisedby(person275_1,person79_1).
advisedby(person276_1,person407_1).
advisedby(person280_1,person101_1).
advisedby(person286_1,person171_1).
advisedby(person288_1,person165_1).
advisedby(person300_1,person342_1).
advisedby(person303_1,person165_1).
advisedby(person303_1,person29_1).
advisedby(person309_1,person378_1).
advisedby(person312_1,person319_1).
advisedby(person314_1,person415_1).
advisedby(person318_1,person185_1).
advisedby(person318_1,person319_1).
advisedby(person320_1,person150_1).
advisedby(person348_1,person324_1).
advisedby(person352_1,person292_1).
advisedby(person352_1,person415_1).
advisedby(person353_1,person319_1).
advisedby(person357_1,person124_1).
advisedby(person362_1,person335_1).
advisedby(person362_1,person5_1).
advisedby(person368_1,person180_1).
advisedby(person37_1,person79_1).
advisedby(person374_1,person179_1).
advisedby(person376_1,person107_1).
advisedby(person376_1,person179_1).
advisedby(person380_1,person79_1).
advisedby(person381_1,person168_1).
advisedby(person384_1,person240_1).
advisedby(person384_1,person407_1).
advisedby(person391_1,person235_1).
advisedby(person403_1,person234_1).
advisedby(person404_1,person72_1).
advisedby(person411_1,person373_1).
advisedby(person41_1,person394_1).
advisedby(person418_1,person171_1).
advisedby(person419_1,person101_1).
advisedby(person426_1,person179_1).
advisedby(person426_1,person235_1).
advisedby(person429_1,person335_1).
advisedby(person432_1,person240_1).
advisedby(person435_1,person279_1).
advisedby(person45_1,person211_1).
advisedby(person45_1,person415_1).
advisedby(person6_1,person165_1).
advisedby(person6_1,person29_1).
advisedby(person62_1,person104_1).
advisedby(person63_1,person415_1).
advisedby(person67_1,person375_1).
advisedby(person67_1,person98_1).
advisedby(person68_1,person201_1).
advisedby(person75_1,person331_1).
advisedby(person80_1,person234_1).
advisedby(person81_1,person342_1).
advisedby(person81_1,person393_1).
advisedby(person83_1,person349_1).
advisedby(person89_1,person104_1).
advisedby(person9_1,person335_1).
advisedby(person92_1,person101_1).
advisedby(person96_1,person5_1).
advisedby(person99_1,person104_1).


true(_,_,_).


write_profile_data([]).
write_profile_data([B-A|C]) :-
   prolog:format('~w: ~w~n',user:[A,B]),
   write_profile_data(C).


list_profile :-
   prolog:findall(B-A,prolog:profile_data(user:A,calls,B),C),
   sort(C,D),
   write_profile_data(D).


show_file(A) :-
   aleph_open(A,read,B),
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     writeq(C),
     write('.'),
     nl,
     fail
   ).


restorehyp :-
   retract(user:'$aleph_local'(pclause,pclause(A,B))),
   assertz(user:'$aleph_search'(pclause,pclause(A,B))),
   !.
restorehyp :-
   retract(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   !.
restorehyp.


setting_definition(A,B,C,D,E,G) :-
   set_def(A,B,C,D,E,F),
   ( F=noshow
   ->
     G=dontshow
   ;
     F=G
   ).


number((+inf),A) :-
   A is inf,
   !.
number((-inf),A) :-
   A is(-inf),
   !.
number(B,A) :-
   A is B,
   !.


check_legal(int(A)-int(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal(float(A)-float(B),C) :-
   !,
   number(A,E),
   number(B,F),
   number(C,D),
   D>=E,
   D=<F.
check_legal([B|C],A) :-
   !,
   aleph_member1(A,[B|C]).
check_legal(read(filename),A) :-
   A\= ?,
   !,
   exists(A).
check_legal(_,_).


set_def(abduce,search-search_strategy,'Abduce Atoms and Generalise',[true,false],false,show).
set_def(best,search-search_space,'Label to beat',prolog_term,'',show).
set_def(best_clause_hook,miscellaneous,'Call before adding hypotesis: has 4 extra arguments, the Label, Clause, Positive Cover, and Negative Cover',prolog_term,true,noshow).
set_def(cache_clauselength,miscellaneous,'Maximum Length of Cached Clauses',int(1)-int((+inf)),3,show).
set_def(caching,miscellaneous,'Cache Clauses in Search',[true,false],false,show).
set_def(check_redundant,miscellaneous,'Check for Redundant Literals',[true,false],false,show).
set_def(check_good,miscellaneous,'Check good clauses for duplicates',[true,false],false,show).
set_def(check_useless,saturation,'Remove I/O unconnected Literals',[true,false],false,show).
set_def(classes,tree,'Class labels',prolog_term,'',show).
set_def(clause_rewrite_hook,miscellaneous,'Call User defined predicate before actually calling a clause, as call(P,Inp,Out)',prolog_term,true,noshow).
set_def(clauselength_distribution,search-search_strategy,'Probablity Distribution over Clauses',prolog_term,'',show).
set_def(clauselength,search-search_space,'Maximum Clause Length',int(1)-int((+inf)),4,show).
set_def(clauses,search-search_space,'Maximum Clauses per Theory',int(1)-int((+inf)),'',show).
set_def(condition,evaluation,'Condition SLP',[true,false],false,show).
set_def(confidence,tree,'Confidence for Rule Pruning',float(0)-float(1),0.95,show).
set_def(construct_bottom,saturation,'Build a bottom clause',[saturation,reduction,false],saturation,show).
set_def(depth,miscellaneous,'Theorem Proving Depth',int(1)-int((+inf)),10,show).
set_def(evalfn,evaluation,'Evaluation Function',[coverage,compression,posonly,pbayes,accuracy,laplace,auto_m,mestimate,mse,entropy,gini,sd,wracc,user],coverage,show).
set_def(explore,search-search_space,'Exhaustive Search of all alternatives',[true,false],false,show).
set_def(good,miscellaneous,'Store good clauses',[true,false],false,show).
set_def(goodfile,miscellaneous,'File of good clauses',write(filename),'',show).
set_def(gsamplesize,evaluation,'Size of random sample',int(1)-int((+inf)),100,show).
set_def(i,saturation,'bound layers of new variables',int(1)-int((+inf)),2,show).
set_def(interactive,search-search_strategy,'Interactive theory construction',[true,false],false,show).
set_def(language,search-search_space,'Maximum occurrence of any predicate symbol in a clause',int(1)-int((+inf)),(+inf),show).
set_def(lazy_negs,evaluation,'Lazy theorem proving on negative examples',[true,false],false,show).
set_def(lazy_on_contradiction,evaluation,'Lazy theorem proving on contradictions',[true,false],false,show).
set_def(lazy_on_cost,evaluation,'Lazy theorem proving on cost',[true,false],false,show).
set_def(lookahead,search-search_space,'Lookahead for automatic refinement operator',int(1)-int((+inf)),1,show).
set_def(m,evaluation,'M-estimate',float(0)-float((+inf)),'',show).
set_def(max_abducibles,search-search_space,'Maximum number of atoms in an abductive explanation',int(1)-int((+inf)),2,show).
set_def(match_bottom_hook,miscellaneous,'Call User defined predicate when generating a new refinement call(P,Rule)',prolog_term,true,noshow).
set_def(max_features,miscellaneous,'Maximum number of features to be constructed',int(1)-int((+inf)),(+inf),show).
set_def(minacc,evaluation,'Minimum clause accuracy',float(0)-float(1),0,show).
set_def(mingain,tree,'Minimum expected gain',float(1e-06)-float((+inf)),0.05,show).
set_def(minpos,evaluation,'Minimum pos covered by a clause',int(0)-int((+inf)),1,show).
set_def(minposfrac,evaluation,'Minimum proportion of positives covered by a clause',float(0)-float(1),0,show).
set_def(minscore,evaluation,'Minimum utility of an acceptable clause',float((-inf))-float((+inf)),(-inf),show).
set_def(moves,search-search_strategy,'Number of moves in a randomised local search',int(0)-int((+inf)),5,show).
set_def(newbest_hook,miscellaneous,'Call after finding a new best clause: has three extra arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(good_clause_hook,miscellaneous,'Call after finding a good clause: has two arguments, the Label, Clause, and Node',prolog_term,true,noshow).
set_def(newvars,search-search_space,'Existential variables in a clause',int(0)-int((+inf)),(+inf),show).
set_def(nodes,search-search_space,'Nodes to be explored in the search',int(1)-int((+inf)),5000,show).
set_def(noise,evaluation,'Maximum negatives covered',int(0)-int((+inf)),0,show).
set_def(nreduce_bottom,saturation,'Negative examples based reduction of bottom clause',[true,false],false,show).
set_def(openlist,search-search_space,'Beam width in a greedy search',int(1)-int((+inf)),(+inf),show).
set_def(optimise_clauses,miscellaneous,'Perform query Optimisation',[true,false],false,show).
set_def(permute_bottom,saturation,'Randomly permute order of negative literals in the bottom clause',[true,false],false,show).
set_def(portray_examples,miscellaneous,'Pretty print examples',[true,false],false,show).
set_def(portray_hypothesis,miscellaneous,'Pretty print hypotheses',[true,false],false,show).
set_def(portray_literals,miscellaneous,'Pretty print literals',[true,false],false,show).
set_def(portray_search,miscellaneous,'Pretty print search',[true,false],false,show).
set_def(prefix_trees,miscellaneous,'Prefix Tree Execution',[true,false],false,show).
set_def(print,miscellaneous,'Literals printed per line',int(1)-int((+inf)),4,show).
set_def(prior,miscellaneous,'Prior class distribution',prolog_term,'',show-ro).
set_def(proof_strategy,miscellaneous,'Current proof strategy',[restricted_sld,sld,user],restricted_sld,show).
set_def(prooftime,miscellaneous,'Theorem proving time',float(0)-float((+inf)),(+inf),show).
set_def(prune_tree,tree,'Tree pruning',[true,false],false,show).
set_def(recordfile,miscellaneous,'Log filename',write(filename),'',show).
set_def(record,miscellaneous,'Log to file',[true,false],false,show).
set_def(record_testclause_hook,miscellaneous,'Called just before you try to make the systemm use pclause database from Aleph search, has one argumeent F/A',prolog_term,true,noshow).
set_def(reduce_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(reduce_prelims_hook,miscellaneous,'User hook to call before starting a reduce',prolog_term,true,noshow).
set_def(refineop,search-search_strategy,'Current refinement operator',[user,auto,scs,false],'',show-ro).
set_def(refine,search-search_strategy,'Nature of customised refinement operator',[user,auto,scs,false],false,show).
set_def(resample,search-search_strategy,'Number of times to resample an example',int(1)-int((+inf)),1,show).
set_def(rls_type,search-search_strategy,'Type of randomised local search',[gsat,wsat,rrr,anneal],gsat,show).
set_def(rulefile,miscellaneous,'Rule file',write(filename),'',show).
set_def(samplesize,search-search_strategy,'Size of sample',int(0)-int((+inf)),0,show).
set_def(sat_end_hook,miscellaneous,'Call after Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(sat_start_hook,miscellaneous,'Call before Saturation: has two extra arguments, the example\'s type and its id',prolog_term,true,noshow).
set_def(scs_percentile,search-search_strategy,'Percentile of good clauses for SCS search',float(0)-float(100),'',show).
set_def(scs_prob,search-search_strategy,'Probability of getting a good clause in SCS search',float(0)-float(1),'',show).
set_def(scs_sample,search-search_strategy,'Sample size in SCS search',int(1)-int((+inf)),'',show).
set_def(search,search-search_strategy,'Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar,false],bf,show).
set_def(searchstrat,search-search_strategy,'Current Search Strategy',[bf,df,heuristic,ibs,ils,rls,scs,id,ic,ar],bf,show-ro).
set_def(recompute_cover,search-strategy,'do not store coverage with nodes',[true,false],false,show).
set_def(searchtime,search-search_strategy,'Search time in seconds',float(0)-float((+inf)),(+inf),show).
set_def(skolemvars,miscellaneous,'Counter for non-ground examples',int(1)-int((+inf)),10000,show).
set_def(skolem_examples,miscellaneous,'Skolemize Examples: usually true, but disabled by CLP(BN)',[true,false],true,noshow).
set_def(splitvars,saturation,'Split variable co-refencing',[true,false],false,show).
set_def(stage,miscellaneous,'Aleph processing mode',[saturation,reduction,command],command,show-ro).
set_def(store_bottom,saturation,'Store bottom',[true,false],false,show).
set_def(subsample,search-search_strategy,'Subsample for evaluating a clause',[true,false],false,show).
set_def(subsamplesize,search-search_strategy,'Size of subsample for evaluating a clause',int(1)-int((+inf)),(+inf),show).
set_def(temperature,search-search_strategy,'Temperature for randomised search annealing',float(0)-float((+inf)),'',show).
set_def(test_neg,miscellaneous,'Negative examples for testing theory',read(filename),'',show).
set_def(test_pos,miscellaneous,'Positive examples for testing theory',read(filename),'',show).
set_def(threads,miscellaneous,'Number of threads',int(1)-int((+inf)),1,show).
set_def(trace_memory_usage,miscellaneous,'Report on How Aleph is Using Memory',[true,false],false,show).
set_def(train_neg,miscellaneous,'Negative examples for training',read(filename),'',show).
set_def(train_pos,miscellaneous,'Positive examples for training',read(filename),'',show).
set_def(tree_type,tree,'Type of tree to construct',[classification,class_probability,regression,model],'',show).
set_def(tries,search-search_strategy,'Number of restarts for a randomised search',int(1)-int((+inf)),10,show).
set_def(typeoverlap,miscellaneous,'Type overlap for induce_modes',float(0)-float(1),0.95,show).
set_def(uniform_sample,search-search_strategy,'Distribution to draw clauses from randomly',[true,false],false,show).
set_def(updateback,miscellaneous,'Update background knowledge with clauses found on search',[true,false],true,noshow).
set_def(verbosity,miscellaneous,'Level of verbosity',int(0)-int((+inf)),1,show).
set_def(version,miscellaneous,'Aleph version',int(0)-int((+inf)),5,show-ro).
set_def(walk,search-search_strategy,'Random walk probability for Walksat',float(0)-float(1),'',show).


sumsq([],0).
sumsq([C|A],B) :-
   sumsq(A,D),
   B is C*C+D.


sum([],0).
sum([C|A],B) :-
   sum(A,D),
   B is C+D.


random(A,normal(B,C)) :-
   var(A),
   !,
   normal(B,C,A).
random(A,normal(_,_)) :-
   !,
   number(A).
random(B,A) :-
   A=[_|_],
   var(B),
   !,
   draw_element(A,C),
   B=C.
random(B,A) :-
   A=[_|_],
   nonvar(B),
   !,
   aleph_member(C-B,A),
   C> 0.


test_file(?,_) :-
   !.
test_file(A,F) :-
   setting(portray_examples,G),
   aleph_open(A,read,B),
   !,
   repeat,
   read(B,C),
   ( C=end_of_file
   ->
     close(B)
   ;
     retract(user:'$aleph_local'(total,D)),
     E is D+1,
     asserta(user:'$aleph_local'(total,E)),
     ( once(depth_bound_call(C))
     ->
       ( F=show
       ->
         p1_message(covered),
         aleph_portray(C,G),
         nl
       ;
         true
       )
     ;
       ( F=show
       ->
         p1_message('not covered'),
         aleph_portray(C,G),
         nl
       ;
         true
       ),
       fail
     ),
     retract(user:'$aleph_local'(covered,H)),
     I is H+1,
     asserta(user:'$aleph_local'(covered,I)),
     fail
   ),
   !.
test_file(A,_) :-
   p1_message('cannot open'),
   p_message(A).


test_files([],_).
test_files([A|C],B) :-
   test_file(A,B),
   test_files(C,B).


sd(A,C) :-
   length(A,B),
   ( B=1
   ->
     C= 0
   ;
     sum(A,E),
     sumsq(A,D),
     C is sqrt(D/ (B-1)-E*E/ (B* (B-1)))
   ).


mean(A,B) :-
   sum(A,C),
   length(A,D),
   B is C/D.


time_loop(0,_,[]) :-
   !.
time_loop(E,A,[B|G]) :-
   wallclock(D),
   call(user:A),
   wallclock(C),
   B is C-D,
   F is E-1,
   time_loop(F,A,G).


time(B,A,[D,E]) :-
   time_loop(A,B,C),
   mean(C,D),
   sd(C,E).


wallclock(A) :-
   statistics(real_time,[A|_]).


coversn(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(coversn,coverns(D,F))).


covers(E,F) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   intervals_to_list(D,E),
   length(E,F),
   asserta(user:'$aleph_search'(covers,covers(D,F))).


coversn(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(neg,A))
   ;
     '$aleph_global'(atoms_left,atoms(neg,A))
   ),
   label_create(B,neg,A,C),
   retractall(user:'$aleph_search'(coversn,_)),
   extract_neg(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(coversn,coverns(D,E))).


covers(E) :-
   get_hyp(B),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms,atoms_left(pos,A))
   ;
     '$aleph_global'(atoms,atoms(pos,A))
   ),
   label_create(B,pos,A,C),
   retractall(user:'$aleph_search'(covers,_)),
   extract_pos(C,D),
   interval_count(D,E),
   asserta(user:'$aleph_search'(covers,covers(D,E))).


coversn :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(neg,B,C),
   examples(neg,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(coversn,_)),
   asserta(user:'$aleph_search'(coversn,coversn(C,D))).


get_hyp((A:-B)) :-
   '$aleph_search'(pclause,pclause(A,B)),
   !.
get_hyp(A) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)).


covers :-
   get_hyp(A),
   label_create(A,B),
   extract_cover(pos,B,C),
   examples(pos,C),
   length(C,D),
   p1_message('examples covered'),
   p_message(D),
   retractall(user:'$aleph_search'(covers,_)),
   asserta(user:'$aleph_search'(covers,covers(C,D))).


rmhyp :-
   retract(user:'$aleph_search'(pclause,pclause(A,B))),
   asserta(user:'$aleph_local'(pclause,pclause(A,B))),
   !.
rmhyp :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_local'(hypothesis,hypothesis(A,B,C,D))),
   !.
rmhyp.


add_gcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))),
   update_theory(_),
   fail.
add_gcws.


add_theory(B,A,D,E) :-
   aleph_member(C,A),
   add_hyp(B,C,D,E),
   update_theory(_),
   fail.
add_theory(_,_,A,B) :-
   rm_seeds(pos,A),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,B)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,C)),
   interval_count(C,D),
   p1_message('atoms left'),
   p_message(D),
   !.


rdhyp :-
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   read(A),
   add_hyp(A),
   nl,
   show(hypothesis).


get_hyp_label(_,A) :-
   var(A),
   !.
get_hyp_label((_:-A),[D,E,B]) :-
   nlits(A,C),
   B is C+1,
   ( '$aleph_search'(covers,covers(_,D))
   ->
     true
   ;
     covers(_),
     '$aleph_search'(covers,covers(_,D))
   ),
   ( '$aleph_search'(coversn,coverns(_,E))
   ->
     true
   ;
     coversn(_),
     '$aleph_search'(coversn,coversn(_,E))
   ).


hypothesis(A,C,E) :-
   '$aleph_search'(pclause,pclause(B,D)),
   !,
   A=B,
   C=D,
   get_hyp_label((B:-D),E).
hypothesis(C,E,G) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   ( A=[_|_]
   ->
     aleph_member(B,A)
   ;
     A=B
   ),
   split_clause(B,D,F),
   C=D,
   E=F,
   get_hyp_label((D:-F),G).


best_hypothesis(E,G,[A,B,C]) :-
   '$aleph_search'(selected,selected([A,B,C|_],D,_,_)),
   split_clause(D,F,H),
   !,
   E=F,
   G=H.


write_rule(A) :-
   aleph_member(B,A),
   '$aleph_global'(theory,theory(B,_,C,_,_)),
   pp_dclause(C),
   fail.
write_rule(_).


write_features(A) :-
   aleph_open(A,write,B),
   set_output(B),
   listing('$aleph_feature'/2),
   close(B),
   set_output(user_output).
write_features(_).


write_features :-
   setting(featurefile,A),
   write_features(A),
   !.
write_features.


write_rules(A) :-
   aleph_open(A,write,B),
   set_output(B),
   '$aleph_global'(rules,rules(C)),
   aleph_reverse(C,D),
   write_rule(D),
   flush_output(B),
   set_output(user_output).


write_rules :-
   setting(rulefile,A),
   write_rules(A),
   !.
write_rules.


posleft(B) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_to_list(A,B).


bottom(C) :-
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],B),
   list_to_clause(B,C).


settings :-
   show(settings).


show_global(A,B) :-
   '$aleph_global'(A,B),
   copy_term(B,C),
   numbervars(C,0,_),
   aleph_writeq(C),
   write('.'),
   nl,
   fail.
show_global(_,_).


feature(A,B) :-
   '$aleph_feature'(feature,feature(A,_,_,C,D)),
   B= (C:-D).


modes(C/D,A) :-
   A=modeh(_,B),
   '$aleph_global'(modeh,A),
   functor(B,C,D).
modes(C/D,A) :-
   A=modeb(_,B),
   '$aleph_global'(modeb,A),
   functor(B,C,D).


modeb(A,B) :-
   ( '$aleph_global'(modeb,modeb(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeb,modeb(A,B))),
     ( '$aleph_global'(mode,mode(A,B))
     ->
       true
     ;
       assertz(user:'$aleph_global'(mode,mode(A,B)))
     )
   ).


modeh(A,B) :-
   ( '$aleph_global'(mode,mode(A,B))
   ->
     true
   ;
     noset(autorefine),
     assertz(user:'$aleph_global'(modeh,modeh(A,B))),
     assertz(user:'$aleph_global'(mode,mode(A,B))),
     functor(B,C,D),
     update_backpreds(C/D)
   ).


mode(A,B) :-
   modeh(A,B),
   modeb(A,B).


positive_only(A/B) :-
   assertz(user:'$aleph_global'(positive_only,positive_only(A/B))).


model(A/B) :-
   assertz(user:'$aleph_global'(model,model(A/B))).


lazy_evaluate(A/B) :-
   assertz(user:'$aleph_global'(lazy_evaluate,lazy_evaluate(A/B))).


symmetric(A/B) :-
   assertz(user:'$aleph_global'(symmetric,symmetric(A/B))).


commutative(A/B) :-
   assertz(user:'$aleph_global'(commutative,commutative(A/B))).


abducible(A/B) :-
   assertz(user:'$aleph_global'(abducible,abducible(A/B))).


determination(A,B) :-
   nonvar(A),
   '$aleph_global'(determination,determination(A,B)),
   !.
determination(A,B) :-
   noset(autorefine),
   assertz(user:'$aleph_global'(determination,determination(A,B))),
   ( nonvar(A)
   ->
     update_backpreds(A)
   ;
     true
   ).


determinations(A,B) :-
   '$aleph_global'(determination,determination(A,B)).


man(A) :-
   aleph_manual(A).


set_default(A) :-
   default_setting(A,B),
   set(A,B),
   fail.
set_default(_).


rm_special_consideration(portray_literals,_) :-
   set_default(print),
   !.
rm_special_consideration(refine,_) :-
   set_default(refineop),
   !.
rm_special_consideration(record,_) :-
   noset(recordfile_stream),
   !.
rm_special_consideration(recordfile_stream,_) :-
   ( setting(recordfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(good,_) :-
   noset(goodfile_stream),
   !.
rm_special_consideration(goodfile_stream,_) :-
   ( setting(goodfile_stream,A)
   ->
     close(A)
   ;
     true
   ),
   !.
rm_special_consideration(_,_).


default_setting(A,B) :-
   set_def(A,_,_,_,B,_),
   B\=''.


special_consideration(search,ida) :-
   set(search,bf),
   set(evalfn,coverage),
   !.
special_consideration(search,compression) :-
   set(search,heuristic),
   set(evalfn,compression),
   !.
special_consideration(search,posonly) :-
   set(search,heuristic),
   set(evalfn,posonly),
   !.
special_consideration(search,user) :-
   set(search,heuristic),
   set(evalfn,user),
   !.
special_consideration(refine,A) :-
   set(refineop,A),
   !.
special_consideration(refineop,auto) :-
   gen_auto_refine,
   !.
special_consideration(portray_literals,true) :-
   set(print,1),
   !.
special_consideration(record,true) :-
   noset(recordfile_stream),
   ( setting(recordfile,A)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(record,false) :-
   noset(recordfile_stream),
   !.
special_consideration(recordfile,A) :-
   noset(recordfile_stream),
   ( setting(record,true)
   ->
     aleph_open(A,append,B),
     set(recordfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,true) :-
   noset(goodfile_stream),
   ( setting(goodfile,A)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(good,false) :-
   noset(goodfile_stream),
   !.
special_consideration(goodfile,A) :-
   noset(goodfile_stream),
   ( setting(good,true)
   ->
     aleph_open(A,append,B),
     set(goodfile_stream,B)
   ;
     true
   ),
   !.
special_consideration(minscore,_) :-
   aleph_abolish('$aleph_feature'/2),
   !.
special_consideration(_,_).


check_setting(threads,B) :-
   set_def(threads,_,_,A,_,_),
   check_legal(A,B),
   prolog_type(C),
   ( B>1
   ->
     ( C=swi
     ->
       true
     ;
       err_message(set(threads,B)),
       fail
     )
   ;
     true
   ),
   !.
check_setting(A,C) :-
   set_def(A,_,_,B,_,_),
   !,
   ( check_legal(B,C)
   ->
     true
   ;
     err_message(set(A,C))
   ).
check_setting(_,_).


reinstate_file_streams :-
   setting(recordfile,A),
   set(recordfile,A),
   fail.
reinstate_file_streams :-
   setting(goodfile,A),
   set(goodfile,A),
   fail.
reinstate_file_streams.


reinstate_values :-
   reinstate_file_streams,
   '$aleph_global'(save,save(_,_)),
   repeat,
   retract(user:'$aleph_global'(save,save(B,A))),
   ( A=unknown
   ->
     noset(B)
   ;
     set(B,A)
   ),
   \+'$aleph_global'(save,save(_,_)),
   !.
reinstate_values :-
   reduce_end_hook.


store_bottom :-
   bottom_key(A,B,C,true),
   asserta(user:'$aleph_sat'(stored,stored(A,B,C))),
   '$aleph_sat'(lastterm,D),
   asserta(user:'$aleph_sat'(lasterm,C,D)),
   '$aleph_sat'(lastvar,E),
   asserta(user:'$aleph_sat'(lastvar,C,E)),
   '$aleph_sat'(botsize,F),
   asserta(user:'$aleph_sat'(botsize,C,F)),
   '$aleph_sat'(lastlit,G),
   asserta(user:'$aleph_sat'(lastlit,C,G)),
   '$aleph_sat'(hovars,H),
   asserta(user:'$aleph_sat'(hovars,C,H)),
   '$aleph_sat'(hivars,I),
   asserta(user:'$aleph_sat'(hivars,C,I)),
   '$aleph_sat'(eq,J),
   asserta(user:'$aleph_sat'(eq,C,J)),
   '$aleph_sat_ivars'(K,L),
   asserta(user:'$aleph_sat_ivars'(K,C,L)),
   '$aleph_sat_ovars'(K,M),
   asserta(user:'$aleph_sat_ovars'(K,C,M)),
   '$aleph_sat_litinfo'(K,N,O,P,Q,R),
   asserta(user:'$aleph_sat_litinfo'(K,C,N,O,P,Q,R)),
   fail.
store_bottom.


file_extension(pos,A) :-
   name('.f',A).
file_extension(neg,A) :-
   name('.n',A).
file_extension(background,A) :-
   name('.b',A).


read_examples_from_file(A,B,C) :-
   construct_name(A,B,C),
   ( aleph_open(C,read,E)
   ->
     concat(['consulting ',A,' examples'],D),
     p1_message(D),
     p_message(C)
   ;
     p1_message('cannot open'),
     p_message(C),
     fail
   ),
   repeat,
   read(E,F),
   ( F=end_of_file
   ->
     close(E)
   ;
     record_example(nocheck,A,F,_),
     fail
   ),
   !.
read_examples_from_file(_,_,?).


read_examples_from_files([],_,[]).
read_examples_from_files([B|D],A,[C|E]) :-
   read_examples_from_file(A,B,C),
   read_examples_from_files(D,A,E).


read_examples_files(A,B,C) :-
   clean_up_examples(A),
   asserta(user:'$aleph_global'(size,size(A,0))),
   ( B=[_|_]
   ->
     read_examples_from_files(B,A,C)
   ;
     read_examples_from_file(A,B,C)
   ),
   '$aleph_global'(size,size(A,D)),
   ( D>0
   ->
     E=[1-D]
   ;
     E= ([])
   ),
   asserta(user:'$aleph_global'(atoms,atoms(A,E))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(A,E))),
   asserta(user:'$aleph_global'(last_example,last_example(A,D))).


construct_name(_,A,A) :-
   setting(use_file_extensions,false),
   !.
construct_name(B,A,E) :-
   name(A,D),
   file_extension(B,C),
   aleph_append(C,D,F),
   name(E,F).


read_examples(B,D) :-
   ( setting(train_pos,A)
   ->
     set(use_file_extensions,false),
     read_examples_files(pos,A,_),
     noset(use_file_extensions)
   ;
     read_examples_files(pos,B,A),
     set(train_pos,A)
   ),
   ( setting(train_neg,C)
   ->
     set(use_file_extensions,false),
     read_examples_files(neg,C,_),
     noset(use_file_extensions)
   ;
     read_examples_files(neg,D,C),
     set(train_neg,C)
   ),
   '$aleph_global'(size,size(pos,E)),
   '$aleph_global'(size,size(neg,F)),
   set_lazy_recalls,
   ( setting(prior,_)
   ->
     true
   ;
     normalise_distribution([E-pos,F-neg],G),
     set(prior,G)
   ),
   reset_counts,
   asserta(user:'$aleph_global'(last_clause,last_clause(0))),
   broadcast(examples(loaded)).


read_background(A) :-
   construct_name(background,A,B),
   aleph_reconsult(B),
   broadcast(background(loaded)).


reset :-
   clean_up,
   clear_cache,
   aleph_abolish('$aleph_global'/2),
   aleph_abolish(example/3),
   prolog:assert_static(user:example(0,uspec,false)),
   set_default(_),
   !.


read_all(A,B) :-
   read_all(A,B,B).


read_all(A,B,C) :-
   clean_up,
   reset,
   read_background(A),
   read_examples(B,C),
   record_targetpred,
   check_recursive_calls,
   check_prune_defs,
   check_user_search,
   check_posonly,
   check_auto_refine,
   check_abducibles.


read_all(A) :-
   read_all(A,A,A).


extract_cover(_,[]).


eval_rule(0,B) :-
   '$aleph_global'(hypothesis,hypothesis(_,A,_,_)),
   !,
   label_create(A,B),
   p_message('Rule 0'),
   pp_dclause(A),
   extract_count(pos,B,C),
   extract_count(neg,B,D),
   extract_length(B,E),
   label_print_eval([C,D,E]),
   nl.
eval_rule(A,C) :-
   integer(A),
   A>0,
   '$aleph_global'(theory,theory(A,_,B,_,_)),
   !,
   label_create(B,C),
   extract_count(pos,C,D),
   extract_count(neg,C,E),
   concat(['Rule ',A],G),
   ( setting(evalfn,posonly)
   ->
     concat(['Pos cover = ',D,' Rand cover = ',E],F)
   ;
     concat(['Pos cover = ',D,' Neg cover = ',E],F)
   ),
   p1_message(G),
   p_message(F),
   pp_dclause(B),
   setting(verbosity,H),
   ( H>=2
   ->
     p_message('positive examples covered'),
     label_print_examples(pos,C),
     p_message('negative examples covered'),
     label_print_examples(neg,C)
   ;
     true
   ),
   nl.
eval_rule(_,_).


evalfn_name(compression,compression).
evalfn_name(coverage,'pos-neg').
evalfn_name(accuracy,accuracy).
evalfn_name(wracc,novelty).
evalfn_name(laplace,'laplace estimate').
evalfn_name(pbayes,'pseudo-bayes estimate').
evalfn_name(auto_m,'m estimate').
evalfn_name(mestimate,'m estimate').
evalfn_name(mse,mse).
evalfn_name(posonly,'posonly bayes estimate').
evalfn_name(entropy,entropy).
evalfn_name(gini,'gini value').
evalfn_name(sd,'standard deviation').
evalfn_name(user,'user defined cost').


label_print_eval([]) :-
   !.
label_print_eval(B) :-
   A=coverage,
   evalfn(A,B,C),
   print_eval(A,C).


examples(A,C) :-
   setting(portray_literals,E),
   example(B,A,D),
   aleph_member1(B,C),
   aleph_portray(D,E),
   write('.'),
   nl,
   fail.
examples(_,_).


label_print_examples(A,B) :-
   extract_cover(A,B,C),
   examples(A,C).


extract_length([_,_,A|_],A).


label_union([],A,A) :-
   !.
label_union(A,[],A) :-
   !.
label_union(A,B,N) :-
   extract_cover(pos,A,D),
   extract_cover(pos,B,C),
   extract_cover(neg,A,F),
   extract_cover(neg,B,E),
   extract_length(A,G),
   extract_length(B,H),
   update_list(C,D,I),
   update_list(E,F,J),
   M is G+H,
   list_to_intervals(I,K),
   list_to_intervals(J,L),
   assemble_label(K,L,M,N).


label_ncover(A,B) :-
   extract_cover(neg,A,B).


extract_cover(pos,[A,_,_],B) :-
   intervals_to_list(A,B),
   !.
extract_cover(neg,[_,A,_],B) :-
   intervals_to_list(A,B),
   !.


label_pcover(A,B) :-
   extract_cover(pos,A,B).


assemble_label(A,B,C,[A,B,C]).


label_create(A,G,H,J) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,I,_),
   retractall(user:'$aleph_search'(pclause,_)),
   ( G=pos
   ->
     assemble_label(I,unknown,unknown,J)
   ;
     assemble_label(unknown,I,unknown,J)
   ).


label_create(A,G,H,I,J,N) :-
   split_clause(A,B,C),
   nlits((B,C),M),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   prove(D/E/F,G,(B:-C),H,K,_),
   prove(D/E/F,I,(B:-C),J,L,_),
   retractall(user:'$aleph_search'(pclause,_)),
   assemble_label(K,L,M,N),
   !.


get_normal(0,_,_,[]) :-
   !.
get_normal(A,B,C,[D|F]) :-
   A>0,
   normal(B,C,D),
   E is A-1,
   get_normal(E,B,C,F).


std_normal(F) :-
   aleph_random(A),
   aleph_random(B),
   C is 2*A-1,
   D is 2*B-1,
   E is C^2+D^2,
   ( E>1
   ->
     std_normal(F)
   ;
     G is sqrt(-2*log(E)/E),
     F is C*G
   ).


normal(B,C,A) :-
   std_normal(D),
   A is B+C*D.


random_select_from_intervals(D,A) :-
   interval_count(A,B),
   get_random(B,C),
   interval_select(C,A,D).


random_nselect(0,_,[]) :-
   !.
random_nselect(_,[],[]) :-
   !.
random_nselect(C,B,[A|F]) :-
   random_select(A,B,E),
   D is C-1,
   random_nselect(D,E,F).


key_sum([],0).
key_sum([C-_|A],B) :-
   key_sum(A,D),
   B is float(C+D).


draw_element([B-F|G],A,C,E) :-
   D is A+B,
   ( C=<D
   ->
     E=F
   ;
     draw_element(G,D,C,E)
   ).


select_example(A,B,[D-C|_],E) :-
   A=<B+C-D+1,
   !,
   E is A-B+D-1.
select_example(D,A,[C-B|F],G) :-
   E is A+B-C+1,
   select_example(D,E,F,G).


worse_coversets1(A-B,_,_,[]) :-
   A>B,
   !.
worse_coversets1(B-G,A,E,H) :-
   '$aleph_global'(max_set,max_set(A,B,C,_)),
   C=[_,_,_,D|_],
   D>=E,
   !,
   F is B+1,
   worse_coversets1(F-G,A,E,H),
   !.
worse_coversets1(A-C,D,E,[A|F]) :-
   B is A+1,
   worse_coversets1(B-C,D,E,F),
   !.


update_coversets([],_,_,_).
update_coversets([B|E],D,A,C) :-
   ( retract(user:'$aleph_global'(max_set,max_set(A,B,_,_)))
   ->
     true
   ;
     true
   ),
   asserta(user:'$aleph_global'(max_set,max_set(A,B,C,D))),
   update_coversets(E,D,A,C),
   !.


worse_coversets(_,_,_,[]) :-
   \+'$aleph_global'(maxcover,set(maxcover,true)),
   !.
worse_coversets([],_,_,[]).
worse_coversets([A|D],B,C,G) :-
   worse_coversets1(A,B,C,F),
   worse_coversets(D,B,C,E),
   aleph_append(E,F,G),
   !.


rm_interval(_,[],[]).
rm_interval(A,[B|D],G) :-
   interval_intersection(A,B,C),
   !,
   interval_subtract(B,C,F),
   rm_interval(A,D,E),
   aleph_append(E,F,G).
rm_interval(B,[A|C],[A|D]) :-
   rm_interval(B,C,D).


rm_seeds(pos,A) :-
   setting(construct_features,true),
   setting(feature_construction,exhaustive),
   !,
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,C))),
   ( '$aleph_global'(example_selected,example_selected(_,B))
   ->
     true
   ;
     A=[B-_|_]
   ),
   rm_seeds1([B-B],C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,D))).
rm_seeds(A,B) :-
   retract(user:'$aleph_global'(atoms_left,atoms_left(A,C))),
   rm_seeds1(B,C,D),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(A,D))).


rm_seeds :-
   update_theory(A),
   !,
   '$aleph_global'(theory,theory(A,_,_,B,C)),
   rm_seeds(pos,B),
   ( setting(evalfn,posonly)
   ->
     rm_seeds(rand,C)
   ;
     true
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,D)),
   interval_count(D,E),
   p1_message('atoms left'),
   p_message(E),
   !.
rm_seeds.


add_clause_to_background(A) :-
   '$aleph_global'(theory,theory(A,C/_,I,_,_)),
   ( setting(minpos,B)
   ->
     true
   ;
     B=1
   ),
   C=[D,_,_,E|_],
   D>=B,
   setting(minscore,F),
   E>=F,
   !,
   ( retract(user:'$aleph_global'(rules,rules(G)))
   ->
     asserta(user:'$aleph_global'(rules,rules([A|G])))
   ;
     asserta(user:'$aleph_global'(rules,rules([A])))
   ),
   ( setting(updateback,H)
   ->
     true
   ;
     H=true
   ),
   user_clause_rewrite(I,J),
   ( H=true
   ->
     assertz(user:J)
   ;
     true
   ),
   !.
add_clause_to_background(_).


gen_lits([],[]).
gen_lits([B|C],[A|D]) :-
   gen_litnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,B,[],[],[])),
   gen_lits(C,D).


gen_featurenum(A) :-
   '$aleph_feature'(last_feature,B),
   !,
   A is B+1,
   setting(max_features,C),
   A=<C,
   retract(user:'$aleph_feature'(last_feature,B)),
   asserta(user:'$aleph_feature'(last_feature,A)).
gen_featurenum(1) :-
   asserta(user:'$aleph_feature'(last_feature,1)).


gen_litnum(A) :-
   retract(user:'$aleph_sat'(lastlit,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastlit,A)).
gen_litnum(0) :-
   asserta(user:'$aleph_sat'(lastlit,0)).


gen_var(A) :-
   retract(user:'$aleph_sat'(lastvar,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_sat'(lastvar,A)).
gen_var(0) :-
   asserta(user:'$aleph_sat'(lastvar,0)).


skolem_var(A) :-
   atomic(A),
   !,
   name(A,[36|_]).
skolem_var(B) :-
   gen_var(A),
   name(A,C),
   name(B,[36|C]).


index_clause((A:-true),B,A) :-
   !,
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).
index_clause(A,B,A) :-
   retract(user:'$aleph_global'(last_clause,last_clause(C))),
   B is C+1,
   asserta(user:'$aleph_global'(last_clause,last_clause(B))).


add_skolem_types2([],_).
add_skolem_types2([A/C|F],B) :-
   tparg(A,B,D),
   E=..[C,D],
   ( '$aleph_global'(back,back(E))
   ->
     true
   ;
     asserta(user:'$aleph_global'(back,back(E))),
     asserta(user:E)
   ),
   add_skolem_types2(F,B).


add_skolem_types1([],_).
add_skolem_types1([A|F],C) :-
   split_args(A,_,B,D,E),
   add_skolem_types2(B,C),
   add_skolem_types2(D,C),
   add_skolem_types2(E,C),
   add_skolem_types1(F,C).


add_skolem_types([]).
add_skolem_types([A|E]) :-
   functor(A,B,C),
   get_modes(B/C,D),
   add_skolem_types1(D,A),
   add_skolem_types(E).


add_skolem_types(10000,_,_) :-
   !.
add_skolem_types(_,A,B) :-
   add_skolem_types([A]),
   add_skolem_types(B).


add_backs([]).
add_backs([A|D]) :-
   asserta(user:'$aleph_global'(back,back(A))),
   functor(A,B,C),
   declare_dynamic(B/C),
   assertz(user:A),
   add_backs(D).


update_backpreds(A/B) :-
   '$aleph_local'(backpred,A/B),
   !.
update_backpreds(A/B) :-
   assertz(user:'$aleph_local'(backpred,A/B)).


skolemize(A,B) :-
   skolemize(A,B,[],0,_).


set_lazy_on_contradiction(_,_) :-
   '$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)),
   !.
set_lazy_on_contradiction(A,B) :-
   C is A+B,
   C>=100,
   !,
   set(lazy_on_contradiction,true).
set_lazy_on_contradiction(_,_).


set_lazy_recalls :-
   '$aleph_global'(lazy_evaluate,lazy_evaluate(A/B)),
   functor(C,A,B),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,0))),
   '$aleph_global'(mode,mode(D,C)),
   '$aleph_global'(lazy_recall,lazy_recall(A/B,F)),
   ( D= (*)
   ->
     E=100
   ;
     E=D
   ),
   E>F,
   retract(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,F))),
   asserta(user:'$aleph_global'(lazy_recall,lazy_recall(A/B,E))),
   fail.
set_lazy_recalls.


record_abclause(A/B) :-
   functor(C,A,B),
   E= (C:-'$aleph_search'(abduced,pclause(C,D)),D,!),
   assertz(user:E).


check_abducibles :-
   '$aleph_global'(abducible,abducible(A/B)),
   record_testclause(A/B),
   record_abclause(A/B),
   fail.
check_abducibles.


cost_cover_required :-
   prolog:clause(user:cost(_,A,C),D),
   vars_in_term([A],[],B),
   (
     occurs_in(B,p(C))
   ;
     occurs_in(B,D)
   ),
   !.


check_user_search :-
   setting(evalfn,user),
   \+cost_cover_required,
   set(lazy_on_cost,true),
   !.
check_user_search.


check_prune_defs :-
   prolog:clause(user:prune(_),_),
   !,
   set(prune_defs,true).
check_prune_defs.


record_recursive_sat_call(A/B) :-
   functor(C,A,B),
   G= (C:-'$aleph_global'(stage,set(stage,saturation)),'$aleph_sat'(example,example(F,D)),example(E,D,C),E\=F,!),
   assertz(user:G).


check_recursive_calls :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   '$aleph_global'(determination,determination(A/B,A/B)),
   record_recursive_sat_call(A/B),
   set(recursion,true),
   fail.
check_recursive_calls.


record_testclause(A/B) :-
   setting(record_testclause_hook,true),
   !,
   functor(C,A,B),
   E= (C:-'$aleph_search'(pclause,pclause(C,D)),D,!),
   assertz(user:E).
record_testclause(B/C) :-
   setting(record_testclause_hook,A),
   prolog:call(call(user:A),B/C).


record_targetpred :-
   retract(user:'$aleph_local'(backpred,A/B)),
   once('$aleph_global'(determination,determination(A/B,_))),
   asserta(user:'$aleph_global'(targetpred,targetpred(A/B))),
   record_testclause(A/B),
   fail.
record_targetpred.


record_nskolemized(B,A,C,true) :-
   !,
   assertz(user:example(A,B,C)).
record_nskolemized(B,A,C,D) :-
   assertz(user: (example(A,B,C):-D)).


record_skolemized(B,A,G,C,F) :-
   assertz(user:example(A,B,C)),
   functor(C,D,E),
   update_backpreds(D/E),
   add_backs(F),
   add_skolem_types(G,C,F).


pfac(0,_,_,1).
pfac(1,_,_,1).
pfac(A,A,_,1).
pfac(A,D,B,F) :-
   C is A-1,
   E is B-1,
   pfac(C,D,E,G),
   H is A/B,
   F is G*H.


aleph_choose(A,B,D) :-
   C is A-B,
   ( C>B
   ->
     pfac(A,C,B,D)
   ;
     pfac(A,B,C,D)
   ).


binom(B,_,A,0) :-
   A>B,
   !.
binom(A,C,B,F) :-
   aleph_choose(A,B,G),
   H is C^B,
   D is 1-C,
   E is A-B,
   I is D^E,
   F is G*H*I,
   !.


call_with_depth_bound((A:-B),C) :-
   !,
   call_with_depth_bound((A,B),C).
call_with_depth_bound((A,C),B) :-
   !,
   prolog:depth_bound_call(call(user:A),B),
   call_with_depth_bound(C,B).
call_with_depth_bound(A,B) :-
   prolog:depth_bound_call(call(user:A),B).


clean_up_tree :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)).


clean_up_examples(A) :-
   retractall(user:'$aleph_global'(size,size(A,_))),
   retractall(user:'$aleph_global'(atoms,atoms(A,_))),
   retractall(user:'$aleph_global'(atoms_left,atoms_left(A,_))),
   retractall(user:'$aleph_global'(last_example,last_example(A,_))).


clean_up_examples :-
   clean_up_examples(pos),
   clean_up_examples(neg),
   clean_up_examples(rand).


clean_up_search :-
   retractall(user:'$aleph_search'(bad,_)),
   retractall(user:'$aleph_search'(best,_)),
   retractall(user:'$aleph_search'(best_label,_)),
   retractall(user:'$aleph_search'(clauseprior,_)),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   retractall(user:'$aleph_search'(current,_)),
   retractall(user:'$aleph_search'(label,_)),
   retractall(user:'$aleph_search'(modes,_)),
   retractall(user:'$aleph_search'(nextnode,_)),
   destroy_open_list,
   retractall(user:'$aleph_search'(pclause,_)),
   retractall(user:'$aleph_search'(selected,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   retractall(user:'$aleph_search_expansion'(_,_,_,_)),
   retractall(user:'$aleph_search_gain'(_,_,_,_)),
   retractall_aleph_search_node.


clean_up_init :-
   aleph_abolish('$aleph_good'/3),
   retractall(user:'$aleph_search'(last_good,_)),
   aleph_abolish('$aleph_feature'/2).


declare_dynamic(A/B) :-
   dynamic A/B.


occurs1(E,C,A,B) :-
   A=<B,
   arg(A,C,D),
   vars_in_term([D],[],F),
   aleph_member(G,E),
   aleph_member(H,F),
   G==H,
   !.
occurs1(C,D,A,B) :-
   A<B,
   E is A+1,
   occurs1(C,D,E,B).


occurs_in(A,(B,_)) :-
   occurs_in(A,B),
   !.
occurs_in(A,(_,B)) :-
   !,
   occurs_in(A,B).
occurs_in(B,A) :-
   functor(A,_,C),
   occurs1(B,A,1,C).


aleph_ord_subset(=,_,A,_,B) :-
   aleph_ord_subset(A,B).
aleph_ord_subset(>,A,B,_,C) :-
   aleph_ord_subset([A|B],C).


aleph_ord_subset([],_) :-
   !.
aleph_ord_subset([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_subset(C,A,D,B,E).


aleph_ord_intersection(=,A,B,_,C,[A|D]) :-
   aleph_ord_intersection(B,C,D).
aleph_ord_intersection(<,_,A,B,C,D) :-
   aleph_ord_intersection(A,[B|C],D).
aleph_ord_intersection(>,A,B,_,C,D) :-
   aleph_ord_intersection([A|B],C,D).


aleph_ord_union(=,A,B,_,C,[A|D],E) :-
   aleph_ord_union(B,C,D,E).
aleph_ord_union(<,A,B,C,D,[A|E],F) :-
   aleph_ord_union(B,[C|D],E,F).
aleph_ord_union(>,B,C,A,D,[A|E],[A|F]) :-
   aleph_ord_union([B|C],D,E,F).


aleph_ord_union(A,[],A,[]) :-
   !.
aleph_ord_union([],A,A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F,G) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F,G).


aleph_ord_union(=,A,B,_,C,[A|D]) :-
   aleph_ord_union(B,C,D).
aleph_ord_union(<,A,B,C,D,[A|E]) :-
   aleph_ord_union(B,[C|D],E).
aleph_ord_union(>,B,C,A,D,[A|E]) :-
   aleph_ord_union([B|C],D,E).


aleph_ord_disjoint(<,_,A,B,C) :-
   aleph_ord_disjoint(A,[B|C]).
aleph_ord_disjoint(>,A,B,_,C) :-
   aleph_ord_disjoint([A|B],C).


aleph_ord_subtract(=,_,A,_,B,C) :-
   aleph_ord_subtract(A,B,C).
aleph_ord_subtract(<,A,B,C,D,[A|E]) :-
   aleph_ord_subtract(B,[C|D],E).
aleph_ord_subtract(>,A,B,_,C,D) :-
   aleph_ord_subtract([A|B],C,D).


interval_subtract(A-B,A-B,[]) :-
   !.
interval_subtract(A-B,A-D,[C-B]) :-
   !,
   C is D+1.
interval_subtract(B-A,D-A,[B-C]) :-
   !,
   C is D-1.
interval_subtract(A-B,D-F,[A-C,E-B]) :-
   C is D-1,
   E is F+1,
   C>=A,
   B>=E,
   !.


interval_subsumes(A-C,B-D) :-
   A=<B,
   C>=D.


interval_to_list(B-C,A,A) :-
   B>C,
   !.
interval_to_list(A-C,D,E) :-
   B is A+1,
   interval_to_list(B-C,[A|D],E).


intervals_to_list([],A,A).
intervals_to_list([A|C],B,E) :-
   interval_to_list(A,B,D),
   intervals_to_list(C,D,E).


list_to_interval(A,[],A,[]).
list_to_interval(A,[B|C],A,[B|C]) :-
   B-A>1,
   !.
list_to_interval(_,[A|B],C,D) :-
   list_to_interval(A,B,C,D).


list_to_intervals(A,C) :-
   sort(A,B),
   list_to_intervals1(B,C).


intervals_to_list(A,C) :-
   intervals_to_list(A,[],B),
   sort(B,C),
   !.


interval_select(A,[C-B|_],D) :-
   A=<B-C+1,
   !,
   D is C+A-1.
interval_select(A,[C-B|E],F) :-
   D is A- (B-C+1),
   interval_select(D,E,F).


interval_intersection(A-B,C-D,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(C-D,A-B,A-B) :-
   A>=C,
   B=<D,
   !.
interval_intersection(A-D,C-B,A-B) :-
   A>=C,
   B>=A,
   B=<D,
   !.
interval_intersection(C-B,A-D,A-B) :-
   A>=C,
   A=<B,
   B=<D,
   !.


intervals_intersects1(A,[B|_],C) :-
   interval_intersection(A,B,C),
   !.
intervals_intersects1(A,[_|B],C) :-
   intervals_intersects1(A,B,C).


intervals_intersects1(A-_,[B-C|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(B-C,[A-_|_]) :-
   A>=B,
   A=<C,
   !.
intervals_intersects1(A-B,[_|C]) :-
   intervals_intersects1(A-B,C).


intervals_intersects([A-B|_],C) :-
   intervals_intersects1(A-B,C),
   !.
intervals_intersects([_|A],B) :-
   intervals_intersects(A,B).


partition(_,[],[],[]).
partition(B,[A|C],[A|D],E) :-
   B@>A,
   !,
   partition(B,C,D,E).
partition(B,[A|C],D,[A|E]) :-
   partition(B,C,D,E).


quicksort(_,[],[]).
quicksort(C,[A|B],H) :-
   partition(A,B,D,E),
   quicksort(C,D,G),
   quicksort(C,E,F),
   ( C=ascending
   ->
     aleph_append([A|F],G,H)
   ;
     aleph_append([A|G],F,H)
   ).


aleph_subset2([A|B],[A|C]) :-
   aleph_subset2(B,C).
aleph_subset2(A,[_|B]) :-
   aleph_subset2(A,B).
aleph_subset2([],[]).


get_pclause1([A],B,E,G,F,I,C) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,D,_,_,_),
   get_flatatom(D,E,F,G),
   functor(F,H,_),
   ( H= (=)
   ->
     I=0
   ;
     I=1
   ).
get_pclause1([A|F],B,D,H,(E,I),L,J) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,_,_),
   get_flatatom(C,D,E,G),
   get_pclause1(F,B,G,H,I,M,J),
   functor(E,K,_),
   ( K= (=)
   ->
     L=M
   ;
     L is M+1
   ).


get_pclause1([A],D,F,E,H,B) :-
   !,
   '$aleph_sat_litinfo'(A,B,C,_,_,_),
   get_flatatom(C,D,E,F),
   functor(E,G,_),
   ( G= (=)
   ->
     H=0
   ;
     H=1
   ).
get_pclause1([A|E],C,G,(D,H),K,I) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   get_flatatom(B,C,D,F),
   get_pclause1(E,F,G,H,L,I),
   functor(D,J,_),
   ( J= (=)
   ->
     K=L
   ;
     K is L+1
   ).


flatten_args(0,_,_,A,A) :-
   !.
flatten_args(A,B,D,G,H) :-
   arg(A,B,C),
   F is A-1,
   ( C=aleph_const(E)
   ->
     arg(A,D,E),
     flatten_args(F,B,D,G,H)
   ;
     ( integer(C)
     ->
       update(G,C/I,J),
       arg(A,D,I),
       flatten_args(F,B,D,J,H)
     )
   ;
     functor(C,K,L),
     functor(M,K,L),
     arg(A,D,M),
     flatten_args(L,C,M,G,J),
     flatten_args(F,B,D,J,H)
   ).


get_flatatom(not A,B,not C,D) :-
   !,
   get_flatatom(A,B,C,D).
get_flatatom(A,E,B,F) :-
   functor(A,C,D),
   functor(B,C,D),
   flatten_args(D,A,B,E,F).


get_clause(A,B,_,[]) :-
   A>B,
   !.
get_clause(A,F,C,[D|H]) :-
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   !,
   get_flatatom(B,C,D,G),
   E is A+1,
   get_clause(E,F,G,H).
get_clause(A,C,D,E) :-
   B is A+1,
   get_clause(B,C,D,E).


revzap([B|A],C,D) :-
   revzap(A,[B|C],D).
revzap([],A,A).


aleph_member3(A,A-B) :-
   A=<B.
aleph_member3(C,A-B) :-
   A<B,
   D is A+1,
   aleph_member3(C,D-B).


alphabetic_variant(A,B) :-
   copy_term(A/B,C/D),
   numbervars(C,0,_),
   numbervars(D,0,_),
   C=D.


min_in_list([A],A) :-
   !.
min_in_list([B|A],D) :-
   min_in_list(A,C),
   ( B@>C
   ->
     D=C
   ;
     D=B
   ).


max_in_list([A],A) :-
   !.
max_in_list([B|A],D) :-
   max_in_list(A,C),
   ( B@>C
   ->
     D=B
   ;
     D=C
   ).


get_first_n(0,_,[]) :-
   !.
get_first_n(_,[],[]) :-
   !.
get_first_n(B,[A|D],[A|E]) :-
   C is B-1,
   get_first_n(C,D,E).


aleph_rsample(B,C,A,A) :-
   B>=C,
   !.
aleph_rsample(D,B,[A|G],[A|H]) :-
   get_random(B,C),
   C=<D,
   !,
   E is D-1,
   F is B-1,
   aleph_rsample(E,F,G,H).
aleph_rsample(B,A,[_|D],E) :-
   C is A-1,
   aleph_rsample(B,C,D,E).


aleph_rsample(B,A,D) :-
   length(A,C),
   aleph_rsample(B,C,A,D).


aleph_rpermute([],0,[]) :-
   !.
aleph_rpermute(C,A,[D|G]) :-
   get_random(A,B),
   aleph_remove_nth(B,C,D,E),
   F is A-1,
   aleph_rpermute(E,F,G).


aleph_delete0(_,[],[]).
aleph_delete0(A,[A|B],B) :-
   !.
aleph_delete0(B,[A|C],[A|D]) :-
   aleph_delete0(B,C,D).


aleph_delete1(A,[A|B],B) :-
   !.
aleph_delete1(B,[A|C],[A|D]) :-
   aleph_delete1(B,C,D).


print_lit(B,C,A,E,D,F) :-
   ( A=1
   ->
     tab(3)
   ;
     true
   ),
   aleph_portray(B,C),
   write(D),
   ( A=E
   ->
     nl,
     F=1
   ;
     F is A+1
   ).


print_litlist([],_,_,_).
print_litlist([A],B,C,_) :-
   !,
   print_lit(A,B,C,C,'.',_).
print_litlist([A|E],B,C,D) :-
   print_lit(A,B,C,D,', ',F),
   print_litlist(E,B,F,D).


pp_dlist(A,D) :-
   copy_term(A,[B|C]),
   numbervars([B|C],0,_),
   aleph_portray(B,D),
   ( C= ([])
   ->
     write('.'),
     nl
   ;
     ( D=true
     ->
       write(' if:')
     ;
       write(' :-')
     ),
     nl,
     '$aleph_global'(print,set(print,E)),
     print_litlist(C,D,1,E)
   ).


pp_dlist([]) :-
   !.
pp_dlist(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dlist(A,true)
   ;
     pp_dlist(A,false)
   ).


print_lits((C,F),A,D,E) :-
   !,
   ( A=true
   ->
     B=' and '
   ;
     B=', '
   ),
   print_lit(C,A,D,E,B,G),
   print_lits(F,A,G,E).
print_lits(A,B,C,_) :-
   print_lit(A,B,C,C,'.',_).


aleph_portray(hypothesis,true) :-
   aleph_portray(hypothesis),
   !.
aleph_portray(hypothesis,false) :-
   p_message(hypothesis),
   hypothesis(A,B,_),
   pp_dclause((A:-B)),
   !.
aleph_portray(_,hypothesis) :-
   !.
aleph_portray(search,true) :-
   aleph_portray(search),
   !.
aleph_portray(search,_) :-
   !.
aleph_portray(train_pos,true) :-
   aleph_portray(train_pos),
   !.
aleph_portray(train_pos,_) :-
   !,
   setting(train_pos,A),
   show_file(A).
aleph_portray(train_neg,true) :-
   aleph_portray(train_neg),
   !.
aleph_portray(train_neg,_) :-
   !,
   setting(train_neg,A),
   show_file(A).
aleph_portray(test_pos,true) :-
   aleph_portray(test_pos),
   !.
aleph_portray(test_pos,_) :-
   !,
   setting(test_pos,A),
   show_file(A).
aleph_portray(test_neg,true) :-
   aleph_portray(test_neg),
   !.
aleph_portray(test_neg,_) :-
   !,
   setting(test_neg,A),
   show_file(A).
aleph_portray(A,true) :-
   aleph_portray(A),
   !.
aleph_portray(A,_) :-
   aleph_writeq(A).


pp_dclause((A:-true),B) :-
   !,
   pp_dclause(A,B).
pp_dclause((A:-B),E) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),0,_),
   aleph_portray(C,E),
   ( E=true
   ->
     write(' if:')
   ;
     write(' :-')
   ),
   nl,
   '$aleph_global'(print,set(print,F)),
   print_lits(D,E,1,F).
pp_dclause(A,C) :-
   copy_term(A,B),
   numbervars(B,0,_),
   aleph_portray(B,C),
   write('.'),
   nl.


strip_true((A:-true),A) :-
   !.
strip_true(A,A).


extract_clauses_with_length([],[]).
extract_clauses_with_length([A-[_,_,_,B] |C],[A-B|D]) :-
   extract_clauses_with_length(C,D).


theory_move(delete_clause,A,B) :-
   aleph_delete(_,A,B),
   B\= ([]).
theory_move(add_clause,A,E) :-
   setting(clauses,C),
   length(A,B),
   B<C,
   sample_clauses(1,[D]),
   aleph_append([D],A,E).
theory_move(delete_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(delete_lit,B,C),
   aleph_append([C],D,E).
theory_move(add_lit,A,E) :-
   aleph_delete(B,A,D),
   clause_move(add_lit,B,C),
   aleph_append([C],D,E).


clause_move(delete_lit,A,P) :-
   A=J-[F,G,B,L],
   ( B=[D|C]
   ->
     aleph_delete(_,C,E),
     H=[D|E],
     bottom_key(F,G,I,_),
     clause_status(H,I,[],legal,legal),
     O is J-1,
     ( I=false
     ->
       get_pclause(H,[],K,_,_,_)
     ;
       get_pclause(H,I,[],K,_,_,_)
     ),
     \+prune(K)
   ;
     clause_to_list(L,[N|M]),
     aleph_delete(_,M,E),
     aleph_mode_linked([N|E]),
     list_to_clause([N|E],K),
     \+prune(K),
     O is J-1,
     H= ([])
   ),
   P=O-[F,G,H,K].
clause_move(add_lit,A,P) :-
   A=B-[F,G,D,E],
   setting(clauselength,C),
   B<C,
   ( D= ([])
   ->
     auto_refine(E,O),
     N is B+1,
     M= ([])
   ;
     aleph_delete(I,D,L),
     bottom_key(F,G,H,_),
     ( H=false
     ->
       '$aleph_sat_litinfo'(I,_,_,_,_,J)
     ;
       '$aleph_sat_litinfo'(I,H,_,_,_,_,J)
     ),
     aleph_member(K,J),
     \+aleph_member(K,L),
     aleph_append([K],D,M),
     clause_status(M,H,[],legal,legal),
     N is B+1,
     ( H=false
     ->
       get_pclause(M,[],O,_,_,_)
     ;
       get_pclause(M,H,[],O,_,_,_)
     ),
     \+prune(O)
   ),
   P=N-[F,G,M,O].


old_move(clauses,B-[_,_,C,D]) :-
   ( setting(cache_clauselength,A)
   ->
     true
   ;
     A=3
   ),
   B=<A,
   ( C= ([])
   ->
     clause_to_list(D,E),
     sort(E,F),
     numbervars(F,0,_)
   ;
     sort(C,F)
   ),
   ( '$aleph_search_seen'(B,F)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,F)),
     !,
     fail
   ).
old_move(theories,A) :-
   numbervars(A,0,_),
   length(A,B),
   ( '$aleph_search_seen'(B,C)
   ->
     p_message('old move'),
     true
   ;
     asserta(user:'$aleph_search_seen'(B,C)),
     !,
     fail
   ).


num_to_length1(B,A,_,_,A) :-
   B>=A,
   !.
num_to_length1(A,H,D,B,F) :-
   '$aleph_sat'(random,number_of_clauses(A,C)),
   E is B+C,
   ( D=<E
   ->
     ( C< 1
     ->
       F is A-1
     ;
       F=A
     )
   ;
     G is A+1,
     num_to_length1(G,H,D,E,F)
   ).


get_rand_lit(A,C,B) :-
   repeat,
   get_random(A,B),
   B>1,
   ( C=false
   ->
     '$aleph_sat_litinfo'(B,_,_,_,_,_)
   ;
     '$aleph_sat_litinfo'(B,C,_,_,_,_,_)
   ),
   !.


get_rand_lit(A,B,D,C) :-
   repeat,
   get_rand_lit(A,B,C),
   \+aleph_member(C,D),
   !.


clause_status(A,C,D,E) :-
   bottom_key(_,_,B,_),
   clause_status(A,B,C,D,E).


randselect(0,_,_,_,[]) :-
   !.
randselect(_,C,_,A,[]) :-
   length(A,B),
   B is C-1,
   !.
randselect(E,A,B,C,[D|G]) :-
   get_rand_lit(A,B,C,D),
   F is E-1,
   randselect(F,A,B,[D|C],G).


clause_status([],_,_,A,A) :-
   !.
clause_status([C|F],B,A,H,I) :-
   get_ovars(A,B,[],E),
   get_ivars([C],B,[],D),
   aleph_subset1(D,E),
   !,
   aleph_append([C],A,G),
   clause_status(F,B,G,H,I).
clause_status(_,_,_,_,illegal).


randselect1(0,_,_,_,[]) :-
   !.
randselect1(_,_,[],_,[]) :-
   !.
randselect1(H,C,B,F,[A|K]) :-
   random_select(A,B,E),
   ( C=false
   ->
     '$aleph_sat_litinfo'(A,_,_,_,_,D)
   ;
     '$aleph_sat_litinfo'(A,C,_,_,_,_,D)
   ),
   update_list(D,E,G),
   aleph_delete_list([A|F],G,J),
   I is H-1,
   randselect1(I,C,J,[A|F],K).


get_pclause([A],B,C,E,D,F,G) :-
   !,
   get_pclause1([A],B,C,D,E,F,G).
get_pclause([A|D],B,C,H,F,K,G) :-
   get_pclause1([A],B,C,E,I,L,_),
   get_pclause1(D,B,E,F,J,M,G),
   H= (I:-J),
   K is L+M.


bottom_key(A,B,C,D) :-
   ( var(A),
     var(B)
   ->
     '$aleph_sat'(example,example(A,B))
   ;
     true
   ),
   ( setting(store_bottom,true)
   ->
     ( '$aleph_sat'(stored,stored(A,B,C))
     ->
       D=false
     ;
       concat([B,'_',A],C),
       D=true
     )
   ;
     C=false,
     D=false
   ).


randclause(1,B,legal,[1]) :-
   !,
   bottom_key(_,_,A,_),
   ( A=false
   ->
     get_pclause([1],[],B,_,_,_)
   ;
     get_pclause([1],A,[],B,_,_,_)
   ).
randclause(B,E,A,F) :-
   A==legal,
   '$aleph_sat'(example,example(C,D)),
   retract(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F))).
randclause(D,H,A,F) :-
   A==legal,
   !,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat_litinfo'(1,_,_,_,_,C)
   ;
     '$aleph_sat_litinfo'(1,B,_,_,_,_,C)
   ),
   E is D-1,
   repeat,
   randselect1(E,B,C,[1],G),
   F=[1|G],
   clause_status(F,B,[],legal,legal),
   !,
   ( B=false
   ->
     get_pclause(F,[],H,_,_,_)
   ;
     get_pclause(F,B,[],H,_,_,_)
   ).
randclause(A,I,H,F) :-
   D is A-1,
   bottom_key(_,_,B,_),
   ( B=false
   ->
     '$aleph_sat'(lastlit,C)
   ;
     '$aleph_sat'(lastlit,B,C)
   ),
   repeat,
   randselect(D,C,B,[],E),
   aleph_append(E,[1],F),
   clause_status(F,B,[],legal,G),
   G=H,
   !,
   ( B=false
   ->
     get_pclause(F,[],I,_,_,_)
   ;
     get_pclause(F,B,[],I,_,_,_)
   ).


randclause_wo_repl(A,B,C,D,E) :-
   A>0,
   randclause(B,C,D,E),
   \+prune(C),
   split_clause(C,G,H),
   ( setting(language,F)
   ->
     lang_ok(F,G,H)
   ;
     true
   ),
   ( setting(newvars,I)
   ->
     newvars_ok(I,G,H)
   ;
     true
   ),
   \+'$aleph_sat'(random,rselect(E)),
   !,
   asserta(user:'$aleph_sat'(random,rselect(E))).
randclause_wo_repl(A,C,D,E,F) :-
   A>0,
   B is A-1,
   randclause_wo_repl(B,C,D,E,F),
   !.
randclause_wo_repl(_,1,A,B,C) :-
   randclause(1,A,B,C).


count_clause_status1([],_,0,0) :-
   !.
count_clause_status1([C/_|A],B,D,F) :-
   count_clause_status1(A,B,E,G),
   ( B==C
   ->
     D is E+1,
     F is G
   ;
     D is E,
     F is G+1
   ).


print_distribution :-
   write('Clause Length'),
   tab(8),
   write('Estimated number of clauses'),
   nl,
   write('_____________'),
   tab(8),
   write('___________________________'),
   nl,
   prolog:findall(A-B,'$aleph_sat'(random,number_of_clauses(A,B)),C),
   sort(C,D),
   aleph_member(A-B,D),
   write(A),
   tab(20),
   write(B),
   nl,
   fail.
print_distribution :-
   nl,
   write('Estimated size of hypothesis space = '),
   ( '$aleph_sat'(random,hypothesis_space(A))
   ->
     true
   ;
     A=0
   ),
   write(A),
   write(' clauses'),
   nl.


store_legal_clauses([],_,_,_).
store_legal_clauses([A/[E,F] |G],B,C,D) :-
   ( A==legal
   ->
     asserta(user:'$aleph_sat'(random,rselect_legal(B,C,D,E,F)))
   ;
     true
   ),
   store_legal_clauses(G,B,C,D).


count_clause_status(_,A,_,0) :-
   var(A),
   !.
count_clause_status(A,B,C,D) :-
   count_clause_status1(A,B,C,D).


get_random_wo_repl(0,_,[]) :-
   !.
get_random_wo_repl(E,A,[C/[B,D] |G]) :-
   randclause_wo_repl(A,B,C,D),
   !,
   F is E-1,
   get_random_wo_repl(F,A,G).
get_random_wo_repl(_,_,[]).


total_clauses(1,_,1) :-
   !.
total_clauses(A,B,E) :-
   C is A-1,
   D is B-1,
   total_clauses(C,D,F),
   E is F*D.


estimate_proportion(0,_,_,0,[]) :-
   !.
estimate_proportion(B,A,D,F,C) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   retractall(user:'$aleph_sat'(random,rselect_legal(A,_,_,_,_))),
   get_random_wo_repl(B,A,C),
   length(C,E),
   count_clause_status(C,D,G,_),
   ( E=0
   ->
     F=0
   ;
     F is G/E
   ),
   '$aleph_sat'(example,example(H,I)),
   retractall(user:'$aleph_sat'(random,rselect(_))),
   store_legal_clauses(C,A,H,I).


estimate_number(1,_,1) :-
   !.
estimate_number(B,A,D) :-
   estimate_proportion(A,B,legal,E,_),
   '$aleph_sat'(lastlit,C),
   total_clauses(B,C,F),
   D is float(E*F).


estimate_number(1,B,D,A,C) :-
   !,
   estimate_number(A,B,E),
   C is D+E.
estimate_number(E,B,C,A,H) :-
   p_message('New Trial'),
   estimate_number(A,B,D),
   G is C+D,
   F is E-1,
   estimate_number(F,B,G,A,H).


estimate_number(_,_,B,0) :-
   '$aleph_sat'(lastlit,A),
   A<B,
   !.
estimate_number(A,C,B,D) :-
   A>0,
   p1_message('Estimate legal clauses with length'),
   p_message(B),
   estimate_number(A,C,0,B,E),
   D is float(E/A),
   concat(['trials=',A,' sample=',C,' estimate=',D],F),
   p_message(F).


estimate_numbers(0,_,_,A,A) :-
   !.
estimate_numbers(A,B,C,E,H) :-
   retractall(user:'$aleph_sat'(random,number_of_clauses(A,_))),
   estimate_number(B,C,A,D),
   asserta(user:'$aleph_sat'(random,number_of_clauses(A,D))),
   F is A-1,
   G is D+E,
   estimate_numbers(F,B,C,G,H).


count_frequency([],_,0).
count_frequency([C|A],B,D) :-
   count_frequency(A,B,E),
   ( C=_-B
   ->
     D is E+1
   ;
     D is E
   ).


select_good_clauses([],_,A,B,A,B,[]) :-
   !.
select_good_clauses([A-E|C],A,B,F,G,H,I) :-
   !,
   D is B-1,
   select_good_clauses(C,A,D,[A-E|F],G,H,I).
select_good_clauses(C,_,A,B,A,B,C).


select_good_clauses([],_,A,A) :-
   !.
select_good_clauses(_,B,A,A) :-
   B=<0,
   !.
select_good_clauses([B-D|A],C,E,J) :-
   select_good_clauses(A,B,C,[B-D|E],F,I,G),
   H is F-1,
   select_good_clauses(G,H,I,J).


extract_count(pos,[A,_,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,[_,A,_],B) :-
   interval_count(A,B),
   !.
extract_count(neg,_,0).


label_create(C,F) :-
   '$aleph_global'(last_example,last_example(pos,E)),
   D=pos,
   ( setting(evalfn,posonly)
   ->
     '$aleph_global'(last_example,last_example(rand,A)),
     B=rand
   ;
     '$aleph_global'(last_example,last_example(neg,A)),
     B=neg
   ),
   label_create(C,D,[1-E],B,[1-A],F).


estimate_scores([],_,A,A) :-
   !.
estimate_scores([F-[_,_,_,A] |G],C,I,J) :-
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   complete_label(C,A,[D,E,F],[_,_,_,H|_]),
   estimate_scores(G,C,[-H-F|I],J).


normalise_distribution(A,C) :-
   key_sum(A,B),
   ( 0 is float(B)
   ->
     C=A
   ;
     normalise_distribution(A,B,D),
     keysort(D,C)
   ).


estimate_frequency(0,_,[]).
estimate_frequency(A,B,[C-A|E]) :-
   count_frequency(B,A,C),
   D is A-1,
   estimate_frequency(D,B,E).


select_good_clauses(A,C,F) :-
   keysort(A,B),
   length(B,D),
   E is integer(C*D/100),
   select_good_clauses(B,E,[],F).


estimate_clauselength_scores(0,_,_,A,A) :-
   !.
estimate_clauselength_scores(A,B,D,E,H) :-
   set(clauselength_distribution,[1-A]),
   p1_message('Estimate scores of clauses with length'),
   p_message(A),
   sample_clauses(B,C),
   estimate_scores(C,D,E,G),
   F is A-1,
   estimate_clauselength_scores(F,B,D,G,H).


randclause_wo_repl(A,B,C,D) :-
   randclause_wo_repl(100,A,B,C,D).


draw_legalclause_wo_repl(A,B,C,D) :-
   A=<B,
   randclause_wo_repl(A,C,legal,D),
   !.
draw_legalclause_wo_repl(A,B,D,E) :-
   A<B,
   C is A+1,
   draw_legalclause_wo_repl(C,B,D,E).


num_to_length(A,_,1) :-
   A=< 1,
   !.
num_to_length(B,A,C) :-
   num_to_length1(2,A,B,1,C).


get_rrandom(C,A) :-
   aleph_random(B),
   A is B*C.


draw_element(A,D) :-
   normalise_distribution(A,B),
   aleph_random(C),
   draw_element(B,0,C,D).


random_select(A,[A],[]) :-
   !.
random_select(D,A,E) :-
   length(A,B),
   B>0,
   get_random(B,C),
   aleph_remove_nth(C,A,D,E).


sample_clause_using_modes(C,D,E) :-
   prolog:findall(A,auto_refine(false,A),B),
   B\= ([]),
   random_select(F,B,_),
   draw_element(C,D),
   ( D=1
   ->
     E=F
   ;
     G is D-1,
     sample_clause_using_modes(G,F,E)
   ).
sample_clause_using_modes(D,A,E) :-
   prolog:findall(B,auto_refine(A,B),C),
   C\= ([]),
   !,
   ( D=1
   ->
     random_select(E,C,_)
   ;
     random_select(G,C,_),
     F is D-1,
     sample_clause_using_modes(F,G,E)
   ).
sample_clause_using_modes(_,A,A).


legal_clause_using_modes(A,B,C-[0,0,[],D]) :-
   A>0,
   sample_clause_using_modes(B,C,D),
   \+prune(D),
   split_clause(D,F,G),
   ( setting(language,E)
   ->
     lang_ok(E,F,G)
   ;
     true
   ),
   ( setting(newvars,H)
   ->
     newvars_ok(H,F,G)
   ;
     true
   ),
   !.
legal_clause_using_modes(A,C,D) :-
   A>1,
   B is A-1,
   legal_clause_using_modes(B,C,D),
   !.
legal_clause_using_modes(_,_,1-[0,0,[],A]) :-
   sample_clause_using_modes([1-1],1,A).


get_clause_sample(0,_,_,[]) :-
   !.
get_clause_sample(J,A,C,[D-[H,I,G,F] |L]) :-
   ( number(A)
   ->
     get_rrandom(A,B),
     num_to_length(B,C,D),
     E is C
   ;
     draw_element(A,D),
     E is D
   ),
   draw_legalclause_wo_repl(D,E,F,G),
   !,
   '$aleph_sat'(example,example(H,I)),
   K is J-1,
   get_clause_sample(K,A,C,L).
get_clause_sample(A,C,D,E) :-
   B is A-1,
   get_clause_sample(B,C,D,E).


estimate_numbers(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,sample(A,B,C,D,E)),
   '$aleph_sat'(random,hypothesis_space(F)),
   !.
estimate_numbers(A,B,C,D) :-
   retractall(user:'$aleph_sat'(random,sample(_,_,_,_,_))),
   retractall(user:'$aleph_sat'(random,hypothesis_space(_))),
   estimate_numbers(A,B,C,0,D),
   asserta(user:'$aleph_sat'(random,hypothesis_space(D))),
   '$aleph_sat'(example,example(E,F)),
   asserta(user:'$aleph_sat'(random,sample(E,F,A,B,C))).


remove_alpha_variants([],[]).
remove_alpha_variants([B|A],D) :-
   aleph_member(C,A),
   alphabetic_variant(B,C),
   !,
   remove_alpha_variants(A,D).
remove_alpha_variants([A|B],[A|C]) :-
   remove_alpha_variants(B,C).


sample_nclauses_using_modes(0,_,[]) :-
   !.
sample_nclauses_using_modes(C,A,[B|E]) :-
   legal_clause_using_modes(100,A,B),
   D is C-1,
   sample_nclauses_using_modes(D,A,E).


distrib(A-B,_,[]) :-
   A>B,
   !.
distrib(B-D,A,[A-B|E]) :-
   C is B+1,
   distrib(C-D,A,E).


sample_nclauses(false,D,G) :-
   !,
   gen_auto_refine,
   ( setting(clauselength_distribution,C)
   ->
     true
   ;
     setting(clauselength,A),
     B is  1/A,
     distrib(1-A,B,C)
   ),
   sample_nclauses_using_modes(D,C,E),
   remove_alpha_variants(E,F),
   keysort(F,G).
sample_nclauses(_,A,F) :-
   retractall(user:'$aleph_sat'(random,rselect(_))),
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,B),
   ( setting(clauselength_distribution,C)
   ->
     D is A
   ;
     estimate_numbers(B,1,400,C),
     ( A>C
     ->
       D is C
     ;
       D is A
     )
   ),
   get_clause_sample(D,C,B,E),
   keysort(E,F).


sample_clauses(B,C) :-
   setting(construct_bottom,A),
   sample_nclauses(A,B,C).


grounding_equality(+A= #A) :-
   '$aleph_search'(modes,typemapped(B,_,B)),
   concat([type,B],A).


pairwise_equality(+D= +E) :-
   '$aleph_search'(modes,typemapped(_,A,B)),
   '$aleph_search'(modes,typemapped(A,_,C)),
   B\==C,
   concat([type,B],D),
   concat([type,C],E).


infer_mode1([],_,_,_,[]).
infer_mode1([B|J],D,I,A,[G|K]) :-
   best_overlap(A,B,E,C),
   ( C>=D
   ->
     '$aleph_search'(modes,typemapped(E,_,F)),
     asserta(user:'$aleph_search'(modes,typemapped(B,E,F))),
     concat([type,F],H),
     G= +H
   ;
     ( C> 0
     ->
       asserta(user:'$aleph_search'(modes,typemapped(B,E,B)))
     ;
       asserta(user:'$aleph_search'(modes,typemapped(B,B,B)))
     ),
     concat([type,B],H),
     ( I=head
     ->
       G= +H
     ;
       G= -H
     )
   ),
   infer_mode1(J,D,I,A,K).


type_overlap(A,B,C) :-
   A>B,
   !,
   ( '$aleph_search'(modes,typeoverlap(B,A,_,C))
   ->
     true
   ;
     C= 0
   ).
type_overlap(A,B,C) :-
   ( '$aleph_search'(modes,typeoverlap(A,B,C,_))
   ->
     true
   ;
     C= 0
   ).


estimate_forward1([],_,_,0).
estimate_forward1([A|F],D,B,G) :-
   type_overlap(A,B,C),
   ( C>=D
   ->
     E is  1
   ;
     E is  0
   ),
   estimate_forward1(F,D,B,H),
   G is E+H.


best_overlap([A],B,A,C) :-
   !,
   type_overlap(B,A,C).
best_overlap([B|C],A,G,F) :-
   type_overlap(A,B,E),
   best_overlap(C,A,H,D),
   ( D>E
   ->
     F is D,
     G=H
   ;
     F is E,
     G=B
   ).
best_overlap([],A,A,0).


estimate_forward([],_,_,0).
estimate_forward([C|D],B,A,E) :-
   estimate_forward1(A,B,C,F),
   estimate_forward(D,B,A,G),
   E is F+G.


evaluate_backward([],_,_,0).
evaluate_backward([B|F],D,A,G) :-
   best_overlap(A,B,_,C),
   ( C>=D
   ->
     E= 1
   ;
     E= 0
   ),
   evaluate_backward(F,D,A,H),
   G is E+H.


score_modes([],_,_,_,[]).
score_modes([A|M],C,D,E,[K-A|N]) :-
   A=..[_|B],
   evaluate_backward(B,C,D,L),
   aleph_delete_list(B,E,F),
   estimate_forward(D,C,F,H),
   estimate_forward(B,C,F,G),
   I is G-H,
   ( I<0
   ->
     J is 0
   ;
     J is I
   ),
   K is- (L+J),
   score_modes(M,C,D,E,N).


infer_ordered_modes([],_,_,_,_,[]) :-
   !.
infer_ordered_modes(A,B,G,C,D,[H|L]) :-
   score_modes(A,B,C,D,E),
   keysort(E,[_-F|_]),
   infer_mode(F,B,G,C,H,I),
   aleph_delete(F,A,J),
   aleph_delete_list(I,D,K),
   infer_ordered_modes(J,B,G,I,K,L).


infer_mode(A,C,D,E,I,K) :-
   A=..[F|B],
   infer_mode1(B,C,D,E,G),
   J=..[F|G],
   length(B,H),
   ( '$aleph_global'(targetpred,targetpred(F/H))
   ->
     I=modeh(*,J)
   ;
     I=mode(*,J)
   ),
   aleph_ord_union(E,B,K).


aleph_ord_intersection(_,[],[]) :-
   !.
aleph_ord_intersection([],_,[]) :-
   !.
aleph_ord_intersection([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_intersection(C,A,D,B,E,F).


store_type_overlaps([],_,_,_).
store_type_overlaps([A|K],H,C,F) :-
   '$aleph_search'(modes,type(A,G,B)),
   aleph_ord_intersection(B,C,D),
   length(D,E),
   I is E/F,
   J is E/G,
   asserta(user:'$aleph_search'(modes,typeoverlap(H,A,I,J))),
   store_type_overlaps(K,H,C,F).


store_type_equivalence([],_,_).
store_type_equivalence([A|B],E,F) :-
   retract(user:'$aleph_search'(modes,type(A,D,C))),
   store_type_overlaps(B,A,C,D),
   asserta(user:'$aleph_search'(modes,type(A,E,F,D,C))),
   store_type_equivalence(B,E,F).


class_equivalent(A,B) :-
   aleph_member(C,A),
   type_equivalent(B,C),
   !.


type_equivalent([A|_],B) :-
   '$aleph_search'(modes,type(A,_,C)),
   '$aleph_search'(modes,type(B,_,D)),
   intersects(C,D),
   !.
type_equivalent([_|A],B) :-
   type_equivalent(A,B).


get_type_equivalence([],A,B,[]) :-
   sort(A,B).
get_type_equivalence([B|C],A,D,E) :-
   type_equivalent(A,B),
   !,
   get_type_equivalence(C,[B|A],D,E).
get_type_equivalence([A|B],C,D,[A|E]) :-
   get_type_equivalence(B,C,D,E).


get_type_elements(B,D,F,A) :-
   aleph_member(C,A),
   prolog:findall(E,(call(user:B),ground(B),arg(C,D,E)),G),
   arg(C,F,H),
   sort(G,I),
   ( retract(user:'$aleph_search'(modes,type(H,_,J)))
   ->
     aleph_ord_union(I,J,K)
   ;
     K=I
   ),
   length(K,L),
   asserta(user:'$aleph_search'(modes,type(H,L,K))),
   fail.
get_type_elements(_,_,_,_).


number_types(0,_,_) :-
   !.
number_types(A,C,B) :-
   arg(A,B,C),
   D is A-1,
   E is C-1,
   number_types(D,E,B).


add_inferred_modes([],_).
add_inferred_modes([A|C],B) :-
   write(A),
   nl,
   ( B=true
   ->
     call(user:A)
   ;
     true
   ),
   add_inferred_modes(C,B).


infer_negations([],[]).
infer_negations([mode(_,A) |C],D) :-
   A=..[_|B],
   aleph_member1(-_,B),
   !,
   infer_negations(C,D).
infer_negations([mode(_,A) |B],[mode(1,not A) |C]) :-
   infer_negations(B,C).


infer_equalities(C) :-
   prolog:findall(mode(1,A),(pairwise_equality(A);grounding_equality(A)),B),
   sort(B,C).


infer_modes([A|F],B,E,[C|H]) :-
   infer_mode(A,B,head,[],C,D),
   aleph_delete_list(D,E,G),
   infer_ordered_modes(F,B,body,D,G,H).


store_type_equivalences([]).
store_type_equivalences([[A|B] |D]) :-
   length([A|B],C),
   store_type_equivalence([A|B],A,C),
   store_type_equivalences(D).


merge_equivalence_classes([A],[A]) :-
   !.
merge_equivalence_classes(A,G) :-
   aleph_delete(C,A,B),
   aleph_delete(D,B,F),
   class_equivalent(C,D),
   !,
   aleph_ord_union(C,D,E),
   merge_equivalence_classes([E|F],G).
merge_equivalence_classes(A,A).


get_type_equivalences([],[]).
get_type_equivalences([B|A],[C|E]) :-
   get_type_equivalence(A,[B],C,D),
   get_type_equivalences(D,E).


interval_to_list(A-B,[]) :-
   A>B,
   !.
interval_to_list(A-C,[A|D]) :-
   B is A+1,
   interval_to_list(B-C,D).


get_type_elements([]).
get_type_elements([A|F]) :-
   functor(A,B,C),
   functor(D,B,C),
   interval_to_list(1-C,E),
   get_type_elements(example(_,_,D),D,A,E),
   get_type_elements(D,D,A,E),
   get_type_elements(F).


number_types([],A,[],A).
number_types([B/C|F],D,[A|G],H) :-
   functor(A,B,C),
   E is D+C,
   number_types(C,E,A),
   number_types(F,E,G,H).


in((A,B),A,B).
in((A,B),C,(A,D)) :-
   !,
   in(B,C,D).
in(A,A,true).


tautology((false:-A)) :-
   !,
   in(A,C,B),
   in(B,not D),
   C==D.
tautology((B:-A)) :-
   in(A,C),
   B==C,
   !.


aleph_mode_linked([],_) :-
   !.
aleph_mode_linked([A|C],B) :-
   '$aleph_link_vars'(A,B),
   aleph_append([A],B,D),
   aleph_mode_linked(C,D).


aleph_get_lit(B,[A|E]) :-
   functor(A,C,D),
   aleph_get_lit(B,C/D),
   '$aleph_link_vars'(B,[A|E]),
   \+aleph_member2(B,[A|E]).
aleph_get_lit(B,A) :-
   '$aleph_determination'(A,B).


aleph_get_hlit(B/C,A) :-
   functor(A,B,C),
   find_mode(modeh,B/C,D),
   once(split_args(D,D,_,_,E)),
   copy_modeterms(D,A,C),
   get_c_links(E,A,true,F),
   call(user:F).


aleph_member2(A,[B|_]) :-
   A==B,
   !.
aleph_member2(A,[_|B]) :-
   aleph_member2(A,B).


inconsistent_vartypes([B/D|_],A) :-
   aleph_member(C/E,A),
   B==C,
   D\==E,
   !.
inconsistent_vartypes([_|A],B) :-
   inconsistent_vartypes(A,B).


consistent_vartypes([],_).
consistent_vartypes([A/B|D],C) :-
   aleph_member2(A/B,C),
   consistent_vartypes(D,C).


bvar_types([],A,A).
bvar_types([A|E],C,G) :-
   '$aleph_has_vars'(A,B,D),
   consistent_vartypes(B,C),
   \+inconsistent_vartypes(D,C),
   aleph_append(D,C,F),
   bvar_types(E,F,G).


hvar_types(A,D) :-
   '$aleph_has_vars'(A,B,C),
   aleph_append(B,C,D).


var_types([A|B],F) :-
   hvar_types(A,C),
   bvar_types(B,C,D),
   aleph_append(D,C,E),
   sort(E,F).


aleph_output_var(B,C,A,E) :-
   '$aleph_has_ovar'(A,B,C,D),
   D@<E.


aleph_output_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.
aleph_output_var(_,_,_).


aleph_input_var(A,D,B) :-
   aleph_member(A/C,B),
   nonvar(C),
   D=C.


prefix_lits(A,true,A) :-
   !.
prefix_lits(A,B,(A,B)).


get_var_types([],_,[]).
get_var_types([B/A|E],C,[D/A|F]) :-
   tparg(B,C,D),
   get_var_types(E,C,F).


get_c_links([],_,A,A).
get_c_links([A/C|I],B,H,K) :-
   tparg(A,B,E),
   D=..[C,F],
   G= (D,E=F),
   prefix_lits(G,H,J),
   get_c_links(I,B,J,K).


get_i_links([],_,_,A,A).
get_i_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F=aleph_input_var(C,D,E),
   prefix_lits(F,G,I),
   get_i_links(H,B,E,I,J).


get_o_links([],_,_,A,A).
get_o_links([A/D|H],B,E,G,J) :-
   tparg(A,B,C),
   F= (aleph_output_var(C,D,E);aleph_output_var(C,D,B,A)),
   prefix_lits(F,G,I),
   get_o_links(H,B,E,I,J).


add_ioc_links(A,E,C,G) :-
   J= ('$aleph_link_vars'(A,B):-var_types(B,D),I),
   get_o_links(C,A,D,true,F),
   get_i_links(E,A,D,F,H),
   get_c_links(G,A,H,I),
   assert(user:J).


add_vars(B,A,C) :-
   get_var_types(A,B,D),
   get_var_types(C,B,E),
   ( '$aleph_has_vars'(B,D,E)
   ->
     true
   ;
     assert(user:'$aleph_has_vars'(B,D,E))
   ).


add_ovars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ovar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ovar'(C,D,E,B))
   ),
   fail.
add_ovars(_,_).


add_ivars(C,A) :-
   aleph_member(B/E,A),
   tparg(B,C,D),
   ( '$aleph_has_ivar'(C,D,E,B)
   ->
     true
   ;
     assert(user:'$aleph_has_ivar'(C,D,E,B))
   ),
   fail.
add_ivars(_,_).


process_mode(A) :-
   functor(A,B,C),
   split_args(A,A,E,F,G),
   functor(D,B,C),
   copy_modeterms(A,D,C),
   add_ioc_links(D,E,F,G),
   add_ovars(D,F),
   add_vars(D,E,F).


process_determs :-
   once(aleph_abolish('$aleph_determination'/2)),
   '$aleph_global'(determination,determination(E/F,A/B)),
   functor(D,A,B),
   find_mode(modeb,A/B,C),
   copy_modeterms(C,D,B),
   G='$aleph_determination'(E/F,D),
   ( call(user:G)
   ->
     true
   ;
     assert(user:G)
   ),
   fail.
process_determs.


process_modes :-
   once(aleph_abolish('$aleph_link_vars'/2)),
   once(aleph_abolish('$aleph_has_vars'/3)),
   once(aleph_abolish('$aleph_has_ovar'/4)),
   once(aleph_abolish('$aleph_has_ivar'/4)),
   '$aleph_global'(modeb,modeb(_,A)),
   process_mode(A),
   fail.
process_modes :-
   '$aleph_global'(determination,determination(A/B,_)),
   find_mode(modeh,A/B,C),
   split_args(C,C,E,F,_),
   functor(D,A,B),
   copy_modeterms(C,D,B),
   add_ivars(D,E),
   add_ovars(D,F),
   add_vars(D,E,F),
   fail.
process_modes.


gen_auto_refine :-
   ( setting(autorefine,true)
   ->
     true
   ;
     set(autorefine,true),
     process_modes,
     process_determs
   ),
   !.
gen_auto_refine.


has_good_clause_hook(B,C,D) :-
   setting(good_clause_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.
has_good_clause_hook(_,_,_).


execute(A) :-
   system(A),
   !.
execute(_).


find_count(A,C) :-
   copy_term(A,B),
   '$aleph_global'(slp_count,B,C),
   !.
find_count(_,1).


renormalise([],_,[]).
renormalise([C/A|E],D,[B/A|F]) :-
   B is C/D,
   renormalise(E,D,F).


sum_counts([],0).
sum_counts([C/_|A],B) :-
   sum_counts(A,D),
   B is C+D.


inc_count(A) :-
   retract(user:'$aleph_global'(slp_count,A,B)),
   !,
   C is B+1,
   asserta(user:'$aleph_global'(slp_count,A,C)).
inc_count(A) :-
   asserta(user:'$aleph_global'(slp_count,A,2)).


rselect_clause(B,[C/A|_],A) :-
   B=<C,
   !.
rselect_clause(A,[B/_|D],E) :-
   C is A-B,
   rselect_clause(C,D,E).


renormalise(A,C) :-
   sum_counts(A,B),
   B>0,
   renormalise(A,B,C).


update_gsample(A/B,_) :-
   functor(E,A,B),
   make_sname(A,C),
   functor(D,C,B),
   retractall(user:'$aleph_global'(gsample,gsample(_))),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   D=..[_|F],
   E=..[_|F],
   prolog:clause(user:D,G),
   ground((D:-G)),
   record_example(check,rand,(E:-G),H),
   retract(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   fail.
update_gsample(_,A) :-
   '$aleph_local'(slp_samplenum,A),
   A>0,
   !,
   retract(user:'$aleph_local'(slp_samplenum,A)),
   set(gsamplesize,A),
   retract(user:'$aleph_global'(atoms,atoms(rand,_))),
   retract(user:'$aleph_global'(atoms_left,atoms_left(rand,_))),
   retract(user:'$aleph_global'(last_example,last_example(rand,_))),
   assert(user:'$aleph_global'(atoms,atoms(rand,[1-A]))),
   assert(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-A]))),
   assert(user:'$aleph_global'(last_example,last_example(rand,A))).
update_gsample(_,_).


gsample(A/C,_) :-
   make_sname(A,B),
   functor(D,B,C),
   prolog:clause(user:D,E),
   ground((D:-E)),
   !,
   update_gsample(A/C,_).
gsample(_,0) :-
   !.
gsample(A/B,I) :-
   functor(D,A,B),
   make_sname(A,C),
   functor(E,C,B),
   D=..[_|F],
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   asserta(user:'$aleph_local'(slp_samplenum,0)),
   repeat,
   slprove(stochastic,E),
   E=..[_|F],
   retract(user:'$aleph_local'(slp_samplenum,G)),
   H is G+1,
   asserta(user:'$aleph_local'(slp_samplenum,H)),
   assertz(user:example(H,rand,D)),
   H>=I,
   !,
   retract(user:'$aleph_local'(slp_samplenum,H)),
   asserta(user:'$aleph_global'(size,size(rand,I))),
   asserta(user:'$aleph_global'(last_example,last_example(rand,I))),
   asserta(user:'$aleph_global'(atoms,atoms(rand,[1-I]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(rand,[1-I]))).


sample(_,0,[]) :-
   !.
sample(A/B,F,H) :-
   functor(C,A,B),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   asserta(user:'$aleph_local'(slp_samplenum,1)),
   repeat,
   slprove(stochastic,C),
   asserta(user:'$aleph_local'(slp_sample,C)),
   retract(user:'$aleph_local'(slp_samplenum,D)),
   E is D+1,
   asserta(user:'$aleph_local'(slp_samplenum,E)),
   E>F,
   !,
   retract(user:'$aleph_local'(slp_samplenum,E)),
   functor(G,A,B),
   prolog:findall(G,retract(user:'$aleph_local'(slp_sample,G)),H).


slprove(_,true) :-
   !.
slprove(A,not B) :-
   slprove(A,B),
   !,
   fail.
slprove(A,(B,C)) :-
   !,
   slprove(A,B),
   slprove(A,C).
slprove(A,(B;C)) :-
   (
     !,
     slprove(A,B)
   ;
     slprove(A,C)
   ).
slprove(_,A) :-
   prolog:predicate_property(user:A,built_in),
   !,
   call(user:A).
slprove(stochastic,A) :-
   prolog:findall(D/B,(prolog:clause(user:A,C),B= (A:-C),find_count(B,D)),E),
   renormalise(E,G),
   aleph_random(F),
   rselect_clause(F,G,(A:-C)),
   slprove(stochastic,C).
slprove(condition,A) :-
   functor(A,B,C),
   functor(D,B,C),
   prolog:clause(user:D,E),
   \+ \+ (D=A,slprove(condition,E)),
   inc_count((D:-E)).


range_restrict([],_,A,A).
range_restrict([B/A|F],C,G,H) :-
   functor(D,A,1),
   tparg(B,C,E),
   arg(1,D,E),
   range_restrict(F,C,[D|G],H).


add_generator(A/C) :-
   make_sname(A,B),
   functor(E,B,C),
   find_mode(modeh,A/C,D),
   once(copy_modeterms(D,E,C)),
   split_args(D,D,F,G,I),
   range_restrict(F,E,[],H),
   range_restrict(G,E,H,J),
   range_restrict(I,E,J,K),
   list_to_goals(K,L),
   \+prolog:clause(user:E,L),
   asserta(user: (E:-L)),
   fail.
add_generator(_).


condition(A) :-
   slprove(condition,A),
   !.
condition(_).


make_sname(A,B) :-
   concat([*,A],B).


add_generator :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   make_sname(B,C),
   functor(E,C,D),
   ( prolog:clause(user:E,_)
   ->
     true
   ;
     add_generator(B/D),
     p1_message('included generator'),
     p_message(C/D)
   ),
   fail.
add_generator.


condition_target :-
   '$aleph_global'(condition,set(condition,true)),
   add_generator,
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,D),
   p_message(conditioning),
   make_sname(B,C),
   functor(E,C,D),
   E=..[_|G],
   functor(F,B,D),
   example(_,_,F),
   F=..[_|G],
   condition(E),
   fail.
condition_target :-
   \+'$aleph_global'(condition,set(condition,true)),
   add_generator,
   !.
condition_target.


lazy_index_prove1(B,E,C,D,A) :-
   depth_bound_call((example(A,B,C),D)),
   \+'$aleph_local'(lazy_evaluate,eval(B,E)),
   asserta(user:'$aleph_local'(lazy_evaluate,eval(B,E))),
   fail.
lazy_index_prove1(_,_,_,_,_).


lazy_index_prove(A-B,_,_,_,_) :-
   A>B,
   !.
lazy_index_prove(E-G,A,B,C,D) :-
   lazy_index_prove1(A,B,C,D,E),
   F is E+1,
   lazy_index_prove(F-G,A,B,C,D).


lazy_prove([],_,_,_,_).
lazy_prove([A|F],B,C,D,E) :-
   lazy_index_prove(A,B,C,D,E),
   lazy_prove(F,B,C,D,E).


copy_modeterm(A,D) :-
   functor(A,B,C),
   find_mode(mode,B/C,E),
   functor(D,B,C),
   copy_modeterms(E,D,C),
   \+ \+A=D.


copy_consts(_,_,0) :-
   !.
copy_consts(B,C,A) :-
   arg(A,B,E),
   arg(A,C,D),
   var(D),
   !,
   D=aleph_const(E),
   F is A-1,
   copy_consts(B,C,F).
copy_consts(B,C,A) :-
   D is A-1,
   copy_consts(B,C,D).


evaluate(A,_,D,F,G,H) :-
   functor(A,B,C),
   functor(E,B,C),
   call(user:D),
   copy_args(A,E,F),
   copy_args(A,E,G),
   copy_consts(D,E,C),
   update_lit(I,false,E,F,G,H),
   \+'$aleph_local'(lazy_evaluated,I),
   asserta(user:'$aleph_local'(lazy_evaluated,I)),
   !.
evaluate(_,_,_,_,_,_).


call_library_pred(A,D,E,F,G,H) :-
   functor(A,B,C),
   '$aleph_global'(lazy_recall,lazy_recall(B/C,K)),
   asserta(user:'$aleph_local'(callno,1)),
   p1_message('lazy evaluation'),
   p_message(B),
   repeat,
   evaluate(A,D,E,F,G,H),
   retract(user:'$aleph_local'(callno,I)),
   J is I+1,
   asserta(user:'$aleph_local'(callno,J)),
   J>K,
   !,
   p_message(completed),
   retract(user:'$aleph_local'(callno,J)).


copy_io_args([],_,_,_).
copy_io_args([B|E],A,C,D) :-
   copy_args(A,B,C),
   copy_args(A,B,D),
   copy_io_args(E,A,C,D).


lazy_evaluate1(false,A,_,H,I,F,_,E,G) :-
   functor(A,B,C),
   p1_message('lazy evaluation'),
   p_message(B),
   functor(D,B,C),
   prolog:findall(D,(call(user:E),copy_args(E,D,F)),G),
   copy_io_args(G,A,H,I).
lazy_evaluate1(true,A,B,D,E,_,F,C,H) :-
   call_library_pred(A,B,C,D,E,F),
   prolog:findall(G,retract(user:'$aleph_local'(lazy_evaluated,G)),H).


collect_args([],_).
collect_args([A/_|G],D) :-
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(pos,B)),tparg(A,B,C)),E),
   prolog:findall(C,('$aleph_local'(lazy_evaluate,eval(neg,B)),tparg(A,B,C)),F),
   tparg(A,D,[E,F]),
   collect_args(G,D).


lazy_prove_negs(A,B,_) :-
   '$aleph_global'(lazy_negs,set(lazy_negs,true)),
   !,
   '$aleph_global'(atoms,atoms(neg,C)),
   lazy_prove(neg,A,B,C).
lazy_prove_negs(A,B,C) :-
   lazy_prove(neg,A,B,C).


lazy_prove(C,D,A,B) :-
   ( A= (E:-F)
   ->
     lazy_prove(B,C,D,E,F)
   ;
     lazy_prove(B,C,D,A,true)
   ).


goals_to_clause((A,B),(A:-B)) :-
   !.
goals_to_clause(A,A).


lazy_evaluate_refinement([],_,A,_,_,A) :-
   !.
lazy_evaluate_refinement([A|G],B,C,D,E,I) :-
   lazy_evaluate([A],B,C,D,E,[F]),
   aleph_append([F],C,H),
   !,
   lazy_evaluate_refinement(G,B,H,D,E,I).


clause_to_list((A:-true),[A]) :-
   !.
clause_to_list((A:-B),[A|C]) :-
   !,
   goals_to_list(B,C).
clause_to_list(A,[A]).


skippable(A) :-
   functor(A,B,C),
   '$aleph_global'(abducible,abducible(B/C)).


soldnf_clause(A,_) :-
   soldnf_builtin(A),
   !,
   fail.
soldnf_clause(A,B) :-
   prolog:clause(user:A,B).


soldnfcall(A,true) :-
   call(user:A),
   !.
soldnfcall(_,false).


soldnf_builtin(not  _) :-
   !,
   fail.
soldnf_builtin(A) :-
   prolog:predicate_property(user:A,built_in).


conj_status(true,true,true) :-
   !.
conj_status(_,_,false).


soldnf_solve((A,C),H,B,E) :-
   !,
   soldnf_solve(A,F,B,D),
   soldnf_solve(C,G,D,E),
   conj_status(F,G,H).
soldnf_solve(not A,true,B,C) :-
   soldnf_solve(A,false,B,C).
soldnf_solve(not A,false,B,C) :-
   !,
   soldnf_solve(A,true,B,C).
soldnf_solve(B,C,A,A) :-
   soldnf_builtin(B),
   !,
   soldnfcall(B,C).
soldnf_solve(A,C,D,E) :-
   soldnf_clause(A,B),
   soldnf_solve(B,C,D,E).
soldnf_solve(A,true,B,[A|B]) :-
   skippable(A).


soldnf_solve(A,B) :-
   soldnf_solve(A,true,[],B).


remove_explained([],_,[]).
remove_explained([A|D],(B:-C),E) :-
   \+ \+ (A=B,call(user:C)),
   !,
   remove_explained(D,(B:-C),E).
remove_explained([A|B],(C:-D),[A|E]) :-
   remove_explained(B,(C:-D),E).


remove_abduced_atoms([]).
remove_abduced_atoms([A|B]) :-
   retract(user:'$aleph_search'(abduced,pclause(A,true))),
   remove_abduced_atoms(B).


erase_refs([]).
erase_refs([A|B]) :-
   erase(A),
   erase_refs(B).


gen_abduced_atoms([],[]).
gen_abduced_atoms([A|E],[D|G]) :-
   functor(A,B,C),
   add_determinations(B/C,true),
   sat(A),
   reduce,
   '$aleph_global'(hypothesis,hypothesis(_,D,_,_)),
   remove_explained(E,D,F),
   gen_abduced_atoms(F,G).


store_abduced_atoms([]).
store_abduced_atoms([A|B]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true))),
   store_abduced_atoms(B).


store_abduced_atoms([],[]).
store_abduced_atoms([A|C],[B|D]) :-
   assertz(user:'$aleph_search'(abduced,pclause(A,true)),B),
   store_abduced_atoms(C,D).


sold_prove(A,C) :-
   soldnf_solve(A,B),
   sort(B,C).


abgen(A,D,F) :-
   sold_prove(A,B),
   ground(B),
   length(B,C),
   C=<D,
   prolog_type(E),
   ( E=yap
   ->
     store_abduced_atoms(B,G)
   ;
     store_abduced_atoms(B)
   ),
   store(proof_strategy),
   set(proof_strategy,sld),
   gen_abduced_atoms(B,F),
   reinstate(proof_strategy),
   ( E=yap
   ->
     erase_refs(G)
   ;
     remove_abduced_atoms(B)
   ).


abgen(A) :-
   abgen(A,_).


write_entry(C,A) :-
   name(A,B),
   length(B,D),
   E is integer((C-D)/2),
   tab(E),
   write(A),
   tab(E).


find_max_width([],A,A).
find_max_width([A|E],D,F) :-
   name(A,B),
   length(B,C),
   ( C>D
   ->
     find_max_width(E,C,F)
   ;
     find_max_width(E,D,F)
   ).


write_cmatrix([A,C,B,D]) :-
   I is A+B,
   J is C+D,
   E is A+C,
   F is B+D,
   G is E+F,
   ( G=0
   ->
     H is  0.5
   ;
     H is (A+D)/G
   ),
   find_max_width([A,C,B,D,I,J,E,F,G],0,K),
   L is K+2,
   tab(5),
   write(' '),
   tab(L),
   write('Actual'),
   nl,
   tab(5),
   write(' '),
   write_entry(L,+),
   tab(6),
   write_entry(L,-),
   nl,
   tab(5),
   write(+),
   write_entry(L,A),
   tab(6),
   write_entry(L,C),
   tab(6),
   write_entry(L,E),
   nl,
   write('Pred '),
   nl,
   tab(5),
   write(-),
   write_entry(L,B),
   tab(6),
   write_entry(L,D),
   tab(6),
   write_entry(L,F),
   nl,
   nl,
   tab(5),
   write(' '),
   write_entry(L,I),
   tab(6),
   write_entry(L,J),
   tab(6),
   write_entry(L,G),
   nl,
   nl,
   write('Accuracy = '),
   write(H),
   nl.


test(A,B,C,D) :-
   retractall(user:'$aleph_local'(covered,_)),
   retractall(user:'$aleph_local'(total,_)),
   asserta(user:'$aleph_local'(covered,0)),
   asserta(user:'$aleph_local'(total,0)),
   ( A=[_|_]
   ->
     test_files(A,B)
   ;
     test_file(A,B)
   ),
   retract(user:'$aleph_local'(covered,C)),
   retract(user:'$aleph_local'(total,D)).


update_theory(B) :-
   retract(user:'$aleph_global'(hypothesis,hypothesis(M,A,N,O))),
   index_clause(A,B,D),
   ( '$aleph_global'(example_selected,example_selected(_,C))
   ->
     true
   ;
     F=[C-_|_]
   ),
   ( setting(lazy_on_cost,true)
   ->
     nlits(D,K),
     label_create(D,E),
     extract_pos(E,F),
     extract_neg(E,G),
     interval_count(F,I),
     interval_count(G,J),
     setting(evalfn,H),
     complete_label(H,D,[I,J,K],L),
     assertz(user:'$aleph_global'(theory,theory(B,L/C,D,F,G)))
   ;
     assertz(user:'$aleph_global'(theory,theory(B,M/C,D,N,O)))
   ),
   add_clause_to_background(B).


process_hypothesis(end_of_file) :-
   nl,
   nl,
   !.
process_hypothesis(none) :-
   nl,
   nl,
   !.
process_hypothesis(ok) :-
   !,
   update_theory(_),
   nl,
   p_message('added new clause').
process_hypothesis(prune) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(D,A,_),goals_to_list(A,E),clause_to_list(B,C),aleph_subsumes(C,[D|E])),
   assertz(user: (prune(B):-F)),
   nl,
   p_message('added new prune statement').
process_hypothesis(overgeneral) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,B,_,_))),
   F= (hypothesis(C,A,_),goals_to_list(A,D),clause_to_list(B,E),aleph_subsumes([C|D],E)),
   assertz(user: (false:-F)),
   nl,
   p_message('added new constraint').
process_hypothesis(overgeneral because not A) :-
   !,
   record_example(check,neg,A,_),
   nl,
   p_message('added new negative example').
process_hypothesis(overspecific) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,A,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(overspecific because A) :-
   !,
   retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   ( retract(user:'$aleph_global'(example_selected,example_selected(_,_)))
   ->
     true
   ;
     true
   ),
   record_example(check,pos,A,B),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
   nl,
   p_message('added new positive example').
process_hypothesis(A) :-
   call(user:A).


show_options(example_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept default example'),
   nl,
   tab(8),
   write('-> Enter an example'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.
show_options(hypothesis_selection) :-
   nl,
   tab(4),
   write('Options:'),
   nl,
   tab(8),
   write('-> "ok." to accept clause'),
   nl,
   tab(8),
   write('-> "prune." to prune clause and its refinements from the search'),
   nl,
   tab(8),
   write('-> "overgeneral." to add clause as a constraint'),
   nl,
   tab(8),
   write('-> "overgeneral because not(E)." to add E as a negative example'),
   nl,
   tab(8),
   write('-> "overspecific." to add clause as a positive example'),
   nl,
   tab(8),
   write('-> "overspecific because E." to add E as a positive example'),
   nl,
   tab(8),
   write('-> any Aleph command'),
   nl,
   tab(8),
   write('-> ctrl-D or "none." to end'),
   nl,
   nl.


has_class(A,B,_,C) :-
   arg(A,B,C),
   ground(C),
   !.
has_class(A,B,E,D) :-
   arg(A,B,C),
   in(C=D,E),
   ground(D),
   !.


gen_feature(A,C,D) :-
   nonvar(A),
   !,
   ( var(B)
   ->
     gen_featurenum(B)
   ;
     true
   ),
   split_clause(A,E,F),
   assertz(user:'$aleph_feature'(feature,feature(B,C,D,E,F))).


get_feature_class(A,B,C,D) :-
   has_class(A,B,C,D),
   !.
get_feature_class(_,_,_,_).


copy_iargs(0,_,_,_) :-
   !.
copy_iargs(A,C,D,A) :-
   !,
   B is A-1,
   copy_iargs(B,C,D,A).
copy_iargs(A,B,C,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A-1,
   copy_iargs(E,B,C,F).


aleph_abolish(A/B) :-
   functor(C,A,B),
   ( prolog:predicate_property(user:C,dynamic)
   ->
     retractall(user:C)
   ;
     prolog:abolish(user:A/B)
   ).


abgen(B,D) :-
   retractall(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_))),
   A is(-inf),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis([A,0,1,A],[false],[],[]))),
   setting(max_abducibles,C),
   abgen(B,C,D),
   '$aleph_global'(hypothesis,hypothesis(E,_,K,L)),
   E=[_,_,I,G|_],
   '$aleph_search'(abgenhyp,hypothesis(F,_,_,_)),
   F=[_,_,J,H|_],
   once((G>H;G=:=H,I<J)),
   once(retract(user:'$aleph_search'(abgenhyp,hypothesis(_,_,_,_)))),
   asserta(user:'$aleph_search'(abgenhyp,hypothesis(E,D,K,L))),
   fail.
abgen(_,A) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   '$aleph_search'(abgenhyp,hypothesis(B,A,C,D)),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(B,A,C,D))).


update_besthyp(G) :-
   '$aleph_global'(hypothesis,hypothesis(A,H,I,J)),
   '$aleph_global'(besthyp,besthyp(B,_,_,_,_)),
   A=[_,_,E,C|_],
   B=[_,_,F,D|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_global'(besthyp,besthyp(B,_,_,_,_))),
   assertz(user:'$aleph_global'(besthyp,besthyp(A,G,H,I,J))).
update_besthyp(_).


reset_best_label :-
   '$aleph_global'(besthyp,besthyp(B,_,G,H,I)),
   '$aleph_search'(best_label,A/_),
   A=[_,_,F,D|_],
   B=[_,_,E,C|_],
   (
     C>D
   ;
     C=:=D,
     E<F
   ),
   !,
   retract(user:'$aleph_search'(best_label,A/_)),
   asserta(user:'$aleph_search'(best_label,B/0)),
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(B,G,H,I))).
reset_best_label.


rsat(0) :-
   !.
rsat(B) :-
   gen_sample(pos,1),
   '$aleph_global'(example_selected,example_selected(pos,A)),
   ( \+'$aleph_sat'(stored,stored(A,pos,_))
   ->
     !,
     retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
     sat(pos,A)
   ;
     C is B-1,
     rsat(C)
   ).


rsat :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(resample),
   set(resample,1),
   rsat(100),
   reinstate(resample).


induce_tree :-
   clean_up,
   setting(tree_type,B),
   store_values([refine]),
   set(refine,auto),
   setting(mingain,A),
   ( A=< 0
   ->
     err_message('inappropriate setting for mingain'),
     fail
   ;
     true
   ),
   record_settings,
   stopwatch(D),
   construct_tree(B),
   stopwatch(C),
   E is C-D,
   show(theory),
   record_theory(E),
   reinstate_values([refine]),
   !.
induce_tree.


record_features(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(features),
   p1_message('time taken'),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_features(_).


gen_features :-
   aleph_abolish('$aleph_feature'/2),
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   ( setting(minscore,B)
   ->
     true
   ;
     B=(-inf)
   ),
   '$aleph_good'(_,C,E),
   C=[_,_,_,D|_],
   D>=B,
   split_clause(E,G,F),
   F\=true,
   functor(G,H,I),
   functor(J,H,I),
   copy_iargs(I,G,J,A),
   get_feature_class(A,G,F,K),
   gen_feature((J:-F),C,K),
   fail.
gen_features :-
   ( setting(dependent,A)
   ->
     true
   ;
     A is 0
   ),
   setting(good,true),
   setting(goodfile,B),
   aleph_open(B,read,D),
   ( setting(minscore,C)
   ->
     true
   ;
     C=(-inf)
   ),
   repeat,
   read(D,E),
   ( E='$aleph_good'(_,F,H)
   ->
     F=[_,_,_,G|_],
     G>=C,
     split_clause(H,J,I),
     I\=true,
     functor(J,K,L),
     functor(M,K,L),
     copy_iargs(L,J,M,A),
     get_feature_class(A,J,I,N),
     gen_feature((M:-I),F,N),
     fail
   ;
     close(D),
     !
   ).
gen_features.


induce_features :-
   clean_up,
   store_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   set(good,true),
   set(check_good,true),
   set(updateback,false),
   set(construct_features,true),
   set(lazy_on_contradiction,true),
   ( setting(feature_construction,exhaustive)
   ->
     set(explore,true)
   ;
     true
   ),
   setting(max_features,B),
   record_settings,
   stopwatch(D),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   repeat,
   gen_sample(pos,0),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(false),
   addhyp,
   show_atoms_left,
   record_atoms_left,
   (
     '$aleph_search'(last_good,A),
     A>=B
   ;
     '$aleph_global'(atoms_left,atoms_left(pos,[]))
   ),
   !,
   gen_features,
   stopwatch(C),
   E is C-D,
   show(features),
   record_features(E),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,_))),
   assertz(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   reinstate_values([good,check_good,updateback,construct_features,samplesize,greedy,explore,lazy_on_contradiction]),
   !.
induce_features.


search_modes :-
   '$aleph_global'(targetpred,targetpred(A/B)),
   prolog:findall(C/D,determinations(A/B,C/D),E),
   number_types([A/B|E],0,F,G),
   get_type_elements(F),
   interval_to_list(1-G,H),
   get_type_equivalences(H,I),
   merge_equivalence_classes(I,J),
   store_type_equivalences(J),
   setting(typeoverlap,K),
   infer_modes(F,K,H,L),
   infer_equalities(O),
   L=[_|M],
   infer_negations(M,P),
   ( setting(updateback,N)
   ->
     true
   ;
     N=true
   ),
   p_message('found modes'),
   add_inferred_modes(L,N),
   add_inferred_modes(O,N),
   add_inferred_modes(P,N),
   fail.
search_modes.


induce_modes :-
   clean_up,
   store_values([typeoverlap]),
   search_modes,
   reinstate_values([typeoverlap]),
   show(modes).


induce_constraints :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([portray_search,search,construct_bottom,good,goodfile]),
   noset(goodfile),
   set(portray_search,false),
   set(construct_bottom,false),
   set(search,ic),
   set(good,true),
   sat(uspec,0),
   reduce,
   show(constraints),
   reinstate_values([portray_search,search,construct_bottom,good,goodfile]),
   show_total_stats,
   record_total_stats,
   !.
induce_constraints.


induce_theory(rls) :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store(evalfn),
   set(evalfn,accuracy),
   record_settings,
   find_theory(rls),
   reinstate(evalfn),
   show_total_stats,
   record_total_stats,
   !.
induce_theory(_).


induce_theory :-
   setting(search,A),
   induce_theory(A).


process_hypothesis :-
   show(hypothesis),
   repeat,
   show_options(hypothesis_selection),
   tab(4),
   write('Response?'),
   nl,
   read(A),
   process_hypothesis(A),
   (
     A=end_of_file
   ;
     A=none
   ),
   !.


ask_example(D) :-
   ( '$aleph_global'(example_selected,example_selected(pos,A))
   ->
     example(A,pos,B)
   ;
     B=none
   ),
   !,
   show_options(example_selection),
   tab(4),
   write('Response '),
   p1_message(default:B),
   write(?),
   nl,
   read(C),
   ( C=ok
   ->
     D=B
   ;
     D=C
   ).


induce_cover :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   addhyp,
   trace_memory_usage,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce_cover.


update_coverset(C,_) :-
   '$aleph_global'(hypothesis,hypothesis(A,_,B,_)),
   A=[_,_,_,D|_],
   worse_coversets(B,C,D,E),
   ( E= ([])
   ->
     true
   ;
     update_theory(F),
     update_coversets(E,F,C,A)
   ).


gen_sample(0,_,_) :-
   !.
gen_sample(C,A,B) :-
   assertz(user:'$aleph_global'(example_selected,example_selected(A,B))),
   D is C-1,
   gen_sample(D,A,B).


induce_max1(B) :-
   '$aleph_local'(counter,A),
   A=<B,
   !,
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   repeat,
   retract(user:'$aleph_local'(counter,D)),
   gen_sample(C,pos,D),
   get_besthyp(false),
   update_coverset(pos,D),
   E is D+1,
   assertz(user:'$aleph_local'(counter,E)),
   E>B,
   !,
   retract(user:'$aleph_local'(counter,E)).
induce_max1(_).


induce_max([]).
induce_max([A-B|C]) :-
   asserta(user:'$aleph_local'(counter,A)),
   induce_max1(B),
   induce_max(C).


induce_max :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms,atoms(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   record_settings,
   stopwatch(C),
   set(maxcover,true),
   induce_max(A),
   trace_memory_usage,
   stopwatch(B),
   D is B-C,
   show(theory),
   record_theory(D),
   noset(maxcover),
   reinstate(portray_search),
   reinstate(greedy),
   p1_message('time taken'),
   p_message(D),
   show_total_stats,
   record_total_stats,
   !.
induce_max.


record_total_stats :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_total_stats,
   flush_output(A),
   set_output(user_output).
record_total_stats.


show_total_stats :-
   '$aleph_global'(search_stats,search_stats(A,_)),
   !,
   p1_message('total clauses constructed'),
   p_message(A).
show_total_stats.


record_theory(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show(theory),
   p1_message('time taken'),
   p_message(B),
   nl,
   ( '$aleph_global'(maxcover,set(maxcover,true))
   ->
     show(aleph,theory/5),
     nl,
     show(aleph,max_set/4),
     nl,
     show(aleph,rules/1)
   ;
     true
   ),
   flush_output(A),
   set_output(user_output).
record_theory(_).


record_atoms_left :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_atoms_left,
   flush_output(A),
   set_output(user_output).
record_atoms_left.


show_atoms_left :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   interval_count(A,C),
   '$aleph_global'(size,size(pos,D)),
   '$aleph_global'(search_stats,search_stats(_,B)),
   E is B*C/ (D-C),
   p1_message('positive examples left'),
   p_message(C),
   p1_message('estimated time to finish (secs)'),
   p_message(E),
   !.
show_atoms_left.


addgcws :-
   retract(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   !,
   asserta(user:'$aleph_search'(gcwshyp,hypothesis(A,B,C,D))),
   addhyp,
   add_gcws.


sphyp :-
   retractall(user:'$aleph_search'(sphyp,hypothesis(_,_,_,_))),
   retractall(user:'$aleph_search'(gcwshyp,hypothesis(_,_,_,_))),
   retract(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   asserta(user:'$aleph_search'(sphyp,hypothesis([A,B,C|D],E,F,G))),
   store(searchstate),
   gcws,
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis([A,B,C|D],E,F,G))),
   reinstate(searchstate).


trace_memory_usage :-
   setting(trace_memory_usage,false),
   !.
trace_memory_usage :-
   dbusage:db_usage,
   dbusage:db_static(128*1024),
   dbusage:db_dynamic(128*1024).


get_besthyp(B) :-
   retract(user:'$aleph_global'(example_selected,example_selected(pos,A))),
   reset_best_label,
   sat(A),
   reduce,
   update_besthyp(A),
   ( B=true
   ->
     example(A,pos,C),
     abgen(C,E),
     once(retract(user:'$aleph_global'(hypothesis,hypothesis(D,_,F,G)))),
     assert(user:'$aleph_global'(hypothesis,hypothesis(D,E,F,G))),
     update_besthyp(A)
   ;
     true
   ),
   fail.
get_besthyp(_) :-
   retract(user:'$aleph_global'(besthyp,besthyp(C,G,A,E,F))),
   A\=false,
   !,
   ( setting(samplesize,B),
     B>1
   ->
     setting(nodes,D),
     show_clause(sample,C,A,D),
     record_clause(sample,C,A,D)
   ;
     true
   ),
   add_hyp(C,A,E,F),
   asserta(user:'$aleph_global'(example_selected,example_selected(pos,G))),
   !.
get_besthyp(_).


gen_sample(A,0) :-
   !,
   '$aleph_global'(atoms_left,atoms_left(A,[B-_|_])),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   p1_message('select example'),
   p_message(B),
   ( setting(resample,C)
   ->
     true
   ;
     C=1
   ),
   gen_sample(C,A,B).
gen_sample(A,D) :-
   '$aleph_global'(atoms_left,atoms_left(A,B)),
   interval_count(B,C),
   H is min(C,D),
   assertz(user:'$aleph_local'(sample_num,0)),
   retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
   ( setting(resample,E)
   ->
     true
   ;
     E=1
   ),
   repeat,
   '$aleph_local'(sample_num,F),
   G is F+1,
   ( G=<H
   ->
     get_random(C,I),
     select_example(I,0,B,J),
     \+'$aleph_global'(example_selected,example_selected(A,J)),
     p1_message('select example'),
     p_message(J),
     retract(user:'$aleph_local'(sample_num,F)),
     assertz(user:'$aleph_local'(sample_num,G)),
     gen_sample(E,A,J),
     fail
   ;
     retract(user:'$aleph_local'(sample_num,F))
   ),
   !.


record_settings :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   ( '$aleph_global'(os,set(os,unix))
   ->
     execute(date),
     execute(hostname)
   ;
     true
   ),
   show(settings),
   flush_output(A),
   set_output(user_output).
record_settings.


induce :-
   clean_up,
   set(greedy,true),
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   store(portray_search),
   set(portray_search,false),
   setting(samplesize,B),
   setting(abduce,C),
   record_settings,
   stopwatch(E),
   repeat,
   gen_sample(pos,B),
   retractall(user:'$aleph_global'(besthyp,besthyp(_,_,_,_,_))),
   asserta(user:'$aleph_global'(besthyp,besthyp([(-inf),0,1,(-inf)],0,false,[],[]))),
   get_besthyp(C),
   trace_memory_usage,
   ( setting(gcws,true)
   ->
     sphyp,
     addgcws
   ;
     addhyp
   ),
   show_atoms_left,
   record_atoms_left,
   '$aleph_global'(atoms_left,atoms_left(pos,[])),
   stopwatch(D),
   F is D-E,
   show(theory),
   record_theory(F),
   noset(greedy),
   reinstate(portray_search),
   p1_message('time taken'),
   p_message(F),
   show_total_stats,
   record_total_stats,
   !.
induce.


induce_incremental :-
   clean_up,
   retractall(user:'$aleph_global'(search_stats,search_stats(_,_))),
   store_values([interactive,portray_search,proof_strategy,mode]),
   set(portray_search,false),
   set(proof_strategy,sld),
   set(interactive,true),
   record_settings,
   stopwatch(D),
   repeat,
   ask_example(A),
   (
     (
       A=end_of_file
     ;
       A=none
     )
   ->
     true
   ;
     once(record_example(check,pos,A,B)),
     retractall(user:'$aleph_global'(example_selected,example_selected(_,_))),
     asserta(user:'$aleph_global'(example_selected,example_selected(pos,B))),
     once(sat(B)),
     once(reduce),
     once(process_hypothesis),
     fail
   ),
   !,
   stopwatch(C),
   E is C-D,
   show(theory),
   show(pos),
   show(neg),
   show(false/0),
   show(prune/1),
   record_theory(E),
   reinstate_values([interactive,portray_search,proof_strategy,mode]),
   p1_message('time taken'),
   p_message(E).


induce_clauses :-
   setting(interactive,true),
   !,
   induce_incremental.
induce_clauses :-
   induce.


collect(rls_restart,done(C,K,selected(E,H,I,J)),[D,A],[B,A],O) :-
   B is C+D,
   E=[_,_,_,G|_],
   '$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_)),
   ( F>=G
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,F|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(E,H,I,J))),
     set(best,E)
   ),
   setting(best,N),
   retract(user:'$aleph_search'(rls_nodes,L)),
   M is K+L,
   asserta(user:'$aleph_search'(rls_nodes,M)),
   ( discontinue_search(A,N/_,M)
   ->
     O=true
   ;
     O=false
   ).


collect_results(D,G,A,C,I) :-
   thread_get_message(B),
   collect(A,B,C,H,E),
   F is D+1,
   ( E==false,
     F<G
   ->
     collect_results(F,G,A,H,I)
   ;
     I=H
   ).


work(rls_restart(A,B,C),F) :-
   statistics(cputime,E),
   rls_thread(A,B,C,H,I),
   statistics(cputime,D),
   G is D-E,
   thread_send_message(F,done(G,H,I)).
work(all_done,_) :-
   thread_exit(done).


worker(A,C) :-
   thread_get_message(A,B),
   work(B,C),
   worker(A,C).


kill_worker(A,B) :-
   thread_send_message(A,all_done),
   prolog:thread_signal(B,throw(surplus_to_requirements)).


create_worker_pool(A,B,_,_,[]) :-
   A>B,
   !.
create_worker_pool(A,G,C,B,[D|H]) :-
   atom_concat(worker_,A,E),
   prolog:thread_create(worker(B,C),D,user:[alias(E)]),
   F is A+1,
   create_worker_pool(F,G,C,B,H).


kill_worker_pool(B,A) :-
   p_message('Killing workers'),
   forall(aleph_member(C,A),kill_worker(B,C)),
   p_message('Waiting for workers'),
   forall(aleph_member(C,A),thread_join(C,_)),
   message_queue_destroy(B),
   p_message('Ok, all done').


collect_results(rls_restart,A,B,C) :-
   collect_results(0,A,rls_restart,B,C).


create_worker_pool(A,B,C,D) :-
   create_worker_pool(1,A,B,C,D).


rls_thread(B,C,A,D,selected(E,F,G,H)) :-
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(A,[],[]))),
   p1_message(restart),
   p_message(B),
   find_clause(C),
   '$aleph_search'(current,current(_,D,_)),
   '$aleph_search'(selected,selected(E,F,G,H)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)).


estimate_numbers(B) :-
   ( '$aleph_sat'(example,example(_,_))
   ->
     true
   ;
     rsat
   ),
   setting(clauselength,A),
   estimate_numbers(A,1,400,B).


check_auto_refine :-
   (
     setting(construct_bottom,reduction)
   ;
     setting(construct_bottom,false)
   ),
   \+setting(autorefine,true),
   !,
   ( setting(refine,user)
   ->
     true
   ;
     set(refine,auto)
   ).
check_auto_refine.


check_posonly :-
   '$aleph_global'(size,size(rand,A)),
   A>0,
   !.
check_posonly :-
   setting(evalfn,posonly),
   \+'$aleph_global'(modeh,modeh(_,_)),
   p1_message(error),
   p_message('missing modeh declaration in posonly mode'),
   !,
   fail.
check_posonly :-
   retractall(user:'$aleph_global'(slp_count,_,_)),
   retractall(user:'$aleph_local'(slp_sample,_)),
   retractall(user:'$aleph_local'(slp_samplenum,_)),
   setting(evalfn,posonly),
   setting(gsamplesize,C),
   condition_target,
   '$aleph_global'(targetpred,targetpred(A/B)),
   gsample(A/B,C),
   !.
check_posonly.


set_up_builtins :-
   gen_nlitnum(A),
   asserta(user:'$aleph_sat_litinfo'(A,0,!,[],[],[])).


reset_counts :-
   retractall(user:'$aleph_sat'(lastterm,_)),
   retractall(user:'$aleph_sat'(lastvar,_)),
   asserta(user:'$aleph_sat'(lastterm,0)),
   asserta(user:'$aleph_sat'(lastvar,0)),
   !.


clean_up_hypothesis :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))).


clean_up_sat :-
   aleph_abolish('$aleph_sat'/2),
   aleph_abolish('$aleph_local'/2),
   aleph_abolish('$aleph_sat_atom'/2),
   aleph_abolish('$aleph_sat_ovars'/2),
   aleph_abolish('$aleph_sat_ivars'/2),
   aleph_abolish('$aleph_sat_varscopy'/3),
   aleph_abolish('$aleph_sat_varequiv'/3),
   aleph_abolish('$aleph_sat_terms'/4),
   aleph_abolish('$aleph_sat_vars'/4),
   aleph_abolish('$aleph_sat_litinfo'/6),
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


zap_rest(B) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,C)),
   ( aleph_member1(A,B)
   ->
     intersect1(B,C,H,_),
     asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H))
   ;
     true
   ),
   fail.
zap_rest(_).


binom_lte(_,_,A,0) :-
   A<0,
   !.
binom_lte(A,B,C,E) :-
   binom(A,B,C,F),
   D is C-1,
   binom_lte(A,B,D,G),
   E is F+G,
   !.


record_tsearch_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('theories constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best theory'),
   pp_dclauses(D),
   flush_output(A),
   set_output(user_output).
record_tsearch_stats(_,_,_).


clean_up_reduce :-
   aleph_abolish('$aleph_local'/2),
   clean_up_search,
   retractall(user:'$aleph_search'(pclause,_)),
   gc.


find_theory1(_) :-
   clean_up_reduce,
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   init_open_list,
   asserta(user:'$aleph_search'(nextnode,none)),
   stopwatch(K),
   get_search_settings(A),
   arg(4,A,_/D),
   interval_count(B,E),
   interval_count(C,F),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(selected,selected(G,[0-[0,0,[],false]],B,C))),
   get_theory_gain(A,0,G/0,[0-[0,0,[],false]],B,C,E,F,I,H),
   asserta(user:'$aleph_search'(current,current(0,H,I))),
   get_nextbest(A,_),
   tsearch(A,P),
   stopwatch(J),
   Q is J-K,
   '$aleph_search'(selected,selected(L,M,N,O)),
   destroy_open_list,
   add_hyp(L,M,N,O),
   p1_message('theories constructed'),
   p_message(P),
   p1_message('search time'),
   p_message(Q),
   p_message('best theory'),
   pp_dclauses(M),
   show_stats(D,L),
   update_search_stats(P,Q),
   record_tsearch_stats(M,P,Q).


find_theory(rls) :-
   !,
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(tries,A),
   A>=1,
   store_values([caching,store_bottom]),
   set(caching,false),
   set(store_bottom,true),
   '$aleph_global'(atoms,atoms(pos,B)),
   '$aleph_global'(atoms,atoms(neg,C)),
   interval_count(B,E),
   interval_count(C,F),
   setting(evalfn,D),
   complete_label(D,[0-[0,0,[],false]],[E,F,1],G),
   asserta(user:'$aleph_search'(rls_selected,selected(G,[0-[0,0,[],false]],B,C))),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   get_search_settings(V),
   set(best,G),
   stopwatch(Y),
   repeat,
   retractall(user:'$aleph_search'(rls_parentstats,_)),
   retractall(user:'$aleph_search'(rls_move,_)),
   retractall(user:'$aleph_search_seen'(_,_)),
   asserta(user:'$aleph_search'(rls_move,1)),
   asserta(user:'$aleph_search'(rls_parentstats,stats(G,B,C))),
   '$aleph_search'(rls_restart,H),
   p1_message(restart),
   p_message(H),
   find_theory1(rls),
   '$aleph_search'(current,current(_,J,_)),
   retract(user:'$aleph_search'(rls_nodes,K)),
   '$aleph_search'(selected,selected([O,P,Q,N|R],S,T,U)),
   '$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_)),
   retract(user:'$aleph_search'(rls_restart,H)),
   I is H+1,
   asserta(user:'$aleph_search'(rls_restart,I)),
   L is J+K,
   asserta(user:'$aleph_search'(rls_nodes,L)),
   ( M>=N
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,M|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected([O,P,Q,N|R],S,T,U))),
     set(best,[O,P,Q,N|R])
   ),
   setting(best,W),
   (
     I>A
   ;
     discontinue_search(V,W/_,L)
   ),
   !,
   stopwatch(X),
   E1 is X-Y,
   '$aleph_search'(rls_nodes,D1),
   '$aleph_search'(rls_selected,selected(Z,A1,B1,C1)),
   add_hyp(Z,A1,B1,C1),
   p1_message('nodes constructed'),
   p_message(D1),
   p1_message('search time'),
   p_message(E1),
   p_message('best theory'),
   pp_dclauses(A1),
   show_stats(D,Z),
   record_search_stats(A1,D1,E1),
   noset(best),
   reinstate_values([caching,refine,refineop,store_bottom]).


update_search_stats(B,D) :-
   ( retract(user:'$aleph_global'(search_stats,search_stats(A,C)))
   ->
     E is A+B,
     F is C+D
   ;
     E is B,
     F is D
   ),
   asserta(user:'$aleph_global'(search_stats,search_stats(E,F))).


reduce_prelims(B,C,D) :-
   clean_up_reduce,
   check_posonly,
   check_auto_refine,
   ( A=true
   ->
     true
   ;
     prolog:call(call(user:A),B,C,D)
   ),
   setting(reduce_prelims_hook,A),
   ( '$aleph_sat'(lastlit,B)
   ->
     true
   ;
     B=0,
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   ( '$aleph_sat'(botsize,E)
   ->
     true
   ;
     E=0,
     asserta(user:'$aleph_sat'(botsize,E))
   ),
   (
     (
       '$aleph_global'(lazy_evaluate,lazy_evaluate(_))
     ;
       setting(greedy,true)
     )
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   setting(evalfn,F),
   ( F=posonly
   ->
     G=rand
   ;
     G=neg
   ),
   '$aleph_global'(atoms_left,atoms_left(G,D)),
   asserta(user:'$aleph_search'(nextnode,none)).


estimate_clauselength_distribution(C,D,E,F) :-
   '$aleph_sat'(example,example(A,B)),
   '$aleph_sat'(random,clauselength_distribution(A,B,C,D,E,F)),
   !.
estimate_clauselength_distribution(A,B,E,H) :-
   setting(evalfn,C),
   estimate_clauselength_scores(A,B,C,[],D),
   select_good_clauses(D,E,F),
   estimate_frequency(A,F,G),
   normalise_distribution(G,H),
   ( '$aleph_sat'(example,example(I,J))
   ->
     asserta(user:'$aleph_sat'(random,clauselength_distribution(I,J,A,B,E,H)))
   ;
     true
   ).


rls_search(1,S,U,X,Y) :-
   !,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   asserta(user:'$aleph_search'(rls_restart,1)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,I/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   stopwatch(W),
   estimate_numbers(_),
   repeat,
   retract(user:'$aleph_search'(rls_restart,G)),
   H is G+1,
   asserta(user:'$aleph_search'(rls_restart,H)),
   rls_thread(G,I,B,P,selected(J,M,N,O)),
   J=[_,_,_,L|_],
   '$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(rls_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(rls_selected,selected(J,M,N,O))),
     set(best,J)
   ),
   setting(best,T),
   retract(user:'$aleph_search'(rls_nodes,Q)),
   R is P+Q,
   asserta(user:'$aleph_search'(rls_nodes,R)),
   (
     H>S
   ;
     discontinue_search(C,T/_,R)
   ),
   !,
   stopwatch(V),
   U is V-W,
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,X)),
   retract(user:'$aleph_search'(rls_selected,Y)).
rls_search(G,J,M,O,P) :-
   retractall(user:'$aleph_search'(rls_restart,_)),
   retractall(user:'$aleph_search'(rls_nodes,_)),
   retractall(user:'$aleph_search'(rls_selected,_)),
   setting(evalfn,A),
   get_start_label(A,B),
   set(best,B),
   get_search_settings(C),
   arg(4,C,L/_),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,F),
     asserta(user:'$aleph_search'(rls_selected,selected(B,(F:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(rls_selected,selected(B,(false:-true),[],[])))
   ),
   asserta(user:'$aleph_search'(rls_nodes,0)),
   estimate_numbers(_),
   thread_self(H),
   message_queue_create(I),
   create_worker_pool(G,H,I,N),
   forall(between(1,J,K),thread_send_message(I,rls_restart(K,L,B))),
   collect_results(rls_restart,J,[0,C],[M|_]),
   kill_worker_pool(I,N),
   retractall(user:'$aleph_search'(rls_restart,_)),
   retract(user:'$aleph_search'(rls_nodes,O)),
   retract(user:'$aleph_search'(rls_selected,P)).


reinstate_values([]).
reinstate_values([A|B]) :-
   reinstate(A),
   reinstate_values(B).


record_search_stats(D,B,C) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message('clauses constructed'),
   p_message(B),
   p1_message('search time'),
   p_message(C),
   p_message('best clause'),
   pp_dclause(D),
   flush_output(A),
   set_output(user_output).
record_search_stats(_,_,_).


show_stats(A,[D,E,_,B|_]) :-
   (
     (
       A=user
     ;
       A=entropy
     ;
       A=gini
     )
   ->
     C is-B
   ;
     C is B
   ),
   concat(['pos cover = ',D,' neg cover = ',E],F),
   p1_message(F),
   print_eval(A,C).


add_hyp(A,B,C,D) :-
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(A,B,C,D))).


best_clause_hook(_,_,_,_) :-
   setting(best_clause_hook,true),
   !.
best_clause_hook(B,C,D,E) :-
   setting(best_clause_hook,A),
   call(A,B,C,D,E),
   !.


estimate_error_rate(B,A,D,E,F) :-
   C is 1-exp(log(1-A)/B),
   estimate_error(1/ 0,0/ 1,C,D,E,F).


find_clause(A) :-
   set(stage,reduction),
   set(searchstrat,A),
   p_message(reduce),
   reduce_prelims(T,H,U),
   init_open_list,
   get_search_settings(B),
   arg(4,B,_/C),
   get_start_label(C,F),
   ( '$aleph_sat'(example,example(D,E))
   ->
     example(D,E,G),
     asserta(user:'$aleph_search'(selected,selected(F,(G:-true),[D-D],[])))
   ;
     asserta(user:'$aleph_search'(selected,selected(F,(false:-true),[],[])))
   ),
   arg(13,B,J),
   interval_count(H,I),
   I>=J,
   '$aleph_search'(selected,selected(K,L,M,N)),
   add_hyp(K,L,M,N),
   ( '$aleph_global'(max_set,max_set(E,D,O,P))
   ->
     Q=O/P
   ;
     ( '$aleph_global'(best,set(best,R))
     ->
       Q=R/0
     )
   ;
     Q=F/0
   ),
   asserta(user:'$aleph_search'(best_label,Q)),
   p1_message('best label so far'),
   p_message(Q),
   arg(3,B,S),
   stopwatch(A1),
   ( S=false
   ->
     get_gains(B,0,Q,[],false,[],0,T,[1],H,U,[],1,V,Y),
     update_max_head_count(0,V)
   ;
     clear_cache,
     interval_count(H,W),
     asserta(user:'$aleph_local'(max_head_count,W)),
     X=0-[D,E,[],false],
     get_gains(B,0,Q,X,_,_,_,T,[X],H,U,[],1,V,Y)
   ),
   asserta(user:'$aleph_search_expansion'(1,0,1,V)),
   get_nextbest(B,_),
   asserta(user:'$aleph_search'(current,current(1,V,Y))),
   search(B,F1),
   stopwatch(Z),
   G1 is Z-A1,
   '$aleph_search'(selected,selected(B1,C1,D1,E1)),
   destroy_open_list,
   best_clause_hook(B1,C1,D1,E1),
   add_hyp(B1,C1,D1,E1),
   p1_message('clauses constructed'),
   p_message(F1),
   p1_message('search time'),
   p_message(G1),
   p_message('best clause'),
   pp_dclause(C1),
   show_stats(C,B1),
   update_search_stats(F1,G1),
   record_search_stats(C1,F1,G1),
   noset(stage),
   !.
find_clause(_) :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   destroy_open_list,
   best_clause_hook(A,B,C,D),
   add_hyp(A,B,C,D),
   p_message('best clause'),
   pp_dclause(B),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,A),
   noset(stage),
   !.


get_start_label(_,[0,0,0,A]) :-
   (
     setting(interactive,true)
   ;
     setting(search,ic)
   ),
   !,
   A is(-inf).
get_start_label(user,[1,0,2,A]) :-
   !,
   A is(-inf).
get_start_label(entropy,[1,0,2,-0.5]) :-
   !.
get_start_label(gini,[1,0,2,-0.5]) :-
   !.
get_start_label(wracc,[1,0,2,-0.25]) :-
   !.
get_start_label(A,[1,0,2,B]) :-
   evalfn(A,[1,0,2],B).


store_values([]).
store_values([A|B]) :-
   store(A),
   store_values(B).


add_bottom :-
   retractall(user:'$aleph_search'(selected,selected(_,_,_,_))),
   bottom(A),
   add_hyp(A),
   '$aleph_global'(hypothesis,hypothesis(C,B,_,_)),
   ( clause_ok(B,C)
   ->
     true
   ;
     '$aleph_sat'(example,example(D,E)),
     example(D,E,G),
     retract(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
     setting(evalfn,F),
     complete_label(F,G,[1,0,1],H),
     asserta(user:'$aleph_global'(hypothesis,hypothesis(H,(G:-true),[D-D],[])))
   ).


reduce_end_hook :-
   setting(reduce_end_hook,true),
   !.
reduce_end_hook :-
   setting(reduce_end_hook,A),
   prolog:call(call(user:A)),
   !.


reduce(false) :-
   !,
   add_bottom.
reduce(ibs) :-
   !,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retractall(user:'$aleph_search'(ibs_nodes,_)),
   retractall(user:'$aleph_search'(ibs_selected,_)),
   store_values([openlist,caching,explore]),
   set(openlist,1),
   set(caching,true),
   set(explore,true),
   asserta(user:'$aleph_search'(ibs_rval,1)),
   asserta(user:'$aleph_search'(ibs_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ibs_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(openlist,F),
   p1_message('ibs beam width'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,I,[H,G|_]/_)),
   J is G+H,
   estimate_error_rate(I,0.5,J,G,K),
   p1_message('ibs estimated error'),
   p_message(K),
   retract(user:'$aleph_search'(ibs_rval,O)),
   retract(user:'$aleph_search'(ibs_nodes,L)),
   '$aleph_search'(selected,selected(P,Q,R,S)),
   M is 2*F,
   N is I+L,
   set(openlist,M),
   asserta(user:'$aleph_search'(ibs_rval,K)),
   asserta(user:'$aleph_search'(ibs_nodes,N)),
   (
     (
       K>=O
     ;
       M>512
     )
   ->
     true
   ;
     retract(user:'$aleph_search'(ibs_selected,selected(_,_,_,_))),
     asserta(user:'$aleph_search'(ibs_selected,selected(P,Q,R,S))),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retractall(user:'$aleph_search'(ibs_rval,_)),
   retract(user:'$aleph_search'(ibs_nodes,Z)),
   retract(user:'$aleph_search'(ibs_selected,selected(V,W,X,Y))),
   best_clause_hook(V,W,X,Y),
   add_hyp(V,W,X,Y),
   p1_message('ibs clauses constructed'),
   p_message(Z),
   p1_message('ibs search time'),
   p_message(A1),
   p_message('ibs best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   reinstate_values([openlist,caching,explore]).
reduce(id) :-
   !,
   retractall(user:'$aleph_search'(id_nodes,_)),
   retractall(user:'$aleph_search'(id_selected,_)),
   store_values([caching,clauselength]),
   setting(clauselength,T),
   set(clauselength,1),
   set(caching,true),
   asserta(user:'$aleph_search'(id_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(id_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(id_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(V),
   repeat,
   setting(clauselength,F),
   p1_message('id clauselength setting'),
   p_message(F),
   find_clause(df),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(id_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(clauselength,I),
   '$aleph_search'(id_nodes,J),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(id_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(id_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P])
   ),
   I>T,
   !,
   stopwatch(U),
   B1 is U-V,
   retract(user:'$aleph_search'(id_nodes,A1)),
   retract(user:'$aleph_search'(id_selected,selected(W,X,Y,Z))),
   best_clause_hook(W,X,Y,Z),
   add_hyp(W,X,Y,Z),
   p1_message('id clauses constructed'),
   p_message(A1),
   p1_message('id search time'),
   p_message(B1),
   p_message('id best clause'),
   pp_dclause(X),
   show_stats(A,W),
   record_search_stats(X,A1,B1),
   noset(best),
   reinstate_values([caching,clauselength]).
reduce(ils) :-
   !,
   retractall(user:'$aleph_search'(ils_nodes,_)),
   retractall(user:'$aleph_search'(ils_selected,_)),
   store_values([caching,language]),
   set(searchstrat,bf),
   set(language,1),
   set(caching,true),
   asserta(user:'$aleph_search'(ils_nodes,0)),
   setting(evalfn,A),
   get_start_label(A,D),
   ( '$aleph_sat'(example,example(B,C))
   ->
     example(B,C,E),
     asserta(user:'$aleph_search'(ils_selected,selected(D,(E:-true),[B-B],[])))
   ;
     asserta(user:'$aleph_search'(ils_selected,selected(D,(false:-true),[],[])))
   ),
   stopwatch(U),
   repeat,
   setting(language,F),
   p1_message('ils language setting'),
   p_message(F),
   find_clause(bf),
   '$aleph_search'(current,current(_,G,_)),
   retract(user:'$aleph_search'(ils_nodes,H)),
   '$aleph_search'(selected,selected([M,N,O,L|P],Q,R,S)),
   '$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_)),
   I is F+1,
   J is G+H,
   set(language,I),
   asserta(user:'$aleph_search'(ils_nodes,J)),
   ( K>=L
   ->
     true
   ;
     retract(user:'$aleph_search'(ils_selected,selected([_,_,_,K|_],_,_,_))),
     asserta(user:'$aleph_search'(ils_selected,selected([M,N,O,L|P],Q,R,S))),
     set(best,[M,N,O,L|P]),
     fail
   ),
   !,
   stopwatch(T),
   A1 is T-U,
   retract(user:'$aleph_search'(ils_nodes,Z)),
   retract(user:'$aleph_search'(ils_selected,selected(V,W,X,Y))),
   add_hyp(V,W,X,Y),
   p1_message('ils clauses constructed'),
   p_message(Z),
   p1_message('ils search time'),
   p_message(A1),
   p_message('ils best clause'),
   pp_dclause(W),
   show_stats(A,V),
   record_search_stats(W,Z,A1),
   noset(best),
   reinstate_values([caching,language]).
reduce(rls) :-
   !,
   setting(tries,A),
   A>=1,
   store_values([caching,refine,refineop]),
   set(searchstrat,heuristic),
   set(caching,true),
   setting(refine,B),
   ( B\=false
   ->
     true
   ;
     set(refineop,rls)
   ),
   setting(threads,C),
   rls_search(C,A,I,H,selected(D,E,F,G)),
   add_hyp(D,E,F,G),
   p1_message('rls nodes constructed'),
   p_message(H),
   p1_message('rls search time'),
   p_message(I),
   p_message('rls best result'),
   pp_dclause(E),
   setting(evalfn,J),
   show_stats(J,D),
   record_search_stats(E,H,I),
   noset(best),
   reinstate_values([caching,refine,refineop]).
reduce(scs) :-
   !,
   store_values([tries,moves,rls_type,clauselength_distribution]),
   stopwatch(G),
   ( setting(scs_sample,C)
   ->
     true
   ;
     setting(scs_percentile,A),
     A> 0,
     setting(scs_prob,B),
     B< 1,
     C is integer(log(1-B)/log(1-A/100)+1)
   ),
   ( setting(scs_type,informed)
   ->
     ( setting(clauselength_distribution,E)
     ->
       true
     ;
       setting(clauselength,D),
       estimate_clauselength_distribution(D,100,A,E),
       p1_message('using clauselength distribution'),
       p_message(E),
       set(clauselength_distribution,E)
     )
   ;
     true
   ),
   set(tries,C),
   set(moves,0),
   set(rls_type,gsat),
   reduce(rls),
   stopwatch(F),
   I is F-G,
   '$aleph_search'(rls_nodes,H),
   '$aleph_search'(rls_selected,selected(L,J,_,_)),
   p1_message('scs nodes constructed'),
   p_message(H),
   p1_message('scs search time'),
   p_message(I),
   p_message('scs best result'),
   pp_dclause(J),
   setting(evalfn,K),
   show_stats(K,L),
   record_search_stats(J,H,I),
   p1_message('scs search time'),
   p_message(I),
   reinstate_values([tries,moves,rls_type,clauselength_distribution]).
reduce(ar) :-
   !,
   clear_cache,
   ( setting(pos_fraction,B)
   ->
     true
   ;
     p_message('value required for pos_fraction parameter'),
     fail
   ),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   interval_count(A,C),
   D is B*C,
   store_values([minpos,evalfn,explore,caching,minacc,good]),
   set(searchstrat,bf),
   set(minpos,D),
   set(evalfn,coverage),
   set(explore,true),
   set(minacc,0),
   set(good,true),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   find_clause(bf),
   show(good),
   retract(user:'$aleph_global'(atoms_left,atoms_left(neg,[]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,E))),
   reinstate_values([minpos,evalfn,explore,caching,minacc,good]).
reduce(ic) :-
   !,
   store_values([minpos,minscore,evalfn,explore,refineop]),
   setting(refineop,A),
   ( A=false
   ->
     set(refineop,auto)
   ;
     true
   ),
   set(minpos,0),
   set(searchstrat,bf),
   set(evalfn,coverage),
   set(explore,true),
   setting(noise,B),
   C is-B,
   set(minscore,C),
   find_clause(bf),
   reinstate_values([minpos,minscore,evalfn,explore,refineop]).
reduce(bf) :-
   !,
   find_clause(bf).
reduce(df) :-
   !,
   find_clause(df).
reduce(heuristic) :-
   !,
   find_clause(heuristic).


reduce_start_hook(_) :-
   setting(reduce_start_hook,true),
   !.
reduce_start_hook(B) :-
   setting(reduce_start_hook,A),
   prolog:call(call(user:A),B),
   !.


doreduce(A) :-
   reduce_start_hook(A),
   reduce(A),
   reduce_end_hook.


noset(A) :-
   nonvar(A),
   retract(user:'$aleph_global'(A,set(A,B))),
   !,
   rm_special_consideration(A,B),
   set_default(A).
noset(_).


sat_end_hook(_,_) :-
   setting(sat_end_hook,true),
   !.
sat_end_hook(B,C) :-
   setting(sat_end_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_sat_example(B) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   p1_message(sat),
   p_message(B),
   flush_output(A),
   set_output(user_output).
record_sat_example(_).


sat_prelims :-
   clean_up_sat,
   clean_up_hypothesis,
   reset_counts,
   set_up_builtins.


sat_start_hook(_,_) :-
   setting(sat_start_hook,true),
   !.
sat_start_hook(B,C) :-
   setting(sat_start_hook,A),
   prolog:call(call(user:A),B,C),
   !.


record_example(check,B,C,A) :-
   ( once(example(A,B,C))
   ->
     true
   ;
     record_example(nocheck,B,C,A),
     ( retract(user:'$aleph_global'(atoms,atoms(B,D)))
     ->
       true
     ;
       D= ([])
     ),
     ( retract(user:'$aleph_global'(atoms_left,atoms_left(B,E)))
     ->
       true
     ;
       E= ([])
     ),
     ( retract(user:'$aleph_global'(last_example,last_example(B,_)))
     ->
       true
     ;
       true
     ),
     update(D,A-A,F),
     update(E,A-A,G),
     asserta(user:'$aleph_global'(atoms,atoms(B,F))),
     asserta(user:'$aleph_global'(atoms_left,atoms_left(B,G))),
     asserta(user:'$aleph_global'(last_example,last_example(B,A)))
   ),
   !.
record_example(nocheck,A,D,C) :-
   ( retract(user:'$aleph_global'(size,size(A,B)))
   ->
     true
   ;
     B is 0
   ),
   C is B+1,
   asserta(user:'$aleph_global'(size,size(A,C))),
   ( A\=neg,
     setting(skolem_examples,true)
   ->
     setting(skolemvars,E),
     skolemize(D,G,H,E,F),
     record_skolemized(A,C,F,G,H),
     ( E=F
     ->
       true
     ;
       set(skolemvars,F)
     )
   ;
     split_clause(D,I,H),
     record_nskolemized(A,C,I,H)
   ),
   !.


aleph_subsumes(A,B) :-
   \+ \+ (numbervars(A,0,_),numbervars(B,0,_),aleph_subset1(A,B)).


redundant(C,E,[A|B]) :-
   copy_term([A|B],F),
   aleph_member(D,B),
   C=D,
   aleph_subsumes(E,F).


glist_to_goals([g(_,_,A)],A) :-
   !.
glist_to_goals([g(_,_,A) |B],(A,C)) :-
   glist_to_goals(B,C).


compile_clause2([[_|A]],B) :-
   !,
   glist_to_goals(A,B).
compile_clause2([[_|A] |C],(B,!,D)) :-
   glist_to_goals(A,B),
   compile_clause2(C,D).


join_goals([],A,A) :-
   !.
join_goals(A,[],A) :-
   !.
join_goals([g(A,D,E) |F],[g(B,G,H) |I],C) :-
   A<B,
   !,
   C=[g(A,D,E) |J],
   join_goals(F,[g(B,G,H) |I],J).
join_goals([F|E],[g(B,C,D) |G],A) :-
   A=[g(B,C,D) |H],
   join_goals(E,[F|G],H).


aleph_ord_union(A,[],A) :-
   !.
aleph_ord_union([],A,A) :-
   !.
aleph_ord_union([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_union(C,A,D,B,E,F).


aleph_ord_disjoint([],_) :-
   !.
aleph_ord_disjoint(_,[]) :-
   !.
aleph_ord_disjoint([A|D],[B|E]) :-
   compare(C,A,B),
   aleph_ord_disjoint(C,A,D,B,E).


add_to_sets([],A,B,[[A|B]]).
add_to_sets([[A|B] |D],C,E,[[A|B] |F]) :-
   aleph_ord_disjoint(A,C),
   !,
   add_to_sets(D,C,E,F).
add_to_sets([[A|C] |E],B,D,H) :-
   aleph_ord_union(A,B,F),
   join_goals(C,D,G),
   add_to_sets(E,F,G,H).


add_goal_to_set(g(C,B,D),A,E) :-
   add_to_sets(A,B,[g(C,B,D)],E).


get_goal_vars(A,C,D,A) :-
   vars_in_term([A],[],B),
   aleph_ord_subtract(B,C,D).


compile_clause(B,A,(A:-C)) :-
   compile_clause2(B,C).


calculate_independent_sets([],A,A).
calculate_independent_sets([A|C],B,E) :-
   add_goal_to_set(A,B,D),
   calculate_independent_sets(C,D,E).


number_goals_and_get_vars((B,F),C,A,H,I,[g(A,D,E) |J]) :-
   !,
   G is A+1,
   get_goal_vars(B,C,D,E),
   number_goals_and_get_vars(F,C,G,H,I,J).
number_goals_and_get_vars(C,D,A,A,B,[g(A,E,F) |B]) :-
   get_goal_vars(C,D,E,F).


remove_subsumed([C|A],E) :-
   aleph_delete(B,A,D),
   \+ \+redundant(B,[C|A],[C|D]),
   !,
   remove_subsumed([C|D],E).
remove_subsumed(A,A).


reorder_clause((A:-B),F) :-
   vars_in_term([A],[],C),
   number_goals_and_get_vars(B,C,1,_,[],D),
   calculate_independent_sets(D,[],E),
   compile_clause(E,A,F).


remove_redundant((A:-B),(D:-F)) :-
   goals_to_list((A,B),C),
   remove_subsumed(C,[D|E]),
   ( E= ([])
   ->
     F=true
   ;
     list_to_goals(E,F)
   ).


concat([A],A) :-
   !.
concat([C|A],F) :-
   concat(A,B),
   name(B,D),
   name(C,E),
   aleph_append(D,E,G),
   name(F,G).


aleph_writeq(A) :-
   write_term(A,[numbervars(true),quoted(true)]).


create_copy(B,C,_,_,_,A,A) :-
   B>C,
   !.
create_copy(A,K,B,H,D,F,L) :-
   example(A,B,C),
   C=..[_|E],
   I=..[D|E],
   G is F+1,
   aleph_writeq(example(G,H,I)),
   write('.'),
   nl,
   J is A+1,
   create_copy(J,K,B,H,D,G,L).


create_copy([],_,_,_,A,A).
create_copy([A-B|G],C,D,E,F,I) :-
   create_copy(A,B,C,D,E,F,H),
   create_copy(G,C,D,E,H,I).


aleph_open(A,read,B) :-
   !,
   ( exists(A)
   ->
     open(A,read,B)
   ;
     fail
   ).
aleph_open(A,B,C) :-
   open(A,B,C).


create_examples(B,F,E,D,A,[I-H]) :-
   '$aleph_global'(last_example,last_example(A,G)),
   aleph_open(B,write,C),
   set_output(C),
   create_copy(D,E,A,F,G,H),
   close(C),
   set_output(user_output),
   H>G,
   !,
   retract(user:'$aleph_global'(last_example,last_example(A,G))),
   I is G+1,
   asserta(user:'$aleph_global'(last_example,last_example(A,H))).
create_examples(_,_,_,_,_,[]).


rm_seeds1([],A,A).
rm_seeds1([A-B|D],C,F) :-
   rm_interval(A-B,C,E),
   !,
   rm_seeds1(D,E,F).


app_lit(B,(A,C),(A,D)) :-
   !,
   app_lit(B,C,D).
app_lit(B,A,(A,B)).


cwinduce :-
   store(greedy),
   set(greedy,true),
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   A\= ([]),
   repeat,
   '$aleph_global'(atoms_left,atoms_left(pos,[B-G|H])),
   sat(B),
   reduce,
   retract(user:'$aleph_global'(hypothesis,hypothesis(C,D,E,F))),
   asserta(user:'$aleph_search'(sphyp,hypothesis(C,D,E,F))),
   rm_seeds1(E,[B-G|H],I),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,[B-G|H]))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   I= ([]),
   retract(user:'$aleph_global'(atoms_left,atoms_left(pos,I))),
   reinstate(greedy),
   !.
cwinduce.


gen_ab_examples(B/_,E,C) :-
   A='.alephtmp.f',
   D='.alephtmp.n',
   create_examples(A,B,neg,C,pos,F),
   create_examples(D,B,pos,E,neg,G),
   aleph_consult(A),
   aleph_consult(D),
   retractall(user:'$aleph_global'(atoms_left,_)),
   retractall(user:'$aleph_global'(size,_)),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,F))),
   asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,G))),
   interval_count(F,H),
   interval_count(G,I),
   asserta(user:'$aleph_global'(size,size(pos,H))),
   asserta(user:'$aleph_global'(size,size(neg,I))),
   delete_file(A),
   delete_file(D).


add_modes(D/_) :-
   '$aleph_global'(targetpred,targetpred(A)),
   modes(A,B),
   B=..[F,G,C],
   C=..[_|E],
   H=..[D|E],
   I=..[F,G,H],
   prolog:call(call(user:I)),
   fail.
add_modes(_).


add_determinations(D,B) :-
   '$aleph_global'(targetpred,targetpred(A)),
   determinations(A,C),
   ( B=true
   ->
     C\=A
   ;
     true
   ),
   determination(D,C),
   fail.
add_determinations(_,_).


gen_absym(C) :-
   ( retract(user:'$aleph_global'(last_ab,last_ab(A)))
   ->
     B is A+1
   ;
     B is 0
   ),
   asserta(user:'$aleph_global'(last_ab,last_ab(B))),
   concat([ab,B],C).


gcws(A,E,F,K) :-
   gen_absym(C),
   split_clause(A,B,H),
   functor(B,_,D),
   add_determinations(C/D,true),
   add_modes(C/D),
   gen_ab_examples(C/D,E,F),
   cwinduce,
   B=..[_|G],
   I=..[C|G],
   ( H=true
   ->
     J= (not I)
   ;
     app_lit(not I,H,J)
   ),
   K= (B:-J).


label_create(A,B,D) :-
   '$aleph_global'(last_example,last_example(A,C)),
   label_create(B,A,[1-C],D).


gcws :-
   setting(evalfn,P),
   repeat,
   retract(user:'$aleph_search'(sphyp,hypothesis([F,K,L|M],B,A,G))),
   ( A=_/_
   ->
     label_create(pos,B,C),
     extract_pos(C,D),
     interval_count(D,E)
   ;
     D=A,
     E=F
   ),
   ( G=_/_
   ->
     label_create(neg,B,H),
     extract_neg(H,I),
     interval_count(I,J)
   ;
     I=G,
     J=K
   ),
   ( J=0
   ->
     O=B,
     R=[E,J,L|M]
   ;
     N is E/ (2*E-1),
     set(minacc,N),
     set(noise,J),
     gcws(B,D,I,O),
     Q is L+1,
     complete_label(P,O,[F,0,Q],R)
   ),
   assertz(user:'$aleph_search'(gcwshyp,hypothesis(R,O,D,[]))),
   \+'$aleph_search'(sphyp,hypothesis(_,_,_,_)),
   !.


err_message(A) :-
   p1_message(error),
   p_message(A).


sum_gini([],_,0).
sum_gini([A-_|B],C,D) :-
   A>0,
   !,
   sum_gini(B,C,F),
   E is A/C,
   D is E* (1-E)+F.
sum_gini([_|A],B,C) :-
   sum_gini(A,B,C).


sum_entropy([],_,0).
sum_entropy([A-_|B],C,D) :-
   A>0,
   !,
   sum_entropy(B,C,E),
   D is A*log(A/C)+E.
sum_entropy([_|A],B,C) :-
   sum_entropy(A,B,C).


cont_distribution(B,C,_,A,A) :-
   B>C,
   !.
cont_distribution(A,I,B,D-[E,G],M) :-
   example(A,pos,C),
   tparg(B,C,F),
   H is A+1,
   J is D+1,
   K is E+F,
   L is G+F*F,
   cont_distribution(H,I,B,J-[K,L],M).


discr_distribution(B,C,_,A,A) :-
   B>C,
   !.
discr_distribution(A,I,B,D-F,M) :-
   example(A,pos,C),
   tparg(B,C,E),
   H is A+1,
   J is D+1,
   ( aleph_delete(G-E,F,L)
   ->
     K is G+1,
     discr_distribution(H,I,B,J-[K-E|L],M)
   ;
     discr_distribution(H,I,B,J-[1-E|F],M)
   ).


discr_distribution([],_,A,A).
discr_distribution([A-B|F],C,D-E,I) :-
   discr_distribution(A,B,C,D-E,G-H),
   discr_distribution(F,C,G-H,I).


cont_distribution([],_,A-[D,E],A-[B,C]) :-
   ( A=0
   ->
     B=0,
     C=0
   ;
     B is D/A,
     C is sqrt(E/A-B*B)
   ).
cont_distribution([A-B|F],C,D-E,I) :-
   cont_distribution(A,B,C,D-E,G-H),
   cont_distribution(F,C,G-H,I).


impurity(regression,sd,_-[_,A],A) :-
   !.
impurity(classification,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(classification,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(class_probability,entropy,B-A,C) :-
   sum_entropy(A,B,D),
   C is-D/ (B*log(2)),
   !.
impurity(class_probability,gini,B-A,C) :-
   sum_gini(A,B,C),
   !.
impurity(_,_,_,_) :-
   err_message('inappropriate settings for tree_type and/or evalfn'),
   fail.


treenode_cost(model,A,B,D,C,E,F) :-
   !,
   add_model(A,B,C,D,_,E,F).
treenode_cost(A,E,_,B,C,D,G) :-
   node_stats(A,B,C,D-F),
   D>0,
   impurity(A,E,D-F,G).


in(false,_) :-
   !,
   fail.
in(bottom,B) :-
   !,
   '$aleph_sat'(lastlit,A),
   get_clause(1,A,[],C),
   aleph_member(B,C).
in((A:-true),A) :-
   !.
in((A:-B),C) :-
   !,
   in((A,B),C).
in((A,_),A).
in((_,A),B) :-
   !,
   in(A,B).
in(A,A).


show_split_list([],_,_).
show_split_list([H-[[_,_,L,_],[C,_,K,_]] |N],I,A) :-
   copy_term(A,B),
   split_clause(B,E,F),
   copy_term(C,D),
   numbervars(D,0,_),
   split_clause(D,E,G),
   get_goaldiffs(F,G,J),
   M is -1*H,
   tab(4),
   write(I),
   tab(4),
   write(J),
   nl,
   tab(12),
   write('Succeeded (Right Branch): '),
   write(K),
   nl,
   tab(12),
   write('Failed    (Left Branch) : '),
   write(L),
   nl,
   tab(12),
   write('Cost Reduction          : '),
   write(M),
   nl,
   nl,
   O is I+1,
   show_split_list(N,O,A).


ask_best_split(F,B,C,D) :-
   repeat,
   tab(4),
   write('-> '),
   write('Select Split Number (or "none.")'),
   nl,
   read(A),
   ( A=none
   ->
     B is(-inf),
     C= ([]),
     D= ([])
   ;
     E is integer(A),
     aleph_remove_nth(E,F,G-[C,D],_),
     B is -1*G
   ),
   !.


show_split_list(B,A) :-
   tab(4),
   write('Split Information'),
   nl,
   tab(4),
   write(-----------------),
   nl,
   nl,
   tab(4),
   write('No.'),
   tab(4),
   write('Split'),
   nl,
   tab(4),
   write(---),
   tab(4),
   write(-----),
   nl,
   show_split_list(A,1,B).


get_best_split(A,B,C,D,E) :-
   show_split_list(A,B),
   ask_best_split(B,C,D,E).


get_best_subtree(false,_,A,B,C) :-
   retract(user:'$aleph_search'(tree_gain,tree_gain(A,B,C))),
   !.
get_best_subtree(true,A,H,B,C) :-
   nl,
   write('Extending path: '),
   nl,
   write(---------------),
   nl,
   pp_dclause(A),
   prolog:findall(D-[B,C],('$aleph_search'(tree_gain,tree_gain(E,B,C)),D is -1*E),F),
   keysort(F,G),
   get_best_split(A,G,H,B,C),
   retractall(user:'$aleph_search'(tree_gain,_)).


eval_treenode(A,B,D,F,E,G,H) :-
   arg(4,A,_/C),
   treenode_cost(B,C,D,E,F,G,H).


get_goaldiffs((A,B),(A,C),D) :-
   !,
   get_goaldiffs(B,C,D).
get_goaldiffs(true,A,A) :-
   !.
get_goaldiffs(A,(A,B),B).


rm_intervals([],A,A).
rm_intervals([A|C],B,E) :-
   rm_interval(A,B,D),
   rm_intervals(C,D,E),
   !.


tree_refine_ok(model,C) :-
   '$aleph_global'(model,model(A/B)),
   functor(D,A,B),
   in(C,D),
   !,
   fail.
tree_refine_ok(_,_).


print_eval(A,C) :-
   evalfn_name(A,B),
   p1_message(B),
   p_message(C).


get_best_subtree(A,F,H,[D,W,V],I,B1,C1,D1) :-
   arg(42,A,B),
   arg(43,A,E),
   retractall(user:'$aleph_search'(tree_gain,_)),
   C is(-inf),
   ( B=false
   ->
     asserta(user:'$aleph_search'(tree_gain,tree_gain(C,[],[])))
   ;
     true
   ),
   split_clause(D,M,N),
   arg(4,A,_/Y),
   arg(13,A,K),
   auto_refine(E,D,G),
   tree_refine_ok(F,G),
   eval_treenode(A,F,G,H,I,L,J,T),
   J>=K,
   rm_intervals(L,I,R),
   split_clause(G,M,O),
   get_goaldiffs(N,O,P),
   extend_clause(D,not P,Q),
   eval_treenode(A,F,Q,H,R,S,U),
   S>=K,
   X is (J*T+S*U)/V,
   Z is W-X,
   ( B=false
   ->
     pp_dclause(G),
     print_eval(Y,T),
     pp_dclause(Q),
     print_eval(Y,U),
     p1_message('expected cost reduction'),
     p_message(Z),
     '$aleph_search'(tree_gain,tree_gain(A1,_,_)),
     Z>A1,
     retract(user:'$aleph_search'(tree_gain,tree_gain(A1,_,_))),
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ;
     asserta(user:'$aleph_search'(tree_gain,tree_gain(Z,[Q,U,S,R],[G,T,J,L])))
   ),
   X=< 0,
   !,
   get_best_subtree(B,D,B1,C1,D1).
get_best_subtree(A,_,_,[C|_],_,D,E,F) :-
   arg(42,A,B),
   get_best_subtree(B,C,D,E,F).


normalise_distribution([],_,[]).
normalise_distribution([C-A|E],D,[B-A|F]) :-
   B is C/D,
   normalise_distribution(E,D,F).


find_maj_class([A],A) :-
   !.
find_maj_class([B-E|A],D) :-
   find_maj_class(A,C-F),
   ( B>C
   ->
     D=B-E
   ;
     D=C-F
   ).


get_model_error(mse,B,C,A) :-
   A is (B-C)^2.
get_model_error(accuracy,A,B,C) :-
   ( A=B
   ->
     C is  0
   ;
     C is  1
   ).


sum_model_errors([],_,A,B,A,B).
sum_model_errors([B-C|G],A,F,D,J,K) :-
   get_model_error(A,B,C,E),
   I is D+E,
   H is F+1,
   sum_model_errors(G,A,H,I,J,K).


find_model_error(L,B,(A:-H),[G],M,N) :-
   functor(A,_,E),
   prolog:findall(J-I,(aleph_member(C,B),aleph_member3(D,C),example(D,pos,F),copy_iargs(E,F,A,G),once(call(user:H)),arg(G,A,I),arg(G,F,J)),K),
   sum_model_errors(K,L,0,0,M,N),
   !.


leaf_predicts(0,_,_) :-
   !,
   fail.
leaf_predicts(A,B,D) :-
   arg(A,B,C),
   var(C),
   C==D,
   !.
leaf_predicts(A,C,D) :-
   B is A-1,
   leaf_predicts(B,C,D).


auto_extend((A:-B),F,(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ),
   \+tautology((H:-I)),
   \+prune((H:-I)).


add_prediction(classification,A,B,C,_,D) :-
   extend_clause(A,B=C,D).
add_prediction(class_probability,A,B,C,_,D) :-
   extend_clause(A,random(B,C),D).
add_prediction(regression,A,B,C,D,E) :-
   extend_clause(A,random(B,normal(C,D)),E).


add_model(K,A,B,J,_,_,_) :-
   retractall(user:'$aleph_local'(tree_model,_,_,_)),
   D is inf,
   split_clause(A,C,_),
   tparg(B,C,H),
   asserta(user:'$aleph_local'(tree_model,false,0,D)),
   '$aleph_global'(model,model(E/F)),
   functor(G,E,F),
   auto_extend(A,G,I),
   leaf_predicts(F,G,H),
   lazy_evaluate_refinement([],I,[E/F],J,[],[],L),
   find_model_error(K,J,L,B,O,M),
   '$aleph_local'(tree_model,_,_,N),
   ( M<N
   ->
     retract(user:'$aleph_local'(tree_model,_,_,_)),
     asserta(user:'$aleph_local'(tree_model,L,O,M))
   ;
     true
   ),
   fail.
add_model(_,_,_,_,A,B,C) :-
   retract(user:'$aleph_local'(tree_model,A,B,C)).


addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,A,C,D)),
   A=[_|_],
   !,
   add_theory(B,A,C,D).
addhyp :-
   '$aleph_global'(hypothesis,hypothesis(B,_,A,_)),
   !,
   rm_seeds,
   worse_coversets(A,pos,B,C),
   ( C= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(D)),
     update_coversets(C,D,pos,B)
   ),
   !.
addhyp :-
   '$aleph_search'(selected,selected(A,B,C,D)),
   !,
   add_hyp(A,B,C,D),
   rm_seeds,
   worse_coversets(C,pos,A,E),
   ( E= ([])
   ->
     true
   ;
     '$aleph_global'(last_clause,last_clause(F)),
     update_coversets(E,F,pos,A)
   ),
   !.


add_prediction(B,A,D,E,F) :-
   split_clause(A,H,_),
   ( B=model
   ->
     setting(evalfn,C),
     add_model(C,A,D,E,F,_,_)
   ;
     node_stats(B,E,D,G),
     leaf_prediction(B,G,J,K),
     tparg(D,H,I),
     add_prediction(B,A,I,J,K,F)
   ).


aleph_mode_linked([B|A]) :-
   aleph_mode_linked(A,[B]).


strip_negs([],[]).
strip_negs([not A|B],[A|C]) :-
   !,
   strip_negs(B,C).
strip_negs([A|B],[A|C]) :-
   strip_negs(B,C).


greedy_prune_rule1(I,F,K,[A|B],C,_,_) :-
   retractall(user:'$aleph_search'(tree_besterror,_)),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|B],C))),
   '$aleph_global'(atoms_left,atoms_left(pos,H)),
   aleph_delete(_,B,D),
   strip_negs(D,E),
   aleph_mode_linked([A|E]),
   list_to_clause([A|D],G),
   prove(F,pos,G,H,J,_),
   node_stats(I,J,K,L-M),
   leaf_prediction(I,L-M,_,N),
   estimate_error(I,N,L,O),
   '$aleph_search'(tree_besterror,besterror(_,P)),
   O=<P,
   retract(user:'$aleph_search'(tree_besterror,besterror(_,P))),
   asserta(user:'$aleph_search'(tree_besterror,besterror([A|D],O))),
   fail.
greedy_prune_rule1(_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(tree_besterror,besterror(A,B))).


approx_z(A,2.58) :-
   A>= 0.99,
   !.
approx_z(A,B) :-
   A>= 0.98,
   !,
   B is  2.33+ (A- 0.98)* (2.58- 2.33)/ (0.99- 0.98).
approx_z(A,B) :-
   A>= 0.95,
   !,
   B is  1.96+ (A- 0.95)* (2.33- 1.96)/ (0.98- 0.95).
approx_z(A,B) :-
   A>= 0.9,
   !,
   B is  1.64+ (A- 0.9)* (1.96- 1.64)/ (0.95- 0.9).
approx_z(A,B) :-
   A>= 0.8,
   !,
   B is  1.28+ (A- 0.8)* (1.64- 1.28)/ (0.9- 0.8).
approx_z(A,B) :-
   A>= 0.68,
   !,
   B is  1+ (A- 0.68)* (1.28- 1)/ (0.8- 0.68).
approx_z(A,B) :-
   A>= 0.5,
   !,
   B is  0.67+ (A- 0.5)* (1- 0.67)/ (0.68- 0.5).
approx_z(_,0.67).


bound_error(classification,C,E,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   approx_z(A,D),
   B is C-D*sqrt(C* (1-C)/E),
   F is C+D*sqrt(C* (1-C)/E).


chi_square(A,F,K) :-
   A>0,
   C is 1-2/ (9*A),
   D is sqrt(2/ (9*A)),
   B is 1000,
   get_normal(B,C,D,E),
   sort(E,I),
   G is  1-F,
   H is integer(G*B),
   ( H>B
   ->
     aleph_remove_nth(B,I,J,_)
   ;
     aleph_remove_nth(H,I,J,_)
   ),
   K is A*J^3.


estimate_error(A/J,B/K,F,C,E,I) :-
   D is (A+B)/2,
   binom_lte(C,D,E,G),
   H is abs(F-G),
   ( H< 1e-05
   ->
     I is D
   ;
     ( G>F
     ->
       estimate_error(A/J,D/G,F,C,E,I)
     )
   ;
     estimate_error(D/G,B/K,F,C,E,I)
   ).


list_to_clause([A],(A:-true)) :-
   !.
list_to_clause([A|B],(A:-C)) :-
   list_to_goals(B,C).


greedy_prune_rule(A,B,C,D,E,H,I) :-
   greedy_prune_rule1(A,B,C,D,E,F,G),
   D\=F,
   !,
   greedy_prune_rule(A,B,C,F,G,H,I).
greedy_prune_rule(_,_,_,A,B,A,B).


estimate_error(classification,C,B,D) :-
   setting(confidence,A),
   estimate_error(1/ 0,0/ 1,A,B,C,D).
estimate_error(regression,A,1,A) :-
   !.
estimate_error(regression,G,B,F) :-
   ( setting(confidence,A)
   ->
     true
   ;
     A= 0.95
   ),
   C is  1-A,
   D is B-1,
   E is 1-C/2,
   chi_square(D,E,H),
   F is G*sqrt((B-1)/H).


leaf_prediction(classification,D-A,B,C) :-
   find_maj_class(A,E-B),
   C is D-E.
leaf_prediction(class_probability,B-A,F,0) :-
   length(A,C),
   laplace_correct(A,D),
   E is B+C,
   normalise_distribution(D,E,F).
leaf_prediction(regression,_-[A,B],A,B).


node_stats(A,B,C,E) :-
   '$aleph_search'(tree_startdistribution,d(A,D)),
   ( A=regression
   ->
     cont_distribution(B,C,D,E)
   ;
     discr_distribution(B,C,D,E)
   ).


prune_rule(A,I,C,[G,_,V],B,[R,P,U],T) :-
   node_stats(A,B,C,D-E),
   leaf_prediction(A,D-E,_,F),
   estimate_error(A,F,D,O),
   split_clause(G,M,H),
   goals_to_list(H,N),
   arg(14,I,J),
   arg(29,I,K),
   arg(34,I,L),
   greedy_prune_rule(A,J/K/L,C,[M|N],O,Q,P),
   list_to_clause(Q,R),
   ( P<O
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,S)),
     prove(J/K/L,pos,R,S,T,U)
   ;
     T=B,
     U=V
   ).


prune_rules1(class_probability,_,_) :-
   p_message('no pruning for class probability trees'),
   !.
prune_rules1(model,_,_) :-
   p_message('no pruning for model trees'),
   !.
prune_rules1(A,B,C) :-
   p_message('pruning clauses'),
   '$aleph_search'(tree_leaf,l(F,G,D,E)),
   prune_rule(A,B,C,D,E,H,I),
   retract(user:'$aleph_search'(tree_leaf,l(F,G,D,E))),
   asserta(user:'$aleph_search'(tree_newleaf,l(F,G,H,I))),
   fail.
prune_rules1(_,_,_) :-
   retract(user:'$aleph_search'(tree_newleaf,l(A,B,C,D))),
   asserta(user:'$aleph_search'(tree_leaf,l(A,B,C,D))),
   fail.
prune_rules1(_,_,_).


split_leaf(A,D,E,[B,C]) :-
   retract(user:'$aleph_search'(tree_leaf,l(A,F,[G,H,I],J))),
   gen_leaf(B),
   gen_leaf(C),
   D=[K,L,M,N],
   E=[O,P,Q,R],
   asserta(user:'$aleph_search'(tree,t(A,F,[G,H,I],J,B,C))),
   asserta(user:'$aleph_search'(tree_leaf,l(B,A,[K,L,M],N))),
   asserta(user:'$aleph_search'(tree_leaf,l(C,A,[O,P,Q],R))).


can_split(A,E,F,B,J,K) :-
   arg(21,A,D),
   '$aleph_search'(tree_leaf,l(B,_,[G,C,H],I)),
   C>=D,
   get_best_subtree(A,E,F,[G,C,H],I,L,J,K),
   L>=D,
   p_message('found clauses'),
   J=[P,Q|_],
   K=[M,O|_],
   arg(4,A,_/N),
   pp_dclause(M),
   print_eval(N,O),
   pp_dclause(P),
   print_eval(N,Q),
   p1_message('expected cost reduction'),
   p_message(L).


laplace_correct([],[]).
laplace_correct([C-A|D],[B-A|E]) :-
   B is C+1,
   laplace_correct(D,E).


initialise_distribution([],[]).
initialise_distribution([A|B],[0-A|C]) :-
   initialise_distribution(B,C).


add_tree(_,B,D) :-
   retract(user:'$aleph_search'(tree_leaf,l(_,_,A,E))),
   A=[C,G,H],
   add_prediction(B,C,D,E,F),
   p_message('best clause'),
   pp_dclause(F),
   nlits(C,I),
   J is-G,
   asserta(user:'$aleph_global'(hypothesis,hypothesis([H,0,I,J],F,E,[]))),
   addhyp,
   fail.
add_tree(_,_,_).


prune_rules(B,A,C) :-
   setting(prune_tree,true),
   prune_rules1(A,B,C),
   !.
prune_rules(_,_,_).


find_tree1([],_,_,_).
find_tree1([D|H],A,B,C) :-
   can_split(A,B,C,D,E,F),
   !,
   split_leaf(D,E,F,G),
   aleph_append(G,H,I),
   find_tree1(I,A,B,C).
find_tree1([_|A],B,C,D) :-
   find_tree1(A,B,C,D).


eval_treenode(A,J,E,L,F,G,M,N) :-
   arg(4,A,_/K),
   arg(13,A,I),
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,pos,E,F,G,H),
   H>=I,
   treenode_cost(J,K,E,G,L,M,N).


gen_leaf(A) :-
   retract(user:'$aleph_search'(tree_lastleaf,B)),
   !,
   A is B+1,
   asserta(user:'$aleph_search'(tree_lastleaf,A)).
gen_leaf(0) :-
   asserta(user:'$aleph_search'(tree_lastleaf,0)).


auto_refine(false,D) :-
   example_saturated(A),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine(false,D) :-
   '$aleph_global'(modeh,modeh(_,A)),
   functor(A,B,C),
   aleph_get_hlit(B/C,D),
   D\==false.
auto_refine((A:-B),(H:-I)) :-
   !,
   goals_to_list((A,B),C),
   setting(clauselength,E),
   length(C,D),
   D<E,
   aleph_get_lit(F,C),
   aleph_append([F],C,G),
   list_to_goals(G,(H,I)),
   \+prune((H:-I)),
   \+tautology((H:-I)),
   ( setting(language,J)
   ->
     lang_ok(J,H,I)
   ;
     true
   ),
   ( setting(newvars,K)
   ->
     newvars_ok(K,H,I)
   ;
     true
   ).
auto_refine(A,B) :-
   auto_refine((A:-true),B).


stopwatch(A) :-
   A is cputime.


get_start_distribution(regression,0-[0,0]) :-
   !.
get_start_distribution(model,0-[0,0]) :-
   setting(evalfn,mse),
   !.
get_start_distribution(model,0-B) :-
   setting(evalfn,accuracy),
   !,
   ( setting(classes,A)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(A,B),
   !.
get_start_distribution(A,0-C) :-
   (
     A=classification
   ;
     A=class_probability
   ),
   ( setting(classes,B)
   ->
     true
   ;
     !,
     p_message('missing setting for classes'),
     fail
   ),
   initialise_distribution(B,C),
   !.
get_start_distribution(_,_) :-
   p_message('incorrect/missing setting for tree_type or evalfn'),
   fail.


find_tree(A) :-
   retractall(user:'$aleph_search'(tree,_)),
   retractall(user:'$aleph_search'(tree_besterror,_)),
   retractall(user:'$aleph_search'(tree_gain,_)),
   retractall(user:'$aleph_search'(tree_lastleaf,_)),
   retractall(user:'$aleph_search'(tree_leaf,_)),
   retractall(user:'$aleph_search'(tree_newleaf,_)),
   retractall(user:'$aleph_search'(tree_startdistribution,_)),
   get_start_distribution(A,B),
   asserta(user:'$aleph_search'(tree_startdistribution,d(A,B))),
   '$aleph_global'(atoms_left,atoms_left(pos,F)),
   setting(dependent,E),
   p_message('constructing tree'),
   stopwatch(L),
   get_search_settings(C),
   auto_refine(false,D),
   gen_leaf(G),
   eval_treenode(C,A,(D:-true),[E],F,J,I,H),
   asserta(user:'$aleph_search'(tree_leaf,l(G,G,[D,H,I],J))),
   find_tree1([G],C,A,[E]),
   prune_rules(C,A,[E]),
   stopwatch(K),
   add_tree(C,A,[E]),
   M is K-L,
   p1_message('construction time'),
   p_message(M).


construct_tree(D) :-
   setting(searchtime,A),
   B is inf,
   A=\=B,
   C is integer(A),
   C>0,
   !,
   catch(time_bound_call(C,searchlimit,find_tree(D)),searchlimit,p_message('Time limit reached')).
construct_tree(A) :-
   find_tree(A).


aleph_hash_term([J,A,B,C,D|K],E) :-
   !,
   functor(A,I,_),
   functor(B,G,_),
   functor(C,H,_),
   functor(D,F,_),
   functor(E,F,6),
   arg(1,E,G),
   arg(2,E,H),
   arg(3,E,I),
   arg(4,E,[J,A,B,C,D|K]).
aleph_hash_term([H,A,B,C],D) :-
   !,
   functor(A,G,_),
   functor(B,F,_),
   functor(C,E,_),
   functor(D,E,5),
   arg(1,D,F),
   arg(2,D,G),
   arg(3,D,[H,A,B,C]).
aleph_hash_term([F,A,B],C) :-
   !,
   functor(A,E,_),
   functor(B,D,_),
   functor(C,D,4),
   arg(1,C,E),
   arg(2,C,[F,A,B]).
aleph_hash_term([D,A],B) :-
   !,
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[D,A]).
aleph_hash_term([A],B) :-
   functor(A,C,_),
   functor(B,C,3),
   arg(1,B,[A]).


copy_args(_,_,A,B) :-
   A>B,
   !.
copy_args(B,C,A,F) :-
   arg(A,B,D),
   arg(A,C,D),
   E is A+1,
   copy_args(B,C,E,F).


clear_cache :-
   retractall(user:'$aleph_search_cache'(_)),
   retractall(user:'$aleph_search_prunecache'(_)).


time_bound_call(A,B,C) :-
   prolog:alarm(A,throw(B),D),
   ( call(user:C)
   ->
     remove_alarm(D)
   ;
     remove_alarm(D),
     fail
   ).


index_prove1(false/_,_,_,_,_,_,A,B,_) :-
   A>B,
   !,
   fail.
index_prove1(_,_,_,_,A,B,_,_,A) :-
   A>B,
   !.
index_prove1(true/_,_,_,_,B,_,A,A,B) :-
   !.
index_prove1(K/I,D/E/C,B,G,A,M,H,O,P) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   L is A+1,
   N is H+1,
   ( I=true
   ->
     ( retract(user:'$aleph_local'(example_cache,J))
     ->
       asserta(user:'$aleph_local'(example_cache,[A|J]))
     ;
       asserta(user:'$aleph_local'(example_cache,[A]))
     )
   ;
     true
   ),
   index_prove1(K/I,D/E/C,B,G,L,M,N,O,P).
index_prove1(_,_,_,_,A,_,_,_,A).


index_prove(_,_,_,_,A-B,_,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D,E-F,G,N,O) :-
   index_prove1(A,B,C,D,E,F,0,G,H),
   I is H-1,
   K is H+1,
   ( I>=E
   ->
     J is G-H+E,
     ( J=0,
       A=true/_
     ->
       L= ([]),
       M=0
     ;
       index_prove(A,B,C,D,K-F,J,L,M)
     ),
     N=[E-I|L],
     O is H-E+M
   ;
     index_prove(A,B,C,D,K-F,G,N,O)
   ).


prove1(A) :-
   depth_bound_call(A),
   !.


index_prove1(_,_,_,A,B,A) :-
   A>B,
   !.
index_prove1(D/E/C,B,G,A,I,J) :-
   example(A,B,F),
   prove1(C,D/E,F,G),
   !,
   H is A+1,
   index_prove1(D/E/C,B,G,H,I,J).
index_prove1(_,_,_,A,_,A).


prove3([A-M|N],D/E/C,B,(G:-H),K,I,Q) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   J is A-1,
   I=[L-J|P],
   O is K+A-L,
   ( A>=M
   ->
     prove2(N,D/E/C,B,(G:-H),O,P,Q)
   ;
     R is A+1,
     !,
     prove2([R-M|N],D/E/C,B,(G:-H),O,P,Q)
   ).
prove3([A-B|F],G,H,I,D,C,L) :-
   ( A>=B
   ->
     C=[E-B|K],
     J is D+B-E+1,
     !,
     prove2(F,G,H,I,J,K,L)
   ;
     M is A+1,
     !,
     prove3([M-B|F],G,H,I,D,C,L)
   ).


prove1(user,_,B,A) :-
   prove(A,B),
   !.
prove1(restricted_sld,D/C,A,(B:-E)) :-
   \+ \+ (A=B,resource_bound_call(C,D,E)),
   !.
prove1(sld,B/A,C,_) :-
   \+ \+resource_bound_call(A,B,C),
   !.


prove2([],_,_,_,A,[],A).
prove2([A-I|J],D/E/C,B,(G:-H),K,L,M) :-
   example(A,B,F),
   \+prove1(C,D/E,F,(G:-H)),
   !,
   ( A>=I
   ->
     prove2(J,D/E/C,B,(G:-H),K,L,M)
   ;
     N is A+1,
     !,
     prove2([N-I|J],D/E/C,B,(G:-H),K,L,M)
   ).
prove2([A-B|E],F,G,H,D,C,K) :-
   ( A>=B
   ->
     C=[A-A|J],
     I is D+1,
     !,
     prove2(E,F,G,H,I,J,K)
   ;
     L is A+1,
     C=[A-_|_],
     !,
     prove3([L-B|E],F,G,H,D,C,K)
   ).


index_prove(_,_,_,A-B,[],0) :-
   A>B,
   !.
index_prove(A,B,C,D-E,I,K) :-
   index_prove1(A,B,C,D,E,F),
   G is F-1,
   H is F+1,
   ( G>=D
   ->
     index_prove(A,B,C,H-E,J,L),
     I=[D-G|J],
     K is F-D+L
   ;
     index_prove(A,B,C,H-E,I,K)
   ).


list_to_intervals1([],[]).
list_to_intervals1([A|B],[A-C|E]) :-
   list_to_interval(A,B,C,D),
   list_to_intervals1(D,E).


aleph_reverse(A,B) :-
   revzap(A,[],B).


collect_example_cache(D/G) :-
   retract(user:'$aleph_local'(example_cache,[A|B])),
   aleph_reverse([A|B],C),
   list_to_intervals1(C,D),
   E is A+1,
   '$aleph_global'(size,size(neg,F)),
   ( E>F
   ->
     G= ([])
   ;
     G=[E-F]
   ).


prove_intervals(A,I,J,C/B,L,M,N) :-
   !,
   arg(8,A,E),
   arg(12,A,D),
   arg(14,A,F),
   arg(29,A,G),
   arg(34,A,H),
   aleph_append(B,C,K),
   prove(D/E,F/G/H,I,J,K,L,M,N).
prove_intervals(A,G,H,I,J,K,L) :-
   arg(8,A,C),
   arg(12,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   prove(B/C,D/E/F,G,H,I,J,K,L).


prove_cached(A,K,S,B/M,L,_,C,O/R,P) :-
   !,
   arg(8,A,G),
   arg(12,A,F),
   arg(14,A,H),
   arg(29,A,I),
   arg(34,A,J),
   interval_count(B,D),
   E is C-D,
   E>=0,
   ( prove(F/G,H/I/J,K,L,M,E,N,Q)
   ->
     aleph_append(N,B,O),
     P is Q+D,
     find_lazy_left(A,K,O,R),
     update_cache(S,K,O/R),
     retractall(user:'$aleph_local'(example_cache,_))
   ;
     collect_example_cache(N/R),
     aleph_append(N,B,O),
     update_cache(S,K,O/R),
     fail
   ).
prove_cached(_,neg,_,A/B,_,_,_,A/B,C) :-
   !,
   interval_count(A,C).
prove_cached(C,_,_,A,_,_,E,A,B) :-
   interval_count(A,B),
   arg(12,C,D),
   ( D=true
   ->
     true
   ;
     B=<E
   ).


find_lazy_left(A,_,_,[]) :-
   arg(12,A,B),
   B=false,
   !.
find_lazy_left(_,_,[],[]).
find_lazy_left(C,B,[_-A],F) :-
   !,
   E is A+1,
   ( B=pos
   ->
     arg(16,C,D)
   ;
     ( B=neg
     ->
       arg(24,C,D)
     )
   ;
     ( B=rand
     ->
       arg(20,C,D)
     )
   ;
     D=A
   ),
   ( E>D
   ->
     F= ([])
   ;
     F=[E-D]
   ).
find_lazy_left(A,B,[_|C],D) :-
   find_lazy_left(A,B,C,D).


prove(_,_,_,_,[],_,[],0).
prove(A,B,C,D,[E|H],F,L,M) :-
   index_prove(A,B,C,D,E,F,K,G),
   !,
   I is F-G,
   prove(A,B,C,D,H,I,J,N),
   aleph_append(J,K,L),
   M is G+N.


update_cache(A,B,I) :-
   A\=false,
   functor(A,F,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   E=_/_,
   retract(user:'$aleph_search_cache'(A)),
   functor(G,F,C),
   H is D-1,
   copy_args(A,G,1,H),
   arg(D,G,I),
   J is D+1,
   copy_args(A,G,J,C),
   asserta(user:'$aleph_search_cache'(G)),
   !.
update_cache(_,_,_).


prove_intervals(C,D,E,B/A,G,H) :-
   !,
   aleph_append(A,B,F),
   prove(C,D,E,F,G,H).
prove_intervals(A,B,C,D,E,F) :-
   prove(A,B,C,D,E,F).


prove_cached(A,E,O,I/G,F,L,M,N) :-
   !,
   arg(14,A,B),
   arg(29,A,C),
   arg(34,A,D),
   prove(B/C/D,E,F,G,H,_),
   aleph_append(H,I,K),
   ( E=pos
   ->
     arg(5,A,J),
     ( J=true
     ->
       intervals_intersection(K,L,M)
     ;
       M=K
     )
   ;
     M=K
   ),
   interval_count(M,N),
   update_cache(O,E,M).
prove_cached(B,A,H,D,_,E,F,G) :-
   ( A=pos
   ->
     arg(5,B,C),
     ( C=true
     ->
       intervals_intersection(D,E,F)
     ;
       F=D
     )
   ;
     F=D
   ),
   interval_count(F,G),
   update_cache(H,A,F).


potentially_good([1|_],[A|_]) :-
   !,
   A>1.
potentially_good([D,_,B|_],[C,_,A|_]) :-
   A=<B,
   !,
   C>D.
potentially_good([_,B|_],[_,A|_]) :-
   A<B.


potentially_good([],_,[]).
potentially_good([A|D],B,[A|E]) :-
   A=_-C,
   potentially_good(B,C),
   !,
   potentially_good(D,B,E).
potentially_good([_|A],B,C) :-
   potentially_good(A,B,C).


aleph_remove_nth(1,[A|B],A,B) :-
   !.
aleph_remove_nth(B,[A|D],E,[A|F]) :-
   C is B-1,
   aleph_remove_nth(C,D,E,F).


get_random(B,D) :-
   aleph_random(A),
   C is integer(A*B+ 0.5),
   ( C=0
   ->
     D=1
   ;
     ( C>B
     ->
       D=B
     )
   ;
     D=C
   ).


get_nextbest(D) :-
   peek_open_list(A),
   A=[B|C],
   retract(user:'$aleph_search_gain'(B,C,D,_)),
   assertz(user:'$aleph_search'(nextnode,D)).
get_nextbest(A) :-
   pop_open_list,
   get_nextbest(A),
   !.
get_nextbest(none).


rls_nextbest(rrr,_,A,_) :-
   get_nextbest(A).
rls_nextbest(gsat,_,H,I) :-
   peek_open_list(A),
   reset_open_list,
   A=[B|C],
   prolog:findall(D-E,'$aleph_search_gain'(B,C,D,E),F),
   length(F,G),
   get_random(G,D),
   aleph_remove_nth(D,F,H-I,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(wsat,C,D,E) :-
   setting(walk,B),
   aleph_random(A),
   A>=B,
   !,
   rls_nextbest(gsat,C,D,E).
rls_nextbest(wsat,D,G,H) :-
   p_message('random walk'),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   potentially_good(C,D,E),
   length(E,F),
   get_random(F,A),
   aleph_remove_nth(A,E,G-H,_),
   retractall(user:'$aleph_search_gain'(_,_,_,_)).
rls_nextbest(anneal,[J,A|_],F,G) :-
   setting(temperature,M),
   reset_open_list,
   prolog:findall(A-B,'$aleph_search_gain'(_,_,A,B),C),
   length(C,D),
   get_random(D,E),
   aleph_remove_nth(E,C,F-G,_),
   G=[H,I|_],
   K is H-I- (J-A),
   (
     J=1
   ;
     K>=0
   ;
     aleph_random(L),
     L<exp(K/M)
   ).


select_nextbest(rls,C) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   setting(rls_type,A),
   ( retract(user:'$aleph_search'(rls_parentstats,stats(B,_,_)))
   ->
     true
   ;
     true
   ),
   ( rls_nextbest(A,B,C,D)
   ->
     asserta(user:'$aleph_search'(rls_parentstats,stats(D,[],[]))),
     setting(rls_type,E),
     ( E=rrr
     ->
       true
     ;
       assertz(user:'$aleph_search'(nextnode,C))
     )
   ;
     C=none
   ),
   !.
select_nextbest(_,A) :-
   retractall(user:'$aleph_search'(nextnode,_)),
   get_nextbest(A),
   !.
select_nextbest(_,none).


built_in_prune(coverage).
built_in_prune(compression).
built_in_prune(posonly).
built_in_prune(laplace).
built_in_prune(wracc).
built_in_prune(mestimate).
built_in_prune(auto_m).


get_node([[A|B] |_],[A|B],C) :-
   '$aleph_search_gain'(A,B,C,_).
get_node([_|A],B,C) :-
   get_node(A,B,C).


record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).
record_theory(E,B,C,D) :-
   setting(recordfile_stream,A),
   !,
   set_output(A),
   show_theory(B,C,D,E),
   flush_output(A),
   set_output(user_output).
record_theory(_,_,_,_).


show_theory(A,D,B,E) :-
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good theory')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found theory')
   ),
   pp_dclauses(B),
   ( setting(evalfn,C)
   ->
     true
   ;
     C=accuracy
   ),
   show_stats(C,D),
   p1_message('theory label'),
   p_message(D),
   p1_message('theories constructed'),
   p_message(E),
   p_message(-------------------------------------).


update_good(_,_,_,_) :-
   setting(goodfile,_),
   !.
update_good(true,A,B,C) :-
   '$aleph_good'(A,B,C),
   !.
update_good(_,A,B,C) :-
   assertz(user:'$aleph_good'(A,B,C)),
   ( retract(user:'$aleph_search'(last_good,D))
   ->
     E is D+1
   ;
     E is 1
   ),
   assertz(user:'$aleph_search'(last_good,E)).


record_clause(good,B,D,_) :-
   setting(good,true),
   setting(goodfile_stream,A),
   !,
   set_output(A),
   B=[_,_,C|_],
   aleph_writeq('$aleph_good'(C,B,D)),
   write('.'),
   nl,
   flush_output(A),
   set_output(user_output).
record_clause(A,C,D,E) :-
   A\=good,
   setting(recordfile_stream,B),
   !,
   set_output(B),
   show_clause(A,C,D,E),
   flush_output(B),
   set_output(user_output).
record_clause(_,_,_,_).


show_clause(good,_,_,_) :-
   !.
show_clause(A,B,C,D) :-
   broadcast(clause(A,B,C,D)),
   p_message(-------------------------------------),
   ( A=good
   ->
     p_message('good clause')
   ;
     ( A=sample
     ->
       p_message('selected from sample')
     )
   ;
     p_message('found clause')
   ),
   pp_dclause(C),
   ( setting(evalfn,E)
   ->
     true
   ;
     E=coverage
   ),
   show_stats(E,B),
   has_good_clause_hook(B,C,D),
   p1_message('clause label'),
   p_message(B),
   p1_message('clauses constructed'),
   p_message(D),
   p_message(-------------------------------------).


newbest_hook(_,_,_) :-
   setting(newbest_hook,true),
   !.
newbest_hook(B,C,D) :-
   setting(newbest_hook,A),
   prolog:call(call(user:A),B,C,D),
   !.


update_good(A,D) :-
   setting(good,true),
   !,
   A=[_,_,C|_],
   setting(check_good,B),
   update_good(B,C,A,D).
update_good(_,_).


best_value(gini,_,_,0) :-
   !.
best_value(entropy,_,_,0) :-
   !.
best_value(posonly,A,[C,_,E|_],B) :-
   arg(20,A,D),
   B is log(C)+log(D+ 2)- (E+1)/C,
   !.
best_value(wracc,_,[B|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B* (C-D)/C^2
   ;
     A is  0.25
   ),
   !.
best_value(B,_,[C,_,A|E],F) :-
   D is A+1,
   evalfn(B,[C,0,D|E],F).


add_prune_cache(false) :-
   !.
add_prune_cache(A) :-
   ( '$aleph_global'(caching,set(caching,true))
   ->
     functor(A,_,B),
     C is B-2,
     arg(C,A,D),
     asserta(user:'$aleph_search_prunecache'(D))
   ;
     true
   ).


uniq_insert(_,A,[],[A]).
uniq_insert(descending,A,[B|C],[A,B|C]) :-
   A@>B,
   !.
uniq_insert(ascending,A,[B|C],[A,B|C]) :-
   A@<B,
   !.
uniq_insert(_,A,[A|B],[A|B]) :-
   !.
uniq_insert(B,C,[A|D],[A|E]) :-
   !,
   uniq_insert(B,C,D,E).


pop_open_list :-
   ( recorded('$aleph_search_openlist',[_|B],A)
   ->
     true
   ;
     !,
     fail
   ),
   erase(A),
   recorda('$aleph_search_openlist',B,_),
   fail.
pop_open_list.


peek_open_list(A) :-
   recorded('$aleph_search_openlist',[A|_],_).


open_list(A) :-
   recorded('$aleph_search_openlist',A,_).


reset_open_list :-
   recorded('$aleph_search_openlist',_,A),
   erase(A),
   recorda('$aleph_search_openlist',[],_),
   fail.
reset_open_list.


destroy_open_list :-
   eraseall('$aleph_search_openlist').


init_open_list :-
   recorda('$aleph_search_openlist',[],_).


get_max_negs(D/B,A,C) :-
   number(A),
   ( B=:= 0
   ->
     C is D
   ;
     E is integer((1-B)*A/B),
     ( D<E
     ->
       C is D
     ;
       C is E
     )
   ),
   !.
get_max_negs(A/_,_,A).


prove_cache(exact,E,J,U,K,A,C,P,R) :-
   !,
   ( A=B/L
   ->
     interval_count(B,D),
     M is C-D,
     arg(12,E,F),
     arg(14,E,G),
     arg(29,E,H),
     arg(34,E,I),
     prove(F/false,G/H/I,J,K,L,M,N,S),
     aleph_append(N,B,O),
     find_lazy_left(E,J,O,Q),
     P=O/Q,
     R is D+S
   ;
     P=A,
     interval_count(A,R)
   ),
   arg(8,E,T),
   ( T=true
   ->
     add_cache(U,J,P)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I,J) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I,J)
   ;
     ( prove_intervals(A,D,F,G,H,K,J)
     ->
       find_lazy_left(A,D,K,L),
       add_cache(C,D,K/L),
       I=K/L,
       retractall(user:'$aleph_local'(example_cache,_))
     )
   ;
     collect_example_cache(I),
     add_cache(C,D,I),
     fail
   ).
prove_cache(upper,A,J,_,K,B,M,N/P,O) :-
   arg(8,A,F),
   arg(12,A,E),
   arg(14,A,G),
   arg(29,A,H),
   arg(34,A,I),
   ( B=D/C
   ->
     aleph_append(C,D,L),
     prove(E/F,G/H/I,J,K,L,M,N,O)
   ;
     prove(E/F,G/H/I,J,K,B,M,N,O)
   ),
   find_lazy_left(A,J,N,P).


lazy_prove_neg(B,D,E,[A,C|_],[A,_],F,G,I,J) :-
   arg(4,B,bf/coverage),
   !,
   H is C+1,
   prove_cache(D,B,neg,E,F,G,H,I,J),
   !.
lazy_prove_neg(A,F,G,_,[D,_],H,I,K,L) :-
   arg(17,A,B),
   arg(18,A,C),
   get_max_negs(B/C,D,E),
   J is E+1,
   prove_cache(F,A,neg,G,H,I,J,K,L),
   !.


prove_cache(exact,B,F,P,G,A,K,L) :-
   !,
   ( A=J/H
   ->
     arg(14,B,C),
     arg(29,B,D),
     arg(34,B,E),
     prove(C/D/E,F,G,H,I,N),
     aleph_append(I,J,K),
     interval_count(J,M),
     L is M+N
   ;
     K=A,
     interval_count(K,L)
   ),
   arg(8,B,O),
   ( O=true
   ->
     add_cache(P,F,K)
   ;
     true
   ).
prove_cache(upper,A,D,C,F,G,H,I) :-
   arg(8,A,B),
   B=true,
   !,
   arg(14,A,J),
   arg(29,A,K),
   arg(34,A,L),
   ( check_cache(C,D,E)
   ->
     prove_cached(A,D,C,E,F,G,H,I)
   ;
     prove_intervals(J/K/L,D,F,G,H,I),
     add_cache(C,D,H)
   ).
prove_cache(upper,A,H,_,I,B,K,L) :-
   arg(14,A,E),
   arg(29,A,F),
   arg(34,A,G),
   ( B=D/C
   ->
     aleph_append(C,D,J),
     prove(E/F/G,H,I,J,K,L)
   ;
     prove(E/F/G,H,I,B,K,L)
   ).


pos_ok(A,_,_,_,_,_) :-
   arg(3,A,B),
   (
     B=rls
   ;
     B=user
   ),
   !.
pos_ok(A,E,_,[B,_],_,_) :-
   arg(13,A,C),
   B<C,
   !,
   arg(8,A,D),
   ( D=true
   ->
     add_prune_cache(E)
   ;
     true
   ),
   fail.
pos_ok(A,F,_,[C,_],_,_) :-
   arg(40,A,B),
   B> 0,
   '$aleph_search'(clauseprior,_-[D-pos,_]),
   C/D<B,
   !,
   arg(8,A,E),
   ( E=true
   ->
     add_prune_cache(F)
   ;
     true
   ),
   fail.
pos_ok(A,_,[_,_,_,H|_],[D,E],_,_) :-
   arg(4,A,_/B),
   arg(2,A,C),
   (
     (
       B=user
     ;
       C=true
     )
   ->
     true
   ;
     evalfn(B,[D,0,E],F),
     best_value(B,A,[D,0,E,F],G),
     G>H
   ),
   !.


evalfn(compression,[A,C,D|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C-D+1
   ),
   !.
evalfn(coverage,[A,C,_|_],B) :-
   ( A=(-inf)
   ->
     B is(-inf)
   ;
     B is A-C
   ),
   !.
evalfn(laplace,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is (A+1)/ (A+C+2)
   ),
   !.
evalfn(wracc,[B,E|_],A) :-
   ( '$aleph_search'(clauseprior,C-[D-pos,_])
   ->
     A is B/C-D/C* ((B+E)/C)
   ;
     A is  -0.25
   ),
   !.
evalfn(entropy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     A is 0
   ;
     ( C is 0
     ->
       B is  0
     )
   ;
     D is A+C,
     E is A/D,
     F is 1-E,
     B is- (E*log(E)+F*log(F))/log(2)
   ),
   !.
evalfn(gini,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  1
   ;
     D is A+C,
     E is A/D,
     B is 2*E* (1-E)
   ),
   !.
evalfn(accuracy,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     B is A/ (A+C)
   ),
   !.
evalfn(pbayes,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     G is A/ (A+C),
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(F-pos,E),
     ( 0 is F-G
     ->
       B=F
     ;
       H is G* (1-G)/ (F-G)^2,
       B is (A+H*F)/ (A+C+H)
     )
   ),
   !.
evalfn(posonly,[B,0,D|_],A) :-
   '$aleph_global'(size,size(rand,C)),
   A is log(B)+log(C+ 2)- (D+1)/B,
   !.
evalfn(auto_m,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     F is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(H-pos,E),
     G is sqrt(F),
     B is (A+G*H)/ (F+G)
   ),
   !.
evalfn(mestimate,[A,C|_],B) :-
   ( A=(-inf)
   ->
     B is  0.5
   ;
     H is A+C,
     setting(prior,D),
     normalise_distribution(D,E),
     aleph_member1(I-pos,E),
     ( setting(m,F)
     ->
       G=F
     ;
       G is sqrt(H)
     ),
     B is (A+G*I)/ (H+G)
   ),
   !.
evalfn(_,_,A) :-
   A is(-inf).


add_cache(false,_,_) :-
   !.
add_cache(A,B,E) :-
   ( retract(user:'$aleph_search_cache'(A))
   ->
     true
   ;
     true
   ),
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   ( arg(D,A,E)
   ->
     asserta(user:'$aleph_search_cache'(A))
   ;
     true
   ),
   !.


maxlength_neg_ok(B/D,E,C,A) :-
   (
     A>B
   ;
     C/ (C+A)<D
   ),
   !,
   add_prune_cache(E),
   fail.
maxlength_neg_ok(_,_,_,_).


prove_neg(A,_,C,_,_,_,[],[],0) :-
   arg(8,A,B),
   ( B=true
   ->
     add_cache(C,neg,[])
   ;
     true
   ),
   !.
prove_neg(A,C,D,_,_,E,F,G,H) :-
   arg(3,A,B),
   B=rls,
   !,
   prove_cache(C,A,neg,D,E,F,G,H).
prove_neg(_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(coversn,coversn(A,B)),
   !.
prove_neg(A,C,D,E,F,G,H,I,J) :-
   arg(12,A,B),
   B=true,
   !,
   lazy_prove_neg(A,C,D,E,F,G,H,I,J).
prove_neg(B,E,F,[A,0,D|_],[A,C],G,H,[],0) :-
   arg(4,B,bf/coverage),
   C is D-1,
   !,
   prove_cache(E,B,neg,F,G,H,0,[],0),
   !.
prove_neg(B,H,I,[A,F|_],[A,D],J,K,L,M) :-
   arg(4,B,bf/coverage),
   !,
   arg(7,B,C),
   ( C=D
   ->
     arg(2,B,E),
     ( E=true
     ->
       G is F
     ;
       G is F-1
     ),
     G>=0,
     prove_cache(H,B,neg,I,J,K,G,L,M),
     M=<G
   ;
     prove_cache(H,B,neg,I,J,K,L,M)
   ),
   !.
prove_neg(A,G,H,_,[F,C],I,J,L,M) :-
   arg(7,A,B),
   B=C,
   !,
   arg(17,A,D),
   arg(18,A,E),
   get_max_negs(D/E,F,K),
   prove_cache(G,A,neg,H,I,J,K,L,M),
   M=<K,
   !.
prove_neg(B,A,C,_,_,D,E,F,G) :-
   prove_cache(A,B,neg,C,D,E,F,G),
   !.


find_posgain(A,B) :-
   '$aleph_global'(greedy,set(greedy,true)),
   !,
   interval_count(A,B).
find_posgain(B,D) :-
   '$aleph_global'(atoms_left,atoms_left(pos,A)),
   intervals_intersection(A,B,C),
   interval_count(C,D).


prove_rand(B,A,C,D,E,F,G) :-
   prove_cache(A,B,rand,C,D,E,F,G),
   !.


prove_pos(_,_,_,_,_,_,[],[],0) :-
   !.
prove_pos(C,_,D,E,F,G,_,A,B) :-
   '$aleph_search'(covers,covers(A,B)),
   !,
   pos_ok(C,D,E,F,G,A).
prove_pos(B,A,C,H,I,D,E,F,G) :-
   prove_cache(A,B,pos,C,D,E,F,G),
   pos_ok(B,C,H,I,D,F),
   !.


prove_lazy_cached(A,C,E,G,D,F) :-
   arg(8,A,B),
   B=true,
   !,
   ( check_cache(C,pos,D)
   ->
     true
   ;
     add_cache(C,pos,E),
     D=E
   ),
   ( check_cache(C,neg,F)
   ->
     true
   ;
     add_cache(C,neg,G),
     F=G
   ).
prove_lazy_cached(_,_,A,B,A,B).


resource_bound_call(A,D,C) :-
   B is inf,
   A=:=B,
   !,
   prolog:depth_bound_call(call(user:C),D).
resource_bound_call(A,C,B) :-
   catch(time_bound_call(A,prooflimit,depth_bound_call(B,C)),prooflimit,fail).


lazy_ccheck(A,D,E) :-
   arg(14,A,C),
   arg(17,A,G),
   arg(29,A,B),
   retractall(user:'$aleph_local'(subst_count,_)),
   asserta(user:'$aleph_local'(subst_count,0)),
   resource_bound_call(B,C,D),
   retract(user:'$aleph_local'(subst_count,F)),
   E is F+1,
   E>G,
   !.
lazy_ccheck(_,_,A) :-
   retract(user:'$aleph_local'(subst_count,A)).


get_aleph_lit(_,_,0) :-
   !.
get_aleph_lit(B,D,A) :-
   arg(A,B,C),
   ( var(C)
   ->
     arg(A,D,C)
   ;
     arg(A,D,aleph_const(C))
   ),
   E is A-1,
   get_aleph_lit(B,D,E),
   !.


get_aleph_lits((A,C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_lits(A,B) :-
   get_aleph_lit(A,B).


get_aleph_lit(A,B) :-
   functor(A,C,D),
   functor(B,C,D),
   get_aleph_lit(A,B,D).


integrate_head_lit(C) :-
   example_saturated(A),
   split_args(A,_,_,B,_),
   integrate_args(unknown,A,B),
   match_mode(head,A),
   flatten_matched_atoms(head),
   get_ivars1(false,1,C),
   !.
integrate_head_lit([]).


match_mode(_,true) :-
   !.
match_mode(D,A) :-
   functor(A,B,C),
   functor(E,B,C),
   ( D=head
   ->
     '$aleph_global'(modeh,modeh(_,E))
   ;
     '$aleph_global'(modeb,modeb(_,E))
   ),
   split_args(E,E,G,F,H),
   ( D=head
   ->
     update_atoms(A,mode(E,F,G,H))
   ;
     update_atoms(A,mode(E,G,F,H))
   ),
   fail.
match_mode(_,_).


flatten_matched_atoms(C) :-
   setting(i,D),
   ( retract(user:'$aleph_sat'(botsize,A))
   ->
     true
   ;
     A=0
   ),
   ( retract(user:'$aleph_sat'(lastlit,B))
   ->
     true
   ;
     B=0
   ),
   ( C=head
   ->
     flatten(0,D,A,E)
   ;
     flatten(0,D,B,E)
   ),
   asserta(user:'$aleph_sat'(botsize,E)),
   ( B<E
   ->
     asserta(user:'$aleph_sat'(lastlit,E))
   ;
     asserta(user:'$aleph_sat'(lastlit,B))
   ),
   !.
flatten_matched_atoms(_).


match_body_modes((A,B)) :-
   !,
   match_mode(body,A),
   match_body_modes(B).
match_body_modes(A) :-
   match_mode(body,A).


reinstate(searchstate) :-
   !,
   retractall(user:'$aleph_global'(atoms_left,atoms_left(_,_))),
   retractall(user:'$aleph_global'(size,size(_,_))),
   ( '$aleph_global'(save,save(searchstate,atoms_left(pos,A)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(pos,A)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,atoms_left(neg,B)))
   ->
     asserta(user:'$aleph_global'(atoms_left,atoms_left(neg,B)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(pos,C)))
   ->
     asserta(user:'$aleph_global'(size,size(pos,C)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,size(neg,D)))
   ->
     asserta(user:'$aleph_global'(size,size(neg,D)))
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(noise,E)))
   ->
     set(noise,E)
   ;
     true
   ),
   ( '$aleph_global'(save,save(searchstate,set(minacc,F)))
   ->
     set(minacc,F)
   ;
     true
   ),
   retractall(user:'$aleph_global'(save,save(searchstate,_))).
reinstate(A) :-
   retract(user:'$aleph_global'(save,save(A,B))),
   !,
   ( B=unknown
   ->
     noset(A)
   ;
     set(A,B)
   ).
reinstate(_).


match_lazy_bottom1(A) :-
   call(user:A),
   match_body_modes(A),
   fail.
match_lazy_bottom1(_) :-
   flatten_matched_atoms(body).


store(searchstate) :-
   !,
   retractall(user:'$aleph_global'(save,save(searchstate,_))),
   ( '$aleph_global'(atoms_left,atoms_left(pos,A))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(pos,A))))
   ;
     true
   ),
   ( '$aleph_global'(atoms_left,atoms_left(neg,B))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,atoms_left(neg,B))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(pos,C))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(pos,C))))
   ;
     true
   ),
   ( '$aleph_global'(size,size(neg,D))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,size(neg,D))))
   ;
     true
   ),
   ( '$aleph_global'(noise,set(noise,E))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(noise,E))))
   ;
     true
   ),
   ( '$aleph_global'(minacc,set(minacc,F))
   ->
     asserta(user:'$aleph_global'(save,save(searchstate,set(minacc,F))))
   ;
     true
   ).
store(bottom) :-
   !,
   ( '$aleph_global'(store_bottom,set(store_bottom,true))
   ->
     store_bottom
   ;
     true
   ).
store(A) :-
   ( '$aleph_global'(A,set(A,B))
   ->
     true
   ;
     B=unknown
   ),
   retractall(user:'$aleph_global'(save,save(A,_))),
   asserta(user:'$aleph_global'(save,save(A,B))).


example_saturated(C) :-
   '$aleph_sat'(example,example(A,B)),
   example(A,B,C).


match_bot_lit(B,A) :-
   '$aleph_sat'(botsize,C),
   '$aleph_sat_litinfo'(A,_,B,_,_,_),
   A>=0,
   A=<C.


match_bot_lits((A,D),C,[B|E]) :-
   !,
   match_bot_lit(A,B),
   \+aleph_member(B,C),
   match_bot_lits(D,[B|C],E).
match_bot_lits(A,C,[B]) :-
   match_bot_lit(A,B),
   \+aleph_member(B,C).


get_aleph_clause((A:-true),B) :-
   !,
   get_aleph_lit(A,B).
get_aleph_clause((A:-C),(B,D)) :-
   !,
   get_aleph_lit(A,B),
   get_aleph_lits(C,D).
get_aleph_clause(A,B) :-
   get_aleph_lit(A,B).


match_lazy_bottom(A,F) :-
   once(get_aleph_clause(A,E)),
   copy_term(A,B),
   split_clause(B,C,D),
   example_saturated(C),
   store(stage),
   set(stage,saturation),
   match_lazy_bottom1(D),
   reinstate(stage),
   match_bot_lits(E,[],F).


match_bot(false,A,A,[]).
match_bot(reduction,A,C,B) :-
   match_lazy_bottom(A,B),
   get_pclause(B,[],C,_,_,_).
match_bot(saturation,A,D,C) :-
   once(get_aleph_clause(A,B)),
   match_bot_lits(B,[],C),
   get_pclause(C,[],D,_,_,_).


auto_refine(1,A,B) :-
   !,
   auto_refine(A,B).
auto_refine(A,C,D) :-
   B is A-1,
   auto_refine(B,C,E),
   (
     D=E
   ;
     auto_refine(E,D)
   ).


get_clause_prior(A,G,K-[H-pos,J-neg]) :-
   arg(5,A,B),
   arg(14,A,D),
   arg(29,A,E),
   arg(34,A,F),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     '$aleph_global'(atoms,atoms(pos,C))
   ),
   '$aleph_global'(atoms_left,atoms_left(neg,I)),
   prove(D/E/F,pos,(G:-true),C,_,H),
   prove(D/E/F,neg,(G:-true),I,_,J),
   K is H+J.


optimise(A,C) :-
   remove_redundant(A,B),
   reorder_clause(B,C).


second_rewrite_clause(sld,_,_,(A:-A)) :-
   !.
second_rewrite_clause(restricted_sld,true,(A:-B),(C:-D)) :-
   !,
   optimise((A:-B),(C:-D)).
second_rewrite_clause(_,_,A,A).


user_clause_rewrite(A,A) :-
   setting(clause_rewrite_hook,true),
   !.
user_clause_rewrite(B,C) :-
   setting(clause_rewrite_hook,A),
   prolog:call(call(user:A),B,C),
   !.


aleph_delete_all(_,[],[]).
aleph_delete_all(A,[B|C],D) :-
   A==B,
   !,
   aleph_delete_all(A,C,D).
aleph_delete_all(B,[A|C],[A|D]) :-
   aleph_delete_all(B,C,D).


aleph_ord_subtract(A,[],A) :-
   !.
aleph_ord_subtract([],_,[]) :-
   !.
aleph_ord_subtract([A|D],[B|E],F) :-
   compare(C,A,B),
   aleph_ord_subtract(C,A,D,B,E,F).


vars_in_term([],A,B) :-
   sort(A,B),
   !.
vars_in_term([A|B],C,D) :-
   var(A),
   !,
   vars_in_term(B,[A|C],D).
vars_in_term([A|D],C,F) :-
   A=..[_|B],
   !,
   vars_in_term(B,C,E),
   vars_in_term(D,E,F).
vars_in_term([_|A],B,C) :-
   vars_in_term(A,B,C).


newvars_ok(A,_,_) :-
   A is inf,
   !.
newvars_ok(H,A,B) :-
   vars_in_term([A],[],E),
   goals_to_list(B,C),
   vars_in_term(C,[],D),
   aleph_ord_subtract(D,E,F),
   length(F,G),
   G=<H.


lang_ok1([],_).
lang_ok1([B|A],G) :-
   length(A,D),
   aleph_delete_all(B,A,C),
   length(C,E),
   F is D-E+1,
   F=<G,
   lang_ok1(C,G).


get_psyms((A,D),[B/C|E]) :-
   !,
   functor(A,B,C),
   get_psyms(D,E).
get_psyms(true,[]) :-
   !.
get_psyms(A,[B/C]) :-
   functor(A,B,C).


lang_ok(A,_,_) :-
   A is inf,
   !.
lang_ok(D,A,B) :-
   get_psyms((A,B),C),
   lang_ok1(C,D).


execute_equality(A) :-
   functor(A,=,2),
   !,
   call(user:A).
execute_equality(_).


lit_redun(A,(B:-C)) :-
   !,
   lit_redun(A,(B,C)).
lit_redun(A,(B,_)) :-
   A==B,
   !.
lit_redun(B,(A,C)) :-
   !,
   execute_equality(A),
   lit_redun(B,C).
lit_redun(A,B) :-
   A==B.


check_cache(A,B,E) :-
   A\=false,
   '$aleph_search_cache'(A),
   !,
   functor(A,_,C),
   ( B=pos
   ->
     D is C-1
   ;
     D is C
   ),
   arg(D,A,E),
   nonvar(E).


extract_neg([_,A|_],A).


extract_pos([A|_],A).


clause_ok(_,_) :-
   false,
   !,
   fail.
clause_ok(_,A) :-
   extract_pos(A,B),
   extract_neg(A,C),
   E is B/ (B+C),
   setting(noise,D),
   setting(minacc,F),
   setting(minpos,G),
   (
     C>D
   ;
     E<F
   ;
     B<G
   ),
   !,
   fail.
clause_ok(A,_) :-
   prune(A),
   !,
   fail.
clause_ok(A,_) :-
   setting(language,B),
   \+lang_ok(A,B),
   !,
   fail.
clause_ok(A,_) :-
   setting(newvars,B),
   \+newvars_ok(A,B),
   !,
   fail.
clause_ok(_,_).


update_best(B,_,_,_,A,[C,_,_,E|_]/_,A) :-
   arg(13,B,D),
   arg(19,B,F),
   (
     C<D
   ;
     E is(-inf)
   ;
     E<F
   ),
   !.
update_best(B,_,_,_,A,[D|_]/_,A) :-
   arg(40,B,C),
   C> 0,
   '$aleph_search'(clauseprior,_-[E-pos,_]),
   D/E<C,
   !.
update_best(B,_,_,_,A,[D,E,_,_|_]/_,A) :-
   arg(4,B,_/C),
   C\=posonly,
   arg(17,B,F),
   arg(18,B,I),
   arg(22,B,G),
   H is D+E,
   (
     E>F
   ;
     G\=ic,
     H>0,
     D/H<I
   ),
   !.
update_best(I,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   arg(35,I,J),
   ( J=true
   ->
     retractall(user:'$aleph_search'(best,_)),
     asserta(user:'$aleph_search'(best,B)),
     asserta(user:'$aleph_search'(good,B))
   ;
     true
   ),
   update_good(A,F),
   newbest_hook(A,F,B),
   show_clause(newbest,A,F,B),
   record_clause(newbest,A,F,B),
   record_clause(good,A,F,B).
update_best(C,G,_,_,A/B,F/E,A/B) :-
   arg(35,C,D),
   ( D=true
   ->
     asserta(user:'$aleph_search'(good,E))
   ;
     true
   ),
   update_good(F,G),
   record_clause(good,F,G,E).


clause_ok(false,A,B) :-
   aleph_subset1(A,B).


compression_ok(compression,[A,_,B|_]) :-
   !,
   A-B+1>0.
compression_ok(_,_).


estimate_label(E,[D,F|A],[G,J|A]) :-
   '$aleph_global'(atoms_left,atoms_left(pos,B)),
   '$aleph_global'(atoms_left,atoms_left(neg,C)),
   interval_count(B,I),
   interval_count(C,L),
   H is D/E,
   K is F/E,
   G is integer(H*I),
   J is integer(K*L).


reset_clause_prior(A,C) :-
   arg(3,A,B),
   B=false,
   !,
   ( '$aleph_search'(clauseprior,_)
   ->
     true
   ;
     get_clause_prior(A,C,D),
     assertz(user:'$aleph_search'(clauseprior,D))
   ).
reset_clause_prior(C,A) :-
   copy_term(A,B),
   numbervars(B,0,_),
   ( '$aleph_local'(clauseprior,prior(B,D))
   ->
     true
   ;
     get_clause_prior(C,A,D),
     assertz(user:'$aleph_local'(clauseprior,prior(B,D)))
   ),
   retractall(user:'$aleph_search'(clauseprior,_)),
   assertz(user:'$aleph_search'(clauseprior,D)).


prove_examples(B,K,E,F,L,A,N,_,O,G,H,I,J,[Q,S,A,W,U]) :-
   arg(4,B,_/C),
   C=posonly,
   !,
   arg(11,B,D),
   ( D=true,
     E=true
   ->
     prove_lazy_cached(B,F,G,H,I,J),
     interval_count(I,M),
     interval_count(J,P)
   ;
     prove_pos(B,K,F,L,[M,N],O,G,I,M),
     prove_rand(B,K,F,O,H,J,P)
   ),
   find_posgain(I,Q),
   arg(16,B,V),
   arg(20,B,R),
   T is (P+ 1)/ (R+ 2),
   X is log(Q),
   S is log(T),
   U is T*V/Q,
   Y is A/Q,
   W is X-S-Y.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   qpacks:qpacks(on),
   !,
   qpacks:qpack_add(D,E),
   F=10000,
   G=1000.
prove_examples(_,_,_,_,_,C,_,(D:-E),_,A,B,A,B,[F,G,C]) :-
   setting(prefix_trees,true),
   !,
   trie_add(D,E),
   interval_count(A,F),
   interval_count(B,G).
prove_examples(D,_,_,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(10,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(D,_,true,F,_,C,_,_,_,A,B,A,B,[H,J,C]) :-
   arg(11,D,E),
   E=true,
   !,
   prove_lazy_cached(D,F,A,B,G,I),
   interval_count(G,H),
   interval_count(I,J).
prove_examples(B,F,_,G,H,A,Q,_,J,E,K,R,L,[P,M,A]) :-
   arg(3,B,C),
   (
     C=false
   ;
     C=auto
   ),
   arg(7,B,D),
   D=A,
   !,
   interval_count(E,I),
   prove_neg(B,F,G,H,[I,A],J,K,L,M),
   arg(17,B,N),
   arg(18,B,O),
   maxlength_neg_ok(N/O,G,I,M),
   prove_pos(B,F,G,H,[P,Q],J,E,R,P),
   maxlength_neg_ok(N/O,G,P,M),
   !.
prove_examples(B,C,_,D,E,A,G,_,H,I,K,J,L,[F,M,A]) :-
   prove_pos(B,C,D,E,[F,G],H,I,J,F),
   prove_neg(B,C,D,E,[F,A],H,K,L,M),
   !.


ccheck(C,(false:-A),[],[0,B|_]) :-
   ( A=true
   ->
     B is inf
   ;
     arg(11,C,D),
     ( D=false
     ->
       arg(14,C,F),
       arg(29,C,E),
       prolog:findall(G,(resource_bound_call(E,F,A),G=1),H),
       length(H,B)
     ;
       lazy_ccheck(C,A,B)
     )
   ).


rewrite_clause(C,D,A,F) :-
   user_clause_rewrite(A,B),
   discretization_rewrite(B,E),
   second_rewrite_clause(C,D,E,F).


newvars_ok((B:-C),A) :-
   !,
   ( newvars_ok(A,B,C)
   ->
     true
   ;
     p_message('outside newvars bound'),
     fail
   ).


lang_ok((B:-C),A) :-
   !,
   ( lang_ok(A,B,C)
   ->
     true
   ;
     p_message('outside language bound'),
     fail
   ).


refinement_ok(false,_) :-
   !.
refinement_ok(rls,_) :-
   !.
refinement_ok(_,false) :-
   !.
refinement_ok(_,A) :-
   (
     check_cache(A,pos,_)
   ;
     check_cache(A,neg,_)
   ),
   !,
   p_message('redundant refinement'),
   fail.
refinement_ok(_,_).


get_cache_entry(C,A,F) :-
   skolemize(A,E,B,0,_),
   length(B,D),
   C>=D+1,
   aleph_hash_term([E|B],F),
   !.
get_cache_entry(_,_,false).


skolemize((A:-B),C,G,E,F) :-
   !,
   copy_term((A:-B),(C:-D)),
   numbervars((C:-D),E,F),
   goals_to_list(D,G).
skolemize(A,B,[],C,D) :-
   copy_term(A,B),
   numbervars(B,C,D).


abandon_branch(A,C) :-
   arg(9,A,B),
   B=true,
   prune(C),
   !,
   arg(6,A,D),
   ( D>=1
   ->
     p_message(pruned)
   ;
     true
   ).


update_best_theory(B,_,_,_,A,[E,C,_,G|_]/_,A) :-
   arg(17,B,D),
   arg(18,B,F),
   arg(19,B,H),
   (
     C>D
   ;
     E/ (E+C)<F
   ;
     G<H
   ),
   !.
update_best_theory(_,F,G,H,C/_,A/B,A/B) :-
   C=[_,_,_,E|_],
   A=[_,_,_,D|_],
   D>E,
   !,
   retractall(user:'$aleph_search'(selected,_)),
   asserta(user:'$aleph_search'(selected,selected(A,F,G,H))),
   show_theory(newbest,A,F,B),
   record_theory(newbest,A,F,B),
   record_theory(good,A,F,B).
update_best_theory(_,C,_,_,A,B/_,A) :-
   show_theory(good,B,C,D),
   record_theory(good,B,C,D).


update_open_list([A|B],C,D) :-
   assertz(user:'$aleph_search_gain'(A,B,C,D)),
   recorded('$aleph_search_openlist',F,E),
   erase(E),
   uniq_insert(descending,[A|B],F,G),
   recorda('$aleph_search_openlist',G,_),
   fail.
update_open_list([_|_],_,_).


get_search_keys(bf,[_,_,C,A|_],[B|A]) :-
   !,
   B is -1*C.
get_search_keys(df,[_,_,A,B|_],[A|B]) :-
   !.
get_search_keys(_,[_,_,C,A|_],[A|B]) :-
   B is -1*C.


complete_label(posonly,_,A,A) :-
   !.
complete_label(user,D,[A,B,C],[A,B,C,E]) :-
   cost(D,[A,B,C],F),
   !,
   E is-F.
complete_label(entropy,_,[A,B,C],[A,B,C,D]) :-
   evalfn(entropy,[A,B,C],E),
   D is-E,
   !.
complete_label(gini,_,[A,B,C],[A,B,C,D]) :-
   evalfn(gini,[A,B,C],E),
   D is-E,
   !.
complete_label(D,_,[A,B,C],[A,B,C,E]) :-
   evalfn(D,[A,B,C],E),
   !.
complete_label(_,_,_,_) :-
   p_message1(error),
   p_message('incorrect evaluation/cost function'),
   fail.


theory_newvars_ok([],_).
theory_newvars_ok([_-[_,_,_,B] |C],A) :-
   newvars_ok(A,B),
   theory_newvars_ok(C,A).


theory_lang_ok([],_).
theory_lang_ok([_-[_,_,_,B] |C],A) :-
   lang_ok(A,B),
   theory_lang_ok(A,C).


nlits((_:-A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits((_,A),B) :-
   !,
   nlits(A,C),
   B is C+1.
nlits(_,1).


lazy_evaluate_refinement([],A,C,D,E,[],G) :-
   clause_to_list(A,B),
   lazy_evaluate_refinement(B,C,[],D,E,F),
   list_to_clause(F,G),
   !.
lazy_evaluate_refinement(A,_,B,C,D,E,F) :-
   A\= ([]),
   lazy_evaluate_refinement(A,B,[],C,D,E),
   get_pclause(E,[],F,_,_,_),
   !.
lazy_evaluate_refinement(A,B,_,_,_,A,B).


get_theory_gain1(C,D,B,B1,K,L,P,N,C1) :-
   ( false
   ->
     p_message('constraint violated'),
     A=true
   ;
     A=false
   ),
   A=false,
   X is B+1,
   arg(32,C,E),
   theory_lang_ok(D,E),
   arg(38,C,F),
   theory_newvars_ok(D,F),
   arg(14,C,G),
   arg(29,C,H),
   arg(34,C,I),
   prove(G/H/I,pos,(J:-J),K,Y,M),
   prove(G/H/I,neg,(J:-J),L,Z,O),
   arg(4,C,_/T),
   Q is M+ (N-O),
   R is O+ (P-M),
   length(D,S),
   U=[Q,R,S],
   complete_label(T,D,U,V),
   get_search_keys(heuristic,V,A1),
   arg(6,C,W),
   ( W>=1
   ->
     p_message(Q/R)
   ;
     true
   ),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(X,(J:-J)))
   ;
     true
   ),
   asserta_aleph_search_node(X,D,[],0,Y,Z,[],0),
   update_open_list(A1,X,V),
   update_best_theory(C,D,Y,Z,B1,V/X,C1),
   !.
get_theory_gain1(_,_,_,A,_,_,_,_,A).


record_pclauses([]).
record_pclauses([_-[_,_,_,A] |D]) :-
   split_clause(A,B,C),
   assertz(user:'$aleph_search'(pclause,pclause(B,C))),
   record_pclauses(D).


pp_dclauses(A) :-
   aleph_member(_-[_,_,_,B],A),
   pp_dclause(B),
   fail.
pp_dclauses(_) :-
   nl.


lazy_evaluate_theory([],_,_,_,[]).
lazy_evaluate_theory([A|M],D,E,F,[G|N]) :-
   A=H-[I,J,B,C],
   lazy_evaluate_refinement(B,C,D,E,F,K,L),
   G=H-[I,J,K,L],
   lazy_evaluate_theory(M,D,E,F,N).


user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,true),
   !,
   match_bot(A,B,C,D).
user_controlled_match_bot(A,B,C,D) :-
   setting(match_bottom_hook,E),
   match_bot(A,B,C,D),
   prolog:call(call(user:E),C).


get_user_refinement(auto,A,B,C,0) :-
   auto_refine(A,B,C).
get_user_refinement(user,_,A,B,0) :-
   refine(A,B).


get_refine_gain1(A,B,O,F,G,Y,Z,A1,C1) :-
   arg(23,A,C),
   B=J-[K,L,D,E],
   ( C= ([])
   ->
     H=D,
     I=E
   ;
     lazy_evaluate_refinement(D,E,C,F,G,H,I)
   ),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   X=J-[K,L,H,I],
   split_clause(I,Q,M),
   nlits(M,N),
   P is N+1,
   length_ok(A,O,P,0,T,U),
   arg(41,A,R),
   split_clause(I,Q,M),
   ( R=yap
   ->
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)),B1)
   ;
     assertz(user:'$aleph_search'(pclause,pclause(Q,M)))
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(W))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(V))),
   arg(6,A,S),
   ( S>=1
   ->
     p_message('new refinement'),
     pp_dclause(I)
   ;
     true
   ),
   once(get_gain1(A,upper,I,P,T/U,V,W,X,[],F,G,Y,Z,A1)),
   ( R=yap
   ->
     erase(B1)
   ;
     retractall(user:'$aleph_search'(pclause,_))
   ),
   C1 is V+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(C1))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A1))),
   ( discontinue_search(A,A1,C1)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.


rls_refine(clauses,_-[_,_,_,false],A) :-
   !,
   sample_clauses(1,[A]),
   \+old_move(clauses,A).
rls_refine(clauses,E,F) :-
   setting(moves,A),
   C is A,
   once(retract(user:'$aleph_search'(rls_move,B))),
   B=<C,
   p1_message(move),
   p_message(B),
   D is B+1,
   asserta(user:'$aleph_search'(rls_move,D)),
   clause_move(G,E,F),
   p_message(G),
   \+old_move(clauses,F).
rls_refine(theories,[_-[_,_,_,false]],A) :-
   !,
   once(theory_move(add_clause,[],A)),
   \+old_move(theories,A).
rls_refine(theories,D,E) :-
   setting(moves,B),
   once(retract(user:'$aleph_search'(rls_move,A))),
   A=<B,
   p1_message(move),
   p_message(A),
   C is A+1,
   asserta(user:'$aleph_search'(rls_move,C)),
   theory_move(_,D,E),
   \+old_move(theories,E).


refine_prelims(A,B) :-
   retractall(user:'$aleph_search'(last_refinement,_)),
   retractall(user:'$aleph_search'(best_refinement,_)),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(A))),
   asserta(user:'$aleph_search'(last_refinement,last_refinement(B))).


get_gain1(B,_,C,G,_,D,A,I,_,J,K,_,L,A) :-
   abandon_branch(B,C),
   !,
   E is D+1,
   arg(3,B,H),
   arg(7,B,F),
   arg(35,B,M),
   ( setting(compact_node_representation,true)
   ->
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ),
   ( F=G
   ->
     true
   ;
     ( H=false
     ->
       asserta_aleph_search_node(E,0,I,0,J,K,[],L)
     )
   ;
     true
   ),
   ( M=true
   ->
     asserta(user:'$aleph_search'(bad,E)),
     asserta(user:'$aleph_search_node'(E,C))
   ;
     true
   ).
get_gain1(B,_,D,_,_,_,A,_,_,_,_,_,_,A) :-
   arg(8,B,C),
   C=true,
   skolemize(D,E,F,0,_),
   '$aleph_search_prunecache'([E|F]),
   !,
   arg(6,B,G),
   ( G>=1
   ->
     p_message('in prune cache')
   ;
     true
   ).
get_gain1(B,V,A,R,T1/X,E,W/Y1,S1,O1,Y,Z,Q1,V1,Z1) :-
   split_clause(A,L,M),
   arg(22,B,C),
   ( C\==ic,
     false
   ->
     p_message('constraint violated'),
     D=true
   ;
     D=false
   ),
   J is E+1,
   arg(8,B,F),
   ( F=true
   ->
     arg(15,B,G),
     get_cache_entry(G,A,H)
   ;
     H=false
   ),
   arg(35,B,I),
   (
     I=true
   ;
     ( setting(compact_node_representation,true)
     ->
       asserta(user:'$aleph_search_node'(J,A))
     )
   ;
     true
   ),
   arg(3,B,K),
   refinement_ok(K,H),
   arg(32,B,N),
   lang_ok((L:-M),N),
   arg(38,B,O),
   newvars_ok((L:-M),O),
   arg(34,B,P),
   arg(37,B,Q),
   rewrite_clause(P,Q,(L:-M),(S:-T)),
   ( C=ic
   ->
     A1= ([]),
     U=[_,_,R],
     ccheck(B,(S:-T),B1,U)
   ;
     prove_examples(B,V,D,H,W,R,X,(L:-M),(S:-T),Y,Z,A1,B1,U)
   ),
   arg(4,B,I1/D1),
   arg(40,B,C1),
   (
     (
       C1> 0
     ;
       D1=wracc
     )
   ->
     reset_clause_prior(B,S)
   ;
     true
   ),
   arg(46,B,E1),
   ( E1=true
   ->
     arg(47,B,F1),
     estimate_label(F1,U,G1)
   ;
     G1=U
   ),
   complete_label(D1,A,G1,H1),
   compression_ok(D1,H1),
   get_search_keys(I1,H1,W1),
   arg(6,B,J1),
   arg(10,B,L1),
   arg(11,B,K1),
   ( J1>=1,
     K1=false,
     L1=false
   ->
     U=[M1,N1|_],
     p_message(M1/N1)
   ;
     true
   ),
   arg(7,B,R1),
   ( K=false
   ->
     get_ovars1(false,O1,P1),
     aleph_append(P1,Q1,U1)
   ;
     true
   ),
   ( R1=R,
     K=false
   ->
     true
   ;
     ( K=false
     ->
       asserta_aleph_search_node(J,O1,S1,T1/X,A1,B1,U1,V1)
     ;
       asserta_aleph_search_node(J,0,S1,T1/X,A1,B1,[],V1)
     ),
     update_open_list(W1,J,H1)
   ),
   ( I=true
   ->
     asserta(user:'$aleph_search'(label,label(J,U)))
   ;
     true
   ),
   (
     (
       K\=false,
       D=false
     ;
       arg(28,B,X1),
       clause_ok(D,X1,U1)
     )
   ->
     update_best(B,A,A1,B1,W/Y1,H1/J,Z1)
   ;
     Z1=W/Y1
   ),
   !.
get_gain1(_,_,_,_,_,_,A,_,_,_,_,_,_,A).


split_clause((A:-true),A,true) :-
   !.
split_clause((A:-B),A,C) :-
   !,
   B=C.
split_clause([A|B],A,B) :-
   !.
split_clause([A],A,[true]) :-
   !.
split_clause(A,A,true).


length_ok(A,E,H,C,F,G) :-
   arg(3,A,B),
   ( B=false
   ->
     D=C
   ;
     D=0
   ),
   ( D<E
   ->
     F=D
   ;
     F=E
   ),
   G is H+F,
   arg(7,A,I),
   G=<I,
   !.


split_ok(false,_,_) :-
   !.
split_ok(_,C,A) :-
   functor(A,B,_),
   B\= (=),
   copy_term(C/A,E/D),
   lit_redun(D,E),
   !,
   p_message('redundant literal'),
   nl,
   fail.
split_ok(_,_,_).


get_refine_gain(A,E,C/D,F,H,I,J,K,L,M,N) :-
   arg(3,A,B),
   B=rls,
   refine_prelims(C/D,E),
   rls_refine(clauses,F,G),
   get_refine_gain1(A,G,H,I,J,K,L,M,N),
   !.
get_refine_gain(A,E,C/D,F,Q,R,S,T,U,V,W) :-
   arg(3,A,B),
   B\=rls,
   refine_prelims(C/D,E),
   F=K-[L,M,_,H],
   arg(30,A,I),
   arg(43,A,G),
   get_user_refinement(B,G,H,J,_),
   user_controlled_match_bot(I,J,O,N),
   P=K-[L,M,N,O],
   get_refine_gain1(A,P,Q,R,S,T,U,V,W),
   !.
get_refine_gain(_,_,_,_,_,_,_,_,_,A,B) :-
   retract(user:'$aleph_search'(best_refinement,best_refinement(A))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(B))).


intervals_intersects([A-B|_],C,D) :-
   intervals_intersects1(A-B,C,D),
   !.
intervals_intersects([_|A],B,C) :-
   intervals_intersects(A,B,C).


intervals_intersection([],_,[]).
intervals_intersection([A-C|D],[G-B|E],F) :-
   !,
   ( A>B
   ->
     intervals_intersection([A-C|D],E,F)
   ;
     ( G>C
     ->
       intervals_intersection(D,[G-B|E],F)
     )
   ;
     ( C>B
     ->
       ( G>A
       ->
         F=[G-B|H]
       ;
         F=[A-B|H]
       ),
       intervals_intersection([A-C|D],E,H)
     )
   ;
     ( G>A
     ->
       F=[G-C|H]
     ;
       F=[A-C|H]
     ),
     intervals_intersection(D,[G-B|E],H)
   ).
intervals_intersection([_|_],[],[]).


calc_intersection(A/[D-I],B/[E-F],C/[K-M]) :-
   !,
   intervals_intersection(A,B,C),
   H is max(D,E),
   ( intervals_intersects(A,[E-F],G-_)
   ->
     true
   ;
     G=H
   ),
   ( intervals_intersects(B,[D-I],J-_)
   ->
     true
   ;
     J=H
   ),
   L is min(G,H),
   K is min(J,L),
   M is max(I,F).
calc_intersection(A/_,B,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B/_,C) :-
   !,
   intervals_intersection(A,B,C).
calc_intersection(A,B,C) :-
   intervals_intersection(A,B,C).


get_sibgain(B,C,D,A,F,G,H,I,J,K,L,M,N,O,P,Q,R,S) :-
   E is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),
   !.


get_sibpncover(J,A,F,L,N,B,K,M) :-
   '$aleph_search_node'(A,B,_,_,C,D,_,_),
   ( var(C)
   ->
     recompute_cover(E,pos,C)
   ;
     true
   ),
   ( var(D)
   ->
     recompute_cover(E,neg,D)
   ;
     true
   ),
   '$aleph_sat_litinfo'(B,_,G,_,_,_),
   \+aleph_member1(B,F),
   functor(G,H,I),
   ( aleph_member1(H/I,J)
   ->
     K=L,
     M=N
   ;
     calc_intersection(L,C,K),
     calc_intersection(N,D,M)
   ).


get_sibgain(E,_,_,_,C,D,B,A,_,_,_,_,_,_,_,_,_,A,B) :-
   (
     C>D
   ;
     discontinue_search(E,A,B)
   ),
   !.
get_sibgain(A,M,X,D,C,Z,P,Q,H,R,S,T,U,E,F,V,W,C1,D1) :-
   arg(23,A,B),
   get_sibpncover(B,C,D,E,F,G,I,J),
   lazy_evaluate([G],B,H,I,J,[K]),
   get_ivars1(false,K,L),
   ( intersects(L,M)
   ->
     O=upper
   ;
     get_ovars1(false,K,N),
     ( intersects(N,M)
     ->
       O=upper
     ;
       O=exact
     )
   ),
   get_gain(A,O,P,Q,H,R,S,T,U,K,I,J,V,W,B1,A1),
   !,
   Y is C+1,
   get_sibgain(A,M,X,D,Y,Z,A1,B1,H,R,S,T,U,E,F,V,W,C1,D1),
   !.
get_sibgain(B,C,D,E,A,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) :-
   F is A+1,
   get_sibgain(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),
   !.


get_gain(A,_,C,D,E,_,_,_,F,_,G,H,I,J,K,L) :-
   arg(3,A,B),
   B\=false,
   !,
   get_refine_gain(A,C,D,E,F,G,H,I,J,K,L).
get_gain(A,Q,T,U/V,W,E,C,I,K,B,X,Y,Z,A1,B1,C1) :-
   arg(26,A,G),
   arg(33,A,D),
   retractall(user:'$aleph_search'(covers,_)),
   retractall(user:'$aleph_search'(coversn,_)),
   get_pclause([B],C,F,_,J,M),
   split_ok(D,E,F),
   !,
   extend_clause(E,F,H),
   ( G=true
   ->
     ( redundant(H,F)
     ->
       fail
     ;
       true
     )
   ;
     true
   ),
   L is I+J,
   length_ok(A,K,L,M,R,S),
   split_clause(H,N,O),
   assertz(user:'$aleph_search'(pclause,pclause(N,O))),
   arg(6,A,P),
   ( P>=1
   ->
     pp_dclause(H)
   ;
     true
   ),
   get_gain1(A,Q,H,L,R/S,T,U/V,W,B,X,Y,Z,A1,B1),
   retractall(user:'$aleph_search'(pclause,_)),
   C1 is T+1.
get_gain(_,_,B,A,_,_,_,_,_,_,_,_,_,_,A,B).


get_ivars([],_,A,A).
get_ivars([B|E],A,C,G) :-
   get_ivars1(A,B,D),
   aleph_append(C,D,F),
   get_ivars(E,A,F,G).


get_vars_in_term([],[]).
get_vars_in_term([A|B],[A|C]) :-
   integer(A),
   !,
   get_vars_in_term(B,C).
get_vars_in_term([A|C],F) :-
   A=..[_|B],
   get_vars_in_term(B,E),
   get_vars_in_term(C,D),
   update_list(D,E,F).


get_ovars([],_,A,A).
get_ovars([B|E],A,C,G) :-
   get_ovars1(A,B,D),
   aleph_append(C,D,F),
   get_ovars(E,A,F,G).


interval_sample(B,A,E) :-
   intervals_to_list(A,C),
   aleph_rsample(B,C,D),
   list_to_intervals(D,E).


check_parents([],_,[],[]).
check_parents([A|D],C,[A|E],F) :-
   get_ivars1(false,A,B),
   aleph_subset1(B,C),
   !,
   check_parents(D,C,E,F).
check_parents([A|B],C,D,[A|E]) :-
   check_parents(B,C,D,E),
   !.


get_sample_cover(A,I,J) :-
   arg(5,A,B),
   ( B=true
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,C))
   ;
     arg(16,A,D),
     C=[1-D]
   ),
   arg(4,A,_/E),
   ( E=posonly
   ->
     '$aleph_global'(atoms_left,atoms_left(rand,F))
   ;
     arg(24,A,G),
     F=[1-G]
   ),
   arg(46,A,H),
   ( H=false
   ->
     I=C,
     J=F
   ;
     arg(47,A,K),
     interval_sample(K,C,I),
     interval_sample(K,F,J)
   ).


update_max_head_count(A,0) :-
   retractall(user:'$aleph_local'(max_head_count,_)),
   asserta(user:'$aleph_local'(max_head_count,A)),
   !.
update_max_head_count(E,A) :-
   '$aleph_search_node'(A,C,_,_,B,_,_,_),
   !,
   ( var(B)
   ->
     recompute_cover(A,pos,B)
   ;
     true
   ),
   asserta(user:'$aleph_local'(head_lit,C)),
   interval_count(B,D),
   F is A-1,
   ( D>E
   ->
     update_max_head_count(D,F)
   ;
     update_max_head_count(E,F)
   ).
update_max_head_count(B,A) :-
   C is A-1,
   update_max_head_count(B,C).


get_ovars1(false,A,B) :-
   '$aleph_sat_ovars'(A,B),
   !.
get_ovars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,_,C,_),
   get_vars(B,C,D).
get_ovars1(B,A,C) :-
   '$aleph_sat_ovars'(A,B,C),
   !.
get_ovars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,_,D,_),
   get_vars(C,D,E).


get_search_settings(A) :-
   functor(A,set,47),
   setting(nodes,B),
   arg(1,A,B),
   setting(explore,C),
   arg(2,A,C),
   setting(refineop,D),
   arg(3,A,D),
   setting(searchstrat,E),
   setting(evalfn,F),
   arg(4,A,E/F),
   ( setting(greedy,G)
   ->
     arg(5,A,G)
   ;
     arg(5,A,false)
   ),
   setting(verbosity,H),
   arg(6,A,H),
   setting(clauselength,I),
   arg(7,A,I),
   setting(caching,J),
   arg(8,A,J),
   ( setting(prune_defs,K)
   ->
     arg(9,A,K)
   ;
     arg(9,A,false)
   ),
   setting(lazy_on_cost,L),
   arg(10,A,L),
   setting(lazy_on_contradiction,M),
   arg(11,A,M),
   setting(lazy_negs,N),
   arg(12,A,N),
   setting(minpos,O),
   arg(13,A,O),
   setting(depth,P),
   arg(14,A,P),
   setting(cache_clauselength,Q),
   arg(15,A,Q),
   ( '$aleph_global'(size,size(pos,R))
   ->
     arg(16,A,R)
   ;
     arg(16,A,0)
   ),
   setting(noise,S),
   arg(17,A,S),
   setting(minacc,T),
   arg(18,A,T),
   setting(minscore,U),
   arg(19,A,U),
   ( '$aleph_global'(size,size(rand,V))
   ->
     arg(20,A,V)
   ;
     arg(20,A,0)
   ),
   setting(mingain,W),
   arg(21,A,W),
   setting(search,X),
   arg(22,A,X),
   prolog:findall(Y/Z,'$aleph_global'(lazy_evaluate,lazy_evaluate(Y/Z)),A1),
   arg(23,A,A1),
   ( '$aleph_global'(size,size(neg,B1))
   ->
     arg(24,A,B1)
   ;
     arg(24,A,0)
   ),
   setting(openlist,C1),
   arg(25,A,C1),
   setting(check_redundant,D1),
   arg(26,A,D1),
   ( '$aleph_sat'(eq,E1)
   ->
     arg(27,A,E1)
   ;
     arg(27,A,false)
   ),
   ( '$aleph_sat'(hovars,F1)
   ->
     arg(28,A,F1)
   ;
     arg(28,A,F1)
   ),
   setting(prooftime,G1),
   arg(29,A,G1),
   setting(construct_bottom,H1),
   arg(30,A,H1),
   ( get_ovars1(false,1,I1)
   ->
     arg(31,A,I1)
   ;
     arg(31,A,[])
   ),
   setting(language,J1),
   arg(32,A,J1),
   setting(splitvars,K1),
   arg(33,A,K1),
   setting(proof_strategy,L1),
   arg(34,A,L1),
   setting(portray_search,M1),
   arg(35,A,M1),
   setting(searchtime,N1),
   arg(36,A,N1),
   setting(optimise_clauses,O1),
   arg(37,A,O1),
   setting(newvars,P1),
   arg(38,A,P1),
   ( setting(rls_type,Q1)
   ->
     arg(39,A,Q1)
   ;
     arg(39,A,false)
   ),
   setting(minposfrac,R1),
   arg(40,A,R1),
   ( setting(recursion,S1)
   ->
     true
   ;
     S1=false
   ),
   prolog_type(T1),
   arg(41,A,T1),
   setting(interactive,U1),
   arg(42,A,U1),
   setting(lookahead,V1),
   arg(43,A,V1),
   ( setting(construct_features,W1)
   ->
     arg(44,A,W1)
   ;
     arg(44,A,false)
   ),
   setting(max_features,X1),
   arg(45,A,X1),
   setting(subsample,Y1),
   arg(46,A,Y1),
   setting(subsamplesize,Z1),
   arg(47,A,Z1).


get_theory_gain(C,B,A,E,H,I,N,O,P,Q) :-
   refine_prelims(A,B),
   arg(3,C,D),
   ( D=rls
   ->
     rls_refine(theories,E,G)
   ;
     fail
   ),
   arg(23,C,F),
   ( F= ([])
   ->
     J=G
   ;
     lazy_evaluate_theory(G,F,H,I,J)
   ),
   retract(user:'$aleph_search'(best_refinement,best_refinement(M))),
   retract(user:'$aleph_search'(last_refinement,last_refinement(L))),
   arg(6,C,K),
   ( K>=1
   ->
     p_message('new refinement'),
     pp_dclauses(J)
   ;
     true
   ),
   record_pclauses(J),
   get_theory_gain1(C,J,L,M,H,I,N,O,P),
   retractall(user:'$aleph_search'(pclause,_)),
   Q is L+1,
   asserta(user:'$aleph_search'(last_refinement,last_refinement(Q))),
   asserta(user:'$aleph_search'(best_refinement,best_refinement(P))),
   ( discontinue_search(C,P,Q)
   ->
     retract(user:'$aleph_search'(last_refinement,last_refinement(_))),
     retract(user:'$aleph_search'(best_refinement,best_refinement(_)))
   ;
     fail
   ),
   !.
get_theory_gain(_,_,_,_,_,_,_,_,A,B) :-
   '$aleph_search'(best_refinement,best_refinement(A)),
   '$aleph_search'(last_refinement,last_refinement(B)).


interval_count([],0).
interval_count([B-A|C],D) :-
   E is A-B+1,
   interval_count(C,F),
   D is E+F.
interval_count(A/_,B) :-
   interval_count(A,B).


get_nextbest(A,C) :-
   arg(22,A,B),
   select_nextbest(B,C).


prune_open(A,_,_) :-
   arg(25,A,B),
   C is inf,
   B=\=C,
   retractall(user:'$aleph_local'(in_beam,_)),
   asserta(user:'$aleph_local'(in_beam,0)),
   open_list(D),
   get_node(D,[G|H],I),
   '$aleph_local'(in_beam,E),
   ( E<B
   ->
     retract(user:'$aleph_local'(in_beam,E)),
     F is E+1,
     asserta(user:'$aleph_local'(in_beam,F))
   ;
     retract(user:'$aleph_search_gain'(G,H,I,_)),
     arg(6,A,J),
     ( J<1
     ->
       true
     ;
       p1_message('non-admissible removal'),
       p_message(I)
     )
   ),
   fail.
prune_open(A,_,_) :-
   arg(2,A,B),
   arg(3,A,C),
   (
     B=true
   ;
     C=rls
   ;
     C=user
   ),
   !.
prune_open(_,_/A,_/A) :-
   !.
prune_open(A,_,[_,_,_,E|_]/_) :-
   arg(4,A,_/B),
   built_in_prune(B),
   '$aleph_search_gain'(_,_,_,C),
   best_value(B,A,C,D),
   D=<E,
   retract(user:'$aleph_search_gain'(_,_,_,C)),
   fail.
prune_open(_,_,_).


discontinue_search(A,[C,_,_,E|_]/_,_) :-
   arg(39,A,B),
   B=rrr,
   arg(13,A,D),
   C>=D,
   arg(19,A,F),
   E>=F,
   !.
discontinue_search(A,_,B) :-
   arg(1,A,C),
   B>=C,
   !,
   p_message('node limit reached').
discontinue_search(A,_,_) :-
   arg(44,A,B),
   B=true,
   arg(45,A,D),
   '$aleph_search'(last_good,C),
   C>=D,
   !,
   p_message('feature limit reached').
discontinue_search(A,[_,_,_,C|_]/_,_) :-
   arg(4,A,_/B),
   B=accuracy,
   C= 1,
   !.
discontinue_search(A,E,_) :-
   arg(2,A,B),
   B=false,
   arg(4,A,_/C),
   C\=user,
   C\=posonly,
   arg(22,A,D),
   D\=ic,
   E=[F|_]/_,
   arg(16,A,F).


get_sibgains(D,A,K,L,M,N,O,P,Q,R,S,F,T,V,U) :-
   '$aleph_search_node'(A,C,_,_,_,_,_,B),
   '$aleph_search_expansion'(B,_,_,J),
   '$aleph_sat_litinfo'(C,_,_,_,_,H),
   I is A+1,
   arg(31,D,E),
   aleph_delete_list(E,F,G),
   get_sibgain(D,G,C,H,I,J,K,L,M,N,O,P,Q,R,S,F,T,U,V),
   !.


get_gains(C,A,B,_,_,_,_,_,_,_,_,_,_,A,B) :-
   discontinue_search(C,B,A),
   !.
get_gains(_,A,B,_,_,_,_,_,[],_,_,_,_,A,B) :-
   !.
get_gains(A,B,C,D,E,F,G,H,[I|P],J,K,L,M,Q,R) :-
   get_gain(A,upper,B,C,D,E,F,G,H,I,J,K,L,M,O,N),
   !,
   get_gains(A,N,O,D,E,F,G,H,P,J,K,L,M,Q,R).
get_gains(A,B,C,D,E,F,G,H,[_|I],J,K,L,M,N,O) :-
   get_gains(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),
   !.


lazy_evaluate(A,[],_,_,_,A) :-
   !.
lazy_evaluate([],_,_,_,_,[]) :-
   !.
lazy_evaluate([A|S],E,F,O,P,V) :-
   ( integer(A)
   ->
     G=true,
     '$aleph_sat_litinfo'(A,H,B,I,J,K),
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     get_pclause([A|F],[],(L:-M),_,_,_)
   ;
     G=false,
     B=A,
     H=0,
     functor(B,C,D),
     aleph_member1(C/D,E),
     !,
     split_args(A,_,I,J,R),
     K= ([]),
     list_to_clause([A|F],(L:-M))
   ),
   goals_to_clause(M,N),
   lazy_prove(pos,L,N,O),
   ( '$aleph_global'(positive_only,positive_only(C/D))
   ->
     true
   ;
     lazy_prove_negs(L,N,P)
   ),
   functor(Q,C,D),
   collect_args(I,Q),
   collect_args(J,Q),
   lazy_evaluate1(G,B,H,I,J,R,K,Q,U),
   retractall(user:'$aleph_local'(lazy_evaluate,_)),
   lazy_evaluate(S,E,F,O,P,T),
   update_list(T,U,V).
lazy_evaluate([A|B],C,D,E,F,[A|G]) :-
   lazy_evaluate(B,C,D,E,F,G).


expand(false,F,A,A,L,B,R,H,I,C,M,N,O) :-
   !,
   '$aleph_search_node'(A,J,K,B/_,D,E,C,_),
   ( var(D)
   ->
     recompute_cover(A,pos,D)
   ;
     true
   ),
   ( var(E)
   ->
     recompute_cover(A,neg,E)
   ;
     true
   ),
   arg(46,F,G),
   ( G=false
   ->
     H=D,
     I=E
   ;
     get_sample_cover(F,H,I)
   ),
   aleph_append([J],K,L),
   get_pclause(L,[],M,N,O,_),
   '$aleph_sat_litinfo'(J,_,_,_,_,P),
   intersect1(P,L,_,Q),
   check_parents(Q,C,R,_).
expand(_,E,A,A,B,C,[_],F,G,D,_,_,_) :-
   retract_aleph_search_node(A,_,B,C/_,_,_,D,_),
   get_sample_cover(E,F,G).


next_node(A) :-
   once('$aleph_search'(nextnode,A)),
   !.


theorysearch(D,L) :-
   next_node(_),
   !,
   '$aleph_global'(atoms,atoms(pos,A)),
   '$aleph_global'(atoms,atoms(neg,B)),
   interval_count(A,H),
   interval_count(B,I),
   repeat,
   next_node(C),
   '$aleph_search_node'(C,G,_,_,_,_,_,_),
   once(retract(user:'$aleph_search'(current,current(_,E,F)))),
   get_theory_gain(D,E,F,G,A,B,H,I,K,J),
   asserta(user:'$aleph_search'(current,current(0,J,K))),
   ( discontinue_search(D,K,J)
   ->
     '$aleph_search'(current,current(_,L,_))
   ;
     prune_open(D,F,K),
     get_nextbest(D,M),
     M=none,
     '$aleph_search'(current,current(_,L,_))
   ),
   !.
theorysearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


tsearch(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   prolog:alarm(D,throw(searchlimit),F),
   catch(theorysearch(A,E),searchlimit,p_message('Time limit reached')),
   remove_alarm(F).
tsearch(A,B) :-
   theorysearch(A,B).


graphsearch(A,Y) :-
   next_node(_),
   !,
   arg(3,A,B),
   arg(23,A,D),
   repeat,
   next_node(C),
   once(retract(user:'$aleph_search'(current,current(J,K,L)))),
   expand(B,A,C,S,F,P,E,G,H,Q,M,N,O),
   (
     (
       D= ([])
     ;
       B\=false
     )
   ->
     I=E
   ;
     lazy_evaluate(E,D,F,G,H,I)
   ),
   R is J+1,
   get_gains(A,K,L,F,M,N,O,P,I,G,H,Q,R,T,U),
   ( B=false
   ->
     get_sibgains(A,S,T,U,F,M,N,O,P,G,H,Q,R,V,W)
   ;
     V=T,
     W=U
   ),
   asserta(user:'$aleph_search'(current,current(R,V,W))),
   X is K+1,
   asserta(user:'$aleph_search_expansion'(R,S,X,V)),
   ( discontinue_search(A,W,V)
   ->
     '$aleph_search'(current,current(_,Y,_))
   ;
     prune_open(A,L,W),
     get_nextbest(A,Z),
     Z=none,
     '$aleph_search'(current,current(_,Y,_))
   ),
   !.
graphsearch(_,A) :-
   '$aleph_search'(current,current(_,A,_)).


search(A,E) :-
   arg(36,A,B),
   C is inf,
   B=\=C,
   D is integer(B),
   D>0,
   !,
   catch(time_bound_call(D,searchlimit,graphsearch(A,_)),searchlimit,p_message('Time limit reached')),
   '$aleph_search'(current,current(_,E,_)).
search(A,B) :-
   graphsearch(A,B).


get_modes(A/B,D) :-
   functor(C,A,B),
   prolog:findall(C,'$aleph_global'(mode,mode(_,C)),D).


get_determs(A/B,D) :-
   prolog:findall(C,'$aleph_global'(determination,determination(A/B,C)),D).


unwrap_term(B,_,A,A) :-
   var(B),
   !.
unwrap_term(A,C,D,E) :-
   functor(A,_,B),
   tp_list(A,B,C,D,E).


tp_list(_,0,_,A,A) :-
   !.
tp_list(B,A,C,F,I) :-
   arg(A,B,D),
   aleph_append([A],C,E),
   unwrap_term(D,E,[D/E|F],H),
   G is A-1,
   tp_list(B,G,C,H,I).


split_tp([],[],[],[]).
split_tp([+B/A|C],[A/B|D],E,F) :-
   !,
   split_tp(C,D,E,F).
split_tp([-B/A|C],D,[A/B|E],F) :-
   !,
   split_tp(C,D,E,F).
split_tp([(#B)/A|C],D,E,[A/B|F]) :-
   !,
   split_tp(C,D,E,F).
split_tp([_|A],B,C,D) :-
   split_tp(A,B,C,D).


tp(A,C) :-
   functor(A,_,B),
   tp_list(A,B,[],[],C).


find_mode(mode,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(mode,mode(_,A)).
find_mode(modeh,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeh,modeh(_,A)).
find_mode(modeb,B/C,A) :-
   !,
   functor(A,B,C),
   '$aleph_global'(modeb,modeb(_,A)).


integrate_term(A,B/C) :-
   '$aleph_sat_terms'(D,A,B,C),
   '$aleph_sat_vars'(_,D,_,[_|_]),
   !.
integrate_term(E,A/B) :-
   '$aleph_sat_terms'(C,D,A,B),
   (
     B=unknown
   ;
     '$aleph_sat_vars'(_,C,_,[])
   ),
   !,
   ( D=unknown
   ->
     retract(user:'$aleph_sat_terms'(C,D,A,B)),
     asserta(user:'$aleph_sat_terms'(C,E,A,B))
   ;
     true
   ).
integrate_term(_,A/B) :-
   '$aleph_sat_terms'(_,_,A,B),
   B\=unknown,
   !.
integrate_term(E,F/G) :-
   retract(user:'$aleph_sat'(lastterm,A)),
   retract(user:'$aleph_sat'(lastvar,B)),
   C is A+1,
   D is B+1,
   asserta(user:'$aleph_sat'(lastterm,C)),
   asserta(user:'$aleph_sat'(lastvar,D)),
   asserta(user:'$aleph_sat_vars'(D,C,[],[])),
   asserta(user:'$aleph_sat_terms'(C,E,F,G)).


add_eqs([],_,_,_,A,A).
add_eqs([D|G],A,C,E,B,H) :-
   ( A=0
   ->
     add_lit(B,false,C=D,[1/E],[2/E],[C],[D],F)
   ;
     add_lit(B,false,C=D,[1/E,2/E],[],[C,D],[],F)
   ),
   add_eqs(G,A,C,E,F,H).


add_eqs([],_,_,A,A).
add_eqs([C|A],B,D,E,G) :-
   add_eqs(A,B,C,D,E,F),
   add_eqs(A,B,D,F,G).


copy_var(B,A,D) :-
   gen_var(A),
   '$aleph_sat_vars'(B,C,_,_),
   asserta(user:'$aleph_sat_vars'(A,C,[],[])),
   asserta(user:'$aleph_sat_varscopy'(A,B,D)).


add_equivalences([],_,[]).
add_equivalences([A|C],D,[A/B|E]) :-
   B=[A],
   add_equivalences(C,D,E).


get_repeats([],A,A).
get_repeats([A|B],C,E) :-
   aleph_member1(A,B),
   !,
   update(C,A,D),
   get_repeats(B,D,E).
get_repeats([_|A],B,C) :-
   get_repeats(A,B,C).


intersect1(A,[],[],A) :-
   !.
intersect1([],_,[],[]) :-
   !.
intersect1([A|C],B,[A|D],E) :-
   aleph_member1(A,B),
   !,
   intersect1(C,B,D,E).
intersect1([A|B],C,D,[A|E]) :-
   intersect1(B,C,D,E).


get_argterms(not A,B,C,D) :-
   !,
   get_argterms(A,B,C,D).
get_argterms(_,[],A,A).
get_argterms(C,[A|F],D,H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   update(D,E,G),
   get_argterms(C,F,G,H).


rename_ovars([],_,_,_,A,A).
rename_ovars([A|I],F,C,G,E,L) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   aleph_delete(D/J,E,K),
   !,
   copy_var(D,H,F),
   tparg(B,G,H),
   rename_ovars(I,F,C,G,[D/[H|J] |K],L).
rename_ovars([A|F],G,C,D,H,I) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   tparg(B,D,E),
   rename_ovars(F,G,C,D,H,I).


copy_args(_,_,[]).
copy_args(B,C,[A/_|E]) :-
   tparg(A,B,D),
   tparg(A,C,D),
   copy_args(B,C,E),
   !.


get_var_equivs(E,A,C,B,D,I) :-
   sort(A,B),
   sort(C,D),
   ( E=0
   ->
     intersect1(B,C,F,_),
     get_repeats(A,F,G)
   ;
     intersect1(B,C,G,_)
   ),
   get_repeats(C,G,H),
   add_equivalences(H,E,I).


get_args(not A,B,C,D) :-
   !,
   get_args(A,B,C,D).
get_args(_,[],A,A).
get_args(C,[A|D],F,G) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,E),
   get_args(C,D,[E|F],G).


legal_term(exact,A,C,B) :-
   '$aleph_sat_terms'(D,A,B,C),
   once('$aleph_sat_vars'(_,D,_,[_|_])).
legal_term(upper,D,B,A) :-
   '$aleph_sat_terms'(E,C,A,B),
   C\=unknown,
   C<D,
   once('$aleph_sat_vars'(_,E,_,[_|_])).


update_atoms_next(A,B) :-
   '$aleph_sat_atom'(A,B),
   !.
update_atoms_next(A,B) :-
   assertz(user:'$aleph_sat_atom'(A,B)).


get_nsuccesses(A,C,D) :-
   depth_bound_call(A),
   retract(user:'$aleph_local'(last_success,B)),
   B<C,
   E is B+1,
   update_atoms(A,D),
   asserta(user:'$aleph_local'(last_success,E)),
   ( E>=C
   ->
     !
   ;
     true
   ).


reset_succ :-
   retractall(user:'$aleph_local'(last_success,_)),
   asserta(user:'$aleph_local'(last_success,0)),
   !.


update_atoms(A,mode(B,D,E,F)) :-
   discretize(on),
   discretize_atom(A,B,C),
   !,
   update_atoms_next(C,mode(B,D,E,F)).
update_atoms(A,B) :-
   update_atoms_next(A,B).


depth_bound_call(A) :-
   '$aleph_global'(depth,set(depth,B)),
   call_with_depth_bound(A,B).


get_successes(A,1,B) :-
   depth_bound_call(A),
   update_atoms(A,B),
   !.
get_successes(A,*,B) :-
   depth_bound_call(A),
   update_atoms(A,B).
get_successes(B,A,C) :-
   integer(A),
   A>1,
   reset_succ,
   get_nsuccesses(B,A,C).


construct_call(_,_,[],true) :-
   !.
construct_call(not A,B,C,D) :-
   !,
   construct_call(A,B,C,D).
construct_call(E,B,[D/C],A) :-
   !,
   A=legal_term(upper,B,C,F),
   tparg(D,E,F).
construct_call(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(upper,D,E,F),
   construct_call(B,D,G,H).


construct_incall(_,_,[],true) :-
   !.
construct_incall(not A,B,C,D) :-
   !,
   construct_incall(A,B,C,D).
construct_incall(E,B,[D/C],A) :-
   !,
   A=legal_term(exact,B,C,F),
   tparg(D,E,F).
construct_incall(B,D,[A/E|G],(C,H)) :-
   tparg(A,B,F),
   C=legal_term(exact,D,E,F),
   ( var(D)
   ->
     construct_incall(B,_,G,H)
   ;
     construct_incall(B,D,G,H)
   ).


split_args(A,D,G,H,I) :-
   functor(A,B,C),
   find_mode(mode,B/C,D),
   functor(E,B,C),
   copy_modeterms(D,E,C),
   E=A,
   tp(D,F),
   split_tp(F,G,H,I).


rm_redundant(_,0) :-
   setting(check_redundant,false),
   !.
rm_redundant(A,C) :-
   mark_redundant_lits(1,A),
   get_marked(1,A,B),
   length(B,C),
   p1_message('redundant literals'),
   p_message(C/A),
   remove_lits(B).


get_unmarked(A,B,[]) :-
   A>B,
   !.
get_unmarked(A,C,D) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,[A|D]) :-
   retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_)),
   !,
   B is A+1,
   get_unmarked(B,C,D).
get_unmarked(A,C,D) :-
   B is A+1,
   get_unmarked(B,C,D).


rm_uselesslits(_,0) :-
   setting(check_useless,false),
   !.
rm_uselesslits(D,F) :-
   '$aleph_sat'(hovars,A),
   A\= ([]),
   !,
   get_predecessors(A,[],B),
   '$aleph_sat'(hivars,C),
   mark_lits(B,C,0),
   get_unmarked(1,D,E),
   length(E,F),
   p1_message('useless literals'),
   p_message(F/D),
   remove_lits(E).
rm_uselesslits(_,0).


rm_commutative(_,_) :-
   '$aleph_global'(commutative,commutative(A/B)),
   p1_message('checking commutative literals'),
   p_message(A/B),
   functor(C,A,B),
   functor(G,A,B),
   '$aleph_sat_litinfo'(D,_,C,[E|F],I,_),
   \+'$aleph_local'(marked,D/0),
   get_vars(C,[E|F],M),
   '$aleph_sat_litinfo'(H,_,G,[K|L],J,_),
   D\=H,
   I=J,
   get_vars(G,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,H/0)),
   retract(user:'$aleph_sat_litinfo'(H,_,G,[K|L],_,_)),
   fail.
rm_commutative(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('commutative literals'),
   p_message(C/A),
   remove_lits(B).
rm_commutative(_,0).


equal_set([],[]).
equal_set([A|C],B) :-
   aleph_delete1(A,B,D),
   equal_set(C,D),
   !.


symmetric_match([],[]).
symmetric_match([aleph_const(A) |B],[aleph_const(A) |C]) :-
   !,
   symmetric_match(B,C).
symmetric_match([A|C],[B|D]) :-
   integer(A),
   integer(B),
   symmetric_match(C,D).


is_symmetric(not A,not B,C) :-
   !,
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).
is_symmetric(A,B,C) :-
   functor(A,B,C),
   '$aleph_global'(symmetric,symmetric(B/C)).


rm_symmetric(_,_) :-
   '$aleph_global'(symmetric,_),
   '$aleph_sat_litinfo'(D,_,A,[B|C],_,_),
   is_symmetric(A,G,H),
   get_vars(A,[B|C],M),
   '$aleph_sat_litinfo'(E,_,F,[K|L],_,_),
   D\=E,
   is_symmetric(F,G,H),
   A=..[_|I],
   F=..[_|J],
   symmetric_match(I,J),
   get_vars(F,[K|L],N),
   equal_set(M,N),
   asserta(user:'$aleph_local'(marked,E/0)),
   retract(user:'$aleph_sat_litinfo'(E,_,F,[K|L],_,_)),
   fail.
rm_symmetric(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('symmetric literals'),
   p_message(C/A),
   remove_lits(B).
rm_symmetric(_,0).


remove_lits(A) :-
   retract(user:'$aleph_sat_litinfo'(C,D,E,F,G,B)),
   aleph_delete_list(A,B,H),
   asserta(user:'$aleph_sat_litinfo'(C,D,E,F,G,H)),
   fail.
remove_lits(_).


rm_moderepeats(_,_) :-
   '$aleph_sat_litinfo'(B,_,A,_,_,_),
   '$aleph_sat_litinfo'(C,_,A,_,_,_),
   B>=1,
   C>B,
   retract(user:'$aleph_sat_litinfo'(C,_,A,_,_,_)),
   asserta(user:'$aleph_local'(marked,C/0)),
   fail.
rm_moderepeats(A,C) :-
   '$aleph_local'(marked,_),
   !,
   get_marked(1,A,B),
   length(B,C),
   p1_message('repeated literals'),
   p_message(C/A),
   remove_lits(B).
rm_moderepeats(_,0).


aleph_member1(A,[A|_]) :-
   !.
aleph_member1(A,[_|B]) :-
   aleph_member1(A,B).


find_last_ancestor([],_,A,_,A) :-
   !.
find_last_ancestor([A|E],B,_,D,G) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,C),
   aleph_member1(B,C),
   !,
   F is D+1,
   find_last_ancestor(E,B,D,F,G).
find_last_ancestor([_|B],C,D,A,F) :-
   E is A+1,
   find_last_ancestor(B,C,D,E,F).


extend_clause(false,A,A) :-
   !.
extend_clause((A:-C),B,(A:-D)) :-
   !,
   app_lit(B,C,D).
extend_clause(A,B,(A:-B)).


insert_lastlit(A,C,E) :-
   get_predecessors([A],B),
   aleph_delete_list(B,C,D),
   aleph_append([A|D],B,E).


aleph_remove_n(0,A,[],A) :-
   !.
aleph_remove_n(_,[],[],[]) :-
   !.
aleph_remove_n(B,[A|D],[A|E],F) :-
   C is B-1,
   aleph_remove_n(C,D,E,F).


neg_reduce([],_,_,A,_,_,_,A).
neg_reduce([A|K],C,B,J,G,E,I,O) :-
   get_pclause([A],B,D,L,_,_),
   extend_clause(C,D,F),
   prove(E,neg,F,G,N,H),
   H>I,
   !,
   M is J+1,
   neg_reduce(K,F,L,M,N,E,I,O).
neg_reduce(_,_,_,A,_,_,_,A).


p1_message(A) :-
   write('['),
   write(A),
   write('] ').


get_marked(A,B,[]) :-
   A>B,
   !.
get_marked(A,C,[A|D]) :-
   retract(user:'$aleph_local'(marked,A/_)),
   !,
   ( retract(user:'$aleph_sat_litinfo'(A,_,_,_,_,_))
   ->
     true
   ;
     true
   ),
   B is A+1,
   get_marked(B,C,D).
get_marked(A,C,D) :-
   B is A+1,
   get_marked(B,C,D).


neg_reduce([A|B],E,I,F,G) :-
   get_pclause([A],[],C,D,_,_),
   neg_reduce(B,C,D,2,E,F,G,H),
   H\=I,
   !,
   J is H-1,
   aleph_remove_n(J,[A|B],M,[L|K]),
   mark_lits(K),
   insert_lastlit(L,M,N),
   neg_reduce(N,E,H,F,G).
neg_reduce(_,_,_,_,_).


get_litnums(A,B,[]) :-
   A>B,
   !.
get_litnums(A,C,[A|D]) :-
   '$aleph_sat_litinfo'(A,_,_,_,_,_),
   !,
   B is A+1,
   get_litnums(B,C,D).
get_litnums(A,C,D) :-
   B is A+1,
   get_litnums(B,C,D).


rm_nreduce(A,I) :-
   setting(nreduce_bottom,true),
   !,
   get_litnums(1,A,B),
   '$aleph_global'(atoms,atoms(neg,C)),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   setting(noise,G),
   neg_reduce(B,C,A,D/E/F,G),
   get_marked(1,A,H),
   length(H,I),
   p1_message('negative-based removal'),
   p_message(I/A).
rm_nreduce(_,0).


get_ivars1(false,A,B) :-
   '$aleph_sat_ivars'(A,B),
   !.
get_ivars1(false,A,D) :-
   !,
   '$aleph_sat_litinfo'(A,_,B,C,_,_),
   get_vars(B,C,D).
get_ivars1(B,A,C) :-
   '$aleph_sat_ivars'(A,B,C),
   !.
get_ivars1(B,A,E) :-
   '$aleph_sat_litinfo'(A,B,_,C,D,_,_),
   get_vars(C,D,E).


get_predecessors([],[]).
get_predecessors([A|E],H) :-
   ( A=1
   ->
     C= ([])
   ;
     get_ivars1(false,A,B),
     get_predecessors(B,[],C)
   ),
   get_predecessors(C,D),
   update_list(C,D,G),
   get_predecessors(E,F),
   update_list(F,G,H).


aleph_subset1([],_).
aleph_subset1([A|C],B) :-
   aleph_member1(A,B),
   !,
   aleph_subset1(C,B).


get_pclause([A],B,D,C,E,F) :-
   !,
   get_pclause1([A],B,C,D,E,F).
get_pclause([A|C],B,G,E,J,F) :-
   get_pclause1([A],B,D,H,K,_),
   get_pclause1(C,D,E,I,L,F),
   G= (H:-I),
   J is K+L.


mark_redundant_lits(A,B) :-
   A>B,
   !.
mark_redundant_lits(A,D) :-
   get_pclause([A],[],B,_,_,_),
   redundant(bottom,B),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   C is A+1,
   mark_redundant_lits(C,D).
mark_redundant_lits(A,C) :-
   B is A+1,
   mark_redundant_lits(B,C).


mark_floating_lits(A,B) :-
   A>B,
   !.
mark_floating_lits(A,E) :-
   '$aleph_sat_litinfo'(A,_,_,_,B,C),
   B\= ([]),
   (
     C= ([])
   ;
     C=[A]
   ),
   !,
   asserta(user:'$aleph_local'(marked,A/0)),
   D is A+1,
   mark_floating_lits(D,E).
mark_floating_lits(A,C) :-
   B is A+1,
   mark_floating_lits(B,C).


get_predecessors([],A,A).
get_predecessors([A|D],C,F) :-
   '$aleph_sat_vars'(A,_,_,B),
   update_list(B,C,E),
   get_predecessors(D,E,F).


get_predicates([],_,[]).
get_predicates([A|F],E,[A|G]) :-
   '$aleph_sat_litinfo'(A,_,B,C,_,[]),
   get_vars(B,C,D),
   aleph_subset1(D,E),
   !,
   get_predicates(F,E,G).
get_predicates([_|A],B,C) :-
   get_predicates(A,B,C).


mark_lit(A,B,G,J,H,I) :-
   retract(user:'$aleph_sat_litinfo'(A,_,C,D,E,F)),
   asserta(user:'$aleph_local'(marked,A/B)),
   asserta(user:'$aleph_sat_litinfo'(A,B,C,D,E,F)),
   ( G=false
   ->
     H= ([]),
     I=J
   ;
     get_vars(C,E,K),
     update_list(K,J,I),
     get_predicates(F,I,L),
     mark_lits(L,B,false,[],_,J,_),
     get_vars(C,D,M),
     get_predecessors(M,[],H)
   ).


aleph_delete_list([],A,A).
aleph_delete_list([A|C],B,E) :-
   aleph_delete(A,B,D),
   !,
   aleph_delete_list(C,D,E).
aleph_delete_list([_|A],B,C) :-
   aleph_delete_list(A,B,C).


mark_lits([],_,_,A,A,B,B).
mark_lits([A|H],B,D,G,J,E,L) :-
   retract(user:'$aleph_local'(marked,A/C)),
   !,
   ( B<C
   ->
     mark_lit(A,B,D,E,F,K),
     update_list(F,G,I),
     mark_lits(H,B,D,I,J,K,L)
   ;
     asserta(user:'$aleph_local'(marked,A/C)),
     mark_lits(H,B,D,G,J,E,L)
   ).
mark_lits([A|G],B,C,F,I,D,K) :-
   mark_lit(A,B,C,D,E,J),
   !,
   update_list(E,F,H),
   mark_lits(G,B,C,H,I,J,K).
mark_lits([_|A],B,C,D,E,F,G) :-
   mark_lits(A,B,C,D,E,F,G).


mark_lits([],_,_).
mark_lits(A,C,B) :-
   mark_lits(A,B,true,[],D,C,F),
   aleph_delete_list(A,D,E),
   G is B+1,
   mark_lits(E,F,G).


mark_lits(A) :-
   aleph_member(B,A),
   asserta(user:'$aleph_local'(marked,B/0)),
   fail.
mark_lits(_).


aleph_append(A,[],A).
aleph_append(B,[A|C],[A|D]) :-
   aleph_append(B,C,D).


update_generators :-
   prolog:findall(A,('$aleph_sat_litinfo'(A,_,_,[],_,_),A>1),B),
   B\= ([]),
   !,
   retract(user:'$aleph_sat_litinfo'(1,D,E,F,G,C)),
   aleph_append(C,B,H),
   asserta(user:'$aleph_sat_litinfo'(1,D,E,F,G,H)).
update_generators.


update_dependents(_,[]).
update_dependents(C,[A|I]) :-
   retract(user:'$aleph_sat_litinfo'(A,D,E,F,G,B)),
   update(B,C,H),
   asserta(user:'$aleph_sat_litinfo'(A,D,E,F,G,H)),
   update_dependents(C,I).


update([],A,[A]).
update([A|B],A,[A|B]) :-
   !.
update([A|B],C,[A|D]) :-
   update(B,C,D).


gen_nlitnum(A) :-
   retract(user:'$aleph_sat'(lastnlit,B)),
   !,
   A is B-1,
   asserta(user:'$aleph_sat'(lastnlit,A)).
gen_nlitnum(-1) :-
   asserta(user:'$aleph_sat'(lastnlit,-1)).


update_lit(A,true,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,not B,C,D,E),
   !.
update_lit(A,false,B,C,D,E) :-
   '$aleph_sat_litinfo'(A,0,B,C,D,E),
   !.
update_lit(A,B,C,D,E,F) :-
   gen_nlitnum(A),
   add_litinfo(A,B,C,D,E,F),
   get_vars(C,D,G),
   get_vars(C,E,I),
   assertz(user:'$aleph_sat_ivars'(A,H,G)),
   assertz(user:'$aleph_sat_ovars'(A,H,I)),
   !.


add_litinfo(A,true,B,C,D,E) :-
   !,
   assertz(user:'$aleph_sat_litinfo'(A,0,not B,C,D,E)).
add_litinfo(A,_,B,C,D,E) :-
   assertz(user:'$aleph_sat_litinfo'(A,0,B,C,D,E)).


update_oterms(_,[],A,A).
update_oterms(C,[A|H],G,J) :-
   retract(user:'$aleph_sat_vars'(A,D,E,B)),
   update(B,C,F),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_list(E,G,I),
   update_oterms(C,H,I,J).


update_iterms(_,[]).
update_iterms(C,[A|G]) :-
   retract(user:'$aleph_sat_vars'(A,D,B,F)),
   update(B,C,E),
   asserta(user:'$aleph_sat_vars'(A,D,E,F)),
   update_dependents(C,F),
   update_iterms(C,G).


insert_eqs([],_,A,A).
insert_eqs([A/C|G],D,F,I) :-
   '$aleph_sat_vars'(A,B,_,_),
   '$aleph_sat_terms'(B,_,_,E),
   add_eqs(C,D,E,F,H),
   insert_eqs(G,D,H,I).


add_lit(A,C,D,F,G,_,_,A) :-
   setting(construct_bottom,B),
   (
     B=false
   ;
     B=reduction
   ),
   ( C=true
   ->
     E= (not D)
   ;
     E=D
   ),
   '$aleph_sat_litinfo'(_,0,E,F,G,_),
   !.
add_lit(B,E,F,G,H,C,D,A) :-
   A is B+1,
   update_iterms(A,C),
   update_oterms(A,D,[],I),
   add_litinfo(A,E,F,G,H,I),
   assertz(user:'$aleph_sat_ivars'(A,C)),
   assertz(user:'$aleph_sat_ovars'(A,D)),
   !.


split_vars(D,A,B,C,O,K,G,I,L) :-
   setting(splitvars,true),
   !,
   get_args(A,B,[],E),
   get_args(A,C,[],F),
   get_var_equivs(D,E,F,G,J,H),
   ( H= ([])
   ->
     I=J,
     K=A,
     L=H
   ;
     functor(A,M,N),
     functor(K,M,N),
     copy_args(A,K,B),
     copy_args(A,K,O),
     rename_ovars(C,D,A,K,H,L),
     get_argterms(K,C,[],I)
   ).
split_vars(_,A,B,D,_,A,C,E,[]) :-
   get_vars(A,B,C),
   get_vars(A,D,E).


rename(_,[],_,A,A) :-
   !.
rename(0,_,_,_,_) :-
   !.
rename(A,D,I,B,F) :-
   arg(A,B,C),
   aleph_member(C/E,D),
   !,
   aleph_member(G,E),
   arg(A,F,G),
   H is A-1,
   rename(H,D,[C/G|I],B,F).
rename(A,H,D,B,E) :-
   arg(A,B,C),
   ( aleph_member(C/F,D)
   ->
     arg(A,E,F)
   ;
     arg(A,E,C)
   ),
   G is A-1,
   rename(G,H,D,B,E).


update_list([],A,A).
update_list([B|C],A,E) :-
   update(A,B,D),
   !,
   update_list(C,D,E).


aleph_delete(A,[A|B],B).
aleph_delete(B,[A|C],[A|D]) :-
   aleph_delete(B,C,D).


get_equivs(A,[]) :-
   A<0,
   !.
get_equivs(A,B) :-
   '$aleph_sat_varsequiv'(A,B),
   !.
get_equivs(A,C) :-
   B is A-1,
   get_equivs(B,C).


update_equiv_lists([],A,A) :-
   !.
update_equiv_lists([A/C|E],B,H) :-
   aleph_delete(A/D,B,G),
   !,
   update_list(C,D,F),
   update_equiv_lists(E,[A/F|G],H).
update_equiv_lists([B|A],C,D) :-
   update_equiv_lists(A,[B|C],D).


update_equivs([],_) :-
   !.
update_equivs(B,A) :-
   retract(user:'$aleph_sat_varsequiv'(A,C)),
   !,
   update_equiv_lists(B,C,D),
   asserta(user:'$aleph_sat_varsequiv'(A,D)).
update_equivs(C,A) :-
   B is A-1,
   get_equivs(B,D),
   update_equiv_lists(C,D,E),
   asserta(user:'$aleph_sat_varsequiv'(A,E)).


intersects(A,C) :-
   aleph_member(B,A),
   aleph_member1(B,C),
   !.


tparg([A],B,C) :-
   !,
   arg(A,B,C).
tparg([A|C],B,E) :-
   arg(A,B,D),
   tparg(C,D,E).


flatten_consts([],_,_).
flatten_consts([A/_|E],B,C) :-
   tparg(A,B,D),
   tparg(A,C,aleph_const(D)),
   flatten_consts(E,B,C).


flatten_vars([],_,_,[]).
flatten_vars([A/D|H],B,G,[E|I]) :-
   tparg(A,B,C),
   '$aleph_sat_terms'(F,_,C,D),
   '$aleph_sat_vars'(E,F,_,_),
   \+'$aleph_sat_varscopy'(E,_,_),
   tparg(A,G,E),
   flatten_vars(H,B,G,I).


copy_modeterms(_,_,0) :-
   !.
copy_modeterms(B,F,A) :-
   arg(A,B,C),
   nonvar(C),
   functor(C,D,E),
   \+ (D= (+);D= (-);D= (#)),
   !,
   functor(G,D,E),
   arg(A,F,G),
   copy_modeterms(C,G,E),
   H is A-1,
   copy_modeterms(B,F,H).
copy_modeterms(B,C,A) :-
   D is A-1,
   copy_modeterms(B,C,D).


add_new_lit(G,B,A,L,M,Q) :-
   arg(1,A,E),
   functor(B,C,D),
   functor(F,C,D),
   once(copy_modeterms(E,F,D)),
   arg(2,A,H),
   arg(3,A,I),
   arg(4,A,J),
   split_vars(G,B,H,I,J,F,N,O,K),
   update_equivs(K,G),
   add_lit(L,M,F,H,I,N,O,P),
   insert_eqs(K,G,P,Q),
   !.


in_path(B) :-
   '$aleph_sat'(hovars,A),
   !,
   (
     A= ([])
   ;
     B= ([])
   ;
     intersects(A,B)
   ).
in_path(_).


get_vars(not A,B,C) :-
   !,
   get_vars(A,B,C).
get_vars(_,[],[]).
get_vars(C,[A|E],H) :-
   ( A=B/_
   ->
     true
   ;
     B=A
   ),
   tparg(B,C,D),
   get_vars_in_term([D],G),
   get_vars(C,E,F),
   update_list(F,G,H).


apply_equivs(A,B,D,E) :-
   get_equivs(A,C),
   rename(B,C,[],D,E).


flatten_lit(E,mode(A,D,G,I),B,F,H) :-
   functor(A,_,C),
   once(copy_modeterms(A,B,C)),
   flatten_vars(D,E,B,F),
   flatten_vars(G,E,B,H),
   flatten_consts(I,E,B).


flatten_lits(A,J,C,N,F,B,_) :-
   functor(A,D,E),
   asserta(user:'$aleph_local'(flatten_lits,B)),
   H is C-1,
   functor(G,D,E),
   flatten_lit(A,F,G,_,_),
   functor(I,D,E),
   apply_equivs(H,E,G,I),
   retract(user:'$aleph_local'(flatten_lits,M)),
   ( J=true
   ->
     arg(3,F,K),
     get_vars(I,K,L),
     ( in_path(L)
     ->
       add_new_lit(C,I,F,M,N,O)
     ;
       O=M
     )
   ;
     add_new_lit(C,I,F,M,N,O)
   ),
   asserta(user:'$aleph_local'(flatten_lits,O)),
   fail.
flatten_lits(_,_,_,_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_lits,A)).


integrate_args(_,_,[]).
integrate_args(C,B,[A/E|G]) :-
   tparg(A,B,D),
   integrate_term(C,D/E),
   ( retract(user:'$aleph_sat_terms'(F,C,D,unknown))
   ->
     asserta(user:'$aleph_sat_terms'(F,C,D,E))
   ;
     true
   ),
   integrate_args(C,B,G).


flatten_atom(B,F,C,H,A,I,J) :-
   arg(3,A,D),
   arg(4,A,E),
   integrate_args(B,C,D),
   integrate_args(B,C,E),
   ( B=F
   ->
     G=true
   ;
     G=false
   ),
   flatten_lits(C,G,B,H,A,I,J).


aleph_member(A,[A|_]).
aleph_member(A,[_|B]) :-
   aleph_member(A,B).


aleph_rpermute(A,C) :-
   length(A,B),
   aleph_rpermute(A,B,C).


flatten_atoms(true,H,I,L) :-
   prolog:findall(A-B,retract(user:'$aleph_sat_atom'(A,B)),C),
   aleph_rpermute(C,D),
   aleph_member(E-J,D),
   retract(user:'$aleph_local'(flatten_num,K)),
   ( E= (not F)
   ->
     G=true
   ;
     F=E,
     G=false
   ),
   flatten_atom(H,I,F,G,J,K,L),
   asserta(user:'$aleph_local'(flatten_num,L)),
   fail.
flatten_atoms(false,D,E,H) :-
   repeat,
   retract(user:'$aleph_sat_atom'(A,F)),
   retract(user:'$aleph_local'(flatten_num,G)),
   ( A= (not B)
   ->
     C=true
   ;
     B=A,
     C=false
   ),
   flatten_atom(D,E,B,C,F,G,H),
   asserta(user:'$aleph_local'(flatten_num,H)),
   ( '$aleph_sat_atom'(_,_)
   ->
     fail
   ;
     retract(user:'$aleph_local'(flatten_num,H))
   ),
   !.
flatten_atoms(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


flatten(C,D,A,E) :-
   retractall(user:'$aleph_local'(flatten_num,_)),
   asserta(user:'$aleph_local'(flatten_num,A)),
   '$aleph_sat_atom'(_,_),
   !,
   ( setting(permute_bottom,B)
   ->
     true
   ;
     B=false
   ),
   flatten_atoms(B,C,D,E).
flatten(_,_,_,A) :-
   retract(user:'$aleph_local'(flatten_num,A)),
   !.


gen_layer(A/B,J) :-
   ( A/B= (not)/1
   ->
     '$aleph_global'(modeb,modeb(H,not C)),
     functor(C,D,E),
     functor(F,D,E),
     once(copy_modeterms(C,F,E)),
     G= (not F)
   ;
     functor(C,A,B),
     functor(G,A,B),
     '$aleph_global'(modeb,modeb(H,C)),
     once(copy_modeterms(C,G,B))
   ),
   split_args(C,C,I,Q,R),
   ( I= ([])
   ->
     N=true,
     P=true
   ;
     aleph_delete(L/M,I,O),
     K is J-1,
     construct_incall(G,K,[L/M],N),
     construct_call(G,J,O,P)
   ),
   call(user:N),
   call(user:P),
   aleph_background_predicate(G),
   get_successes(G,H,mode(C,I,Q,R)),
   fail.
gen_layer(_,_).


get_atoms1([],_,_,A,A).
get_atoms1([A|E],B,C,D,G) :-
   gen_layer(A,B),
   flatten(B,C,D,F),
   get_atoms1(E,B,C,F,G).


get_atoms([],_,_,A,A) :-
   !.
get_atoms(D,A,B,E,H) :-
   A=<B,
   C is A-1,
   '$aleph_sat_terms'(_,C,_,_),
   !,
   get_atoms1(D,A,B,E,G),
   F is A+1,
   get_atoms(D,F,B,G,H).
get_atoms(_,_,_,A,A).

:- dynamic '$aleph_determination'/2.


:- dynamic '$aleph_has_ivar'/4.


:- dynamic '$aleph_has_ovar'/4.


:- dynamic '$aleph_has_vars'/3.


:- dynamic '$aleph_link_vars'/2.



dec1([],[]).
dec1([A|C],B) :-
   ( A==0
   ->
     B= ([])
   ;
     ( A>0
     ->
       C=[D|E],
       B=[A-D|F],
       dec1(E,F)
     )
   ;
     G is-A,
     B=[G-G|F],
     dec1(C,F)
   ).


zeros(0,[]) :-
   !.
zeros(A,[0|C]) :-
   B is A-1,
   zeros(B,C).


fill_rle(A,D) :-
   ( A<8
   ->
     B=A
   ;
     ( A<256
     ->
       B is 2^ (msb(A-1)+1)
     )
   ;
     B is 256* ((A-1)div 256+1)
   ),
   C is B-A,
   zeros(C,D).


c1([],A,B,A,B).
c1([A-A|D],[C|E],B,G,H) :-
   !,
   F is B+1,
   C is-A,
   c1(D,E,F,G,H).
c1([A-B|D],[A,B|E],C,G,H) :-
   F is C+2,
   c1(D,E,F,G,H).


prove(_,_,_,[],[],0).
prove(A,B,C,[D|E],H,I) :-
   index_prove(A,B,C,D,G,J),
   prove(A,B,C,E,F,K),
   aleph_append(F,G,H),
   I is J+K.


recompute_cover(A,pos,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,E),
   setting(prooftime,F),
   setting(proof_strategy,G),
   ( setting(greedy,true)
   ->
     '$aleph_global'(atoms_left,atoms_left(pos,D))
   ;
     '$aleph_global'(atoms,atoms(pos,D))
   ),
   prove(E/F/G,pos,C,D,H,_).
recompute_cover(A,neg,H) :-
   '$aleph_search_node'(A,B),
   ( B= (_:-_)
   ->
     C=B
   ;
     C= (B:-true)
   ),
   setting(depth,D),
   setting(prooftime,E),
   setting(proof_strategy,F),
   '$aleph_global'(atoms_left,atoms_left(neg,G)),
   prove(D/E/F,neg,C,G,H,_).


retractall_aleph_search_node :-
   eraseall('$aleph_search_node').


retract_aleph_search_node(A,B,C,D,E,F,G,H) :-
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),I),
   erase(I).


uncompact_rle(A,C) :-
   A=..[cov|B],
   dec1(B,C).


compact_rle(A,D) :-
   c1(A,E,0,C,B),
   fill_rle(B,C),
   D=..[cov|E].


asserta_aleph_search_node(A,B,C,D,_,_,E,F) :-
   setting(compact_node_representation,true),
   !,
   recorda('$aleph_search_node',a(A,B,C,D,_,_,E,F),_).
asserta_aleph_search_node(C,D,E,F,A,B,I,J) :-
   compact_rle(A,G),
   compact_rle(B,H),
   recorda('$aleph_search_node',a(C,D,E,F,G,H,I,J),_).


'$aleph_search_node'(A,B,C,D,E,F,G,H) :-
   setting(compact_node_representation,true),
   !,
   recorded('$aleph_search_node',a(A,B,C,D,E,F,G,H),_).
'$aleph_search_node'(A,B,C,D,H,J,E,F) :-
   recorded('$aleph_search_node',a(A,B,C,D,G,I,E,F),_),
   uncompact_rle(G,H),
   uncompact_rle(I,J).

:- dynamic '$aleph_optimise_keys'/0.

'$aleph_optimise_keys'.

:- dynamic '$aleph_search_node'/2.


:- dynamic '$aleph_search_gain'/4.


:- dynamic '$aleph_search_expansion'/4.


:- dynamic '$aleph_search_seen'/2.


:- dynamic '$aleph_search'/2.


:- dynamic '$aleph_search_prunecache'/1.


:- dynamic '$aleph_search_cache'/1.


:- dynamic '$aleph_sat_litinfo'/6.

'$aleph_sat_litinfo'(422,0,student(74),[[1]/person],[],[]).
'$aleph_sat_litinfo'(421,0,student(77),[[1]/person],[],[]).
'$aleph_sat_litinfo'(420,0,student(79),[[1]/person],[],[]).
'$aleph_sat_litinfo'(419,0,student(80),[[1]/person],[],[]).
'$aleph_sat_litinfo'(418,0,student(81),[[1]/person],[],[]).
'$aleph_sat_litinfo'(417,0,student(82),[[1]/person],[],[]).
'$aleph_sat_litinfo'(416,0,student(83),[[1]/person],[],[]).
'$aleph_sat_litinfo'(415,0,student(84),[[1]/person],[],[]).
'$aleph_sat_litinfo'(414,0,student(85),[[1]/person],[],[]).
'$aleph_sat_litinfo'(413,0,student(86),[[1]/person],[],[]).
'$aleph_sat_litinfo'(412,0,student(87),[[1]/person],[],[]).
'$aleph_sat_litinfo'(411,0,student(88),[[1]/person],[],[]).
'$aleph_sat_litinfo'(410,0,student(89),[[1]/person],[],[]).
'$aleph_sat_litinfo'(409,0,student(90),[[1]/person],[],[]).
'$aleph_sat_litinfo'(408,0,student(91),[[1]/person],[],[]).
'$aleph_sat_litinfo'(407,0,professor(76),[[1]/person],[],[]).
'$aleph_sat_litinfo'(406,0,professor(78),[[1]/person],[],[]).
'$aleph_sat_litinfo'(405,0,ta(93,74,5),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(383,0,yearsinprogram(74,70),[[1]/person],[[2]/number],[315,319,320,322,327,331,332,336,337,338,339,341,345,349]).
'$aleph_sat_litinfo'(382,0,yearsinprogram(77,69),[[1]/person],[[2]/number],[316,321,322,323,324,325,333,337,340,341,342,343,346,350]).
'$aleph_sat_litinfo'(381,0,yearsinprogram(79,10),[[1]/person],[[2]/number],[56,57,325,329,330,331,335,339,343,347,348,349,350,351]).
'$aleph_sat_litinfo'(380,0,yearsinprogram(80,94),[[1]/person],[[2]/number],[]).
'$aleph_sat_litinfo'(379,0,yearsinprogram(86,71),[[1]/person],[[2]/number],[314,318,319,321,326,330,332,333,334,335,336,340,344,348]).
'$aleph_sat_litinfo'(378,0,yearsinprogram(87,71),[[1]/person],[[2]/number],[314,318,319,321,326,330,332,333,334,335,336,340,344,348]).
'$aleph_sat_litinfo'(377,0,yearsinprogram(88,10),[[1]/person],[[2]/number],[56,57,325,329,330,331,335,339,343,347,348,349,350,351]).
'$aleph_sat_litinfo'(376,0,tempadvisedby(74,2),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(375,0,tempadvisedby(79,15),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(374,0,tempadvisedby(86,18),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(373,0,tempadvisedby(87,16),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(372,0,phase(74,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(371,0,phase(77,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(370,0,phase(79,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(369,0,phase(80,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(368,0,phase(86,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(367,0,phase(87,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(366,0,phase(88,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(365,0,phase(74,67),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(364,0,phase(77,66),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(363,0,phase(79,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(362,0,phase(80,66),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(361,0,phase(86,67),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(360,0,phase(87,67),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(359,0,phase(88,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(357,0,taughtby(93,76,5),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(355,0,taughtby(92,76,5),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(351,0,diff(10,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(350,0,diff(10,69),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(349,0,diff(10,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(348,0,diff(10,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(347,0,diff(68,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(346,0,diff(68,69),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(345,0,diff(68,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(344,0,diff(68,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(343,0,diff(69,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(342,0,diff(69,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(341,0,diff(69,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(340,0,diff(69,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(339,0,diff(70,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(338,0,diff(70,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(337,0,diff(70,69),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(336,0,diff(70,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(335,0,diff(71,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(334,0,diff(71,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(333,0,diff(71,69),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(332,0,diff(71,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(331,0,geq(10,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(330,0,geq(10,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(329,0,geq(68,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(328,0,geq(68,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(327,0,geq(68,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(326,0,geq(68,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(325,0,geq(69,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(324,0,geq(69,68),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(323,0,geq(69,69),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(322,0,geq(69,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(321,0,geq(69,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(320,0,geq(70,70),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(319,0,geq(70,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(318,0,geq(71,71),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(317,0,geq(68,aleph_const(4)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(316,0,geq(69,aleph_const(6)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(315,0,geq(70,aleph_const(2)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(314,0,geq(71,aleph_const(1)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(277,0,courselevel(41,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(276,0,courselevel(42,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(275,0,courselevel(43,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(274,0,courselevel(44,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(273,0,courselevel(45,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(272,0,courselevel(47,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(271,0,courselevel(48,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(270,0,courselevel(49,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(269,0,courselevel(51,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(268,0,courselevel(53,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(267,0,courselevel(54,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(266,0,courselevel(56,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(265,0,courselevel(57,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(264,0,courselevel(58,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(263,0,courselevel(59,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(262,0,courselevel(60,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(261,0,courselevel(61,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(260,0,courselevel(72,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(259,0,courselevel(73,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(258,0,courselevel(41,29),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(257,0,courselevel(42,29),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(256,0,courselevel(43,28),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(255,0,courselevel(44,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(254,0,courselevel(45,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(253,0,courselevel(47,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(252,0,courselevel(48,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(251,0,courselevel(49,29),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(250,0,courselevel(51,28),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(249,0,courselevel(53,28),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(248,0,courselevel(54,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(247,0,courselevel(56,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(246,0,courselevel(57,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(245,0,courselevel(58,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(244,0,courselevel(59,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(243,0,courselevel(60,28),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(242,0,courselevel(61,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(241,0,courselevel(72,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(240,0,courselevel(73,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(194,0,student(31),[[1]/person],[],[]).
'$aleph_sat_litinfo'(193,0,student(32),[[1]/person],[],[]).
'$aleph_sat_litinfo'(192,0,student(33),[[1]/person],[],[]).
'$aleph_sat_litinfo'(191,0,student(34),[[1]/person],[],[]).
'$aleph_sat_litinfo'(190,0,student(35),[[1]/person],[],[]).
'$aleph_sat_litinfo'(189,0,student(36),[[1]/person],[],[]).
'$aleph_sat_litinfo'(188,0,student(37),[[1]/person],[],[]).
'$aleph_sat_litinfo'(187,0,student(38),[[1]/person],[],[]).
'$aleph_sat_litinfo'(186,0,student(39),[[1]/person],[],[]).
'$aleph_sat_litinfo'(185,0,student(40),[[1]/person],[],[]).
'$aleph_sat_litinfo'(184,0,professor(15),[[1]/person],[],[]).
'$aleph_sat_litinfo'(183,0,professor(16),[[1]/person],[],[]).
'$aleph_sat_litinfo'(182,0,professor(18),[[1]/person],[],[]).
'$aleph_sat_litinfo'(181,0,professor(21),[[1]/person],[],[]).
'$aleph_sat_litinfo'(180,0,professor(24),[[1]/person],[],[]).
'$aleph_sat_litinfo'(179,0,professor(25),[[1]/person],[],[]).
'$aleph_sat_litinfo'(178,0,professor(26),[[1]/person],[],[]).
'$aleph_sat_litinfo'(177,0,professor(27),[[1]/person],[],[]).
'$aleph_sat_litinfo'(144,0,tempadvisedby(31,27),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(143,0,tempadvisedby(33,25),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(142,0,tempadvisedby(37,18),[[1]/person,[2]/person],[],[]).
'$aleph_sat_litinfo'(141,0,phase(31,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(140,0,phase(33,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(139,0,phase(37,aleph_const(pre_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(138,0,phase(38,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(137,0,phase(39,aleph_const(post_generals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(136,0,phase(40,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(135,0,phase(31,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(134,0,phase(33,67),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(133,0,phase(37,67),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(132,0,phase(38,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(131,0,phase(39,66),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(130,0,phase(40,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(125,0,position(15,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(124,0,position(16,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(123,0,position(18,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(122,0,position(21,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(121,0,position(25,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(120,0,position(27,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(119,0,position(15,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(118,0,position(16,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(117,0,position(18,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(116,0,position(21,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(115,0,position(25,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(114,0,position(27,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(57,0,geq(10,10),[[1]/number,[2]/number],[],[]).
'$aleph_sat_litinfo'(56,0,geq(10,aleph_const(3)),[[1]/number],[],[]).
'$aleph_sat_litinfo'(38,0,courselevel(6,aleph_const(level_500_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(37,0,courselevel(11,aleph_const(level_300_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(36,0,courselevel(13,aleph_const(level_400_7)),[[1]/course],[],[]).
'$aleph_sat_litinfo'(35,0,courselevel(6,30),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(34,0,courselevel(11,29),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(33,0,courselevel(13,28),[[1]/course],[[2]/level],[]).
'$aleph_sat_litinfo'(13,0,student(1),[[1]/person],[],[]).
'$aleph_sat_litinfo'(12,0,professor(2),[[1]/person],[],[]).
'$aleph_sat_litinfo'(8,0,phase(1,aleph_const(post_quals_9)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(7,0,phase(1,9),[[1]/person],[[2]/phase],[]).
'$aleph_sat_litinfo'(6,0,position(2,aleph_const(faculty_8)),[[1]/person],[],[]).
'$aleph_sat_litinfo'(5,0,position(2,8),[[1]/person],[[2]/faculty],[]).
'$aleph_sat_litinfo'(-1,0,!,[],[],[]).
'$aleph_sat_litinfo'(2,0,taughtby(3,2,4),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(3,0,taughtby(3,2,5),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(11,0,ta(13,1,14),[[2]/person],[[1]/course,[3]/date],[14,15,16,17,33,36,39,41,42]).
'$aleph_sat_litinfo'(10,0,ta(11,1,12),[[2]/person],[[1]/course,[3]/date],[18,19,20,21,22,23,24,25,26,34,37,43,44,46,47,48,49,50,51,52]).
'$aleph_sat_litinfo'(4,0,taughtby(6,2,7),[[2]/person],[[1]/course,[3]/date],[27,28,29,35,38,53,54,55]).
'$aleph_sat_litinfo'(28,0,taughtby(6,27,12),[[1]/course],[[2]/person,[3]/date],[59,60,61,62,65,114,120,144,177]).
'$aleph_sat_litinfo'(29,0,taughtby(6,27,17),[[1]/course],[[2]/person,[3]/date],[59,60,61,62,65,114,120,144,177]).
'$aleph_sat_litinfo'(26,0,taughtby(11,26,7),[[1]/course],[[2]/person,[3]/date],[66,178]).
'$aleph_sat_litinfo'(25,0,taughtby(11,25,5),[[1]/course],[[2]/person,[3]/date],[68,69,71,72,115,121,143,179]).
'$aleph_sat_litinfo'(24,0,taughtby(11,24,12),[[1]/course],[[2]/person,[3]/date],[73,75,180]).
'$aleph_sat_litinfo'(18,0,taughtby(11,21,4),[[1]/course],[[2]/person,[3]/date],[76,77,78,79,80,84,85,86,88,89,116,122,181]).
'$aleph_sat_litinfo'(19,0,taughtby(11,21,20),[[1]/course],[[2]/person,[3]/date],[76,77,78,79,80,84,85,86,88,89,116,122,181]).
'$aleph_sat_litinfo'(20,0,taughtby(11,21,22),[[1]/course],[[2]/person,[3]/date],[76,77,78,79,80,84,85,86,88,89,116,122,181]).
'$aleph_sat_litinfo'(27,0,taughtby(6,21,5),[[1]/course],[[2]/person,[3]/date],[76,77,78,79,80,84,85,86,88,89,116,122,181]).
'$aleph_sat_litinfo'(53,0,ta(6,40,12),[[1]/course],[[2]/person,[3]/date],[130,136,145,153,185]).
'$aleph_sat_litinfo'(54,0,ta(6,40,5),[[1]/course],[[2]/person,[3]/date],[130,136,145,153,185]).
'$aleph_sat_litinfo'(52,0,ta(11,39,14),[[1]/course],[[2]/person,[3]/date],[58,131,137,146,155,186]).
'$aleph_sat_litinfo'(51,0,ta(11,38,22),[[1]/course],[[2]/person,[3]/date],[132,138,147,187]).
'$aleph_sat_litinfo'(50,0,ta(11,37,5),[[1]/course],[[2]/person,[3]/date],[133,139,142,148,157,159,160,188]).
'$aleph_sat_litinfo'(55,0,ta(6,37,17),[[1]/course],[[2]/person,[3]/date],[133,139,142,148,157,159,160,188]).
'$aleph_sat_litinfo'(46,0,ta(11,36,4),[[1]/course],[[2]/person,[3]/date],[162,189]).
'$aleph_sat_litinfo'(47,0,ta(11,36,5),[[1]/course],[[2]/person,[3]/date],[162,189]).
'$aleph_sat_litinfo'(44,0,ta(11,35,17),[[1]/course],[[2]/person,[3]/date],[190]).
'$aleph_sat_litinfo'(43,0,ta(11,34,22),[[1]/course],[[2]/person,[3]/date],[166,191]).
'$aleph_sat_litinfo'(42,0,ta(13,33,17),[[1]/course],[[2]/person,[3]/date],[134,140,143,149,168,192]).
'$aleph_sat_litinfo'(41,0,ta(13,32,19),[[1]/course],[[2]/person,[3]/date],[193]).
'$aleph_sat_litinfo'(48,0,ta(11,32,12),[[1]/course],[[2]/person,[3]/date],[193]).
'$aleph_sat_litinfo'(49,0,ta(11,32,14),[[1]/course],[[2]/person,[3]/date],[193]).
'$aleph_sat_litinfo'(39,0,ta(13,31,14),[[1]/course],[[2]/person,[3]/date],[135,141,144,150,173,174,175,194]).
'$aleph_sat_litinfo'(93,0,taughtby(55,18,4),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(79,0,taughtby(52,21,14),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(80,0,taughtby(52,21,17),[[2]/person],[[1]/course,[3]/date],[]).
'$aleph_sat_litinfo'(107,0,taughtby(60,16,46),[[2]/person],[[1]/course,[3]/date],[243,262]).
'$aleph_sat_litinfo'(102,0,taughtby(58,16,22),[[2]/person],[[1]/course,[3]/date],[245,264]).
'$aleph_sat_litinfo'(99,0,taughtby(57,18,46),[[2]/person],[[1]/course,[3]/date],[246,265]).
'$aleph_sat_litinfo'(94,0,taughtby(56,18,23),[[2]/person],[[1]/course,[3]/date],[247,266]).
'$aleph_sat_litinfo'(91,0,taughtby(54,18,4),[[2]/person],[[1]/course,[3]/date],[203,248,267]).
'$aleph_sat_litinfo'(77,0,taughtby(51,21,14),[[2]/person],[[1]/course,[3]/date],[250,269]).
'$aleph_sat_litinfo'(78,0,taughtby(51,21,17),[[2]/person],[[1]/course,[3]/date],[250,269]).
'$aleph_sat_litinfo'(71,0,taughtby(48,25,19),[[2]/person],[[1]/course,[3]/date],[252,271]).
'$aleph_sat_litinfo'(72,0,taughtby(48,25,4),[[2]/person],[[1]/course,[3]/date],[252,271]).
'$aleph_sat_litinfo'(89,0,taughtby(48,21,23),[[2]/person],[[1]/course,[3]/date],[252,271]).
'$aleph_sat_litinfo'(105,0,taughtby(48,16,50),[[2]/person],[[1]/course,[3]/date],[252,271]).
'$aleph_sat_litinfo'(69,0,taughtby(47,25,22),[[2]/person],[[1]/course,[3]/date],[253,272]).
'$aleph_sat_litinfo'(65,0,taughtby(45,27,23),[[2]/person],[[1]/course,[3]/date],[254,273]).
'$aleph_sat_litinfo'(88,0,taughtby(45,21,50),[[2]/person],[[1]/course,[3]/date],[254,273]).
'$aleph_sat_litinfo'(62,0,taughtby(44,27,20),[[2]/person],[[1]/course,[3]/date],[255,274]).
'$aleph_sat_litinfo'(129,0,projectmember(65,15),[[2]/person],[[1]/project],[]).
'$aleph_sat_litinfo'(128,0,projectmember(64,15),[[2]/person],[[1]/project],[]).
'$aleph_sat_litinfo'(127,0,projectmember(63,16),[[2]/person],[[1]/project],[]).
'$aleph_sat_litinfo'(126,0,projectmember(62,16),[[2]/person],[[1]/project],[]).
'$aleph_sat_litinfo'(159,0,ta(73,37,4),[[2]/person],[[1]/course,[3]/date],[240,259]).
'$aleph_sat_litinfo'(153,0,ta(72,40,14),[[2]/person],[[1]/course,[3]/date],[241,260]).
'$aleph_sat_litinfo'(108,0,taughtby(61,15,50),[[2]/person],[[1]/course,[3]/date],[242,261,284]).
'$aleph_sat_litinfo'(109,0,taughtby(61,15,4),[[2]/person],[[1]/course,[3]/date],[242,261,284]).
'$aleph_sat_litinfo'(106,0,taughtby(59,16,22),[[2]/person],[[1]/course,[3]/date],[244,263,285]).
'$aleph_sat_litinfo'(84,0,taughtby(53,21,7),[[2]/person],[[1]/course,[3]/date],[249,268,286]).
'$aleph_sat_litinfo'(85,0,taughtby(53,21,12),[[2]/person],[[1]/course,[3]/date],[249,268,286]).
'$aleph_sat_litinfo'(86,0,taughtby(53,21,46),[[2]/person],[[1]/course,[3]/date],[249,268,286]).
'$aleph_sat_litinfo'(96,0,taughtby(53,18,5),[[2]/person],[[1]/course,[3]/date],[249,268,286]).
'$aleph_sat_litinfo'(155,0,ta(53,39,12),[[2]/person],[[1]/course,[3]/date],[249,268,286]).
'$aleph_sat_litinfo'(73,0,taughtby(49,24,50),[[2]/person],[[1]/course,[3]/date],[214,251,270,288,290,291,292,293,294]).
'$aleph_sat_litinfo'(76,0,taughtby(49,21,19),[[2]/person],[[1]/course,[3]/date],[214,251,270,288,290,291,292,293,294]).
'$aleph_sat_litinfo'(173,0,ta(49,31,12),[[2]/person],[[1]/course,[3]/date],[214,251,270,288,290,291,292,293,294]).
'$aleph_sat_litinfo'(61,0,taughtby(43,27,14),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(95,0,taughtby(43,18,22),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(111,0,taughtby(43,15,20),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(112,0,taughtby(43,15,17),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(160,0,ta(43,37,22),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(174,0,ta(43,31,17),[[2]/person],[[1]/course,[3]/date],[256,275,296,297]).
'$aleph_sat_litinfo'(59,0,taughtby(42,27,4),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(60,0,taughtby(42,27,20),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(66,0,taughtby(42,26,23),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(68,0,taughtby(42,25,46),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(90,0,taughtby(42,18,7),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(100,0,taughtby(42,16,12),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(101,0,taughtby(42,16,5),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(157,0,ta(42,37,19),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(162,0,ta(42,36,19),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(166,0,ta(42,34,19),[[2]/person],[[1]/course,[3]/date],[257,276,300,301,302,305,306]).
'$aleph_sat_litinfo'(58,0,taughtby(41,39,4),[[2]/person],[[1]/course,[3]/date],[235,236,237,258,277,307,309,310,312,313]).
'$aleph_sat_litinfo'(75,0,taughtby(41,24,20),[[2]/person],[[1]/course,[3]/date],[235,236,237,258,277,307,309,310,312,313]).
'$aleph_sat_litinfo'(168,0,ta(41,33,4),[[2]/person],[[1]/course,[3]/date],[235,236,237,258,277,307,309,310,312,313]).
'$aleph_sat_litinfo'(175,0,ta(41,31,19),[[2]/person],[[1]/course,[3]/date],[235,236,237,258,277,307,309,310,312,313]).
'$aleph_sat_litinfo'(149,0,yearsinprogram(33,71),[[1]/person],[[2]/number],[314,318,319,321,326,330,332,333,334,335,336,340,344,348]).
'$aleph_sat_litinfo'(147,0,yearsinprogram(38,70),[[1]/person],[[2]/number],[315,319,320,322,327,331,332,336,337,338,339,341,345,349]).
'$aleph_sat_litinfo'(148,0,yearsinprogram(37,70),[[1]/person],[[2]/number],[315,319,320,322,327,331,332,336,337,338,339,341,345,349]).
'$aleph_sat_litinfo'(146,0,yearsinprogram(39,69),[[1]/person],[[2]/number],[316,321,322,323,324,325,333,337,340,341,342,343,346,350]).
'$aleph_sat_litinfo'(9,0,yearsinprogram(1,10),[[1]/person],[[2]/number],[56,57,325,329,330,331,335,339,343,347,348,349,350,351]).
'$aleph_sat_litinfo'(145,0,yearsinprogram(40,68),[[1]/person],[[2]/number],[317,324,326,327,328,329,334,338,342,344,345,346,347,351]).
'$aleph_sat_litinfo'(150,0,yearsinprogram(31,68),[[1]/person],[[2]/number],[317,324,326,327,328,329,334,338,342,344,345,346,347,351]).
'$aleph_sat_litinfo'(15,0,taughtby(13,16,17),[[1]/course],[[2]/person,[3]/date],[100,101,102,105,106,107,118,124,126,127,183,373]).
'$aleph_sat_litinfo'(22,0,taughtby(11,16,14),[[1]/course],[[2]/person,[3]/date],[100,101,102,105,106,107,118,124,126,127,183,373]).
'$aleph_sat_litinfo'(16,0,taughtby(13,18,19),[[1]/course],[[2]/person,[3]/date],[90,91,93,94,95,96,99,117,123,142,182,374]).
'$aleph_sat_litinfo'(17,0,taughtby(13,18,20),[[1]/course],[[2]/person,[3]/date],[90,91,93,94,95,96,99,117,123,142,182,374]).
'$aleph_sat_litinfo'(23,0,taughtby(11,18,17),[[1]/course],[[2]/person,[3]/date],[90,91,93,94,95,96,99,117,123,142,182,374]).
'$aleph_sat_litinfo'(14,0,taughtby(13,15,14),[[1]/course],[[2]/person,[3]/date],[108,109,111,112,119,125,128,129,184,375]).
'$aleph_sat_litinfo'(21,0,taughtby(11,15,23),[[1]/course],[[2]/person,[3]/date],[108,109,111,112,119,125,128,129,184,375]).
'$aleph_sat_litinfo'(1,0,advisedby(1,2),[],[[1]/person,[2]/person],[2,3,4,5,6,7,8,9,10,11,12,13,376]).
'$aleph_sat_litinfo'(237,0,taughtby(41,78,50),[[1]/course],[[2]/person,[3]/date],[406]).
'$aleph_sat_litinfo'(214,0,taughtby(49,76,4),[[1]/course],[[2]/person,[3]/date],[355,357,407]).
'$aleph_sat_litinfo'(236,0,taughtby(41,76,17),[[1]/course],[[2]/person,[3]/date],[355,357,407]).
'$aleph_sat_litinfo'(310,0,ta(41,91,14),[[1]/course],[[2]/person,[3]/date],[408]).
'$aleph_sat_litinfo'(309,0,ta(41,90,12),[[1]/course],[[2]/person,[3]/date],[409]).
'$aleph_sat_litinfo'(306,0,ta(42,89,5),[[1]/course],[[2]/person,[3]/date],[410]).
'$aleph_sat_litinfo'(313,0,ta(41,89,22),[[1]/course],[[2]/person,[3]/date],[410]).
'$aleph_sat_litinfo'(305,0,ta(42,88,12),[[1]/course],[[2]/person,[3]/date],[359,366,377,411]).
'$aleph_sat_litinfo'(312,0,ta(41,88,22),[[1]/course],[[2]/person,[3]/date],[359,366,377,411]).
'$aleph_sat_litinfo'(302,0,ta(42,87,4),[[1]/course],[[2]/person,[3]/date],[360,367,373,378,412]).
'$aleph_sat_litinfo'(301,0,ta(42,86,4),[[1]/course],[[2]/person,[3]/date],[361,368,374,379,413]).
'$aleph_sat_litinfo'(300,0,ta(42,85,5),[[1]/course],[[2]/person,[3]/date],[414]).
'$aleph_sat_litinfo'(297,0,ta(43,84,22),[[1]/course],[[2]/person,[3]/date],[415]).
'$aleph_sat_litinfo'(294,0,ta(49,83,17),[[1]/course],[[2]/person,[3]/date],[416]).
'$aleph_sat_litinfo'(293,0,ta(49,82,4),[[1]/course],[[2]/person,[3]/date],[417]).
'$aleph_sat_litinfo'(290,0,ta(49,81,19),[[1]/course],[[2]/person,[3]/date],[418]).
'$aleph_sat_litinfo'(291,0,ta(49,81,22),[[1]/course],[[2]/person,[3]/date],[418]).
'$aleph_sat_litinfo'(286,0,ta(53,80,5),[[1]/course],[[2]/person,[3]/date],[362,369,380,419]).
'$aleph_sat_litinfo'(296,0,ta(43,80,14),[[1]/course],[[2]/person,[3]/date],[362,369,380,419]).
'$aleph_sat_litinfo'(284,0,ta(61,79,4),[[1]/course],[[2]/person,[3]/date],[363,370,375,381,420]).
'$aleph_sat_litinfo'(288,0,ta(49,79,12),[[1]/course],[[2]/person,[3]/date],[363,370,375,381,420]).
'$aleph_sat_litinfo'(235,0,taughtby(41,77,12),[[1]/course],[[2]/person,[3]/date],[364,371,382,421]).
'$aleph_sat_litinfo'(285,0,ta(59,77,22),[[1]/course],[[2]/person,[3]/date],[364,371,382,421]).
'$aleph_sat_litinfo'(307,0,ta(41,77,17),[[1]/course],[[2]/person,[3]/date],[364,371,382,421]).
'$aleph_sat_litinfo'(203,0,taughtby(54,74,75),[[1]/course],[[2]/person,[3]/date],[365,372,376,383,405,422]).
'$aleph_sat_litinfo'(292,0,ta(49,74,19),[[1]/course],[[2]/person,[3]/date],[365,372,376,383,405,422]).

:- dynamic '$aleph_sat_vars'/4.

'$aleph_sat_vars'(74,74,[358,365,372,376,383,404,405,422],[203,292]).
'$aleph_sat_vars'(77,77,[353,364,371,382,402,403,421],[235,285,307]).
'$aleph_sat_vars'(79,79,[363,370,375,381,400,401,420],[284,288]).
'$aleph_sat_vars'(80,80,[362,369,380,398,399,419],[286,296]).
'$aleph_sat_vars'(81,81,[396,397,418],[290,291]).
'$aleph_sat_vars'(82,82,[395,417],[293]).
'$aleph_sat_vars'(83,83,[394,416],[294]).
'$aleph_sat_vars'(84,84,[393,415],[297]).
'$aleph_sat_vars'(85,85,[392,414],[300]).
'$aleph_sat_vars'(86,86,[361,368,374,379,391,413],[301]).
'$aleph_sat_vars'(87,87,[360,367,373,378,390,412],[302]).
'$aleph_sat_vars'(88,88,[359,366,377,388,389,411],[305,312]).
'$aleph_sat_vars'(89,89,[386,387,410],[306,313]).
'$aleph_sat_vars'(90,90,[385,409],[309]).
'$aleph_sat_vars'(91,91,[384,408],[310]).
'$aleph_sat_vars'(76,76,[354,355,356,357,407],[214,236]).
'$aleph_sat_vars'(78,78,[352,406],[237]).
'$aleph_sat_vars'(5,5,[],[3,25,27,32,47,50,54,70,87,96,101,152,158,164,208,231,286,300,306,355,357,386,392,399,405]).
'$aleph_sat_vars'(93,93,[],[357,405]).
'$aleph_sat_vars'(19,19,[],[16,41,71,76,97,157,162,166,172,175,213,218,290,292,299,303,304,308,396,404]).
'$aleph_sat_vars'(49,49,[213,214,215,251,270,288,289,290,291,292,293,294],[73,76,173,354,394,395,396,397,401,404]).
'$aleph_sat_vars'(22,22,[],[20,43,51,69,83,95,102,106,156,160,167,198,199,220,227,285,291,297,298,312,313,387,389,393,397,403]).
'$aleph_sat_vars'(59,59,[198,244,263,285],[106,403]).
'$aleph_sat_vars'(17,17,[],[15,23,29,42,44,55,64,78,80,92,104,112,161,165,169,174,210,212,225,236,294,295,307,356,394,402]).
'$aleph_sat_vars'(41,41,[235,236,237,238,239,258,277,307,308,309,310,311,312,313],[58,75,168,175,352,353,356,384,385,387,389,402]).
'$aleph_sat_vars'(12,12,[],[10,24,28,45,48,53,63,74,85,100,151,155,170,173,206,230,235,287,288,289,305,309,353,385,388,401]).
'$aleph_sat_vars'(4,4,[],[2,18,31,46,58,59,72,81,91,93,109,159,163,168,196,202,204,214,219,228,239,282,284,293,301,302,311,354,390,391,395,400]).
'$aleph_sat_vars'(61,61,[195,196,242,261,284],[108,109,400]).
'$aleph_sat_vars'(53,53,[205,206,207,208,249,268,286,287],[84,85,86,96,155,399]).
'$aleph_sat_vars'(14,14,[],[11,14,22,39,40,49,52,61,77,79,103,113,153,154,171,176,209,211,226,283,296,310,384,398]).
'$aleph_sat_vars'(43,43,[224,225,226,227,256,275,295,296,297,298],[61,95,111,112,160,174,393,398]).
'$aleph_sat_vars'(42,42,[228,229,230,231,232,233,234,257,276,299,300,301,302,303,304,305,306],[59,60,66,68,90,100,101,157,162,166,386,388,390,391,392]).
'$aleph_sat_vars'(70,70,[315,319,320,322,327,331,332,336,337,338,339,341,345,349],[147,148,383]).
'$aleph_sat_vars'(69,69,[316,321,322,323,324,325,333,337,340,341,342,343,346,350],[146,382]).
'$aleph_sat_vars'(10,10,[56,57,325,329,330,331,335,339,343,347,348,349,350,351],[9,377,381]).
'$aleph_sat_vars'(94,94,[],[380]).
'$aleph_sat_vars'(71,71,[314,318,319,321,326,330,332,333,334,335,336,340,344,348],[149,378,379]).
'$aleph_sat_vars'(2,2,[2,3,4,5,6,12,376],[1,30,31,32]).
'$aleph_sat_vars'(15,15,[108,109,110,111,112,113,119,125,128,129,184,375],[14,21,195,196,224,225,278,279]).
'$aleph_sat_vars'(18,18,[90,91,92,93,94,95,96,97,98,99,117,123,142,182,374],[16,17,23,200,201,202,204,208,227,232]).
'$aleph_sat_vars'(16,16,[100,101,102,103,104,105,106,107,118,124,126,127,183,373],[15,22,197,198,199,217,230,231,280,281]).
'$aleph_sat_vars'(67,67,[],[133,134,360,361,365]).
'$aleph_sat_vars'(66,66,[],[131,362,364]).
'$aleph_sat_vars'(9,9,[],[7,130,132,135,359,363]).
'$aleph_sat_vars'(75,75,[],[203,358]).
'$aleph_sat_vars'(54,54,[203,204,248,267],[91,358]).
'$aleph_sat_vars'(92,92,[],[355]).
'$aleph_sat_vars'(50,50,[],[73,88,105,108,195,215,217,221,237,352]).
'$aleph_sat_vars'(68,68,[317,324,326,327,328,329,334,338,342,344,345,346,347,351],[145,150]).
'$aleph_sat_vars'(33,33,[134,140,143,149,168,169,192],[42,311]).
'$aleph_sat_vars'(31,31,[135,141,144,150,173,174,175,176,194],[39,289,295,308]).
'$aleph_sat_vars'(37,37,[133,139,142,148,157,158,159,160,161,188],[50,55,282,298,304]).
'$aleph_sat_vars'(36,36,[162,163,164,189],[46,47,303]).
'$aleph_sat_vars'(34,34,[166,167,191],[43,299]).
'$aleph_sat_vars'(39,39,[58,131,137,146,154,155,186],[52,239,287]).
'$aleph_sat_vars'(40,40,[130,136,145,151,152,153,185],[53,54,283]).
'$aleph_sat_vars'(72,72,[241,260,283],[153]).
'$aleph_sat_vars'(73,73,[240,259,282],[159]).
'$aleph_sat_vars'(62,62,[281],[126]).
'$aleph_sat_vars'(63,63,[280],[127]).
'$aleph_sat_vars'(64,64,[279],[128]).
'$aleph_sat_vars'(65,65,[278],[129]).
'$aleph_sat_vars'(44,44,[223,255,274],[62]).
'$aleph_sat_vars'(45,45,[221,222,254,273],[65,88]).
'$aleph_sat_vars'(47,47,[220,253,272],[69]).
'$aleph_sat_vars'(48,48,[216,217,218,219,252,271],[71,72,89,105]).
'$aleph_sat_vars'(51,51,[211,212,250,269],[77,78]).
'$aleph_sat_vars'(56,56,[201,247,266],[94]).
'$aleph_sat_vars'(57,57,[200,246,265],[99]).
'$aleph_sat_vars'(58,58,[199,245,264],[102]).
'$aleph_sat_vars'(60,60,[197,243,262],[107]).
'$aleph_sat_vars'(29,29,[],[34,251,257,258]).
'$aleph_sat_vars'(28,28,[],[33,243,249,250,256]).
'$aleph_sat_vars'(30,30,[],[35,240,241,242,244,245,246,247,248,252,253,254,255]).
'$aleph_sat_vars'(20,20,[],[17,19,60,62,75,82,98,111,223,224,229,238]).
'$aleph_sat_vars'(24,24,[73,74,75,180],[24,215,238]).
'$aleph_sat_vars'(23,23,[],[21,65,66,89,94,110,201,216,222,234]).
'$aleph_sat_vars'(26,26,[66,67,178],[26,234]).
'$aleph_sat_vars'(46,46,[],[68,86,99,107,197,200,207,233]).
'$aleph_sat_vars'(25,25,[68,69,70,71,72,115,121,143,179],[25,218,219,220,233]).
'$aleph_sat_vars'(7,7,[],[4,26,30,67,84,90,205,232]).
'$aleph_sat_vars'(27,27,[59,60,61,62,63,64,65,114,120,144,177],[28,29,222,223,226,228,229]).
'$aleph_sat_vars'(21,21,[76,77,78,79,80,81,82,83,84,85,86,87,88,89,116,122,181],[18,19,20,27,205,206,207,209,210,211,212,213,216,221]).
'$aleph_sat_vars'(52,52,[209,210],[79,80]).
'$aleph_sat_vars'(55,55,[202],[93]).
'$aleph_sat_vars'(32,32,[170,171,172,193],[41,48,49]).
'$aleph_sat_vars'(35,35,[165,190],[44]).
'$aleph_sat_vars'(38,38,[132,138,147,156,187],[51]).
'$aleph_sat_vars'(13,13,[14,15,16,17,33,36,39,40,41,42],[11,97,98,104,113,169,172,176]).
'$aleph_sat_vars'(11,11,[18,19,20,21,22,23,24,25,26,34,37,43,44,45,46,47,48,49,50,51,52],[10,67,70,74,81,82,83,92,103,110,154,156,158,163,164,165,167,170,171]).
'$aleph_sat_vars'(6,6,[27,28,29,30,35,38,53,54,55],[4,63,64,87,151,152,161]).
'$aleph_sat_vars'(8,8,[],[5,114,115,116,117,118,119]).
'$aleph_sat_vars'(1,1,[7,8,9,10,11,13],[1,40,45]).
'$aleph_sat_vars'(3,3,[31,32],[2,3]).

:- dynamic '$aleph_sat_terms'/4.

'$aleph_sat_terms'(94,5,7,number).
'$aleph_sat_terms'(93,5,course36_4,course).
'$aleph_sat_terms'(92,5,course117_4,course).
'$aleph_sat_terms'(91,4,person315_1,person).
'$aleph_sat_terms'(90,4,person294_1,person).
'$aleph_sat_terms'(89,4,person58_1,person).
'$aleph_sat_terms'(88,4,person422_1,person).
'$aleph_sat_terms'(87,4,person205_1,person).
'$aleph_sat_terms'(86,4,person172_1,person).
'$aleph_sat_terms'(85,4,person144_1,person).
'$aleph_sat_terms'(84,4,person350_1,person).
'$aleph_sat_terms'(83,4,person424_1,person).
'$aleph_sat_terms'(82,4,person401_1,person).
'$aleph_sat_terms'(81,4,person237_1,person).
'$aleph_sat_terms'(80,4,person249_1,person).
'$aleph_sat_terms'(79,4,person182_1,person).
'$aleph_sat_terms'(78,4,person231_1,person).
'$aleph_sat_terms'(77,4,person141_1,person).
'$aleph_sat_terms'(76,4,person181_1,person).
'$aleph_sat_terms'(75,4,summer_0203_6,date).
'$aleph_sat_terms'(74,4,person278_1,person).
'$aleph_sat_terms'(73,3,course149_4,course).
'$aleph_sat_terms'(72,3,course98_4,course).
'$aleph_sat_terms'(71,3,1,number).
'$aleph_sat_terms'(70,3,2,number).
'$aleph_sat_terms'(69,3,6,number).
'$aleph_sat_terms'(68,3,4,number).
'$aleph_sat_terms'(67,3,pre_quals_9,phase).
'$aleph_sat_terms'(66,3,post_generals_9,phase).
'$aleph_sat_terms'(65,3,project152_5,project).
'$aleph_sat_terms'(64,3,project119_5,project).
'$aleph_sat_terms'(63,3,project94_5,project).
'$aleph_sat_terms'(62,3,project130_5,project).
'$aleph_sat_terms'(61,3,course103_4,course).
'$aleph_sat_terms'(60,3,course97_4,course).
'$aleph_sat_terms'(59,3,course84_4,course).
'$aleph_sat_terms'(58,3,course119_4,course).
'$aleph_sat_terms'(57,3,course91_4,course).
'$aleph_sat_terms'(56,3,course160_4,course).
'$aleph_sat_terms'(55,3,course149,course).
'$aleph_sat_terms'(54,3,course144_4,course).
'$aleph_sat_terms'(53,3,course27_4,course).
'$aleph_sat_terms'(52,3,course137,course).
'$aleph_sat_terms'(51,3,course126_4,course).
'$aleph_sat_terms'(50,3,autumn_0102_6,date).
'$aleph_sat_terms'(49,3,course104_4,course).
'$aleph_sat_terms'(48,3,course77_4,course).
'$aleph_sat_terms'(47,3,course121_4,course).
'$aleph_sat_terms'(46,3,spring_0304_6,date).
'$aleph_sat_terms'(45,3,course66_4,course).
'$aleph_sat_terms'(44,3,course29_4,course).
'$aleph_sat_terms'(43,3,course161_4,course).
'$aleph_sat_terms'(42,3,course11_4,course).
'$aleph_sat_terms'(41,3,course165_4,course).
'$aleph_sat_terms'(40,2,person303_1,person).
'$aleph_sat_terms'(39,2,person75_1,person).
'$aleph_sat_terms'(38,2,person6_1,person).
'$aleph_sat_terms'(37,2,person390_1,person).
'$aleph_sat_terms'(36,2,person310_1,person).
'$aleph_sat_terms'(35,2,person23_1,person).
'$aleph_sat_terms'(34,2,person125_1,person).
'$aleph_sat_terms'(33,2,person416_1,person).
'$aleph_sat_terms'(32,2,person356_1,person).
'$aleph_sat_terms'(31,2,person191_1,person).
'$aleph_sat_terms'(30,2,level_500_7,level).
'$aleph_sat_terms'(29,2,level_300_7,level).
'$aleph_sat_terms'(28,2,level_400_7,level).
'$aleph_sat_terms'(27,2,person298_1,person).
'$aleph_sat_terms'(26,2,person57_1,person).
'$aleph_sat_terms'(25,2,person52_1,person).
'$aleph_sat_terms'(24,2,person364_1,person).
'$aleph_sat_terms'(23,2,autumn_0001_6,date).
'$aleph_sat_terms'(22,2,winter_0203_6,date).
'$aleph_sat_terms'(21,2,person165_1,person).
'$aleph_sat_terms'(20,2,winter_0001_6,date).
'$aleph_sat_terms'(19,2,autumn_0203_6,date).
'$aleph_sat_terms'(18,2,person331_1,person).
'$aleph_sat_terms'(17,2,winter_0304_6,date).
'$aleph_sat_terms'(16,2,person324_1,person).
'$aleph_sat_terms'(15,2,person201_1,person).
'$aleph_sat_terms'(14,1,winter_0102_6,date).
'$aleph_sat_terms'(13,1,course68_4,course).
'$aleph_sat_terms'(12,1,spring_0102_6,date).
'$aleph_sat_terms'(11,1,course147_4,course).
'$aleph_sat_terms'(10,1,3,number).
'$aleph_sat_terms'(9,1,post_quals_9,phase).
'$aleph_sat_terms'(8,1,faculty_8,faculty).
'$aleph_sat_terms'(7,1,spring_0001_6,date).
'$aleph_sat_terms'(6,1,course40_4,course).
'$aleph_sat_terms'(5,1,spring_0203_6,date).
'$aleph_sat_terms'(4,1,autumn_0304_6,date).
'$aleph_sat_terms'(3,1,course122,course).
'$aleph_sat_terms'(2,0,person378_1,person).
'$aleph_sat_terms'(1,0,person309_1,person).

:- dynamic '$aleph_sat_varscopy'/3.


:- dynamic '$aleph_sat_varsequiv'/2.


:- dynamic '$aleph_sat_ivars'/2.

'$aleph_sat_ivars'(1,[]).
'$aleph_sat_ivars'(2,[2]).
'$aleph_sat_ivars'(3,[2]).
'$aleph_sat_ivars'(4,[2]).
'$aleph_sat_ivars'(5,[2]).
'$aleph_sat_ivars'(6,[2]).
'$aleph_sat_ivars'(7,[1]).
'$aleph_sat_ivars'(8,[1]).
'$aleph_sat_ivars'(9,[1]).
'$aleph_sat_ivars'(10,[1]).
'$aleph_sat_ivars'(11,[1]).
'$aleph_sat_ivars'(12,[2]).
'$aleph_sat_ivars'(13,[1]).
'$aleph_sat_ivars'(14,[13]).
'$aleph_sat_ivars'(15,[13]).
'$aleph_sat_ivars'(16,[13]).
'$aleph_sat_ivars'(17,[13]).
'$aleph_sat_ivars'(18,[11]).
'$aleph_sat_ivars'(19,[11]).
'$aleph_sat_ivars'(20,[11]).
'$aleph_sat_ivars'(21,[11]).
'$aleph_sat_ivars'(22,[11]).
'$aleph_sat_ivars'(23,[11]).
'$aleph_sat_ivars'(24,[11]).
'$aleph_sat_ivars'(25,[11]).
'$aleph_sat_ivars'(26,[11]).
'$aleph_sat_ivars'(27,[6]).
'$aleph_sat_ivars'(28,[6]).
'$aleph_sat_ivars'(29,[6]).
'$aleph_sat_ivars'(30,[6]).
'$aleph_sat_ivars'(31,[3]).
'$aleph_sat_ivars'(32,[3]).
'$aleph_sat_ivars'(33,[13]).
'$aleph_sat_ivars'(34,[11]).
'$aleph_sat_ivars'(35,[6]).
'$aleph_sat_ivars'(36,[13]).
'$aleph_sat_ivars'(37,[11]).
'$aleph_sat_ivars'(38,[6]).
'$aleph_sat_ivars'(39,[13]).
'$aleph_sat_ivars'(40,[13]).
'$aleph_sat_ivars'(41,[13]).
'$aleph_sat_ivars'(42,[13]).
'$aleph_sat_ivars'(43,[11]).
'$aleph_sat_ivars'(44,[11]).
'$aleph_sat_ivars'(45,[11]).
'$aleph_sat_ivars'(46,[11]).
'$aleph_sat_ivars'(47,[11]).
'$aleph_sat_ivars'(48,[11]).
'$aleph_sat_ivars'(49,[11]).
'$aleph_sat_ivars'(50,[11]).
'$aleph_sat_ivars'(51,[11]).
'$aleph_sat_ivars'(52,[11]).
'$aleph_sat_ivars'(53,[6]).
'$aleph_sat_ivars'(54,[6]).
'$aleph_sat_ivars'(55,[6]).
'$aleph_sat_ivars'(56,[10]).
'$aleph_sat_ivars'(57,[10]).
'$aleph_sat_ivars'(58,[39]).
'$aleph_sat_ivars'(59,[27]).
'$aleph_sat_ivars'(60,[27]).
'$aleph_sat_ivars'(61,[27]).
'$aleph_sat_ivars'(62,[27]).
'$aleph_sat_ivars'(63,[27]).
'$aleph_sat_ivars'(64,[27]).
'$aleph_sat_ivars'(65,[27]).
'$aleph_sat_ivars'(66,[26]).
'$aleph_sat_ivars'(67,[26]).
'$aleph_sat_ivars'(68,[25]).
'$aleph_sat_ivars'(69,[25]).
'$aleph_sat_ivars'(70,[25]).
'$aleph_sat_ivars'(71,[25]).
'$aleph_sat_ivars'(72,[25]).
'$aleph_sat_ivars'(73,[24]).
'$aleph_sat_ivars'(74,[24]).
'$aleph_sat_ivars'(75,[24]).
'$aleph_sat_ivars'(76,[21]).
'$aleph_sat_ivars'(77,[21]).
'$aleph_sat_ivars'(78,[21]).
'$aleph_sat_ivars'(79,[21]).
'$aleph_sat_ivars'(80,[21]).
'$aleph_sat_ivars'(81,[21]).
'$aleph_sat_ivars'(82,[21]).
'$aleph_sat_ivars'(83,[21]).
'$aleph_sat_ivars'(84,[21]).
'$aleph_sat_ivars'(85,[21]).
'$aleph_sat_ivars'(86,[21]).
'$aleph_sat_ivars'(87,[21]).
'$aleph_sat_ivars'(88,[21]).
'$aleph_sat_ivars'(89,[21]).
'$aleph_sat_ivars'(90,[18]).
'$aleph_sat_ivars'(91,[18]).
'$aleph_sat_ivars'(92,[18]).
'$aleph_sat_ivars'(93,[18]).
'$aleph_sat_ivars'(94,[18]).
'$aleph_sat_ivars'(95,[18]).
'$aleph_sat_ivars'(96,[18]).
'$aleph_sat_ivars'(97,[18]).
'$aleph_sat_ivars'(98,[18]).
'$aleph_sat_ivars'(99,[18]).
'$aleph_sat_ivars'(100,[16]).
'$aleph_sat_ivars'(101,[16]).
'$aleph_sat_ivars'(102,[16]).
'$aleph_sat_ivars'(103,[16]).
'$aleph_sat_ivars'(104,[16]).
'$aleph_sat_ivars'(105,[16]).
'$aleph_sat_ivars'(106,[16]).
'$aleph_sat_ivars'(107,[16]).
'$aleph_sat_ivars'(108,[15]).
'$aleph_sat_ivars'(109,[15]).
'$aleph_sat_ivars'(110,[15]).
'$aleph_sat_ivars'(111,[15]).
'$aleph_sat_ivars'(112,[15]).
'$aleph_sat_ivars'(113,[15]).
'$aleph_sat_ivars'(114,[27]).
'$aleph_sat_ivars'(115,[25]).
'$aleph_sat_ivars'(116,[21]).
'$aleph_sat_ivars'(117,[18]).
'$aleph_sat_ivars'(118,[16]).
'$aleph_sat_ivars'(119,[15]).
'$aleph_sat_ivars'(120,[27]).
'$aleph_sat_ivars'(121,[25]).
'$aleph_sat_ivars'(122,[21]).
'$aleph_sat_ivars'(123,[18]).
'$aleph_sat_ivars'(124,[16]).
'$aleph_sat_ivars'(125,[15]).
'$aleph_sat_ivars'(126,[16]).
'$aleph_sat_ivars'(127,[16]).
'$aleph_sat_ivars'(128,[15]).
'$aleph_sat_ivars'(129,[15]).
'$aleph_sat_ivars'(130,[40]).
'$aleph_sat_ivars'(131,[39]).
'$aleph_sat_ivars'(132,[38]).
'$aleph_sat_ivars'(133,[37]).
'$aleph_sat_ivars'(134,[33]).
'$aleph_sat_ivars'(135,[31]).
'$aleph_sat_ivars'(136,[40]).
'$aleph_sat_ivars'(137,[39]).
'$aleph_sat_ivars'(138,[38]).
'$aleph_sat_ivars'(139,[37]).
'$aleph_sat_ivars'(140,[33]).
'$aleph_sat_ivars'(141,[31]).
'$aleph_sat_ivars'(142,[37,18]).
'$aleph_sat_ivars'(143,[33,25]).
'$aleph_sat_ivars'(144,[31,27]).
'$aleph_sat_ivars'(145,[40]).
'$aleph_sat_ivars'(146,[39]).
'$aleph_sat_ivars'(147,[38]).
'$aleph_sat_ivars'(148,[37]).
'$aleph_sat_ivars'(149,[33]).
'$aleph_sat_ivars'(150,[31]).
'$aleph_sat_ivars'(151,[40]).
'$aleph_sat_ivars'(152,[40]).
'$aleph_sat_ivars'(153,[40]).
'$aleph_sat_ivars'(154,[39]).
'$aleph_sat_ivars'(155,[39]).
'$aleph_sat_ivars'(156,[38]).
'$aleph_sat_ivars'(157,[37]).
'$aleph_sat_ivars'(158,[37]).
'$aleph_sat_ivars'(159,[37]).
'$aleph_sat_ivars'(160,[37]).
'$aleph_sat_ivars'(161,[37]).
'$aleph_sat_ivars'(162,[36]).
'$aleph_sat_ivars'(163,[36]).
'$aleph_sat_ivars'(164,[36]).
'$aleph_sat_ivars'(165,[35]).
'$aleph_sat_ivars'(166,[34]).
'$aleph_sat_ivars'(167,[34]).
'$aleph_sat_ivars'(168,[33]).
'$aleph_sat_ivars'(169,[33]).
'$aleph_sat_ivars'(170,[32]).
'$aleph_sat_ivars'(171,[32]).
'$aleph_sat_ivars'(172,[32]).
'$aleph_sat_ivars'(173,[31]).
'$aleph_sat_ivars'(174,[31]).
'$aleph_sat_ivars'(175,[31]).
'$aleph_sat_ivars'(176,[31]).
'$aleph_sat_ivars'(177,[27]).
'$aleph_sat_ivars'(178,[26]).
'$aleph_sat_ivars'(179,[25]).
'$aleph_sat_ivars'(180,[24]).
'$aleph_sat_ivars'(181,[21]).
'$aleph_sat_ivars'(182,[18]).
'$aleph_sat_ivars'(183,[16]).
'$aleph_sat_ivars'(184,[15]).
'$aleph_sat_ivars'(185,[40]).
'$aleph_sat_ivars'(186,[39]).
'$aleph_sat_ivars'(187,[38]).
'$aleph_sat_ivars'(188,[37]).
'$aleph_sat_ivars'(189,[36]).
'$aleph_sat_ivars'(190,[35]).
'$aleph_sat_ivars'(191,[34]).
'$aleph_sat_ivars'(192,[33]).
'$aleph_sat_ivars'(193,[32]).
'$aleph_sat_ivars'(194,[31]).
'$aleph_sat_ivars'(195,[61]).
'$aleph_sat_ivars'(196,[61]).
'$aleph_sat_ivars'(197,[60]).
'$aleph_sat_ivars'(198,[59]).
'$aleph_sat_ivars'(199,[58]).
'$aleph_sat_ivars'(200,[57]).
'$aleph_sat_ivars'(201,[56]).
'$aleph_sat_ivars'(202,[55]).
'$aleph_sat_ivars'(203,[54]).
'$aleph_sat_ivars'(204,[54]).
'$aleph_sat_ivars'(205,[53]).
'$aleph_sat_ivars'(206,[53]).
'$aleph_sat_ivars'(207,[53]).
'$aleph_sat_ivars'(208,[53]).
'$aleph_sat_ivars'(209,[52]).
'$aleph_sat_ivars'(210,[52]).
'$aleph_sat_ivars'(211,[51]).
'$aleph_sat_ivars'(212,[51]).
'$aleph_sat_ivars'(213,[49]).
'$aleph_sat_ivars'(214,[49]).
'$aleph_sat_ivars'(215,[49]).
'$aleph_sat_ivars'(216,[48]).
'$aleph_sat_ivars'(217,[48]).
'$aleph_sat_ivars'(218,[48]).
'$aleph_sat_ivars'(219,[48]).
'$aleph_sat_ivars'(220,[47]).
'$aleph_sat_ivars'(221,[45]).
'$aleph_sat_ivars'(222,[45]).
'$aleph_sat_ivars'(223,[44]).
'$aleph_sat_ivars'(224,[43]).
'$aleph_sat_ivars'(225,[43]).
'$aleph_sat_ivars'(226,[43]).
'$aleph_sat_ivars'(227,[43]).
'$aleph_sat_ivars'(228,[42]).
'$aleph_sat_ivars'(229,[42]).
'$aleph_sat_ivars'(230,[42]).
'$aleph_sat_ivars'(231,[42]).
'$aleph_sat_ivars'(232,[42]).
'$aleph_sat_ivars'(233,[42]).
'$aleph_sat_ivars'(234,[42]).
'$aleph_sat_ivars'(235,[41]).
'$aleph_sat_ivars'(236,[41]).
'$aleph_sat_ivars'(237,[41]).
'$aleph_sat_ivars'(238,[41]).
'$aleph_sat_ivars'(239,[41]).
'$aleph_sat_ivars'(240,[73]).
'$aleph_sat_ivars'(241,[72]).
'$aleph_sat_ivars'(242,[61]).
'$aleph_sat_ivars'(243,[60]).
'$aleph_sat_ivars'(244,[59]).
'$aleph_sat_ivars'(245,[58]).
'$aleph_sat_ivars'(246,[57]).
'$aleph_sat_ivars'(247,[56]).
'$aleph_sat_ivars'(248,[54]).
'$aleph_sat_ivars'(249,[53]).
'$aleph_sat_ivars'(250,[51]).
'$aleph_sat_ivars'(251,[49]).
'$aleph_sat_ivars'(252,[48]).
'$aleph_sat_ivars'(253,[47]).
'$aleph_sat_ivars'(254,[45]).
'$aleph_sat_ivars'(255,[44]).
'$aleph_sat_ivars'(256,[43]).
'$aleph_sat_ivars'(257,[42]).
'$aleph_sat_ivars'(258,[41]).
'$aleph_sat_ivars'(259,[73]).
'$aleph_sat_ivars'(260,[72]).
'$aleph_sat_ivars'(261,[61]).
'$aleph_sat_ivars'(262,[60]).
'$aleph_sat_ivars'(263,[59]).
'$aleph_sat_ivars'(264,[58]).
'$aleph_sat_ivars'(265,[57]).
'$aleph_sat_ivars'(266,[56]).
'$aleph_sat_ivars'(267,[54]).
'$aleph_sat_ivars'(268,[53]).
'$aleph_sat_ivars'(269,[51]).
'$aleph_sat_ivars'(270,[49]).
'$aleph_sat_ivars'(271,[48]).
'$aleph_sat_ivars'(272,[47]).
'$aleph_sat_ivars'(273,[45]).
'$aleph_sat_ivars'(274,[44]).
'$aleph_sat_ivars'(275,[43]).
'$aleph_sat_ivars'(276,[42]).
'$aleph_sat_ivars'(277,[41]).
'$aleph_sat_ivars'(278,[65]).
'$aleph_sat_ivars'(279,[64]).
'$aleph_sat_ivars'(280,[63]).
'$aleph_sat_ivars'(281,[62]).
'$aleph_sat_ivars'(282,[73]).
'$aleph_sat_ivars'(283,[72]).
'$aleph_sat_ivars'(284,[61]).
'$aleph_sat_ivars'(285,[59]).
'$aleph_sat_ivars'(286,[53]).
'$aleph_sat_ivars'(287,[53]).
'$aleph_sat_ivars'(288,[49]).
'$aleph_sat_ivars'(289,[49]).
'$aleph_sat_ivars'(290,[49]).
'$aleph_sat_ivars'(291,[49]).
'$aleph_sat_ivars'(292,[49]).
'$aleph_sat_ivars'(293,[49]).
'$aleph_sat_ivars'(294,[49]).
'$aleph_sat_ivars'(295,[43]).
'$aleph_sat_ivars'(296,[43]).
'$aleph_sat_ivars'(297,[43]).
'$aleph_sat_ivars'(298,[43]).
'$aleph_sat_ivars'(299,[42]).
'$aleph_sat_ivars'(300,[42]).
'$aleph_sat_ivars'(301,[42]).
'$aleph_sat_ivars'(302,[42]).
'$aleph_sat_ivars'(303,[42]).
'$aleph_sat_ivars'(304,[42]).
'$aleph_sat_ivars'(305,[42]).
'$aleph_sat_ivars'(306,[42]).
'$aleph_sat_ivars'(307,[41]).
'$aleph_sat_ivars'(308,[41]).
'$aleph_sat_ivars'(309,[41]).
'$aleph_sat_ivars'(310,[41]).
'$aleph_sat_ivars'(311,[41]).
'$aleph_sat_ivars'(312,[41]).
'$aleph_sat_ivars'(313,[41]).
'$aleph_sat_ivars'(314,[71]).
'$aleph_sat_ivars'(315,[70]).
'$aleph_sat_ivars'(316,[69]).
'$aleph_sat_ivars'(317,[68]).
'$aleph_sat_ivars'(318,[71]).
'$aleph_sat_ivars'(319,[70,71]).
'$aleph_sat_ivars'(320,[70]).
'$aleph_sat_ivars'(321,[69,71]).
'$aleph_sat_ivars'(322,[69,70]).
'$aleph_sat_ivars'(323,[69]).
'$aleph_sat_ivars'(324,[69,68]).
'$aleph_sat_ivars'(325,[69,10]).
'$aleph_sat_ivars'(326,[68,71]).
'$aleph_sat_ivars'(327,[68,70]).
'$aleph_sat_ivars'(328,[68]).
'$aleph_sat_ivars'(329,[68,10]).
'$aleph_sat_ivars'(330,[10,71]).
'$aleph_sat_ivars'(331,[10,70]).
'$aleph_sat_ivars'(332,[71,70]).
'$aleph_sat_ivars'(333,[71,69]).
'$aleph_sat_ivars'(334,[71,68]).
'$aleph_sat_ivars'(335,[71,10]).
'$aleph_sat_ivars'(336,[70,71]).
'$aleph_sat_ivars'(337,[70,69]).
'$aleph_sat_ivars'(338,[70,68]).
'$aleph_sat_ivars'(339,[70,10]).
'$aleph_sat_ivars'(340,[69,71]).
'$aleph_sat_ivars'(341,[69,70]).
'$aleph_sat_ivars'(342,[69,68]).
'$aleph_sat_ivars'(343,[69,10]).
'$aleph_sat_ivars'(344,[68,71]).
'$aleph_sat_ivars'(345,[68,70]).
'$aleph_sat_ivars'(346,[68,69]).
'$aleph_sat_ivars'(347,[68,10]).
'$aleph_sat_ivars'(348,[10,71]).
'$aleph_sat_ivars'(349,[10,70]).
'$aleph_sat_ivars'(350,[10,69]).
'$aleph_sat_ivars'(351,[10,68]).
'$aleph_sat_ivars'(352,[78]).
'$aleph_sat_ivars'(353,[77]).
'$aleph_sat_ivars'(354,[76]).
'$aleph_sat_ivars'(355,[76]).
'$aleph_sat_ivars'(356,[76]).
'$aleph_sat_ivars'(357,[76]).
'$aleph_sat_ivars'(358,[74]).
'$aleph_sat_ivars'(359,[88]).
'$aleph_sat_ivars'(360,[87]).
'$aleph_sat_ivars'(361,[86]).
'$aleph_sat_ivars'(362,[80]).
'$aleph_sat_ivars'(363,[79]).
'$aleph_sat_ivars'(364,[77]).
'$aleph_sat_ivars'(365,[74]).
'$aleph_sat_ivars'(366,[88]).
'$aleph_sat_ivars'(367,[87]).
'$aleph_sat_ivars'(368,[86]).
'$aleph_sat_ivars'(369,[80]).
'$aleph_sat_ivars'(370,[79]).
'$aleph_sat_ivars'(371,[77]).
'$aleph_sat_ivars'(372,[74]).
'$aleph_sat_ivars'(373,[87,16]).
'$aleph_sat_ivars'(374,[86,18]).
'$aleph_sat_ivars'(375,[79,15]).
'$aleph_sat_ivars'(376,[74,2]).
'$aleph_sat_ivars'(377,[88]).
'$aleph_sat_ivars'(378,[87]).
'$aleph_sat_ivars'(379,[86]).
'$aleph_sat_ivars'(380,[80]).
'$aleph_sat_ivars'(381,[79]).
'$aleph_sat_ivars'(382,[77]).
'$aleph_sat_ivars'(383,[74]).
'$aleph_sat_ivars'(384,[91]).
'$aleph_sat_ivars'(385,[90]).
'$aleph_sat_ivars'(386,[89]).
'$aleph_sat_ivars'(387,[89]).
'$aleph_sat_ivars'(388,[88]).
'$aleph_sat_ivars'(389,[88]).
'$aleph_sat_ivars'(390,[87]).
'$aleph_sat_ivars'(391,[86]).
'$aleph_sat_ivars'(392,[85]).
'$aleph_sat_ivars'(393,[84]).
'$aleph_sat_ivars'(394,[83]).
'$aleph_sat_ivars'(395,[82]).
'$aleph_sat_ivars'(396,[81]).
'$aleph_sat_ivars'(397,[81]).
'$aleph_sat_ivars'(398,[80]).
'$aleph_sat_ivars'(399,[80]).
'$aleph_sat_ivars'(400,[79]).
'$aleph_sat_ivars'(401,[79]).
'$aleph_sat_ivars'(402,[77]).
'$aleph_sat_ivars'(403,[77]).
'$aleph_sat_ivars'(404,[74]).
'$aleph_sat_ivars'(405,[74]).
'$aleph_sat_ivars'(406,[78]).
'$aleph_sat_ivars'(407,[76]).
'$aleph_sat_ivars'(408,[91]).
'$aleph_sat_ivars'(409,[90]).
'$aleph_sat_ivars'(410,[89]).
'$aleph_sat_ivars'(411,[88]).
'$aleph_sat_ivars'(412,[87]).
'$aleph_sat_ivars'(413,[86]).
'$aleph_sat_ivars'(414,[85]).
'$aleph_sat_ivars'(415,[84]).
'$aleph_sat_ivars'(416,[83]).
'$aleph_sat_ivars'(417,[82]).
'$aleph_sat_ivars'(418,[81]).
'$aleph_sat_ivars'(419,[80]).
'$aleph_sat_ivars'(420,[79]).
'$aleph_sat_ivars'(421,[77]).
'$aleph_sat_ivars'(422,[74]).

:- dynamic '$aleph_sat_ovars'/2.

'$aleph_sat_ovars'(1,[1,2]).
'$aleph_sat_ovars'(2,[3,4]).
'$aleph_sat_ovars'(3,[3,5]).
'$aleph_sat_ovars'(4,[6,7]).
'$aleph_sat_ovars'(5,[8]).
'$aleph_sat_ovars'(6,[]).
'$aleph_sat_ovars'(7,[9]).
'$aleph_sat_ovars'(8,[]).
'$aleph_sat_ovars'(9,[10]).
'$aleph_sat_ovars'(10,[11,12]).
'$aleph_sat_ovars'(11,[13,14]).
'$aleph_sat_ovars'(12,[]).
'$aleph_sat_ovars'(13,[]).
'$aleph_sat_ovars'(14,[15,14]).
'$aleph_sat_ovars'(15,[16,17]).
'$aleph_sat_ovars'(16,[18,19]).
'$aleph_sat_ovars'(17,[18,20]).
'$aleph_sat_ovars'(18,[21,4]).
'$aleph_sat_ovars'(19,[21,20]).
'$aleph_sat_ovars'(20,[21,22]).
'$aleph_sat_ovars'(21,[15,23]).
'$aleph_sat_ovars'(22,[16,14]).
'$aleph_sat_ovars'(23,[18,17]).
'$aleph_sat_ovars'(24,[24,12]).
'$aleph_sat_ovars'(25,[25,5]).
'$aleph_sat_ovars'(26,[26,7]).
'$aleph_sat_ovars'(27,[21,5]).
'$aleph_sat_ovars'(28,[27,12]).
'$aleph_sat_ovars'(29,[27,17]).
'$aleph_sat_ovars'(30,[2,7]).
'$aleph_sat_ovars'(31,[2,4]).
'$aleph_sat_ovars'(32,[2,5]).
'$aleph_sat_ovars'(33,[28]).
'$aleph_sat_ovars'(34,[29]).
'$aleph_sat_ovars'(35,[30]).
'$aleph_sat_ovars'(36,[]).
'$aleph_sat_ovars'(37,[]).
'$aleph_sat_ovars'(38,[]).
'$aleph_sat_ovars'(39,[31,14]).
'$aleph_sat_ovars'(40,[1,14]).
'$aleph_sat_ovars'(41,[32,19]).
'$aleph_sat_ovars'(42,[33,17]).
'$aleph_sat_ovars'(43,[34,22]).
'$aleph_sat_ovars'(44,[35,17]).
'$aleph_sat_ovars'(45,[1,12]).
'$aleph_sat_ovars'(46,[36,4]).
'$aleph_sat_ovars'(47,[36,5]).
'$aleph_sat_ovars'(48,[32,12]).
'$aleph_sat_ovars'(49,[32,14]).
'$aleph_sat_ovars'(50,[37,5]).
'$aleph_sat_ovars'(51,[38,22]).
'$aleph_sat_ovars'(52,[39,14]).
'$aleph_sat_ovars'(53,[40,12]).
'$aleph_sat_ovars'(54,[40,5]).
'$aleph_sat_ovars'(55,[37,17]).
'$aleph_sat_ovars'(56,[]).
'$aleph_sat_ovars'(57,[]).
'$aleph_sat_ovars'(58,[41,4]).
'$aleph_sat_ovars'(59,[42,4]).
'$aleph_sat_ovars'(60,[42,20]).
'$aleph_sat_ovars'(61,[43,14]).
'$aleph_sat_ovars'(62,[44,20]).
'$aleph_sat_ovars'(63,[6,12]).
'$aleph_sat_ovars'(64,[6,17]).
'$aleph_sat_ovars'(65,[45,23]).
'$aleph_sat_ovars'(66,[42,23]).
'$aleph_sat_ovars'(67,[11,7]).
'$aleph_sat_ovars'(68,[42,46]).
'$aleph_sat_ovars'(69,[47,22]).
'$aleph_sat_ovars'(70,[11,5]).
'$aleph_sat_ovars'(71,[48,19]).
'$aleph_sat_ovars'(72,[48,4]).
'$aleph_sat_ovars'(73,[49,50]).
'$aleph_sat_ovars'(74,[11,12]).
'$aleph_sat_ovars'(75,[41,20]).
'$aleph_sat_ovars'(76,[49,19]).
'$aleph_sat_ovars'(77,[51,14]).
'$aleph_sat_ovars'(78,[51,17]).
'$aleph_sat_ovars'(79,[52,14]).
'$aleph_sat_ovars'(80,[52,17]).
'$aleph_sat_ovars'(81,[11,4]).
'$aleph_sat_ovars'(82,[11,20]).
'$aleph_sat_ovars'(83,[11,22]).
'$aleph_sat_ovars'(84,[53,7]).
'$aleph_sat_ovars'(85,[53,12]).
'$aleph_sat_ovars'(86,[53,46]).
'$aleph_sat_ovars'(87,[6,5]).
'$aleph_sat_ovars'(88,[45,50]).
'$aleph_sat_ovars'(89,[48,23]).
'$aleph_sat_ovars'(90,[42,7]).
'$aleph_sat_ovars'(91,[54,4]).
'$aleph_sat_ovars'(92,[11,17]).
'$aleph_sat_ovars'(93,[55,4]).
'$aleph_sat_ovars'(94,[56,23]).
'$aleph_sat_ovars'(95,[43,22]).
'$aleph_sat_ovars'(96,[53,5]).
'$aleph_sat_ovars'(97,[13,19]).
'$aleph_sat_ovars'(98,[13,20]).
'$aleph_sat_ovars'(99,[57,46]).
'$aleph_sat_ovars'(100,[42,12]).
'$aleph_sat_ovars'(101,[42,5]).
'$aleph_sat_ovars'(102,[58,22]).
'$aleph_sat_ovars'(103,[11,14]).
'$aleph_sat_ovars'(104,[13,17]).
'$aleph_sat_ovars'(105,[48,50]).
'$aleph_sat_ovars'(106,[59,22]).
'$aleph_sat_ovars'(107,[60,46]).
'$aleph_sat_ovars'(108,[61,50]).
'$aleph_sat_ovars'(109,[61,4]).
'$aleph_sat_ovars'(110,[11,23]).
'$aleph_sat_ovars'(111,[43,20]).
'$aleph_sat_ovars'(112,[43,17]).
'$aleph_sat_ovars'(113,[13,14]).
'$aleph_sat_ovars'(114,[8]).
'$aleph_sat_ovars'(115,[8]).
'$aleph_sat_ovars'(116,[8]).
'$aleph_sat_ovars'(117,[8]).
'$aleph_sat_ovars'(118,[8]).
'$aleph_sat_ovars'(119,[8]).
'$aleph_sat_ovars'(120,[]).
'$aleph_sat_ovars'(121,[]).
'$aleph_sat_ovars'(122,[]).
'$aleph_sat_ovars'(123,[]).
'$aleph_sat_ovars'(124,[]).
'$aleph_sat_ovars'(125,[]).
'$aleph_sat_ovars'(126,[62]).
'$aleph_sat_ovars'(127,[63]).
'$aleph_sat_ovars'(128,[64]).
'$aleph_sat_ovars'(129,[65]).
'$aleph_sat_ovars'(130,[9]).
'$aleph_sat_ovars'(131,[66]).
'$aleph_sat_ovars'(132,[9]).
'$aleph_sat_ovars'(133,[67]).
'$aleph_sat_ovars'(134,[67]).
'$aleph_sat_ovars'(135,[9]).
'$aleph_sat_ovars'(136,[]).
'$aleph_sat_ovars'(137,[]).
'$aleph_sat_ovars'(138,[]).
'$aleph_sat_ovars'(139,[]).
'$aleph_sat_ovars'(140,[]).
'$aleph_sat_ovars'(141,[]).
'$aleph_sat_ovars'(142,[]).
'$aleph_sat_ovars'(143,[]).
'$aleph_sat_ovars'(144,[]).
'$aleph_sat_ovars'(145,[68]).
'$aleph_sat_ovars'(146,[69]).
'$aleph_sat_ovars'(147,[70]).
'$aleph_sat_ovars'(148,[70]).
'$aleph_sat_ovars'(149,[71]).
'$aleph_sat_ovars'(150,[68]).
'$aleph_sat_ovars'(151,[6,12]).
'$aleph_sat_ovars'(152,[6,5]).
'$aleph_sat_ovars'(153,[72,14]).
'$aleph_sat_ovars'(154,[11,14]).
'$aleph_sat_ovars'(155,[53,12]).
'$aleph_sat_ovars'(156,[11,22]).
'$aleph_sat_ovars'(157,[42,19]).
'$aleph_sat_ovars'(158,[11,5]).
'$aleph_sat_ovars'(159,[73,4]).
'$aleph_sat_ovars'(160,[43,22]).
'$aleph_sat_ovars'(161,[6,17]).
'$aleph_sat_ovars'(162,[42,19]).
'$aleph_sat_ovars'(163,[11,4]).
'$aleph_sat_ovars'(164,[11,5]).
'$aleph_sat_ovars'(165,[11,17]).
'$aleph_sat_ovars'(166,[42,19]).
'$aleph_sat_ovars'(167,[11,22]).
'$aleph_sat_ovars'(168,[41,4]).
'$aleph_sat_ovars'(169,[13,17]).
'$aleph_sat_ovars'(170,[11,12]).
'$aleph_sat_ovars'(171,[11,14]).
'$aleph_sat_ovars'(172,[13,19]).
'$aleph_sat_ovars'(173,[49,12]).
'$aleph_sat_ovars'(174,[43,17]).
'$aleph_sat_ovars'(175,[41,19]).
'$aleph_sat_ovars'(176,[13,14]).
'$aleph_sat_ovars'(177,[]).
'$aleph_sat_ovars'(178,[]).
'$aleph_sat_ovars'(179,[]).
'$aleph_sat_ovars'(180,[]).
'$aleph_sat_ovars'(181,[]).
'$aleph_sat_ovars'(182,[]).
'$aleph_sat_ovars'(183,[]).
'$aleph_sat_ovars'(184,[]).
'$aleph_sat_ovars'(185,[]).
'$aleph_sat_ovars'(186,[]).
'$aleph_sat_ovars'(187,[]).
'$aleph_sat_ovars'(188,[]).
'$aleph_sat_ovars'(189,[]).
'$aleph_sat_ovars'(190,[]).
'$aleph_sat_ovars'(191,[]).
'$aleph_sat_ovars'(192,[]).
'$aleph_sat_ovars'(193,[]).
'$aleph_sat_ovars'(194,[]).
'$aleph_sat_ovars'(195,[15,50]).
'$aleph_sat_ovars'(196,[15,4]).
'$aleph_sat_ovars'(197,[16,46]).
'$aleph_sat_ovars'(198,[16,22]).
'$aleph_sat_ovars'(199,[16,22]).
'$aleph_sat_ovars'(200,[18,46]).
'$aleph_sat_ovars'(201,[18,23]).
'$aleph_sat_ovars'(202,[18,4]).
'$aleph_sat_ovars'(203,[74,75]).
'$aleph_sat_ovars'(204,[18,4]).
'$aleph_sat_ovars'(205,[21,7]).
'$aleph_sat_ovars'(206,[21,12]).
'$aleph_sat_ovars'(207,[21,46]).
'$aleph_sat_ovars'(208,[18,5]).
'$aleph_sat_ovars'(209,[21,14]).
'$aleph_sat_ovars'(210,[21,17]).
'$aleph_sat_ovars'(211,[21,14]).
'$aleph_sat_ovars'(212,[21,17]).
'$aleph_sat_ovars'(213,[21,19]).
'$aleph_sat_ovars'(214,[76,4]).
'$aleph_sat_ovars'(215,[24,50]).
'$aleph_sat_ovars'(216,[21,23]).
'$aleph_sat_ovars'(217,[16,50]).
'$aleph_sat_ovars'(218,[25,19]).
'$aleph_sat_ovars'(219,[25,4]).
'$aleph_sat_ovars'(220,[25,22]).
'$aleph_sat_ovars'(221,[21,50]).
'$aleph_sat_ovars'(222,[27,23]).
'$aleph_sat_ovars'(223,[27,20]).
'$aleph_sat_ovars'(224,[15,20]).
'$aleph_sat_ovars'(225,[15,17]).
'$aleph_sat_ovars'(226,[27,14]).
'$aleph_sat_ovars'(227,[18,22]).
'$aleph_sat_ovars'(228,[27,4]).
'$aleph_sat_ovars'(229,[27,20]).
'$aleph_sat_ovars'(230,[16,12]).
'$aleph_sat_ovars'(231,[16,5]).
'$aleph_sat_ovars'(232,[18,7]).
'$aleph_sat_ovars'(233,[25,46]).
'$aleph_sat_ovars'(234,[26,23]).
'$aleph_sat_ovars'(235,[77,12]).
'$aleph_sat_ovars'(236,[76,17]).
'$aleph_sat_ovars'(237,[78,50]).
'$aleph_sat_ovars'(238,[24,20]).
'$aleph_sat_ovars'(239,[39,4]).
'$aleph_sat_ovars'(240,[30]).
'$aleph_sat_ovars'(241,[30]).
'$aleph_sat_ovars'(242,[30]).
'$aleph_sat_ovars'(243,[28]).
'$aleph_sat_ovars'(244,[30]).
'$aleph_sat_ovars'(245,[30]).
'$aleph_sat_ovars'(246,[30]).
'$aleph_sat_ovars'(247,[30]).
'$aleph_sat_ovars'(248,[30]).
'$aleph_sat_ovars'(249,[28]).
'$aleph_sat_ovars'(250,[28]).
'$aleph_sat_ovars'(251,[29]).
'$aleph_sat_ovars'(252,[30]).
'$aleph_sat_ovars'(253,[30]).
'$aleph_sat_ovars'(254,[30]).
'$aleph_sat_ovars'(255,[30]).
'$aleph_sat_ovars'(256,[28]).
'$aleph_sat_ovars'(257,[29]).
'$aleph_sat_ovars'(258,[29]).
'$aleph_sat_ovars'(259,[]).
'$aleph_sat_ovars'(260,[]).
'$aleph_sat_ovars'(261,[]).
'$aleph_sat_ovars'(262,[]).
'$aleph_sat_ovars'(263,[]).
'$aleph_sat_ovars'(264,[]).
'$aleph_sat_ovars'(265,[]).
'$aleph_sat_ovars'(266,[]).
'$aleph_sat_ovars'(267,[]).
'$aleph_sat_ovars'(268,[]).
'$aleph_sat_ovars'(269,[]).
'$aleph_sat_ovars'(270,[]).
'$aleph_sat_ovars'(271,[]).
'$aleph_sat_ovars'(272,[]).
'$aleph_sat_ovars'(273,[]).
'$aleph_sat_ovars'(274,[]).
'$aleph_sat_ovars'(275,[]).
'$aleph_sat_ovars'(276,[]).
'$aleph_sat_ovars'(277,[]).
'$aleph_sat_ovars'(278,[15]).
'$aleph_sat_ovars'(279,[15]).
'$aleph_sat_ovars'(280,[16]).
'$aleph_sat_ovars'(281,[16]).
'$aleph_sat_ovars'(282,[37,4]).
'$aleph_sat_ovars'(283,[40,14]).
'$aleph_sat_ovars'(284,[79,4]).
'$aleph_sat_ovars'(285,[77,22]).
'$aleph_sat_ovars'(286,[80,5]).
'$aleph_sat_ovars'(287,[39,12]).
'$aleph_sat_ovars'(288,[79,12]).
'$aleph_sat_ovars'(289,[31,12]).
'$aleph_sat_ovars'(290,[81,19]).
'$aleph_sat_ovars'(291,[81,22]).
'$aleph_sat_ovars'(292,[74,19]).
'$aleph_sat_ovars'(293,[82,4]).
'$aleph_sat_ovars'(294,[83,17]).
'$aleph_sat_ovars'(295,[31,17]).
'$aleph_sat_ovars'(296,[80,14]).
'$aleph_sat_ovars'(297,[84,22]).
'$aleph_sat_ovars'(298,[37,22]).
'$aleph_sat_ovars'(299,[34,19]).
'$aleph_sat_ovars'(300,[85,5]).
'$aleph_sat_ovars'(301,[86,4]).
'$aleph_sat_ovars'(302,[87,4]).
'$aleph_sat_ovars'(303,[36,19]).
'$aleph_sat_ovars'(304,[37,19]).
'$aleph_sat_ovars'(305,[88,12]).
'$aleph_sat_ovars'(306,[89,5]).
'$aleph_sat_ovars'(307,[77,17]).
'$aleph_sat_ovars'(308,[31,19]).
'$aleph_sat_ovars'(309,[90,12]).
'$aleph_sat_ovars'(310,[91,14]).
'$aleph_sat_ovars'(311,[33,4]).
'$aleph_sat_ovars'(312,[88,22]).
'$aleph_sat_ovars'(313,[89,22]).
'$aleph_sat_ovars'(314,[]).
'$aleph_sat_ovars'(315,[]).
'$aleph_sat_ovars'(316,[]).
'$aleph_sat_ovars'(317,[]).
'$aleph_sat_ovars'(318,[]).
'$aleph_sat_ovars'(319,[]).
'$aleph_sat_ovars'(320,[]).
'$aleph_sat_ovars'(321,[]).
'$aleph_sat_ovars'(322,[]).
'$aleph_sat_ovars'(323,[]).
'$aleph_sat_ovars'(324,[]).
'$aleph_sat_ovars'(325,[]).
'$aleph_sat_ovars'(326,[]).
'$aleph_sat_ovars'(327,[]).
'$aleph_sat_ovars'(328,[]).
'$aleph_sat_ovars'(329,[]).
'$aleph_sat_ovars'(330,[]).
'$aleph_sat_ovars'(331,[]).
'$aleph_sat_ovars'(332,[]).
'$aleph_sat_ovars'(333,[]).
'$aleph_sat_ovars'(334,[]).
'$aleph_sat_ovars'(335,[]).
'$aleph_sat_ovars'(336,[]).
'$aleph_sat_ovars'(337,[]).
'$aleph_sat_ovars'(338,[]).
'$aleph_sat_ovars'(339,[]).
'$aleph_sat_ovars'(340,[]).
'$aleph_sat_ovars'(341,[]).
'$aleph_sat_ovars'(342,[]).
'$aleph_sat_ovars'(343,[]).
'$aleph_sat_ovars'(344,[]).
'$aleph_sat_ovars'(345,[]).
'$aleph_sat_ovars'(346,[]).
'$aleph_sat_ovars'(347,[]).
'$aleph_sat_ovars'(348,[]).
'$aleph_sat_ovars'(349,[]).
'$aleph_sat_ovars'(350,[]).
'$aleph_sat_ovars'(351,[]).
'$aleph_sat_ovars'(352,[41,50]).
'$aleph_sat_ovars'(353,[41,12]).
'$aleph_sat_ovars'(354,[49,4]).
'$aleph_sat_ovars'(355,[92,5]).
'$aleph_sat_ovars'(356,[41,17]).
'$aleph_sat_ovars'(357,[93,5]).
'$aleph_sat_ovars'(358,[54,75]).
'$aleph_sat_ovars'(359,[9]).
'$aleph_sat_ovars'(360,[67]).
'$aleph_sat_ovars'(361,[67]).
'$aleph_sat_ovars'(362,[66]).
'$aleph_sat_ovars'(363,[9]).
'$aleph_sat_ovars'(364,[66]).
'$aleph_sat_ovars'(365,[67]).
'$aleph_sat_ovars'(366,[]).
'$aleph_sat_ovars'(367,[]).
'$aleph_sat_ovars'(368,[]).
'$aleph_sat_ovars'(369,[]).
'$aleph_sat_ovars'(370,[]).
'$aleph_sat_ovars'(371,[]).
'$aleph_sat_ovars'(372,[]).
'$aleph_sat_ovars'(373,[]).
'$aleph_sat_ovars'(374,[]).
'$aleph_sat_ovars'(375,[]).
'$aleph_sat_ovars'(376,[]).
'$aleph_sat_ovars'(377,[10]).
'$aleph_sat_ovars'(378,[71]).
'$aleph_sat_ovars'(379,[71]).
'$aleph_sat_ovars'(380,[94]).
'$aleph_sat_ovars'(381,[10]).
'$aleph_sat_ovars'(382,[69]).
'$aleph_sat_ovars'(383,[70]).
'$aleph_sat_ovars'(384,[41,14]).
'$aleph_sat_ovars'(385,[41,12]).
'$aleph_sat_ovars'(386,[42,5]).
'$aleph_sat_ovars'(387,[41,22]).
'$aleph_sat_ovars'(388,[42,12]).
'$aleph_sat_ovars'(389,[41,22]).
'$aleph_sat_ovars'(390,[42,4]).
'$aleph_sat_ovars'(391,[42,4]).
'$aleph_sat_ovars'(392,[42,5]).
'$aleph_sat_ovars'(393,[43,22]).
'$aleph_sat_ovars'(394,[49,17]).
'$aleph_sat_ovars'(395,[49,4]).
'$aleph_sat_ovars'(396,[49,19]).
'$aleph_sat_ovars'(397,[49,22]).
'$aleph_sat_ovars'(398,[43,14]).
'$aleph_sat_ovars'(399,[53,5]).
'$aleph_sat_ovars'(400,[61,4]).
'$aleph_sat_ovars'(401,[49,12]).
'$aleph_sat_ovars'(402,[41,17]).
'$aleph_sat_ovars'(403,[59,22]).
'$aleph_sat_ovars'(404,[49,19]).
'$aleph_sat_ovars'(405,[93,5]).
'$aleph_sat_ovars'(406,[]).
'$aleph_sat_ovars'(407,[]).
'$aleph_sat_ovars'(408,[]).
'$aleph_sat_ovars'(409,[]).
'$aleph_sat_ovars'(410,[]).
'$aleph_sat_ovars'(411,[]).
'$aleph_sat_ovars'(412,[]).
'$aleph_sat_ovars'(413,[]).
'$aleph_sat_ovars'(414,[]).
'$aleph_sat_ovars'(415,[]).
'$aleph_sat_ovars'(416,[]).
'$aleph_sat_ovars'(417,[]).
'$aleph_sat_ovars'(418,[]).
'$aleph_sat_ovars'(419,[]).
'$aleph_sat_ovars'(420,[]).
'$aleph_sat_ovars'(421,[]).
'$aleph_sat_ovars'(422,[]).

:- dynamic '$aleph_sat_atom'/2.


:- dynamic '$aleph_local'/2.


:- dynamic '$aleph_good'/3.


:- dynamic '$aleph_feature'/2.



aleph_manual('http://www.comlab.ox.ac.uk/oucl/groups/machlearn/Aleph/index.html').


aleph_version_date('Sun Mar 11 03:25:37 UTC 2007').


aleph_version(5).


aleph_background_predicate(A) :-
   predicate_property(A,B),
   (
     B=static
   ;
     B= (dynamic)
   ;
     B=built_in
   ),
   !.


broadcast(_).


aleph_reconsult(A) :-
   reconsult(A).


aleph_consult(A) :-
   consult(A).


remove_alarm(_) :-
   alarm(0,_,_).


aleph_random(A) :-
   A is random.


discretize_outputs([],[],[],A,A).
discretize_outputs([-A|E],[D|F],[C|G],B,I) :-
   discretize(A,_,_),
   !,
   B=[c2c(A,C,D) |H],
   discretize_outputs(E,F,G,H,I).
discretize_outputs([_|B],[A|C],[A|D],E,F) :-
   discretize_outputs(B,C,D,E,F).


discr_rw_body([],A,A).
discr_rw_body([A|K],E,M) :-
   functor(A,B,C),
   functor(D,B,C),
   '$aleph_global'(modeb,modeb(_,D)),
   A=..[B|G],
   D=..[B|F],
   E=[I|H],
   discretize_outputs(F,G,J,H,L),
   I=..[B|J],
   discr_rw_body(K,L,M).


do_discretization_rewrite((A:-true),(A:-true)) :-
   !.
do_discretization_rewrite((A:-B),(A:-E)) :-
   goals_to_list(B,C),
   discr_rw_body(C,D,[]),
   list_to_goals(D,E).


discretization_rewrite(A,B) :-
   discretize(on),
   !,
   do_discretization_rewrite(A,B).
discretization_rewrite(A,A).


range2value([r(A,B,D) |_],C,A) :-
   B>=C,
   C<D,
   !.
range2value([_|A],B,C) :-
   range2value(A,B,C).


c2c(A,B,D) :-
   ground(A),
   ground(B),
   discretize(A,_,C),
   range2value(C,B,D),
   !.
c2c(_,A,A).


discretize_args([],[],[]).
discretize_args([+A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([-A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).
discretize_args([#A|D],[B|E],[C|F]) :-
   c2c(A,B,C),
   discretize_args(D,E,F).


discretize_atom(A,B,F) :-
   A=..[C|E],
   B=..[C|D],
   discretize_args(D,E,G),
   F=..[C|G].

:- dynamic discretize/2.


:- dynamic discretize/1.

discretize(off).


sat(A,B) :-
   setting(construct_bottom,false),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   asserta(user:'$aleph_sat'(hovars,[])),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   setting(construct_bottom,reduction),
   !,
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   integrate_head_lit(D),
   asserta(user:'$aleph_sat'(hovars,D)),
   sat_end_hook(A,B),
   broadcast(end(sat(B,0,0))).
sat(A,B) :-
   set(stage,saturation),
   sat_start_hook(A,B),
   sat_prelims,
   example(B,A,C),
   broadcast(start(sat(B))),
   p1_message(sat),
   p_message(B),
   p_message(C),
   record_sat_example(B),
   asserta(user:'$aleph_sat'(example,example(B,A))),
   split_args(C,E,F,D,G),
   integrate_args(unknown,C,D),
   stopwatch(Q),
   assertz(user:'$aleph_sat_atom'(C,mode(E,D,F,G))),
   '$aleph_global'(i,set(i,H)),
   flatten(0,H,0,O),
   '$aleph_sat_litinfo'(1,_,I,_,_,_),
   get_vars(I,D,J),
   asserta(user:'$aleph_sat'(hovars,J)),
   get_vars(I,F,K),
   asserta(user:'$aleph_sat'(hivars,K)),
   functor(C,L,M),
   get_determs(L/M,N),
   ( '$aleph_global'(determination,determination(L/M,(=)/2))
   ->
     asserta(user:'$aleph_sat'(eq,true))
   ;
     asserta(user:'$aleph_sat'(eq,false))
   ),
   get_atoms(N,1,H,O,R),
   stopwatch(P),
   Z is P-Q,
   asserta(user:'$aleph_sat'(lastlit,R)),
   asserta(user:'$aleph_sat'(botsize,R)),
   update_generators,
   rm_moderepeats(R,S),
   rm_commutative(R,U),
   rm_symmetric(R,V),
   rm_redundant(R,W),
   rm_uselesslits(R,T),
   rm_nreduce(R,X),
   Y is R-S-T-U-V-W-X,
   show(bottom),
   p1_message(literals),
   p_message(Y),
   p1_message('saturation time'),
   p_message(Z),
   sat_end_hook(A,B),
   broadcast(end(sat(B,Y,Z))),
   store(bottom),
   noset(stage).
sat(_,_) :-
   noset(stage).


pp_dclause(A) :-
   ( '$aleph_global'(portray_literals,set(portray_literals,true))
   ->
     pp_dclause(A,true)
   ;
     pp_dclause(A,false)
   ).


p_message(A) :-
   write('['),
   write(A),
   write(']'),
   nl,
   flush_output.


list_to_goals([A],A) :-
   !.
list_to_goals([A|B],(A,C)) :-
   list_to_goals(B,C).

:- dynamic '$aleph_sat'/2.

'$aleph_sat'(botsize,422).
'$aleph_sat'(lastlit,422).
'$aleph_sat'(lastvar,94).
'$aleph_sat'(lastterm,94).
'$aleph_sat'(eq,false).
'$aleph_sat'(hivars,[1,2]).
'$aleph_sat'(hovars,[]).
'$aleph_sat'(example,example(1,pos)).
'$aleph_sat'(lastnlit,-1).


goals_to_list((true,A),B) :-
   !,
   goals_to_list(A,B).
goals_to_list((A,B),[A|C]) :-
   !,
   goals_to_list(B,C).
goals_to_list(true,[]) :-
   !.
goals_to_list(A,[A]).


evalfn(B,C) :-
   ( setting(evalfn,A)
   ->
     true
   ;
     A=coverage
   ),
   evalfn(A,B,C).


add_hyp(end_of_file) :-
   !.
add_hyp(A) :-
   nlits(A,F),
   label_create(A,B),
   extract_count(pos,B,D),
   extract_count(neg,B,E),
   retractall(user:'$aleph_global'(hypothesis,hypothesis(_,_,_,_))),
   extract_pos(B,H),
   extract_neg(B,I),
   setting(evalfn,C),
   complete_label(C,A,[D,E,F],G),
   asserta(user:'$aleph_global'(hypothesis,hypothesis(G,A,H,I))).


show(settings) :-
   nl,
   p_message(settings),
   prolog:findall(A-B,'$aleph_global'(A,set(A,B)),C),
   sort(C,D),
   aleph_member(E-F,D),
   tab(8),
   write(E=F),
   nl,
   fail.
show(determinations) :-
   nl,
   p_message(determinations),
   show_global(determination,determination(_,_)).
show(modes) :-
   nl,
   p_message(modes),
   show_global(mode,mode(_,_)).
show(modehs) :-
   nl,
   p_message(modehs),
   show_global(modeh,modeh(_,_)).
show(modebs) :-
   nl,
   p_message(modebs),
   show_global(modeb,modeb(_,_)).
show(sizes) :-
   nl,
   p_message(sizes),
   show_global(size,size(_,_)).
show(bottom) :-
   nl,
   p_message('bottom clause'),
   setting(verbosity,A),
   A>0,
   '$aleph_sat'(lastlit,B),
   get_clause(1,B,[],C),
   pp_dlist(C).
show(theory) :-
   nl,
   p_message(theory),
   nl,
   '$aleph_global'(rules,rules(A)),
   aleph_reverse(A,B),
   aleph_member(C,B),
   '$aleph_global'(theory,theory(C,_,_,_,_)),
   eval_rule(C,_),
   fail.
show(theory) :-
   get_performance.
show(pos) :-
   nl,
   p_message(positives),
   store(greedy),
   examples(pos,_),
   reinstate(greedy),
   fail.
show(posleft) :-
   nl,
   p_message('positives left'),
   example(_,pos,A),
   \+call(user:A),
   write(A),
   write('.'),
   nl,
   fail.
show(neg) :-
   nl,
   p_message(negatives),
   store(greedy),
   examples(neg,_),
   reinstate(greedy),
   fail.
show(rand) :-
   nl,
   p_message(random),
   examples(rand,_),
   fail.
show(uspec) :-
   nl,
   p_message(uspec),
   examples(uspec,_),
   fail.
show(gcws) :-
   nl,
   p_message('gcws hypothesis'),
   '$aleph_search'(gcwshyp,hypothesis(_,A,_,_)),
   pp_dclause(A),
   fail.
show(abgen) :-
   nl,
   p_message('abduced hypothesis'),
   '$aleph_search'(abgenhyp,hypothesis(_,A,_,_)),
   aleph_member(B,A),
   pp_dclause(B),
   fail.
show(hypothesis) :-
   setting(portray_hypothesis,A),
   aleph_portray(hypothesis,A),
   fail.
show(search) :-
   setting(portray_search,A),
   aleph_portray(search,A).
show(good) :-
   setting(good,true),
   nl,
   p_message('good clauses'),
   ( setting(minscore,A)
   ->
     true
   ;
     A is(-inf)
   ),
   setting(evalfn,E),
   '$aleph_good'(_,B,D),
   B=[_,_,_,C|_],
   C>=A,
   pp_dclause(D),
   show_stats(E,B),
   fail.
show(good) :-
   setting(good,true),
   setting(goodfile,A),
   aleph_open(A,read,C),
   ( setting(minscore,B)
   ->
     true
   ;
     B is(-inf)
   ),
   setting(evalfn,G),
   repeat,
   read(C,D),
   ( D='$aleph_good'(_,E,H)
   ->
     E=[_,_,_,F|_],
     F>=B,
     show_stats(G,E),
     pp_dclause(H),
     fail
   ;
     close(C),
     !
   ).
show(features) :-
   setting(evalfn,A),
   ( '$aleph_feature'(feature,_)
   ->
     true
   ;
     gen_features
   ),
   p_message('features from good clauses'),
   '$aleph_feature'(feature,feature(C,B,_,D,E)),
   show_stats(A,B),
   pp_dclause(feature(C,(D:-E))),
   fail.
show(constraints) :-
   setting(good,true),
   nl,
   p_message(constraints),
   setting(noise,A),
   E is-A,
   '$aleph_good'(_,C,B),
   split_clause(B,false,_),
   C=[_,_,_,D],
   D>=E,
   pp_dclause(B),
   show_stats(coverage,C),
   fail.
show(constraints) :-
   show(false/0).
show(A/B) :-
   functor(C,A,B),
   prolog:current_predicate(A,user:C),
   nl,
   p1_message(definition),
   p_message(A/B),
   prolog:clause(user:C,D),
   \+in(D,'$aleph_search'(pclause,pclause(_,_))),
   pp_dclause((C:-D)),
   fail.
show(train_pos) :-
   setting(portray_examples,A),
   aleph_portray(train_pos,A).
show(train_neg) :-
   setting(portray_examples,A),
   aleph_portray(train_neg,A).
show(test_pos) :-
   setting(portray_examples,A),
   aleph_portray(test_pos,A).
show(test_neg) :-
   setting(portray_examples,A),
   aleph_portray(test_neg,A).
show(_).


reduce :-
   setting(search,A),
   catch(doreduce(A),abort,reinstate_values),
   !.


sat(A) :-
   integer(A),
   example(A,pos,_),
   sat(pos,A),
   !.
sat(A) :-
   record_example(check,uspec,A,B),
   sat(uspec,B),
   !.


clean_up :-
   clean_up_init,
   clean_up_sat,
   clean_up_reduce.


get_performance :-
   setting(evalfn,A),
   (
     A=sd
   ;
     A=mse
   ),
   !.
get_performance :-
   ( setting(train_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(train_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Training set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Training set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance :-
   ( setting(test_pos,A)
   ->
     test(A,noshow,C,B),
     D is B-C
   ;
     B=0,
     C=0,
     D=0
   ),
   ( setting(test_neg,E)
   ->
     test(E,noshow,G,F),
     H is F-G
   ;
     F=0,
     H=0,
     G=0
   ),
   B+F>0,
   p_message('Test set performance'),
   write_cmatrix([C,G,D,H]),
   p1_message('Test set summary'),
   p_message([C,G,D,H]),
   fail.
get_performance.


example(0,uspec,false).
example(1,pos,advisedby(person309_1,person378_1)).
example(2,pos,advisedby(person141_1,person331_1)).
example(3,pos,advisedby(person288_1,person165_1)).
example(4,pos,advisedby(person159_1,person201_1)).
example(5,pos,advisedby(person159_1,person57_1)).
example(6,pos,advisedby(person226_1,person324_1)).
example(7,pos,advisedby(person242_1,person29_1)).
example(8,pos,advisedby(person242_1,person165_1)).
example(9,pos,advisedby(person348_1,person324_1)).
example(10,pos,advisedby(person6_1,person29_1)).
example(11,pos,advisedby(person6_1,person165_1)).
example(12,pos,advisedby(person75_1,person331_1)).
example(13,pos,advisedby(person303_1,person165_1)).
example(14,pos,advisedby(person303_1,person29_1)).
example(15,pos,advisedby(person249_1,person331_1)).
example(16,pos,advisedby(person68_1,person201_1)).
example(17,pos,advisedby(person265_1,person168_1)).
example(18,pos,advisedby(person381_1,person168_1)).
example(19,pos,advisedby(person176_1,person407_1)).
example(20,pos,advisedby(person272_1,person7_1)).
example(21,pos,advisedby(person37_1,person79_1)).
example(22,pos,advisedby(person353_1,person319_1)).
example(23,pos,advisedby(person432_1,person240_1)).
example(24,pos,advisedby(person239_1,person171_1)).
example(25,pos,advisedby(person13_1,person240_1)).
example(26,pos,advisedby(person286_1,person171_1)).
example(27,pos,advisedby(person418_1,person171_1)).
example(28,pos,advisedby(person14_1,person150_1)).
example(29,pos,advisedby(person320_1,person150_1)).
example(30,pos,advisedby(person352_1,person415_1)).
example(31,pos,advisedby(person352_1,person292_1)).
example(32,pos,advisedby(person276_1,person407_1)).
example(33,pos,advisedby(person45_1,person415_1)).
example(34,pos,advisedby(person45_1,person211_1)).
example(35,pos,advisedby(person148_1,person171_1)).
example(36,pos,advisedby(person314_1,person415_1)).
example(37,pos,advisedby(person275_1,person79_1)).
example(38,pos,advisedby(person21_1,person211_1)).
example(39,pos,advisedby(person262_1,person415_1)).
example(40,pos,advisedby(person262_1,person292_1)).
example(41,pos,advisedby(person257_1,person240_1)).
example(42,pos,advisedby(person380_1,person79_1)).
example(43,pos,advisedby(person384_1,person240_1)).
example(44,pos,advisedby(person384_1,person407_1)).
example(45,pos,advisedby(person266_1,person7_1)).
example(46,pos,advisedby(person312_1,person319_1)).
example(47,pos,advisedby(person208_1,person319_1)).
example(48,pos,advisedby(person63_1,person415_1)).
example(49,pos,advisedby(person318_1,person185_1)).
example(50,pos,advisedby(person318_1,person319_1)).
example(51,pos,advisedby(person83_1,person349_1)).
example(52,pos,advisedby(person217_1,person342_1)).
example(53,pos,advisedby(person217_1,person72_1)).
example(54,pos,advisedby(person206_1,person342_1)).
example(55,pos,advisedby(person206_1,person72_1)).
example(56,pos,advisedby(person81_1,person342_1)).
example(57,pos,advisedby(person81_1,person393_1)).
example(58,pos,advisedby(person122_1,person72_1)).
example(59,pos,advisedby(person228_1,person342_1)).
example(60,pos,advisedby(person228_1,person393_1)).
example(61,pos,advisedby(person228_1,person394_1)).
example(62,pos,advisedby(person41_1,person394_1)).
example(63,pos,advisedby(person163_1,person393_1)).
example(64,pos,advisedby(person435_1,person279_1)).
example(65,pos,advisedby(person404_1,person72_1)).
example(66,pos,advisedby(person142_1,person342_1)).
example(67,pos,advisedby(person300_1,person342_1)).
example(68,pos,advisedby(person200_1,person72_1)).
example(69,pos,advisedby(person157_1,person72_1)).
example(70,pos,advisedby(person113_1,person394_1)).
example(71,pos,advisedby(person113_1,person342_1)).
example(72,pos,advisedby(person18_1,person335_1)).
example(73,pos,advisedby(person9_1,person335_1)).
example(74,pos,advisedby(person429_1,person335_1)).
example(75,pos,advisedby(person362_1,person5_1)).
example(76,pos,advisedby(person362_1,person335_1)).
example(77,pos,advisedby(person96_1,person5_1)).
example(78,pos,advisedby(person263_1,person5_1)).
example(79,pos,advisedby(person183_1,person5_1)).
example(80,pos,advisedby(person118_1,person5_1)).
example(1,neg,advisedby(person191_1,person378_1)).
example(2,neg,advisedby(person397_1,person378_1)).
example(3,neg,advisedby(person138_1,person378_1)).
example(4,neg,advisedby(person303_1,person378_1)).
example(5,neg,advisedby(person77_1,person378_1)).
example(6,neg,advisedby(person141_1,person378_1)).
example(7,neg,advisedby(person383_1,person378_1)).
example(8,neg,advisedby(person422_1,person378_1)).
example(9,neg,advisedby(person390_1,person378_1)).
example(10,neg,advisedby(person288_1,person378_1)).
example(11,neg,advisedby(person159_1,person378_1)).
example(12,neg,advisedby(person172_1,person378_1)).
example(13,neg,advisedby(person226_1,person378_1)).
example(14,neg,advisedby(person242_1,person378_1)).
example(15,neg,advisedby(person416_1,person378_1)).
example(16,neg,advisedby(person348_1,person378_1)).
example(17,neg,advisedby(person278_1,person378_1)).
example(18,neg,advisedby(person6_1,person378_1)).
example(19,neg,advisedby(person75_1,person378_1)).
example(20,neg,advisedby(person249_1,person378_1)).
example(21,neg,advisedby(person68_1,person378_1)).
example(22,neg,advisedby(person205_1,person378_1)).
example(23,neg,advisedby(person182_1,person378_1)).
example(24,neg,advisedby(person23_1,person378_1)).
example(25,neg,advisedby(person310_1,person378_1)).
example(26,neg,advisedby(person424_1,person378_1)).
example(27,neg,advisedby(person401_1,person378_1)).
example(28,neg,advisedby(person237_1,person378_1)).
example(29,neg,advisedby(person58_1,person378_1)).
example(30,neg,advisedby(person144_1,person378_1)).
example(31,neg,advisedby(person125_1,person378_1)).
example(32,neg,advisedby(person350_1,person378_1)).
example(33,neg,advisedby(person356_1,person378_1)).
example(34,neg,advisedby(person294_1,person378_1)).
example(35,neg,advisedby(person315_1,person378_1)).
example(36,neg,advisedby(person191_1,person298_1)).
example(37,neg,advisedby(person397_1,person298_1)).
example(38,neg,advisedby(person138_1,person298_1)).
example(39,neg,advisedby(person303_1,person298_1)).
example(40,neg,advisedby(person77_1,person298_1)).
example(41,neg,advisedby(person141_1,person298_1)).
example(42,neg,advisedby(person309_1,person298_1)).
example(43,neg,advisedby(person383_1,person298_1)).
example(44,neg,advisedby(person422_1,person298_1)).
example(45,neg,advisedby(person390_1,person298_1)).
example(46,neg,advisedby(person288_1,person298_1)).
example(47,neg,advisedby(person159_1,person298_1)).
example(48,neg,advisedby(person172_1,person298_1)).
example(49,neg,advisedby(person226_1,person298_1)).
example(50,neg,advisedby(person242_1,person298_1)).
example(51,neg,advisedby(person416_1,person298_1)).
example(52,neg,advisedby(person348_1,person298_1)).
example(53,neg,advisedby(person278_1,person298_1)).
example(54,neg,advisedby(person6_1,person298_1)).
example(55,neg,advisedby(person75_1,person298_1)).
example(56,neg,advisedby(person249_1,person298_1)).
example(57,neg,advisedby(person68_1,person298_1)).
example(58,neg,advisedby(person205_1,person298_1)).
example(59,neg,advisedby(person182_1,person298_1)).
example(60,neg,advisedby(person23_1,person298_1)).
example(61,neg,advisedby(person310_1,person298_1)).
example(62,neg,advisedby(person424_1,person298_1)).
example(63,neg,advisedby(person401_1,person298_1)).
example(64,neg,advisedby(person237_1,person298_1)).
example(65,neg,advisedby(person58_1,person298_1)).
example(66,neg,advisedby(person144_1,person298_1)).
example(67,neg,advisedby(person125_1,person298_1)).
example(68,neg,advisedby(person350_1,person298_1)).
example(69,neg,advisedby(person356_1,person298_1)).
example(70,neg,advisedby(person294_1,person298_1)).
example(71,neg,advisedby(person315_1,person298_1)).
example(72,neg,advisedby(person191_1,person52_1)).
example(73,neg,advisedby(person397_1,person52_1)).
example(74,neg,advisedby(person138_1,person52_1)).
example(75,neg,advisedby(person303_1,person52_1)).
example(76,neg,advisedby(person77_1,person52_1)).
example(77,neg,advisedby(person141_1,person52_1)).
example(78,neg,advisedby(person309_1,person52_1)).
example(79,neg,advisedby(person383_1,person52_1)).
example(80,neg,advisedby(person422_1,person52_1)).
example(81,neg,advisedby(person390_1,person52_1)).
example(82,neg,advisedby(person288_1,person52_1)).
example(83,neg,advisedby(person159_1,person52_1)).
example(84,neg,advisedby(person172_1,person52_1)).
example(85,neg,advisedby(person226_1,person52_1)).
example(86,neg,advisedby(person242_1,person52_1)).
example(87,neg,advisedby(person416_1,person52_1)).
example(88,neg,advisedby(person348_1,person52_1)).
example(89,neg,advisedby(person278_1,person52_1)).
example(90,neg,advisedby(person6_1,person52_1)).
example(91,neg,advisedby(person75_1,person52_1)).
example(92,neg,advisedby(person249_1,person52_1)).
example(93,neg,advisedby(person68_1,person52_1)).
example(94,neg,advisedby(person205_1,person52_1)).
example(95,neg,advisedby(person182_1,person52_1)).
example(96,neg,advisedby(person23_1,person52_1)).
example(97,neg,advisedby(person310_1,person52_1)).
example(98,neg,advisedby(person424_1,person52_1)).
example(99,neg,advisedby(person401_1,person52_1)).
example(100,neg,advisedby(person237_1,person52_1)).
example(101,neg,advisedby(person58_1,person52_1)).
example(102,neg,advisedby(person144_1,person52_1)).
example(103,neg,advisedby(person125_1,person52_1)).
example(104,neg,advisedby(person350_1,person52_1)).
example(105,neg,advisedby(person356_1,person52_1)).
example(106,neg,advisedby(person294_1,person52_1)).
example(107,neg,advisedby(person315_1,person52_1)).
example(108,neg,advisedby(person191_1,person57_1)).
example(109,neg,advisedby(person397_1,person57_1)).
example(110,neg,advisedby(person138_1,person57_1)).
example(111,neg,advisedby(person303_1,person57_1)).
example(112,neg,advisedby(person77_1,person57_1)).
example(113,neg,advisedby(person141_1,person57_1)).
example(114,neg,advisedby(person309_1,person57_1)).
example(115,neg,advisedby(person383_1,person57_1)).
example(116,neg,advisedby(person422_1,person57_1)).
example(117,neg,advisedby(person390_1,person57_1)).
example(118,neg,advisedby(person288_1,person57_1)).
example(119,neg,advisedby(person172_1,person57_1)).
example(120,neg,advisedby(person226_1,person57_1)).
example(121,neg,advisedby(person242_1,person57_1)).
example(122,neg,advisedby(person416_1,person57_1)).
example(123,neg,advisedby(person348_1,person57_1)).
example(124,neg,advisedby(person278_1,person57_1)).
example(125,neg,advisedby(person6_1,person57_1)).
example(126,neg,advisedby(person75_1,person57_1)).
example(127,neg,advisedby(person249_1,person57_1)).
example(128,neg,advisedby(person68_1,person57_1)).
example(129,neg,advisedby(person205_1,person57_1)).
example(130,neg,advisedby(person182_1,person57_1)).
example(131,neg,advisedby(person23_1,person57_1)).
example(132,neg,advisedby(person310_1,person57_1)).
example(133,neg,advisedby(person424_1,person57_1)).
example(134,neg,advisedby(person401_1,person57_1)).
example(135,neg,advisedby(person237_1,person57_1)).
example(136,neg,advisedby(person58_1,person57_1)).
example(137,neg,advisedby(person144_1,person57_1)).
example(138,neg,advisedby(person125_1,person57_1)).
example(139,neg,advisedby(person350_1,person57_1)).
example(140,neg,advisedby(person356_1,person57_1)).
example(141,neg,advisedby(person294_1,person57_1)).
example(142,neg,advisedby(person315_1,person57_1)).
example(143,neg,advisedby(person191_1,person231_1)).
example(144,neg,advisedby(person397_1,person231_1)).
example(145,neg,advisedby(person138_1,person231_1)).
example(146,neg,advisedby(person303_1,person231_1)).
example(147,neg,advisedby(person77_1,person231_1)).
example(148,neg,advisedby(person141_1,person231_1)).
example(149,neg,advisedby(person309_1,person231_1)).
example(150,neg,advisedby(person383_1,person231_1)).
example(151,neg,advisedby(person422_1,person231_1)).
example(152,neg,advisedby(person390_1,person231_1)).
example(153,neg,advisedby(person288_1,person231_1)).
example(154,neg,advisedby(person159_1,person231_1)).
example(155,neg,advisedby(person172_1,person231_1)).
example(156,neg,advisedby(person226_1,person231_1)).
example(157,neg,advisedby(person242_1,person231_1)).
example(158,neg,advisedby(person416_1,person231_1)).
example(159,neg,advisedby(person348_1,person231_1)).
example(160,neg,advisedby(person278_1,person231_1)).
example(161,neg,advisedby(person6_1,person231_1)).
example(162,neg,advisedby(person75_1,person231_1)).
example(163,neg,advisedby(person249_1,person231_1)).
example(164,neg,advisedby(person68_1,person231_1)).
example(165,neg,advisedby(person205_1,person231_1)).
example(166,neg,advisedby(person182_1,person231_1)).
example(167,neg,advisedby(person23_1,person231_1)).
example(168,neg,advisedby(person310_1,person231_1)).
example(169,neg,advisedby(person424_1,person231_1)).
example(170,neg,advisedby(person401_1,person231_1)).
example(171,neg,advisedby(person237_1,person231_1)).
example(172,neg,advisedby(person58_1,person231_1)).
example(173,neg,advisedby(person144_1,person231_1)).
example(174,neg,advisedby(person125_1,person231_1)).
example(175,neg,advisedby(person350_1,person231_1)).
example(176,neg,advisedby(person356_1,person231_1)).
example(177,neg,advisedby(person294_1,person231_1)).
example(178,neg,advisedby(person315_1,person231_1)).
example(179,neg,advisedby(person191_1,person181_1)).
example(180,neg,advisedby(person397_1,person181_1)).
example(181,neg,advisedby(person138_1,person181_1)).
example(182,neg,advisedby(person303_1,person181_1)).
example(183,neg,advisedby(person77_1,person181_1)).
example(184,neg,advisedby(person141_1,person181_1)).
example(185,neg,advisedby(person309_1,person181_1)).
example(186,neg,advisedby(person383_1,person181_1)).
example(187,neg,advisedby(person422_1,person181_1)).
example(188,neg,advisedby(person390_1,person181_1)).
example(189,neg,advisedby(person288_1,person181_1)).
example(190,neg,advisedby(person159_1,person181_1)).
example(191,neg,advisedby(person172_1,person181_1)).
example(192,neg,advisedby(person226_1,person181_1)).
example(193,neg,advisedby(person242_1,person181_1)).
example(194,neg,advisedby(person416_1,person181_1)).
example(195,neg,advisedby(person348_1,person181_1)).
example(196,neg,advisedby(person278_1,person181_1)).
example(197,neg,advisedby(person6_1,person181_1)).
example(198,neg,advisedby(person75_1,person181_1)).
example(199,neg,advisedby(person249_1,person181_1)).
example(200,neg,advisedby(person68_1,person181_1)).
example(201,neg,advisedby(person205_1,person181_1)).
example(202,neg,advisedby(person182_1,person181_1)).
example(203,neg,advisedby(person23_1,person181_1)).
example(204,neg,advisedby(person310_1,person181_1)).
example(205,neg,advisedby(person424_1,person181_1)).
example(206,neg,advisedby(person401_1,person181_1)).
example(207,neg,advisedby(person237_1,person181_1)).
example(208,neg,advisedby(person58_1,person181_1)).
example(209,neg,advisedby(person144_1,person181_1)).
example(210,neg,advisedby(person125_1,person181_1)).
example(211,neg,advisedby(person350_1,person181_1)).
example(212,neg,advisedby(person356_1,person181_1)).
example(213,neg,advisedby(person294_1,person181_1)).
example(214,neg,advisedby(person315_1,person181_1)).
example(215,neg,advisedby(person191_1,person364_1)).
example(216,neg,advisedby(person397_1,person364_1)).
example(217,neg,advisedby(person138_1,person364_1)).
example(218,neg,advisedby(person303_1,person364_1)).
example(219,neg,advisedby(person77_1,person364_1)).
example(220,neg,advisedby(person141_1,person364_1)).
example(221,neg,advisedby(person309_1,person364_1)).
example(222,neg,advisedby(person383_1,person364_1)).
example(223,neg,advisedby(person422_1,person364_1)).
example(224,neg,advisedby(person390_1,person364_1)).
example(225,neg,advisedby(person288_1,person364_1)).
example(226,neg,advisedby(person159_1,person364_1)).
example(227,neg,advisedby(person172_1,person364_1)).
example(228,neg,advisedby(person226_1,person364_1)).
example(229,neg,advisedby(person242_1,person364_1)).
example(230,neg,advisedby(person416_1,person364_1)).
example(231,neg,advisedby(person348_1,person364_1)).
example(232,neg,advisedby(person278_1,person364_1)).
example(233,neg,advisedby(person6_1,person364_1)).
example(234,neg,advisedby(person75_1,person364_1)).
example(235,neg,advisedby(person249_1,person364_1)).
example(236,neg,advisedby(person68_1,person364_1)).
example(237,neg,advisedby(person205_1,person364_1)).
example(238,neg,advisedby(person182_1,person364_1)).
example(239,neg,advisedby(person23_1,person364_1)).
example(240,neg,advisedby(person310_1,person364_1)).
example(241,neg,advisedby(person424_1,person364_1)).
example(242,neg,advisedby(person401_1,person364_1)).
example(243,neg,advisedby(person237_1,person364_1)).
example(244,neg,advisedby(person58_1,person364_1)).
example(245,neg,advisedby(person144_1,person364_1)).
example(246,neg,advisedby(person125_1,person364_1)).
example(247,neg,advisedby(person350_1,person364_1)).
example(248,neg,advisedby(person356_1,person364_1)).
example(249,neg,advisedby(person294_1,person364_1)).
example(250,neg,advisedby(person315_1,person364_1)).
example(251,neg,advisedby(person191_1,person331_1)).
example(252,neg,advisedby(person397_1,person331_1)).
example(253,neg,advisedby(person138_1,person331_1)).
example(254,neg,advisedby(person303_1,person331_1)).
example(255,neg,advisedby(person77_1,person331_1)).
example(256,neg,advisedby(person309_1,person331_1)).
example(257,neg,advisedby(person383_1,person331_1)).
example(258,neg,advisedby(person422_1,person331_1)).
example(259,neg,advisedby(person390_1,person331_1)).
example(260,neg,advisedby(person288_1,person331_1)).
example(261,neg,advisedby(person159_1,person331_1)).
example(262,neg,advisedby(person172_1,person331_1)).
example(263,neg,advisedby(person226_1,person331_1)).
example(264,neg,advisedby(person242_1,person331_1)).
example(265,neg,advisedby(person416_1,person331_1)).
example(266,neg,advisedby(person348_1,person331_1)).
example(267,neg,advisedby(person278_1,person331_1)).
example(268,neg,advisedby(person6_1,person331_1)).
example(269,neg,advisedby(person68_1,person331_1)).
example(270,neg,advisedby(person205_1,person331_1)).
example(271,neg,advisedby(person182_1,person331_1)).
example(272,neg,advisedby(person23_1,person331_1)).
example(273,neg,advisedby(person310_1,person331_1)).
example(274,neg,advisedby(person424_1,person331_1)).
example(275,neg,advisedby(person401_1,person331_1)).
example(276,neg,advisedby(person237_1,person331_1)).
example(277,neg,advisedby(person58_1,person331_1)).
example(278,neg,advisedby(person144_1,person331_1)).
example(279,neg,advisedby(person125_1,person331_1)).
example(280,neg,advisedby(person350_1,person331_1)).
example(281,neg,advisedby(person356_1,person331_1)).
example(282,neg,advisedby(person294_1,person331_1)).
example(283,neg,advisedby(person315_1,person331_1)).
example(284,neg,advisedby(person191_1,person103_1)).
example(285,neg,advisedby(person397_1,person103_1)).
example(286,neg,advisedby(person138_1,person103_1)).
example(287,neg,advisedby(person303_1,person103_1)).
example(288,neg,advisedby(person77_1,person103_1)).
example(289,neg,advisedby(person141_1,person103_1)).
example(290,neg,advisedby(person309_1,person103_1)).
example(291,neg,advisedby(person383_1,person103_1)).
example(292,neg,advisedby(person422_1,person103_1)).
example(293,neg,advisedby(person390_1,person103_1)).
example(294,neg,advisedby(person288_1,person103_1)).
example(295,neg,advisedby(person159_1,person103_1)).
example(296,neg,advisedby(person172_1,person103_1)).
example(297,neg,advisedby(person226_1,person103_1)).
example(298,neg,advisedby(person242_1,person103_1)).
example(299,neg,advisedby(person416_1,person103_1)).
example(300,neg,advisedby(person348_1,person103_1)).
example(301,neg,advisedby(person278_1,person103_1)).
example(302,neg,advisedby(person6_1,person103_1)).
example(303,neg,advisedby(person75_1,person103_1)).
example(304,neg,advisedby(person249_1,person103_1)).
example(305,neg,advisedby(person68_1,person103_1)).
example(306,neg,advisedby(person205_1,person103_1)).
example(307,neg,advisedby(person182_1,person103_1)).
example(308,neg,advisedby(person23_1,person103_1)).
example(309,neg,advisedby(person310_1,person103_1)).
example(310,neg,advisedby(person424_1,person103_1)).
example(311,neg,advisedby(person401_1,person103_1)).
example(312,neg,advisedby(person237_1,person103_1)).
example(313,neg,advisedby(person58_1,person103_1)).
example(314,neg,advisedby(person144_1,person103_1)).
example(315,neg,advisedby(person125_1,person103_1)).
example(316,neg,advisedby(person350_1,person103_1)).
example(317,neg,advisedby(person356_1,person103_1)).
example(318,neg,advisedby(person294_1,person103_1)).
example(319,neg,advisedby(person315_1,person103_1)).
example(320,neg,advisedby(person191_1,person165_1)).
example(321,neg,advisedby(person397_1,person165_1)).
example(322,neg,advisedby(person138_1,person165_1)).
example(323,neg,advisedby(person77_1,person165_1)).
example(324,neg,advisedby(person141_1,person165_1)).
example(325,neg,advisedby(person309_1,person165_1)).
example(326,neg,advisedby(person383_1,person165_1)).
example(327,neg,advisedby(person422_1,person165_1)).
example(328,neg,advisedby(person390_1,person165_1)).
example(329,neg,advisedby(person159_1,person165_1)).
example(330,neg,advisedby(person172_1,person165_1)).
example(331,neg,advisedby(person226_1,person165_1)).
example(332,neg,advisedby(person416_1,person165_1)).
example(333,neg,advisedby(person348_1,person165_1)).
example(334,neg,advisedby(person278_1,person165_1)).
example(335,neg,advisedby(person75_1,person165_1)).
example(336,neg,advisedby(person249_1,person165_1)).
example(337,neg,advisedby(person68_1,person165_1)).
example(338,neg,advisedby(person205_1,person165_1)).
example(339,neg,advisedby(person182_1,person165_1)).
example(340,neg,advisedby(person23_1,person165_1)).
example(341,neg,advisedby(person310_1,person165_1)).
example(342,neg,advisedby(person424_1,person165_1)).
example(343,neg,advisedby(person401_1,person165_1)).
example(344,neg,advisedby(person237_1,person165_1)).
example(345,neg,advisedby(person58_1,person165_1)).
example(346,neg,advisedby(person144_1,person165_1)).
example(347,neg,advisedby(person125_1,person165_1)).
example(348,neg,advisedby(person350_1,person165_1)).
example(349,neg,advisedby(person356_1,person165_1)).
example(350,neg,advisedby(person294_1,person165_1)).
example(351,neg,advisedby(person315_1,person165_1)).
example(352,neg,advisedby(person191_1,person29_1)).
example(353,neg,advisedby(person397_1,person29_1)).
example(354,neg,advisedby(person138_1,person29_1)).
example(355,neg,advisedby(person77_1,person29_1)).
example(356,neg,advisedby(person141_1,person29_1)).
example(357,neg,advisedby(person309_1,person29_1)).
example(358,neg,advisedby(person383_1,person29_1)).
example(359,neg,advisedby(person422_1,person29_1)).
example(360,neg,advisedby(person390_1,person29_1)).
example(361,neg,advisedby(person288_1,person29_1)).
example(362,neg,advisedby(person159_1,person29_1)).
example(363,neg,advisedby(person172_1,person29_1)).
example(364,neg,advisedby(person226_1,person29_1)).
example(365,neg,advisedby(person416_1,person29_1)).
example(366,neg,advisedby(person348_1,person29_1)).
example(367,neg,advisedby(person278_1,person29_1)).
example(368,neg,advisedby(person75_1,person29_1)).
example(369,neg,advisedby(person249_1,person29_1)).
example(370,neg,advisedby(person68_1,person29_1)).
example(371,neg,advisedby(person205_1,person29_1)).
example(372,neg,advisedby(person182_1,person29_1)).
example(373,neg,advisedby(person23_1,person29_1)).
example(374,neg,advisedby(person310_1,person29_1)).
example(375,neg,advisedby(person424_1,person29_1)).
example(376,neg,advisedby(person401_1,person29_1)).
example(377,neg,advisedby(person237_1,person29_1)).
example(378,neg,advisedby(person58_1,person29_1)).
example(379,neg,advisedby(person144_1,person29_1)).
example(380,neg,advisedby(person125_1,person29_1)).
example(381,neg,advisedby(person350_1,person29_1)).
example(382,neg,advisedby(person356_1,person29_1)).
example(383,neg,advisedby(person294_1,person29_1)).
example(384,neg,advisedby(person315_1,person29_1)).
example(385,neg,advisedby(person191_1,person201_1)).
example(386,neg,advisedby(person397_1,person201_1)).
example(387,neg,advisedby(person138_1,person201_1)).
example(388,neg,advisedby(person303_1,person201_1)).
example(389,neg,advisedby(person77_1,person201_1)).
example(390,neg,advisedby(person141_1,person201_1)).
example(391,neg,advisedby(person309_1,person201_1)).
example(392,neg,advisedby(person383_1,person201_1)).
example(393,neg,advisedby(person422_1,person201_1)).
example(394,neg,advisedby(person390_1,person201_1)).
example(395,neg,advisedby(person288_1,person201_1)).
example(396,neg,advisedby(person172_1,person201_1)).
example(397,neg,advisedby(person226_1,person201_1)).
example(398,neg,advisedby(person242_1,person201_1)).
example(399,neg,advisedby(person416_1,person201_1)).
example(400,neg,advisedby(person348_1,person201_1)).
example(401,neg,advisedby(person278_1,person201_1)).
example(402,neg,advisedby(person6_1,person201_1)).
example(403,neg,advisedby(person75_1,person201_1)).
example(404,neg,advisedby(person249_1,person201_1)).
example(405,neg,advisedby(person205_1,person201_1)).
example(406,neg,advisedby(person182_1,person201_1)).
example(407,neg,advisedby(person23_1,person201_1)).
example(408,neg,advisedby(person310_1,person201_1)).
example(409,neg,advisedby(person424_1,person201_1)).
example(410,neg,advisedby(person401_1,person201_1)).
example(411,neg,advisedby(person237_1,person201_1)).
example(412,neg,advisedby(person58_1,person201_1)).
example(413,neg,advisedby(person144_1,person201_1)).
example(414,neg,advisedby(person125_1,person201_1)).
example(415,neg,advisedby(person350_1,person201_1)).
example(416,neg,advisedby(person356_1,person201_1)).
example(417,neg,advisedby(person294_1,person201_1)).
example(418,neg,advisedby(person315_1,person201_1)).
example(419,neg,advisedby(person191_1,person324_1)).
example(420,neg,advisedby(person397_1,person324_1)).
example(421,neg,advisedby(person138_1,person324_1)).
example(422,neg,advisedby(person303_1,person324_1)).
example(423,neg,advisedby(person77_1,person324_1)).
example(424,neg,advisedby(person141_1,person324_1)).
example(425,neg,advisedby(person309_1,person324_1)).
example(426,neg,advisedby(person383_1,person324_1)).
example(427,neg,advisedby(person422_1,person324_1)).
example(428,neg,advisedby(person390_1,person324_1)).
example(429,neg,advisedby(person288_1,person324_1)).
example(430,neg,advisedby(person159_1,person324_1)).
example(431,neg,advisedby(person172_1,person324_1)).
example(432,neg,advisedby(person242_1,person324_1)).
example(433,neg,advisedby(person416_1,person324_1)).
example(434,neg,advisedby(person278_1,person324_1)).
example(435,neg,advisedby(person6_1,person324_1)).
example(436,neg,advisedby(person75_1,person324_1)).
example(437,neg,advisedby(person249_1,person324_1)).
example(438,neg,advisedby(person68_1,person324_1)).
example(439,neg,advisedby(person205_1,person324_1)).
example(440,neg,advisedby(person182_1,person324_1)).
example(441,neg,advisedby(person23_1,person324_1)).
example(442,neg,advisedby(person310_1,person324_1)).
example(443,neg,advisedby(person424_1,person324_1)).
example(444,neg,advisedby(person401_1,person324_1)).
example(445,neg,advisedby(person237_1,person324_1)).
example(446,neg,advisedby(person58_1,person324_1)).
example(447,neg,advisedby(person144_1,person324_1)).
example(448,neg,advisedby(person125_1,person324_1)).
example(449,neg,advisedby(person350_1,person324_1)).
example(450,neg,advisedby(person356_1,person324_1)).
example(451,neg,advisedby(person294_1,person324_1)).
example(452,neg,advisedby(person315_1,person324_1)).
example(453,neg,advisedby(person284_1,person319_1)).
example(454,neg,advisedby(person311_1,person319_1)).
example(455,neg,advisedby(person14_1,person319_1)).
example(456,neg,advisedby(person275_1,person319_1)).
example(457,neg,advisedby(person259_1,person319_1)).
example(458,neg,advisedby(person139_1,person319_1)).
example(459,neg,advisedby(person176_1,person319_1)).
example(460,neg,advisedby(person400_1,person319_1)).
example(461,neg,advisedby(person161_1,person319_1)).
example(462,neg,advisedby(person347_1,person319_1)).
example(463,neg,advisedby(person408_1,person319_1)).
example(464,neg,advisedby(person265_1,person319_1)).
example(465,neg,advisedby(person70_1,person319_1)).
example(466,neg,advisedby(person381_1,person319_1)).
example(467,neg,advisedby(person382_1,person319_1)).
example(468,neg,advisedby(person333_1,person319_1)).
example(469,neg,advisedby(person94_1,person319_1)).
example(470,neg,advisedby(person272_1,person319_1)).
example(471,neg,advisedby(person37_1,person319_1)).
example(472,neg,advisedby(person432_1,person319_1)).
example(473,neg,advisedby(person377_1,person319_1)).
example(474,neg,advisedby(person239_1,person319_1)).
example(475,neg,advisedby(person13_1,person319_1)).
example(476,neg,advisedby(person286_1,person319_1)).
example(477,neg,advisedby(person412_1,person319_1)).
example(478,neg,advisedby(person418_1,person319_1)).
example(479,neg,advisedby(person320_1,person319_1)).
example(480,neg,advisedby(person42_1,person319_1)).
example(481,neg,advisedby(person20_1,person319_1)).
example(482,neg,advisedby(person352_1,person319_1)).
example(483,neg,advisedby(person276_1,person319_1)).
example(484,neg,advisedby(person45_1,person319_1)).
example(485,neg,advisedby(person233_1,person319_1)).
example(486,neg,advisedby(person148_1,person319_1)).
example(487,neg,advisedby(person193_1,person319_1)).
example(488,neg,advisedby(person314_1,person319_1)).
example(489,neg,advisedby(person21_1,person319_1)).
example(490,neg,advisedby(person262_1,person319_1)).
example(491,neg,advisedby(person257_1,person319_1)).
example(492,neg,advisedby(person73_1,person319_1)).
example(493,neg,advisedby(person380_1,person319_1)).
example(494,neg,advisedby(person384_1,person319_1)).
example(495,neg,advisedby(person406_1,person319_1)).
example(496,neg,advisedby(person266_1,person319_1)).
example(497,neg,advisedby(person63_1,person319_1)).
example(498,neg,advisedby(person83_1,person319_1)).
example(499,neg,advisedby(person271_1,person319_1)).
example(500,neg,advisedby(person392_1,person319_1)).
example(501,neg,advisedby(person420_1,person319_1)).
example(502,neg,advisedby(person86_1,person319_1)).
example(503,neg,advisedby(person284_1,person292_1)).
example(504,neg,advisedby(person311_1,person292_1)).
example(505,neg,advisedby(person14_1,person292_1)).
example(506,neg,advisedby(person275_1,person292_1)).
example(507,neg,advisedby(person259_1,person292_1)).
example(508,neg,advisedby(person139_1,person292_1)).
example(509,neg,advisedby(person176_1,person292_1)).
example(510,neg,advisedby(person400_1,person292_1)).
example(511,neg,advisedby(person318_1,person292_1)).
example(512,neg,advisedby(person161_1,person292_1)).
example(513,neg,advisedby(person347_1,person292_1)).
example(514,neg,advisedby(person408_1,person292_1)).
example(515,neg,advisedby(person265_1,person292_1)).
example(516,neg,advisedby(person70_1,person292_1)).
example(517,neg,advisedby(person381_1,person292_1)).
example(518,neg,advisedby(person382_1,person292_1)).
example(519,neg,advisedby(person333_1,person292_1)).
example(520,neg,advisedby(person94_1,person292_1)).
example(521,neg,advisedby(person272_1,person292_1)).
example(522,neg,advisedby(person37_1,person292_1)).
example(523,neg,advisedby(person353_1,person292_1)).
example(524,neg,advisedby(person432_1,person292_1)).
example(525,neg,advisedby(person377_1,person292_1)).
example(526,neg,advisedby(person239_1,person292_1)).
example(527,neg,advisedby(person13_1,person292_1)).
example(528,neg,advisedby(person286_1,person292_1)).
example(529,neg,advisedby(person412_1,person292_1)).
example(530,neg,advisedby(person418_1,person292_1)).
example(531,neg,advisedby(person320_1,person292_1)).
example(532,neg,advisedby(person42_1,person292_1)).
example(533,neg,advisedby(person20_1,person292_1)).
example(534,neg,advisedby(person276_1,person292_1)).
example(535,neg,advisedby(person45_1,person292_1)).
example(536,neg,advisedby(person233_1,person292_1)).
example(537,neg,advisedby(person148_1,person292_1)).
example(538,neg,advisedby(person193_1,person292_1)).
example(539,neg,advisedby(person314_1,person292_1)).
example(540,neg,advisedby(person21_1,person292_1)).
example(541,neg,advisedby(person257_1,person292_1)).
example(542,neg,advisedby(person73_1,person292_1)).
example(543,neg,advisedby(person380_1,person292_1)).
example(544,neg,advisedby(person384_1,person292_1)).
example(545,neg,advisedby(person406_1,person292_1)).
example(546,neg,advisedby(person266_1,person292_1)).
example(547,neg,advisedby(person312_1,person292_1)).
example(548,neg,advisedby(person208_1,person292_1)).
example(549,neg,advisedby(person63_1,person292_1)).
example(550,neg,advisedby(person83_1,person292_1)).
example(551,neg,advisedby(person271_1,person292_1)).
example(552,neg,advisedby(person392_1,person292_1)).
example(553,neg,advisedby(person420_1,person292_1)).
example(554,neg,advisedby(person86_1,person292_1)).
example(555,neg,advisedby(person284_1,person293_1)).
example(556,neg,advisedby(person311_1,person293_1)).
example(557,neg,advisedby(person14_1,person293_1)).
example(558,neg,advisedby(person275_1,person293_1)).
example(559,neg,advisedby(person259_1,person293_1)).
example(560,neg,advisedby(person139_1,person293_1)).
example(561,neg,advisedby(person176_1,person293_1)).
example(562,neg,advisedby(person400_1,person293_1)).
example(563,neg,advisedby(person318_1,person293_1)).
example(564,neg,advisedby(person161_1,person293_1)).
example(565,neg,advisedby(person347_1,person293_1)).
example(566,neg,advisedby(person408_1,person293_1)).
example(567,neg,advisedby(person265_1,person293_1)).
example(568,neg,advisedby(person70_1,person293_1)).
example(569,neg,advisedby(person381_1,person293_1)).
example(570,neg,advisedby(person382_1,person293_1)).
example(571,neg,advisedby(person333_1,person293_1)).
example(572,neg,advisedby(person94_1,person293_1)).
example(573,neg,advisedby(person272_1,person293_1)).
example(574,neg,advisedby(person37_1,person293_1)).
example(575,neg,advisedby(person353_1,person293_1)).
example(576,neg,advisedby(person432_1,person293_1)).
example(577,neg,advisedby(person377_1,person293_1)).
example(578,neg,advisedby(person239_1,person293_1)).
example(579,neg,advisedby(person13_1,person293_1)).
example(580,neg,advisedby(person286_1,person293_1)).
example(581,neg,advisedby(person412_1,person293_1)).
example(582,neg,advisedby(person418_1,person293_1)).
example(583,neg,advisedby(person320_1,person293_1)).
example(584,neg,advisedby(person42_1,person293_1)).
example(585,neg,advisedby(person20_1,person293_1)).
example(586,neg,advisedby(person352_1,person293_1)).
example(587,neg,advisedby(person276_1,person293_1)).
example(588,neg,advisedby(person45_1,person293_1)).
example(589,neg,advisedby(person233_1,person293_1)).
example(590,neg,advisedby(person148_1,person293_1)).
example(591,neg,advisedby(person193_1,person293_1)).
example(592,neg,advisedby(person314_1,person293_1)).
example(593,neg,advisedby(person21_1,person293_1)).
example(594,neg,advisedby(person262_1,person293_1)).
example(595,neg,advisedby(person257_1,person293_1)).
example(596,neg,advisedby(person73_1,person293_1)).
example(597,neg,advisedby(person380_1,person293_1)).
example(598,neg,advisedby(person384_1,person293_1)).
example(599,neg,advisedby(person406_1,person293_1)).
example(600,neg,advisedby(person266_1,person293_1)).
example(601,neg,advisedby(person312_1,person293_1)).
example(602,neg,advisedby(person208_1,person293_1)).
example(603,neg,advisedby(person63_1,person293_1)).
example(604,neg,advisedby(person83_1,person293_1)).
example(605,neg,advisedby(person271_1,person293_1)).
example(606,neg,advisedby(person392_1,person293_1)).
example(607,neg,advisedby(person420_1,person293_1)).
example(608,neg,advisedby(person86_1,person293_1)).
example(609,neg,advisedby(person284_1,person240_1)).
example(610,neg,advisedby(person311_1,person240_1)).
example(611,neg,advisedby(person14_1,person240_1)).
example(612,neg,advisedby(person275_1,person240_1)).
example(613,neg,advisedby(person259_1,person240_1)).
example(614,neg,advisedby(person139_1,person240_1)).
example(615,neg,advisedby(person176_1,person240_1)).
example(616,neg,advisedby(person400_1,person240_1)).
example(617,neg,advisedby(person318_1,person240_1)).
example(618,neg,advisedby(person161_1,person240_1)).
example(619,neg,advisedby(person347_1,person240_1)).
example(620,neg,advisedby(person408_1,person240_1)).
example(621,neg,advisedby(person265_1,person240_1)).
example(622,neg,advisedby(person70_1,person240_1)).
example(623,neg,advisedby(person381_1,person240_1)).
example(624,neg,advisedby(person382_1,person240_1)).
example(625,neg,advisedby(person333_1,person240_1)).
example(626,neg,advisedby(person94_1,person240_1)).
example(627,neg,advisedby(person272_1,person240_1)).
example(628,neg,advisedby(person37_1,person240_1)).
example(629,neg,advisedby(person353_1,person240_1)).
example(630,neg,advisedby(person377_1,person240_1)).
example(631,neg,advisedby(person239_1,person240_1)).
example(632,neg,advisedby(person286_1,person240_1)).
example(633,neg,advisedby(person412_1,person240_1)).
example(634,neg,advisedby(person418_1,person240_1)).
example(635,neg,advisedby(person320_1,person240_1)).
example(636,neg,advisedby(person42_1,person240_1)).
example(637,neg,advisedby(person20_1,person240_1)).
example(638,neg,advisedby(person352_1,person240_1)).
example(639,neg,advisedby(person276_1,person240_1)).
example(640,neg,advisedby(person45_1,person240_1)).
example(641,neg,advisedby(person233_1,person240_1)).
example(642,neg,advisedby(person148_1,person240_1)).
example(643,neg,advisedby(person193_1,person240_1)).
example(644,neg,advisedby(person314_1,person240_1)).
example(645,neg,advisedby(person21_1,person240_1)).
example(646,neg,advisedby(person262_1,person240_1)).
example(647,neg,advisedby(person73_1,person240_1)).
example(648,neg,advisedby(person380_1,person240_1)).
example(649,neg,advisedby(person406_1,person240_1)).
example(650,neg,advisedby(person266_1,person240_1)).
example(651,neg,advisedby(person312_1,person240_1)).
example(652,neg,advisedby(person208_1,person240_1)).
example(653,neg,advisedby(person63_1,person240_1)).
example(654,neg,advisedby(person83_1,person240_1)).
example(655,neg,advisedby(person271_1,person240_1)).
example(656,neg,advisedby(person392_1,person240_1)).
example(657,neg,advisedby(person420_1,person240_1)).
example(658,neg,advisedby(person86_1,person240_1)).
example(659,neg,advisedby(person284_1,person211_1)).
example(660,neg,advisedby(person311_1,person211_1)).
example(661,neg,advisedby(person14_1,person211_1)).
example(662,neg,advisedby(person275_1,person211_1)).
example(663,neg,advisedby(person259_1,person211_1)).
example(664,neg,advisedby(person139_1,person211_1)).
example(665,neg,advisedby(person176_1,person211_1)).
example(666,neg,advisedby(person400_1,person211_1)).
example(667,neg,advisedby(person318_1,person211_1)).
example(668,neg,advisedby(person161_1,person211_1)).
example(669,neg,advisedby(person347_1,person211_1)).
example(670,neg,advisedby(person408_1,person211_1)).
example(671,neg,advisedby(person265_1,person211_1)).
example(672,neg,advisedby(person70_1,person211_1)).
example(673,neg,advisedby(person381_1,person211_1)).
example(674,neg,advisedby(person382_1,person211_1)).
example(675,neg,advisedby(person333_1,person211_1)).
example(676,neg,advisedby(person94_1,person211_1)).
example(677,neg,advisedby(person272_1,person211_1)).
example(678,neg,advisedby(person37_1,person211_1)).
example(679,neg,advisedby(person353_1,person211_1)).
example(680,neg,advisedby(person432_1,person211_1)).
example(681,neg,advisedby(person377_1,person211_1)).
example(682,neg,advisedby(person239_1,person211_1)).
example(683,neg,advisedby(person13_1,person211_1)).
example(684,neg,advisedby(person286_1,person211_1)).
example(685,neg,advisedby(person412_1,person211_1)).
example(686,neg,advisedby(person418_1,person211_1)).
example(687,neg,advisedby(person320_1,person211_1)).
example(688,neg,advisedby(person42_1,person211_1)).
example(689,neg,advisedby(person20_1,person211_1)).
example(690,neg,advisedby(person352_1,person211_1)).
example(691,neg,advisedby(person276_1,person211_1)).
example(692,neg,advisedby(person233_1,person211_1)).
example(693,neg,advisedby(person148_1,person211_1)).
example(694,neg,advisedby(person193_1,person211_1)).
example(695,neg,advisedby(person314_1,person211_1)).
example(696,neg,advisedby(person262_1,person211_1)).
example(697,neg,advisedby(person257_1,person211_1)).
example(698,neg,advisedby(person73_1,person211_1)).
example(699,neg,advisedby(person380_1,person211_1)).
example(700,neg,advisedby(person384_1,person211_1)).
example(701,neg,advisedby(person406_1,person211_1)).
example(702,neg,advisedby(person266_1,person211_1)).
example(703,neg,advisedby(person312_1,person211_1)).
example(704,neg,advisedby(person208_1,person211_1)).
example(705,neg,advisedby(person63_1,person211_1)).
example(706,neg,advisedby(person83_1,person211_1)).
example(707,neg,advisedby(person271_1,person211_1)).
example(708,neg,advisedby(person392_1,person211_1)).
example(709,neg,advisedby(person420_1,person211_1)).
example(710,neg,advisedby(person86_1,person211_1)).
example(711,neg,advisedby(person284_1,person150_1)).
example(712,neg,advisedby(person311_1,person150_1)).
example(713,neg,advisedby(person275_1,person150_1)).
example(714,neg,advisedby(person259_1,person150_1)).
example(715,neg,advisedby(person139_1,person150_1)).
example(716,neg,advisedby(person176_1,person150_1)).
example(717,neg,advisedby(person400_1,person150_1)).
example(718,neg,advisedby(person318_1,person150_1)).
example(719,neg,advisedby(person161_1,person150_1)).
example(720,neg,advisedby(person347_1,person150_1)).
example(721,neg,advisedby(person408_1,person150_1)).
example(722,neg,advisedby(person265_1,person150_1)).
example(723,neg,advisedby(person70_1,person150_1)).
example(724,neg,advisedby(person381_1,person150_1)).
example(725,neg,advisedby(person382_1,person150_1)).
example(726,neg,advisedby(person333_1,person150_1)).
example(727,neg,advisedby(person94_1,person150_1)).
example(728,neg,advisedby(person272_1,person150_1)).
example(729,neg,advisedby(person37_1,person150_1)).
example(730,neg,advisedby(person353_1,person150_1)).
example(731,neg,advisedby(person432_1,person150_1)).
example(732,neg,advisedby(person377_1,person150_1)).
example(733,neg,advisedby(person239_1,person150_1)).
example(734,neg,advisedby(person13_1,person150_1)).
example(735,neg,advisedby(person286_1,person150_1)).
example(736,neg,advisedby(person412_1,person150_1)).
example(737,neg,advisedby(person418_1,person150_1)).
example(738,neg,advisedby(person42_1,person150_1)).
example(739,neg,advisedby(person20_1,person150_1)).
example(740,neg,advisedby(person352_1,person150_1)).
example(741,neg,advisedby(person276_1,person150_1)).
example(742,neg,advisedby(person45_1,person150_1)).
example(743,neg,advisedby(person233_1,person150_1)).
example(744,neg,advisedby(person148_1,person150_1)).
example(745,neg,advisedby(person193_1,person150_1)).
example(746,neg,advisedby(person314_1,person150_1)).
example(747,neg,advisedby(person21_1,person150_1)).
example(748,neg,advisedby(person262_1,person150_1)).
example(749,neg,advisedby(person257_1,person150_1)).
example(750,neg,advisedby(person73_1,person150_1)).
example(751,neg,advisedby(person380_1,person150_1)).
example(752,neg,advisedby(person384_1,person150_1)).
example(753,neg,advisedby(person406_1,person150_1)).
example(754,neg,advisedby(person266_1,person150_1)).
example(755,neg,advisedby(person312_1,person150_1)).
example(756,neg,advisedby(person208_1,person150_1)).
example(757,neg,advisedby(person63_1,person150_1)).
example(758,neg,advisedby(person83_1,person150_1)).
example(759,neg,advisedby(person271_1,person150_1)).
example(760,neg,advisedby(person392_1,person150_1)).
example(761,neg,advisedby(person420_1,person150_1)).
example(762,neg,advisedby(person86_1,person150_1)).
example(763,neg,advisedby(person284_1,person415_1)).
example(764,neg,advisedby(person311_1,person415_1)).
example(765,neg,advisedby(person14_1,person415_1)).
example(766,neg,advisedby(person275_1,person415_1)).
example(767,neg,advisedby(person259_1,person415_1)).
example(768,neg,advisedby(person139_1,person415_1)).
example(769,neg,advisedby(person176_1,person415_1)).
example(770,neg,advisedby(person400_1,person415_1)).
example(771,neg,advisedby(person318_1,person415_1)).
example(772,neg,advisedby(person161_1,person415_1)).
example(773,neg,advisedby(person347_1,person415_1)).
example(774,neg,advisedby(person408_1,person415_1)).
example(775,neg,advisedby(person265_1,person415_1)).
example(776,neg,advisedby(person70_1,person415_1)).
example(777,neg,advisedby(person381_1,person415_1)).
example(778,neg,advisedby(person382_1,person415_1)).
example(779,neg,advisedby(person333_1,person415_1)).
example(780,neg,advisedby(person94_1,person415_1)).
example(781,neg,advisedby(person272_1,person415_1)).
example(782,neg,advisedby(person37_1,person415_1)).
example(783,neg,advisedby(person353_1,person415_1)).
example(784,neg,advisedby(person432_1,person415_1)).
example(785,neg,advisedby(person377_1,person415_1)).
example(786,neg,advisedby(person239_1,person415_1)).
example(787,neg,advisedby(person13_1,person415_1)).
example(788,neg,advisedby(person286_1,person415_1)).
example(789,neg,advisedby(person412_1,person415_1)).
example(790,neg,advisedby(person418_1,person415_1)).
example(791,neg,advisedby(person320_1,person415_1)).
example(792,neg,advisedby(person42_1,person415_1)).
example(793,neg,advisedby(person20_1,person415_1)).
example(794,neg,advisedby(person276_1,person415_1)).
example(795,neg,advisedby(person233_1,person415_1)).
example(796,neg,advisedby(person148_1,person415_1)).
example(797,neg,advisedby(person193_1,person415_1)).
example(798,neg,advisedby(person21_1,person415_1)).
example(799,neg,advisedby(person257_1,person415_1)).
example(800,neg,advisedby(person73_1,person415_1)).
example(801,neg,advisedby(person380_1,person415_1)).
example(802,neg,advisedby(person384_1,person415_1)).
example(803,neg,advisedby(person406_1,person415_1)).
example(804,neg,advisedby(person266_1,person415_1)).
example(805,neg,advisedby(person312_1,person415_1)).
example(806,neg,advisedby(person208_1,person415_1)).
example(807,neg,advisedby(person83_1,person415_1)).
example(808,neg,advisedby(person271_1,person415_1)).
example(809,neg,advisedby(person392_1,person415_1)).
example(810,neg,advisedby(person420_1,person415_1)).
example(811,neg,advisedby(person86_1,person415_1)).
example(812,neg,advisedby(person284_1,person79_1)).
example(813,neg,advisedby(person311_1,person79_1)).
example(814,neg,advisedby(person14_1,person79_1)).
example(815,neg,advisedby(person259_1,person79_1)).
example(816,neg,advisedby(person139_1,person79_1)).
example(817,neg,advisedby(person176_1,person79_1)).
example(818,neg,advisedby(person400_1,person79_1)).
example(819,neg,advisedby(person318_1,person79_1)).
example(820,neg,advisedby(person161_1,person79_1)).
example(821,neg,advisedby(person347_1,person79_1)).
example(822,neg,advisedby(person408_1,person79_1)).
example(823,neg,advisedby(person265_1,person79_1)).
example(824,neg,advisedby(person70_1,person79_1)).
example(825,neg,advisedby(person381_1,person79_1)).
example(826,neg,advisedby(person382_1,person79_1)).
example(827,neg,advisedby(person333_1,person79_1)).
example(828,neg,advisedby(person94_1,person79_1)).
example(829,neg,advisedby(person272_1,person79_1)).
example(830,neg,advisedby(person353_1,person79_1)).
example(831,neg,advisedby(person432_1,person79_1)).
example(832,neg,advisedby(person377_1,person79_1)).
example(833,neg,advisedby(person239_1,person79_1)).
example(834,neg,advisedby(person13_1,person79_1)).
example(835,neg,advisedby(person286_1,person79_1)).
example(836,neg,advisedby(person412_1,person79_1)).
example(837,neg,advisedby(person418_1,person79_1)).
example(838,neg,advisedby(person320_1,person79_1)).
example(839,neg,advisedby(person42_1,person79_1)).
example(840,neg,advisedby(person20_1,person79_1)).
example(841,neg,advisedby(person352_1,person79_1)).
example(842,neg,advisedby(person276_1,person79_1)).
example(843,neg,advisedby(person45_1,person79_1)).
example(844,neg,advisedby(person233_1,person79_1)).
example(845,neg,advisedby(person148_1,person79_1)).
example(846,neg,advisedby(person193_1,person79_1)).
example(847,neg,advisedby(person314_1,person79_1)).
example(848,neg,advisedby(person21_1,person79_1)).
example(849,neg,advisedby(person262_1,person79_1)).
example(850,neg,advisedby(person257_1,person79_1)).
example(851,neg,advisedby(person73_1,person79_1)).
example(852,neg,advisedby(person384_1,person79_1)).
example(853,neg,advisedby(person406_1,person79_1)).
example(854,neg,advisedby(person266_1,person79_1)).
example(855,neg,advisedby(person312_1,person79_1)).
example(856,neg,advisedby(person208_1,person79_1)).
example(857,neg,advisedby(person63_1,person79_1)).
example(858,neg,advisedby(person83_1,person79_1)).
example(859,neg,advisedby(person271_1,person79_1)).
example(860,neg,advisedby(person392_1,person79_1)).
example(861,neg,advisedby(person420_1,person79_1)).
example(862,neg,advisedby(person86_1,person79_1)).
example(863,neg,advisedby(person284_1,person349_1)).
example(864,neg,advisedby(person311_1,person349_1)).
example(865,neg,advisedby(person14_1,person349_1)).
example(866,neg,advisedby(person275_1,person349_1)).
example(867,neg,advisedby(person259_1,person349_1)).
example(868,neg,advisedby(person139_1,person349_1)).
example(869,neg,advisedby(person176_1,person349_1)).
example(870,neg,advisedby(person400_1,person349_1)).
example(871,neg,advisedby(person318_1,person349_1)).
example(872,neg,advisedby(person161_1,person349_1)).
example(873,neg,advisedby(person347_1,person349_1)).
example(874,neg,advisedby(person408_1,person349_1)).
example(875,neg,advisedby(person265_1,person349_1)).
example(876,neg,advisedby(person70_1,person349_1)).
example(877,neg,advisedby(person381_1,person349_1)).
example(878,neg,advisedby(person382_1,person349_1)).
example(879,neg,advisedby(person333_1,person349_1)).
example(880,neg,advisedby(person94_1,person349_1)).
example(881,neg,advisedby(person272_1,person349_1)).
example(882,neg,advisedby(person37_1,person349_1)).
example(883,neg,advisedby(person353_1,person349_1)).
example(884,neg,advisedby(person432_1,person349_1)).
example(885,neg,advisedby(person377_1,person349_1)).
example(886,neg,advisedby(person239_1,person349_1)).
example(887,neg,advisedby(person13_1,person349_1)).
example(888,neg,advisedby(person286_1,person349_1)).
example(889,neg,advisedby(person412_1,person349_1)).
example(890,neg,advisedby(person418_1,person349_1)).
example(891,neg,advisedby(person320_1,person349_1)).
example(892,neg,advisedby(person42_1,person349_1)).
example(893,neg,advisedby(person20_1,person349_1)).
example(894,neg,advisedby(person352_1,person349_1)).
example(895,neg,advisedby(person276_1,person349_1)).
example(896,neg,advisedby(person45_1,person349_1)).
example(897,neg,advisedby(person233_1,person349_1)).
example(898,neg,advisedby(person148_1,person349_1)).
example(899,neg,advisedby(person193_1,person349_1)).
example(900,neg,advisedby(person314_1,person349_1)).
example(901,neg,advisedby(person21_1,person349_1)).
example(902,neg,advisedby(person262_1,person349_1)).
example(903,neg,advisedby(person257_1,person349_1)).
example(904,neg,advisedby(person73_1,person349_1)).
example(905,neg,advisedby(person380_1,person349_1)).
example(906,neg,advisedby(person384_1,person349_1)).
example(907,neg,advisedby(person406_1,person349_1)).
example(908,neg,advisedby(person266_1,person349_1)).
example(909,neg,advisedby(person312_1,person349_1)).
example(910,neg,advisedby(person208_1,person349_1)).
example(911,neg,advisedby(person63_1,person349_1)).
example(912,neg,advisedby(person271_1,person349_1)).
example(913,neg,advisedby(person392_1,person349_1)).
example(914,neg,advisedby(person420_1,person349_1)).
example(915,neg,advisedby(person86_1,person349_1)).
example(916,neg,advisedby(person284_1,person7_1)).
example(917,neg,advisedby(person311_1,person7_1)).
example(918,neg,advisedby(person14_1,person7_1)).
example(919,neg,advisedby(person275_1,person7_1)).
example(920,neg,advisedby(person259_1,person7_1)).
example(921,neg,advisedby(person139_1,person7_1)).
example(922,neg,advisedby(person176_1,person7_1)).
example(923,neg,advisedby(person400_1,person7_1)).
example(924,neg,advisedby(person318_1,person7_1)).
example(925,neg,advisedby(person161_1,person7_1)).
example(926,neg,advisedby(person347_1,person7_1)).
example(927,neg,advisedby(person408_1,person7_1)).
example(928,neg,advisedby(person265_1,person7_1)).
example(929,neg,advisedby(person70_1,person7_1)).
example(930,neg,advisedby(person381_1,person7_1)).
example(931,neg,advisedby(person382_1,person7_1)).
example(932,neg,advisedby(person333_1,person7_1)).
example(933,neg,advisedby(person94_1,person7_1)).
example(934,neg,advisedby(person37_1,person7_1)).
example(935,neg,advisedby(person353_1,person7_1)).
example(936,neg,advisedby(person432_1,person7_1)).
example(937,neg,advisedby(person377_1,person7_1)).
example(938,neg,advisedby(person239_1,person7_1)).
example(939,neg,advisedby(person13_1,person7_1)).
example(940,neg,advisedby(person286_1,person7_1)).
example(941,neg,advisedby(person412_1,person7_1)).
example(942,neg,advisedby(person418_1,person7_1)).
example(943,neg,advisedby(person320_1,person7_1)).
example(944,neg,advisedby(person42_1,person7_1)).
example(945,neg,advisedby(person20_1,person7_1)).
example(946,neg,advisedby(person352_1,person7_1)).
example(947,neg,advisedby(person276_1,person7_1)).
example(948,neg,advisedby(person45_1,person7_1)).
example(949,neg,advisedby(person233_1,person7_1)).
example(950,neg,advisedby(person148_1,person7_1)).
example(951,neg,advisedby(person193_1,person7_1)).
example(952,neg,advisedby(person314_1,person7_1)).
example(953,neg,advisedby(person21_1,person7_1)).
example(954,neg,advisedby(person262_1,person7_1)).
example(955,neg,advisedby(person257_1,person7_1)).
example(956,neg,advisedby(person73_1,person7_1)).
example(957,neg,advisedby(person380_1,person7_1)).
example(958,neg,advisedby(person384_1,person7_1)).
example(959,neg,advisedby(person406_1,person7_1)).
example(960,neg,advisedby(person312_1,person7_1)).
example(961,neg,advisedby(person208_1,person7_1)).
example(962,neg,advisedby(person63_1,person7_1)).
example(963,neg,advisedby(person83_1,person7_1)).
example(964,neg,advisedby(person271_1,person7_1)).
example(965,neg,advisedby(person392_1,person7_1)).
example(966,neg,advisedby(person420_1,person7_1)).
example(967,neg,advisedby(person86_1,person7_1)).
example(968,neg,advisedby(person284_1,person185_1)).
example(969,neg,advisedby(person311_1,person185_1)).
example(970,neg,advisedby(person14_1,person185_1)).
example(971,neg,advisedby(person275_1,person185_1)).
example(972,neg,advisedby(person259_1,person185_1)).
example(973,neg,advisedby(person139_1,person185_1)).
example(974,neg,advisedby(person176_1,person185_1)).
example(975,neg,advisedby(person400_1,person185_1)).
example(976,neg,advisedby(person161_1,person185_1)).
example(977,neg,advisedby(person347_1,person185_1)).
example(978,neg,advisedby(person408_1,person185_1)).
example(979,neg,advisedby(person265_1,person185_1)).
example(980,neg,advisedby(person70_1,person185_1)).
example(981,neg,advisedby(person381_1,person185_1)).
example(982,neg,advisedby(person382_1,person185_1)).
example(983,neg,advisedby(person333_1,person185_1)).
example(984,neg,advisedby(person94_1,person185_1)).
example(985,neg,advisedby(person272_1,person185_1)).
example(986,neg,advisedby(person37_1,person185_1)).
example(987,neg,advisedby(person353_1,person185_1)).
example(988,neg,advisedby(person432_1,person185_1)).
example(989,neg,advisedby(person377_1,person185_1)).
example(990,neg,advisedby(person239_1,person185_1)).
example(991,neg,advisedby(person13_1,person185_1)).
example(992,neg,advisedby(person286_1,person185_1)).
example(993,neg,advisedby(person412_1,person185_1)).
example(994,neg,advisedby(person418_1,person185_1)).
example(995,neg,advisedby(person320_1,person185_1)).
example(996,neg,advisedby(person42_1,person185_1)).
example(997,neg,advisedby(person20_1,person185_1)).
example(998,neg,advisedby(person352_1,person185_1)).
example(999,neg,advisedby(person276_1,person185_1)).
example(1000,neg,advisedby(person45_1,person185_1)).
example(1001,neg,advisedby(person233_1,person185_1)).
example(1002,neg,advisedby(person148_1,person185_1)).
example(1003,neg,advisedby(person193_1,person185_1)).
example(1004,neg,advisedby(person314_1,person185_1)).
example(1005,neg,advisedby(person21_1,person185_1)).
example(1006,neg,advisedby(person262_1,person185_1)).
example(1007,neg,advisedby(person257_1,person185_1)).
example(1008,neg,advisedby(person73_1,person185_1)).
example(1009,neg,advisedby(person380_1,person185_1)).
example(1010,neg,advisedby(person384_1,person185_1)).
example(1011,neg,advisedby(person406_1,person185_1)).
example(1012,neg,advisedby(person266_1,person185_1)).
example(1013,neg,advisedby(person312_1,person185_1)).
example(1014,neg,advisedby(person208_1,person185_1)).
example(1015,neg,advisedby(person63_1,person185_1)).
example(1016,neg,advisedby(person83_1,person185_1)).
example(1017,neg,advisedby(person271_1,person185_1)).
example(1018,neg,advisedby(person392_1,person185_1)).
example(1019,neg,advisedby(person420_1,person185_1)).
example(1020,neg,advisedby(person86_1,person185_1)).
example(1021,neg,advisedby(person284_1,person171_1)).
example(1022,neg,advisedby(person311_1,person171_1)).
example(1023,neg,advisedby(person14_1,person171_1)).
example(1024,neg,advisedby(person275_1,person171_1)).
example(1025,neg,advisedby(person259_1,person171_1)).
example(1026,neg,advisedby(person139_1,person171_1)).
example(1027,neg,advisedby(person176_1,person171_1)).
example(1028,neg,advisedby(person400_1,person171_1)).
example(1029,neg,advisedby(person318_1,person171_1)).
example(1030,neg,advisedby(person161_1,person171_1)).
example(1031,neg,advisedby(person347_1,person171_1)).
example(1032,neg,advisedby(person408_1,person171_1)).
example(1033,neg,advisedby(person265_1,person171_1)).
example(1034,neg,advisedby(person70_1,person171_1)).
example(1035,neg,advisedby(person381_1,person171_1)).
example(1036,neg,advisedby(person382_1,person171_1)).
example(1037,neg,advisedby(person333_1,person171_1)).
example(1038,neg,advisedby(person94_1,person171_1)).
example(1039,neg,advisedby(person272_1,person171_1)).
example(1040,neg,advisedby(person37_1,person171_1)).
example(1041,neg,advisedby(person353_1,person171_1)).
example(1042,neg,advisedby(person432_1,person171_1)).
example(1043,neg,advisedby(person377_1,person171_1)).
example(1044,neg,advisedby(person13_1,person171_1)).
example(1045,neg,advisedby(person412_1,person171_1)).
example(1046,neg,advisedby(person320_1,person171_1)).
example(1047,neg,advisedby(person42_1,person171_1)).
example(1048,neg,advisedby(person20_1,person171_1)).
example(1049,neg,advisedby(person352_1,person171_1)).
example(1050,neg,advisedby(person276_1,person171_1)).
example(1051,neg,advisedby(person45_1,person171_1)).
example(1052,neg,advisedby(person233_1,person171_1)).
example(1053,neg,advisedby(person193_1,person171_1)).
example(1054,neg,advisedby(person314_1,person171_1)).
example(1055,neg,advisedby(person21_1,person171_1)).
example(1056,neg,advisedby(person262_1,person171_1)).
example(1057,neg,advisedby(person257_1,person171_1)).
example(1058,neg,advisedby(person73_1,person171_1)).
example(1059,neg,advisedby(person380_1,person171_1)).
example(1060,neg,advisedby(person384_1,person171_1)).
example(1061,neg,advisedby(person406_1,person171_1)).
example(1062,neg,advisedby(person266_1,person171_1)).
example(1063,neg,advisedby(person312_1,person171_1)).
example(1064,neg,advisedby(person208_1,person171_1)).
example(1065,neg,advisedby(person63_1,person171_1)).
example(1066,neg,advisedby(person83_1,person171_1)).
example(1067,neg,advisedby(person271_1,person171_1)).
example(1068,neg,advisedby(person392_1,person171_1)).
example(1069,neg,advisedby(person420_1,person171_1)).
example(1070,neg,advisedby(person86_1,person171_1)).
example(1071,neg,advisedby(person284_1,person168_1)).
example(1072,neg,advisedby(person311_1,person168_1)).
example(1073,neg,advisedby(person14_1,person168_1)).
example(1074,neg,advisedby(person275_1,person168_1)).
example(1075,neg,advisedby(person259_1,person168_1)).
example(1076,neg,advisedby(person139_1,person168_1)).
example(1077,neg,advisedby(person176_1,person168_1)).
example(1078,neg,advisedby(person400_1,person168_1)).
example(1079,neg,advisedby(person318_1,person168_1)).
example(1080,neg,advisedby(person161_1,person168_1)).
example(1081,neg,advisedby(person347_1,person168_1)).
example(1082,neg,advisedby(person408_1,person168_1)).
example(1083,neg,advisedby(person70_1,person168_1)).
example(1084,neg,advisedby(person382_1,person168_1)).
example(1085,neg,advisedby(person333_1,person168_1)).
example(1086,neg,advisedby(person94_1,person168_1)).
example(1087,neg,advisedby(person272_1,person168_1)).
example(1088,neg,advisedby(person37_1,person168_1)).
example(1089,neg,advisedby(person353_1,person168_1)).
example(1090,neg,advisedby(person432_1,person168_1)).
example(1091,neg,advisedby(person377_1,person168_1)).
example(1092,neg,advisedby(person239_1,person168_1)).
example(1093,neg,advisedby(person13_1,person168_1)).
example(1094,neg,advisedby(person286_1,person168_1)).
example(1095,neg,advisedby(person412_1,person168_1)).
example(1096,neg,advisedby(person418_1,person168_1)).
example(1097,neg,advisedby(person320_1,person168_1)).
example(1098,neg,advisedby(person42_1,person168_1)).
example(1099,neg,advisedby(person20_1,person168_1)).
example(1100,neg,advisedby(person352_1,person168_1)).
example(1101,neg,advisedby(person276_1,person168_1)).
example(1102,neg,advisedby(person45_1,person168_1)).
example(1103,neg,advisedby(person233_1,person168_1)).
example(1104,neg,advisedby(person148_1,person168_1)).
example(1105,neg,advisedby(person193_1,person168_1)).
example(1106,neg,advisedby(person314_1,person168_1)).
example(1107,neg,advisedby(person21_1,person168_1)).
example(1108,neg,advisedby(person262_1,person168_1)).
example(1109,neg,advisedby(person257_1,person168_1)).
example(1110,neg,advisedby(person73_1,person168_1)).
example(1111,neg,advisedby(person380_1,person168_1)).
example(1112,neg,advisedby(person384_1,person168_1)).
example(1113,neg,advisedby(person406_1,person168_1)).
example(1114,neg,advisedby(person266_1,person168_1)).
example(1115,neg,advisedby(person312_1,person168_1)).
example(1116,neg,advisedby(person208_1,person168_1)).
example(1117,neg,advisedby(person63_1,person168_1)).
example(1118,neg,advisedby(person83_1,person168_1)).
example(1119,neg,advisedby(person271_1,person168_1)).
example(1120,neg,advisedby(person392_1,person168_1)).
example(1121,neg,advisedby(person420_1,person168_1)).
example(1122,neg,advisedby(person86_1,person168_1)).
example(1123,neg,advisedby(person284_1,person407_1)).
example(1124,neg,advisedby(person311_1,person407_1)).
example(1125,neg,advisedby(person14_1,person407_1)).
example(1126,neg,advisedby(person275_1,person407_1)).
example(1127,neg,advisedby(person259_1,person407_1)).
example(1128,neg,advisedby(person139_1,person407_1)).
example(1129,neg,advisedby(person400_1,person407_1)).
example(1130,neg,advisedby(person318_1,person407_1)).
example(1131,neg,advisedby(person161_1,person407_1)).
example(1132,neg,advisedby(person347_1,person407_1)).
example(1133,neg,advisedby(person408_1,person407_1)).
example(1134,neg,advisedby(person265_1,person407_1)).
example(1135,neg,advisedby(person70_1,person407_1)).
example(1136,neg,advisedby(person381_1,person407_1)).
example(1137,neg,advisedby(person382_1,person407_1)).
example(1138,neg,advisedby(person333_1,person407_1)).
example(1139,neg,advisedby(person94_1,person407_1)).
example(1140,neg,advisedby(person272_1,person407_1)).
example(1141,neg,advisedby(person37_1,person407_1)).
example(1142,neg,advisedby(person353_1,person407_1)).
example(1143,neg,advisedby(person432_1,person407_1)).
example(1144,neg,advisedby(person377_1,person407_1)).
example(1145,neg,advisedby(person239_1,person407_1)).
example(1146,neg,advisedby(person13_1,person407_1)).
example(1147,neg,advisedby(person286_1,person407_1)).
example(1148,neg,advisedby(person412_1,person407_1)).
example(1149,neg,advisedby(person418_1,person407_1)).
example(1150,neg,advisedby(person320_1,person407_1)).
example(1151,neg,advisedby(person42_1,person407_1)).
example(1152,neg,advisedby(person20_1,person407_1)).
example(1153,neg,advisedby(person352_1,person407_1)).
example(1154,neg,advisedby(person45_1,person407_1)).
example(1155,neg,advisedby(person233_1,person407_1)).
example(1156,neg,advisedby(person148_1,person407_1)).
example(1157,neg,advisedby(person193_1,person407_1)).
example(1158,neg,advisedby(person314_1,person407_1)).
example(1159,neg,advisedby(person21_1,person407_1)).
example(1160,neg,advisedby(person262_1,person407_1)).
example(1161,neg,advisedby(person257_1,person407_1)).
example(1162,neg,advisedby(person73_1,person407_1)).
example(1163,neg,advisedby(person380_1,person407_1)).
example(1164,neg,advisedby(person406_1,person407_1)).
example(1165,neg,advisedby(person266_1,person407_1)).
example(1166,neg,advisedby(person312_1,person407_1)).
example(1167,neg,advisedby(person208_1,person407_1)).
example(1168,neg,advisedby(person63_1,person407_1)).
example(1169,neg,advisedby(person83_1,person407_1)).
example(1170,neg,advisedby(person271_1,person407_1)).
example(1171,neg,advisedby(person392_1,person407_1)).
example(1172,neg,advisedby(person420_1,person407_1)).
example(1173,neg,advisedby(person86_1,person407_1)).
example(1174,neg,advisedby(person38_1,person40_1)).
example(1175,neg,advisedby(person261_1,person40_1)).
example(1176,neg,advisedby(person149_1,person40_1)).
example(1177,neg,advisedby(person306_1,person40_1)).
example(1178,neg,advisedby(person410_1,person40_1)).
example(1179,neg,advisedby(person157_1,person40_1)).
example(1180,neg,advisedby(person200_1,person40_1)).
example(1181,neg,advisedby(person404_1,person40_1)).
example(1182,neg,advisedby(person122_1,person40_1)).
example(1183,neg,advisedby(person322_1,person40_1)).
example(1184,neg,advisedby(person131_1,person40_1)).
example(1185,neg,advisedby(person85_1,person40_1)).
example(1186,neg,advisedby(person241_1,person40_1)).
example(1187,neg,advisedby(person217_1,person40_1)).
example(1188,neg,advisedby(person270_1,person40_1)).
example(1189,neg,advisedby(person206_1,person40_1)).
example(1190,neg,advisedby(person81_1,person40_1)).
example(1191,neg,advisedby(person228_1,person40_1)).
example(1192,neg,advisedby(person51_1,person40_1)).
example(1193,neg,advisedby(person41_1,person40_1)).
example(1194,neg,advisedby(person163_1,person40_1)).
example(1195,neg,advisedby(person435_1,person40_1)).
example(1196,neg,advisedby(person363_1,person40_1)).
example(1197,neg,advisedby(person427_1,person40_1)).
example(1198,neg,advisedby(person142_1,person40_1)).
example(1199,neg,advisedby(person431_1,person40_1)).
example(1200,neg,advisedby(person283_1,person40_1)).
example(1201,neg,advisedby(person300_1,person40_1)).
example(1202,neg,advisedby(person113_1,person40_1)).
example(1203,neg,advisedby(person296_1,person40_1)).
example(1204,neg,advisedby(person36_1,person40_1)).
example(1205,neg,advisedby(person328_1,person40_1)).
example(1206,neg,advisedby(person31_1,person40_1)).
example(1207,neg,advisedby(person61_1,person40_1)).
example(1208,neg,advisedby(person119_1,person40_1)).
example(1209,neg,advisedby(person3_1,person40_1)).
example(1210,neg,advisedby(person317_1,person40_1)).
example(1211,neg,advisedby(person230_1,person40_1)).
example(1212,neg,advisedby(person258_1,person40_1)).
example(1213,neg,advisedby(person188_1,person40_1)).
example(1214,neg,advisedby(person327_1,person40_1)).
example(1215,neg,advisedby(person140_1,person40_1)).
example(1216,neg,advisedby(person321_1,person40_1)).
example(1217,neg,advisedby(person428_1,person40_1)).
example(1218,neg,advisedby(person158_1,person40_1)).
example(1219,neg,advisedby(person102_1,person40_1)).
example(1220,neg,advisedby(person90_1,person40_1)).
example(1221,neg,advisedby(person214_1,person40_1)).
example(1222,neg,advisedby(person146_1,person40_1)).
example(1223,neg,advisedby(person88_1,person40_1)).
example(1224,neg,advisedby(person178_1,person40_1)).
example(1225,neg,advisedby(person195_1,person40_1)).
example(1226,neg,advisedby(person38_1,person279_1)).
example(1227,neg,advisedby(person261_1,person279_1)).
example(1228,neg,advisedby(person149_1,person279_1)).
example(1229,neg,advisedby(person306_1,person279_1)).
example(1230,neg,advisedby(person410_1,person279_1)).
example(1231,neg,advisedby(person157_1,person279_1)).
example(1232,neg,advisedby(person200_1,person279_1)).
example(1233,neg,advisedby(person404_1,person279_1)).
example(1234,neg,advisedby(person122_1,person279_1)).
example(1235,neg,advisedby(person322_1,person279_1)).
example(1236,neg,advisedby(person131_1,person279_1)).
example(1237,neg,advisedby(person85_1,person279_1)).
example(1238,neg,advisedby(person241_1,person279_1)).
example(1239,neg,advisedby(person217_1,person279_1)).
example(1240,neg,advisedby(person270_1,person279_1)).
example(1241,neg,advisedby(person206_1,person279_1)).
example(1242,neg,advisedby(person81_1,person279_1)).
example(1243,neg,advisedby(person228_1,person279_1)).
example(1244,neg,advisedby(person51_1,person279_1)).
example(1245,neg,advisedby(person41_1,person279_1)).
example(1246,neg,advisedby(person163_1,person279_1)).
example(1247,neg,advisedby(person363_1,person279_1)).
example(1248,neg,advisedby(person427_1,person279_1)).
example(1249,neg,advisedby(person142_1,person279_1)).
example(1250,neg,advisedby(person431_1,person279_1)).
example(1251,neg,advisedby(person283_1,person279_1)).
example(1252,neg,advisedby(person300_1,person279_1)).
example(1253,neg,advisedby(person113_1,person279_1)).
example(1254,neg,advisedby(person296_1,person279_1)).
example(1255,neg,advisedby(person36_1,person279_1)).
example(1256,neg,advisedby(person328_1,person279_1)).
example(1257,neg,advisedby(person31_1,person279_1)).
example(1258,neg,advisedby(person61_1,person279_1)).
example(1259,neg,advisedby(person119_1,person279_1)).
example(1260,neg,advisedby(person3_1,person279_1)).
example(1261,neg,advisedby(person317_1,person279_1)).
example(1262,neg,advisedby(person230_1,person279_1)).
example(1263,neg,advisedby(person258_1,person279_1)).
example(1264,neg,advisedby(person188_1,person279_1)).
example(1265,neg,advisedby(person327_1,person279_1)).
example(1266,neg,advisedby(person140_1,person279_1)).
example(1267,neg,advisedby(person321_1,person279_1)).
example(1268,neg,advisedby(person428_1,person279_1)).
example(1269,neg,advisedby(person158_1,person279_1)).
example(1270,neg,advisedby(person102_1,person279_1)).
example(1271,neg,advisedby(person90_1,person279_1)).
example(1272,neg,advisedby(person214_1,person279_1)).
example(1273,neg,advisedby(person146_1,person279_1)).
example(1274,neg,advisedby(person88_1,person279_1)).
example(1275,neg,advisedby(person178_1,person279_1)).
example(1276,neg,advisedby(person195_1,person279_1)).
example(1277,neg,advisedby(person38_1,person394_1)).
example(1278,neg,advisedby(person261_1,person394_1)).
example(1279,neg,advisedby(person149_1,person394_1)).
example(1280,neg,advisedby(person306_1,person394_1)).
example(1281,neg,advisedby(person410_1,person394_1)).
example(1282,neg,advisedby(person157_1,person394_1)).
example(1283,neg,advisedby(person200_1,person394_1)).
example(1284,neg,advisedby(person404_1,person394_1)).
example(1285,neg,advisedby(person122_1,person394_1)).
example(1286,neg,advisedby(person322_1,person394_1)).
example(1287,neg,advisedby(person131_1,person394_1)).
example(1288,neg,advisedby(person85_1,person394_1)).
example(1289,neg,advisedby(person241_1,person394_1)).
example(1290,neg,advisedby(person217_1,person394_1)).
example(1291,neg,advisedby(person270_1,person394_1)).
example(1292,neg,advisedby(person206_1,person394_1)).
example(1293,neg,advisedby(person81_1,person394_1)).
example(1294,neg,advisedby(person51_1,person394_1)).
example(1295,neg,advisedby(person163_1,person394_1)).
example(1296,neg,advisedby(person435_1,person394_1)).
example(1297,neg,advisedby(person363_1,person394_1)).
example(1298,neg,advisedby(person427_1,person394_1)).
example(1299,neg,advisedby(person142_1,person394_1)).
example(1300,neg,advisedby(person431_1,person394_1)).
example(1301,neg,advisedby(person283_1,person394_1)).
example(1302,neg,advisedby(person300_1,person394_1)).
example(1303,neg,advisedby(person296_1,person394_1)).
example(1304,neg,advisedby(person36_1,person394_1)).
example(1305,neg,advisedby(person328_1,person394_1)).
example(1306,neg,advisedby(person31_1,person394_1)).
example(1307,neg,advisedby(person61_1,person394_1)).
example(1308,neg,advisedby(person119_1,person394_1)).
example(1309,neg,advisedby(person3_1,person394_1)).
example(1310,neg,advisedby(person317_1,person394_1)).
example(1311,neg,advisedby(person230_1,person394_1)).
example(1312,neg,advisedby(person258_1,person394_1)).
example(1313,neg,advisedby(person188_1,person394_1)).
example(1314,neg,advisedby(person327_1,person394_1)).
example(1315,neg,advisedby(person140_1,person394_1)).
example(1316,neg,advisedby(person321_1,person394_1)).
example(1317,neg,advisedby(person428_1,person394_1)).
example(1318,neg,advisedby(person158_1,person394_1)).
example(1319,neg,advisedby(person102_1,person394_1)).
example(1320,neg,advisedby(person90_1,person394_1)).
example(1321,neg,advisedby(person214_1,person394_1)).
example(1322,neg,advisedby(person146_1,person394_1)).
example(1323,neg,advisedby(person88_1,person394_1)).
example(1324,neg,advisedby(person178_1,person394_1)).
example(1325,neg,advisedby(person195_1,person394_1)).
example(1326,neg,advisedby(person38_1,person342_1)).
example(1327,neg,advisedby(person261_1,person342_1)).
example(1328,neg,advisedby(person149_1,person342_1)).
example(1329,neg,advisedby(person306_1,person342_1)).
example(1330,neg,advisedby(person410_1,person342_1)).
example(1331,neg,advisedby(person157_1,person342_1)).
example(1332,neg,advisedby(person200_1,person342_1)).
example(1333,neg,advisedby(person404_1,person342_1)).
example(1334,neg,advisedby(person122_1,person342_1)).
example(1335,neg,advisedby(person322_1,person342_1)).
example(1336,neg,advisedby(person131_1,person342_1)).
example(1337,neg,advisedby(person85_1,person342_1)).
example(1338,neg,advisedby(person241_1,person342_1)).
example(1339,neg,advisedby(person270_1,person342_1)).
example(1340,neg,advisedby(person51_1,person342_1)).
example(1341,neg,advisedby(person41_1,person342_1)).
example(1342,neg,advisedby(person163_1,person342_1)).
example(1343,neg,advisedby(person435_1,person342_1)).
example(1344,neg,advisedby(person363_1,person342_1)).
example(1345,neg,advisedby(person427_1,person342_1)).
example(1346,neg,advisedby(person431_1,person342_1)).
example(1347,neg,advisedby(person283_1,person342_1)).
example(1348,neg,advisedby(person296_1,person342_1)).
example(1349,neg,advisedby(person36_1,person342_1)).
example(1350,neg,advisedby(person328_1,person342_1)).
example(1351,neg,advisedby(person31_1,person342_1)).
example(1352,neg,advisedby(person61_1,person342_1)).
example(1353,neg,advisedby(person119_1,person342_1)).
example(1354,neg,advisedby(person3_1,person342_1)).
example(1355,neg,advisedby(person317_1,person342_1)).
example(1356,neg,advisedby(person230_1,person342_1)).
example(1357,neg,advisedby(person258_1,person342_1)).
example(1358,neg,advisedby(person188_1,person342_1)).
example(1359,neg,advisedby(person327_1,person342_1)).
example(1360,neg,advisedby(person140_1,person342_1)).
example(1361,neg,advisedby(person321_1,person342_1)).
example(1362,neg,advisedby(person428_1,person342_1)).
example(1363,neg,advisedby(person158_1,person342_1)).
example(1364,neg,advisedby(person102_1,person342_1)).
example(1365,neg,advisedby(person90_1,person342_1)).
example(1366,neg,advisedby(person214_1,person342_1)).
example(1367,neg,advisedby(person146_1,person342_1)).
example(1368,neg,advisedby(person88_1,person342_1)).
example(1369,neg,advisedby(person178_1,person342_1)).
example(1370,neg,advisedby(person195_1,person342_1)).
example(1371,neg,advisedby(person38_1,person111_1)).
example(1372,neg,advisedby(person261_1,person111_1)).
example(1373,neg,advisedby(person149_1,person111_1)).
example(1374,neg,advisedby(person306_1,person111_1)).
example(1375,neg,advisedby(person410_1,person111_1)).
example(1376,neg,advisedby(person157_1,person111_1)).
example(1377,neg,advisedby(person200_1,person111_1)).
example(1378,neg,advisedby(person404_1,person111_1)).
example(1379,neg,advisedby(person122_1,person111_1)).
example(1380,neg,advisedby(person322_1,person111_1)).
example(1381,neg,advisedby(person131_1,person111_1)).
example(1382,neg,advisedby(person85_1,person111_1)).
example(1383,neg,advisedby(person241_1,person111_1)).
example(1384,neg,advisedby(person217_1,person111_1)).
example(1385,neg,advisedby(person270_1,person111_1)).
example(1386,neg,advisedby(person206_1,person111_1)).
example(1387,neg,advisedby(person81_1,person111_1)).
example(1388,neg,advisedby(person228_1,person111_1)).
example(1389,neg,advisedby(person51_1,person111_1)).
example(1390,neg,advisedby(person41_1,person111_1)).
example(1391,neg,advisedby(person163_1,person111_1)).
example(1392,neg,advisedby(person435_1,person111_1)).
example(1393,neg,advisedby(person363_1,person111_1)).
example(1394,neg,advisedby(person427_1,person111_1)).
example(1395,neg,advisedby(person142_1,person111_1)).
example(1396,neg,advisedby(person431_1,person111_1)).
example(1397,neg,advisedby(person283_1,person111_1)).
example(1398,neg,advisedby(person300_1,person111_1)).
example(1399,neg,advisedby(person113_1,person111_1)).
example(1400,neg,advisedby(person296_1,person111_1)).
example(1401,neg,advisedby(person36_1,person111_1)).
example(1402,neg,advisedby(person328_1,person111_1)).
example(1403,neg,advisedby(person31_1,person111_1)).
example(1404,neg,advisedby(person61_1,person111_1)).
example(1405,neg,advisedby(person119_1,person111_1)).
example(1406,neg,advisedby(person3_1,person111_1)).
example(1407,neg,advisedby(person317_1,person111_1)).
example(1408,neg,advisedby(person230_1,person111_1)).
example(1409,neg,advisedby(person258_1,person111_1)).
example(1410,neg,advisedby(person188_1,person111_1)).
example(1411,neg,advisedby(person327_1,person111_1)).
example(1412,neg,advisedby(person140_1,person111_1)).
example(1413,neg,advisedby(person321_1,person111_1)).
example(1414,neg,advisedby(person428_1,person111_1)).
example(1415,neg,advisedby(person158_1,person111_1)).
example(1416,neg,advisedby(person102_1,person111_1)).
example(1417,neg,advisedby(person90_1,person111_1)).
example(1418,neg,advisedby(person214_1,person111_1)).
example(1419,neg,advisedby(person146_1,person111_1)).
example(1420,neg,advisedby(person88_1,person111_1)).
example(1421,neg,advisedby(person178_1,person111_1)).
example(1422,neg,advisedby(person195_1,person111_1)).
example(1423,neg,advisedby(person38_1,person115_1)).
example(1424,neg,advisedby(person261_1,person115_1)).
example(1425,neg,advisedby(person149_1,person115_1)).
example(1426,neg,advisedby(person306_1,person115_1)).
example(1427,neg,advisedby(person410_1,person115_1)).
example(1428,neg,advisedby(person157_1,person115_1)).
example(1429,neg,advisedby(person200_1,person115_1)).
example(1430,neg,advisedby(person404_1,person115_1)).
example(1431,neg,advisedby(person122_1,person115_1)).
example(1432,neg,advisedby(person322_1,person115_1)).
example(1433,neg,advisedby(person131_1,person115_1)).
example(1434,neg,advisedby(person85_1,person115_1)).
example(1435,neg,advisedby(person241_1,person115_1)).
example(1436,neg,advisedby(person217_1,person115_1)).
example(1437,neg,advisedby(person270_1,person115_1)).
example(1438,neg,advisedby(person206_1,person115_1)).
example(1439,neg,advisedby(person81_1,person115_1)).
example(1440,neg,advisedby(person228_1,person115_1)).
example(1441,neg,advisedby(person51_1,person115_1)).
example(1442,neg,advisedby(person41_1,person115_1)).
example(1443,neg,advisedby(person163_1,person115_1)).
example(1444,neg,advisedby(person435_1,person115_1)).
example(1445,neg,advisedby(person363_1,person115_1)).
example(1446,neg,advisedby(person427_1,person115_1)).
example(1447,neg,advisedby(person142_1,person115_1)).
example(1448,neg,advisedby(person431_1,person115_1)).
example(1449,neg,advisedby(person283_1,person115_1)).
example(1450,neg,advisedby(person300_1,person115_1)).
example(1451,neg,advisedby(person113_1,person115_1)).
example(1452,neg,advisedby(person296_1,person115_1)).
example(1453,neg,advisedby(person36_1,person115_1)).
example(1454,neg,advisedby(person328_1,person115_1)).
example(1455,neg,advisedby(person31_1,person115_1)).
example(1456,neg,advisedby(person61_1,person115_1)).
example(1457,neg,advisedby(person119_1,person115_1)).
example(1458,neg,advisedby(person3_1,person115_1)).
example(1459,neg,advisedby(person317_1,person115_1)).
example(1460,neg,advisedby(person230_1,person115_1)).
example(1461,neg,advisedby(person258_1,person115_1)).
example(1462,neg,advisedby(person188_1,person115_1)).
example(1463,neg,advisedby(person327_1,person115_1)).
example(1464,neg,advisedby(person140_1,person115_1)).
example(1465,neg,advisedby(person321_1,person115_1)).
example(1466,neg,advisedby(person428_1,person115_1)).
example(1467,neg,advisedby(person158_1,person115_1)).
example(1468,neg,advisedby(person102_1,person115_1)).
example(1469,neg,advisedby(person90_1,person115_1)).
example(1470,neg,advisedby(person214_1,person115_1)).
example(1471,neg,advisedby(person146_1,person115_1)).
example(1472,neg,advisedby(person88_1,person115_1)).
example(1473,neg,advisedby(person178_1,person115_1)).
example(1474,neg,advisedby(person195_1,person115_1)).
example(1475,neg,advisedby(person38_1,person351_1)).
example(1476,neg,advisedby(person261_1,person351_1)).
example(1477,neg,advisedby(person149_1,person351_1)).
example(1478,neg,advisedby(person306_1,person351_1)).
example(1479,neg,advisedby(person410_1,person351_1)).
example(1480,neg,advisedby(person157_1,person351_1)).
example(1481,neg,advisedby(person200_1,person351_1)).
example(1482,neg,advisedby(person404_1,person351_1)).
example(1483,neg,advisedby(person122_1,person351_1)).
example(1484,neg,advisedby(person322_1,person351_1)).
example(1485,neg,advisedby(person131_1,person351_1)).
example(1486,neg,advisedby(person85_1,person351_1)).
example(1487,neg,advisedby(person241_1,person351_1)).
example(1488,neg,advisedby(person217_1,person351_1)).
example(1489,neg,advisedby(person270_1,person351_1)).
example(1490,neg,advisedby(person206_1,person351_1)).
example(1491,neg,advisedby(person81_1,person351_1)).
example(1492,neg,advisedby(person228_1,person351_1)).
example(1493,neg,advisedby(person51_1,person351_1)).
example(1494,neg,advisedby(person41_1,person351_1)).
example(1495,neg,advisedby(person163_1,person351_1)).
example(1496,neg,advisedby(person435_1,person351_1)).
example(1497,neg,advisedby(person363_1,person351_1)).
example(1498,neg,advisedby(person427_1,person351_1)).
example(1499,neg,advisedby(person142_1,person351_1)).
example(1500,neg,advisedby(person431_1,person351_1)).
example(1501,neg,advisedby(person283_1,person351_1)).
example(1502,neg,advisedby(person300_1,person351_1)).
example(1503,neg,advisedby(person113_1,person351_1)).
example(1504,neg,advisedby(person296_1,person351_1)).
example(1505,neg,advisedby(person36_1,person351_1)).
example(1506,neg,advisedby(person328_1,person351_1)).
example(1507,neg,advisedby(person31_1,person351_1)).
example(1508,neg,advisedby(person61_1,person351_1)).
example(1509,neg,advisedby(person119_1,person351_1)).
example(1510,neg,advisedby(person3_1,person351_1)).
example(1511,neg,advisedby(person317_1,person351_1)).
example(1512,neg,advisedby(person230_1,person351_1)).
example(1513,neg,advisedby(person258_1,person351_1)).
example(1514,neg,advisedby(person188_1,person351_1)).
example(1515,neg,advisedby(person327_1,person351_1)).
example(1516,neg,advisedby(person140_1,person351_1)).
example(1517,neg,advisedby(person321_1,person351_1)).
example(1518,neg,advisedby(person428_1,person351_1)).
example(1519,neg,advisedby(person158_1,person351_1)).
example(1520,neg,advisedby(person102_1,person351_1)).
example(1521,neg,advisedby(person90_1,person351_1)).
example(1522,neg,advisedby(person214_1,person351_1)).
example(1523,neg,advisedby(person146_1,person351_1)).
example(1524,neg,advisedby(person88_1,person351_1)).
example(1525,neg,advisedby(person178_1,person351_1)).
example(1526,neg,advisedby(person195_1,person351_1)).
example(1527,neg,advisedby(person38_1,person72_1)).
example(1528,neg,advisedby(person261_1,person72_1)).
example(1529,neg,advisedby(person149_1,person72_1)).
example(1530,neg,advisedby(person306_1,person72_1)).
example(1531,neg,advisedby(person410_1,person72_1)).
example(1532,neg,advisedby(person322_1,person72_1)).
example(1533,neg,advisedby(person131_1,person72_1)).
example(1534,neg,advisedby(person85_1,person72_1)).
example(1535,neg,advisedby(person241_1,person72_1)).
example(1536,neg,advisedby(person270_1,person72_1)).
example(1537,neg,advisedby(person81_1,person72_1)).
example(1538,neg,advisedby(person228_1,person72_1)).
example(1539,neg,advisedby(person51_1,person72_1)).
example(1540,neg,advisedby(person41_1,person72_1)).
example(1541,neg,advisedby(person163_1,person72_1)).
example(1542,neg,advisedby(person435_1,person72_1)).
example(1543,neg,advisedby(person363_1,person72_1)).
example(1544,neg,advisedby(person427_1,person72_1)).
example(1545,neg,advisedby(person142_1,person72_1)).
example(1546,neg,advisedby(person431_1,person72_1)).
example(1547,neg,advisedby(person283_1,person72_1)).
example(1548,neg,advisedby(person300_1,person72_1)).
example(1549,neg,advisedby(person113_1,person72_1)).
example(1550,neg,advisedby(person296_1,person72_1)).
example(1551,neg,advisedby(person36_1,person72_1)).
example(1552,neg,advisedby(person328_1,person72_1)).
example(1553,neg,advisedby(person31_1,person72_1)).
example(1554,neg,advisedby(person61_1,person72_1)).
example(1555,neg,advisedby(person119_1,person72_1)).
example(1556,neg,advisedby(person3_1,person72_1)).
example(1557,neg,advisedby(person317_1,person72_1)).
example(1558,neg,advisedby(person230_1,person72_1)).
example(1559,neg,advisedby(person258_1,person72_1)).
example(1560,neg,advisedby(person188_1,person72_1)).
example(1561,neg,advisedby(person327_1,person72_1)).
example(1562,neg,advisedby(person140_1,person72_1)).
example(1563,neg,advisedby(person321_1,person72_1)).
example(1564,neg,advisedby(person428_1,person72_1)).
example(1565,neg,advisedby(person158_1,person72_1)).
example(1566,neg,advisedby(person102_1,person72_1)).
example(1567,neg,advisedby(person90_1,person72_1)).
example(1568,neg,advisedby(person214_1,person72_1)).
example(1569,neg,advisedby(person146_1,person72_1)).
example(1570,neg,advisedby(person88_1,person72_1)).
example(1571,neg,advisedby(person178_1,person72_1)).
example(1572,neg,advisedby(person195_1,person72_1)).
example(1573,neg,advisedby(person38_1,person393_1)).
example(1574,neg,advisedby(person261_1,person393_1)).
example(1575,neg,advisedby(person149_1,person393_1)).
example(1576,neg,advisedby(person306_1,person393_1)).
example(1577,neg,advisedby(person410_1,person393_1)).
example(1578,neg,advisedby(person157_1,person393_1)).
example(1579,neg,advisedby(person200_1,person393_1)).
example(1580,neg,advisedby(person404_1,person393_1)).
example(1581,neg,advisedby(person122_1,person393_1)).
example(1582,neg,advisedby(person322_1,person393_1)).
example(1583,neg,advisedby(person131_1,person393_1)).
example(1584,neg,advisedby(person85_1,person393_1)).
example(1585,neg,advisedby(person241_1,person393_1)).
example(1586,neg,advisedby(person217_1,person393_1)).
example(1587,neg,advisedby(person270_1,person393_1)).
example(1588,neg,advisedby(person206_1,person393_1)).
example(1589,neg,advisedby(person51_1,person393_1)).
example(1590,neg,advisedby(person41_1,person393_1)).
example(1591,neg,advisedby(person435_1,person393_1)).
example(1592,neg,advisedby(person363_1,person393_1)).
example(1593,neg,advisedby(person427_1,person393_1)).
example(1594,neg,advisedby(person142_1,person393_1)).
example(1595,neg,advisedby(person431_1,person393_1)).
example(1596,neg,advisedby(person283_1,person393_1)).
example(1597,neg,advisedby(person300_1,person393_1)).
example(1598,neg,advisedby(person113_1,person393_1)).
example(1599,neg,advisedby(person296_1,person393_1)).
example(1600,neg,advisedby(person36_1,person393_1)).
example(1601,neg,advisedby(person328_1,person393_1)).
example(1602,neg,advisedby(person31_1,person393_1)).
example(1603,neg,advisedby(person61_1,person393_1)).
example(1604,neg,advisedby(person119_1,person393_1)).
example(1605,neg,advisedby(person3_1,person393_1)).
example(1606,neg,advisedby(person317_1,person393_1)).
example(1607,neg,advisedby(person230_1,person393_1)).
example(1608,neg,advisedby(person258_1,person393_1)).
example(1609,neg,advisedby(person188_1,person393_1)).
example(1610,neg,advisedby(person327_1,person393_1)).
example(1611,neg,advisedby(person140_1,person393_1)).
example(1612,neg,advisedby(person321_1,person393_1)).
example(1613,neg,advisedby(person428_1,person393_1)).
example(1614,neg,advisedby(person158_1,person393_1)).
example(1615,neg,advisedby(person102_1,person393_1)).
example(1616,neg,advisedby(person90_1,person393_1)).
example(1617,neg,advisedby(person214_1,person393_1)).
example(1618,neg,advisedby(person146_1,person393_1)).
example(1619,neg,advisedby(person88_1,person393_1)).
example(1620,neg,advisedby(person178_1,person393_1)).
example(1621,neg,advisedby(person195_1,person393_1)).
example(1622,neg,advisedby(person18_1,person248_1)).
example(1623,neg,advisedby(person9_1,person248_1)).
example(1624,neg,advisedby(person429_1,person248_1)).
example(1625,neg,advisedby(person27_1,person248_1)).
example(1626,neg,advisedby(person362_1,person248_1)).
example(1627,neg,advisedby(person96_1,person248_1)).
example(1628,neg,advisedby(person361_1,person248_1)).
example(1629,neg,advisedby(person263_1,person248_1)).
example(1630,neg,advisedby(person183_1,person248_1)).
example(1631,neg,advisedby(person118_1,person248_1)).
example(1632,neg,advisedby(person105_1,person248_1)).
example(1633,neg,advisedby(person108_1,person248_1)).
example(1634,neg,advisedby(person203_1,person248_1)).
example(1635,neg,advisedby(person287_1,person248_1)).
example(1636,neg,advisedby(person87_1,person248_1)).
example(1637,neg,advisedby(person39_1,person248_1)).
example(1638,neg,advisedby(person35_1,person248_1)).
example(1639,neg,advisedby(person325_1,person248_1)).
example(1640,neg,advisedby(person76_1,person248_1)).
example(1641,neg,advisedby(person232_1,person248_1)).
example(1642,neg,advisedby(person18_1,person64_1)).
example(1643,neg,advisedby(person9_1,person64_1)).
example(1644,neg,advisedby(person429_1,person64_1)).
example(1645,neg,advisedby(person27_1,person64_1)).
example(1646,neg,advisedby(person362_1,person64_1)).
example(1647,neg,advisedby(person96_1,person64_1)).
example(1648,neg,advisedby(person361_1,person64_1)).
example(1649,neg,advisedby(person263_1,person64_1)).
example(1650,neg,advisedby(person183_1,person64_1)).
example(1651,neg,advisedby(person118_1,person64_1)).
example(1652,neg,advisedby(person105_1,person64_1)).
example(1653,neg,advisedby(person108_1,person64_1)).
example(1654,neg,advisedby(person203_1,person64_1)).
example(1655,neg,advisedby(person287_1,person64_1)).
example(1656,neg,advisedby(person87_1,person64_1)).
example(1657,neg,advisedby(person39_1,person64_1)).
example(1658,neg,advisedby(person35_1,person64_1)).
example(1659,neg,advisedby(person325_1,person64_1)).
example(1660,neg,advisedby(person76_1,person64_1)).
example(1661,neg,advisedby(person232_1,person64_1)).
example(1662,neg,advisedby(person18_1,person166_1)).
example(1663,neg,advisedby(person9_1,person166_1)).
example(1664,neg,advisedby(person429_1,person166_1)).
example(1665,neg,advisedby(person27_1,person166_1)).
example(1666,neg,advisedby(person362_1,person166_1)).
example(1667,neg,advisedby(person96_1,person166_1)).
example(1668,neg,advisedby(person361_1,person166_1)).
example(1669,neg,advisedby(person263_1,person166_1)).
example(1670,neg,advisedby(person183_1,person166_1)).
example(1671,neg,advisedby(person118_1,person166_1)).
example(1672,neg,advisedby(person105_1,person166_1)).
example(1673,neg,advisedby(person108_1,person166_1)).
example(1674,neg,advisedby(person203_1,person166_1)).
example(1675,neg,advisedby(person287_1,person166_1)).
example(1676,neg,advisedby(person87_1,person166_1)).
example(1677,neg,advisedby(person39_1,person166_1)).
example(1678,neg,advisedby(person35_1,person166_1)).
example(1679,neg,advisedby(person325_1,person166_1)).
example(1680,neg,advisedby(person76_1,person166_1)).
example(1681,neg,advisedby(person232_1,person166_1)).
example(1682,neg,advisedby(person18_1,person370_1)).
example(1683,neg,advisedby(person9_1,person370_1)).
example(1684,neg,advisedby(person429_1,person370_1)).
example(1685,neg,advisedby(person27_1,person370_1)).
example(1686,neg,advisedby(person362_1,person370_1)).
example(1687,neg,advisedby(person96_1,person370_1)).
example(1688,neg,advisedby(person361_1,person370_1)).
example(1689,neg,advisedby(person263_1,person370_1)).
example(1690,neg,advisedby(person183_1,person370_1)).
example(1691,neg,advisedby(person118_1,person370_1)).
example(1692,neg,advisedby(person105_1,person370_1)).
example(1693,neg,advisedby(person108_1,person370_1)).
example(1694,neg,advisedby(person203_1,person370_1)).
example(1695,neg,advisedby(person287_1,person370_1)).
example(1696,neg,advisedby(person87_1,person370_1)).
example(1697,neg,advisedby(person39_1,person370_1)).
example(1698,neg,advisedby(person35_1,person370_1)).
example(1699,neg,advisedby(person325_1,person370_1)).
example(1700,neg,advisedby(person76_1,person370_1)).
example(1701,neg,advisedby(person232_1,person370_1)).
example(1702,neg,advisedby(person27_1,person335_1)).
example(1703,neg,advisedby(person96_1,person335_1)).
example(1704,neg,advisedby(person361_1,person335_1)).
example(1705,neg,advisedby(person263_1,person335_1)).
example(1706,neg,advisedby(person183_1,person335_1)).
example(1707,neg,advisedby(person118_1,person335_1)).
example(1708,neg,advisedby(person105_1,person335_1)).
example(1709,neg,advisedby(person108_1,person335_1)).
example(1710,neg,advisedby(person203_1,person335_1)).
example(1711,neg,advisedby(person287_1,person335_1)).
example(1712,neg,advisedby(person87_1,person335_1)).
example(1713,neg,advisedby(person39_1,person335_1)).
example(1714,neg,advisedby(person35_1,person335_1)).
example(1715,neg,advisedby(person325_1,person335_1)).
example(1716,neg,advisedby(person76_1,person335_1)).
example(1717,neg,advisedby(person232_1,person335_1)).
example(1718,neg,advisedby(person18_1,person46_1)).
example(1719,neg,advisedby(person9_1,person46_1)).
example(1720,neg,advisedby(person429_1,person46_1)).
example(1721,neg,advisedby(person27_1,person46_1)).
example(1722,neg,advisedby(person362_1,person46_1)).
example(1723,neg,advisedby(person96_1,person46_1)).
example(1724,neg,advisedby(person361_1,person46_1)).
example(1725,neg,advisedby(person263_1,person46_1)).
example(1726,neg,advisedby(person183_1,person46_1)).
example(1727,neg,advisedby(person118_1,person46_1)).
example(1728,neg,advisedby(person105_1,person46_1)).
example(1729,neg,advisedby(person108_1,person46_1)).
example(1730,neg,advisedby(person203_1,person46_1)).
example(1731,neg,advisedby(person287_1,person46_1)).
example(1732,neg,advisedby(person87_1,person46_1)).
example(1733,neg,advisedby(person39_1,person46_1)).
example(1734,neg,advisedby(person35_1,person46_1)).
example(1735,neg,advisedby(person325_1,person46_1)).
example(1736,neg,advisedby(person76_1,person46_1)).
example(1737,neg,advisedby(person232_1,person46_1)).
example(1738,neg,advisedby(person18_1,person189_1)).
example(1739,neg,advisedby(person9_1,person189_1)).
example(1740,neg,advisedby(person429_1,person189_1)).
example(1741,neg,advisedby(person27_1,person189_1)).
example(1742,neg,advisedby(person362_1,person189_1)).
example(1743,neg,advisedby(person96_1,person189_1)).
example(1744,neg,advisedby(person361_1,person189_1)).
example(1745,neg,advisedby(person263_1,person189_1)).
example(1746,neg,advisedby(person183_1,person189_1)).
example(1747,neg,advisedby(person118_1,person189_1)).
example(1748,neg,advisedby(person105_1,person189_1)).
example(1749,neg,advisedby(person108_1,person189_1)).
example(1750,neg,advisedby(person203_1,person189_1)).
example(1751,neg,advisedby(person287_1,person189_1)).
example(1752,neg,advisedby(person87_1,person189_1)).
example(1753,neg,advisedby(person39_1,person189_1)).
example(1754,neg,advisedby(person35_1,person189_1)).
example(1755,neg,advisedby(person325_1,person189_1)).
example(1756,neg,advisedby(person76_1,person189_1)).
example(1757,neg,advisedby(person232_1,person189_1)).
example(1758,neg,advisedby(person18_1,person5_1)).
example(1759,neg,advisedby(person9_1,person5_1)).
example(1760,neg,advisedby(person429_1,person5_1)).
example(1761,neg,advisedby(person27_1,person5_1)).
example(1762,neg,advisedby(person361_1,person5_1)).
example(1763,neg,advisedby(person105_1,person5_1)).
example(1764,neg,advisedby(person108_1,person5_1)).
example(1765,neg,advisedby(person203_1,person5_1)).
example(1766,neg,advisedby(person287_1,person5_1)).
example(1767,neg,advisedby(person87_1,person5_1)).
example(1768,neg,advisedby(person39_1,person5_1)).
example(1769,neg,advisedby(person35_1,person5_1)).
example(1770,neg,advisedby(person325_1,person5_1)).
example(1771,neg,advisedby(person76_1,person5_1)).
example(1772,neg,advisedby(person232_1,person5_1)).

:- dynamic '$aleph_global'/2.

'$aleph_global'(targetpred,targetpred(advisedby/2)).
'$aleph_global'(last_clause,last_clause(0)).
'$aleph_global'(last_example,last_example(neg,1772)).
'$aleph_global'(atoms_left,atoms_left(neg,[1-1772])).
'$aleph_global'(atoms,atoms(neg,[1-1772])).
'$aleph_global'(size,size(neg,1772)).
'$aleph_global'(last_example,last_example(pos,80)).
'$aleph_global'(atoms_left,atoms_left(pos,[1-80])).
'$aleph_global'(atoms,atoms(pos,[1-80])).
'$aleph_global'(size,size(pos,80)).
'$aleph_global'(abduce,set(abduce,false)).
'$aleph_global'(best_clause_hook,set(best_clause_hook,true)).
'$aleph_global'(cache_clauselength,set(cache_clauselength,3)).
'$aleph_global'(caching,set(caching,false)).
'$aleph_global'(check_redundant,set(check_redundant,false)).
'$aleph_global'(check_good,set(check_good,false)).
'$aleph_global'(check_useless,set(check_useless,false)).
'$aleph_global'(clause_rewrite_hook,set(clause_rewrite_hook,true)).
'$aleph_global'(condition,set(condition,false)).
'$aleph_global'(confidence,set(confidence,0.95)).
'$aleph_global'(construct_bottom,set(construct_bottom,saturation)).
'$aleph_global'(depth,set(depth,10)).
'$aleph_global'(good,set(good,false)).
'$aleph_global'(gsamplesize,set(gsamplesize,100)).
'$aleph_global'(interactive,set(interactive,false)).
'$aleph_global'(language,set(language,(+inf))).
'$aleph_global'(lazy_negs,set(lazy_negs,false)).
'$aleph_global'(lazy_on_contradiction,set(lazy_on_contradiction,false)).
'$aleph_global'(lazy_on_cost,set(lazy_on_cost,false)).
'$aleph_global'(lookahead,set(lookahead,1)).
'$aleph_global'(max_abducibles,set(max_abducibles,2)).
'$aleph_global'(match_bottom_hook,set(match_bottom_hook,true)).
'$aleph_global'(max_features,set(max_features,(+inf))).
'$aleph_global'(mingain,set(mingain,0.05)).
'$aleph_global'(minposfrac,set(minposfrac,0)).
'$aleph_global'(minscore,set(minscore,(-inf))).
'$aleph_global'(moves,set(moves,5)).
'$aleph_global'(newbest_hook,set(newbest_hook,true)).
'$aleph_global'(good_clause_hook,set(good_clause_hook,true)).
'$aleph_global'(newvars,set(newvars,(+inf))).
'$aleph_global'(nreduce_bottom,set(nreduce_bottom,false)).
'$aleph_global'(openlist,set(openlist,(+inf))).
'$aleph_global'(optimise_clauses,set(optimise_clauses,false)).
'$aleph_global'(permute_bottom,set(permute_bottom,false)).
'$aleph_global'(portray_examples,set(portray_examples,false)).
'$aleph_global'(portray_hypothesis,set(portray_hypothesis,false)).
'$aleph_global'(portray_literals,set(portray_literals,false)).
'$aleph_global'(portray_search,set(portray_search,false)).
'$aleph_global'(prefix_trees,set(prefix_trees,false)).
'$aleph_global'(print,set(print,4)).
'$aleph_global'(proof_strategy,set(proof_strategy,restricted_sld)).
'$aleph_global'(prooftime,set(prooftime,(+inf))).
'$aleph_global'(prune_tree,set(prune_tree,false)).
'$aleph_global'(record_testclause_hook,set(record_testclause_hook,true)).
'$aleph_global'(reduce_end_hook,set(reduce_end_hook,true)).
'$aleph_global'(reduce_start_hook,set(reduce_start_hook,true)).
'$aleph_global'(reduce_prelims_hook,set(reduce_prelims_hook,true)).
'$aleph_global'(refine,set(refine,false)).
'$aleph_global'(refineop,set(refineop,false)).
'$aleph_global'(resample,set(resample,1)).
'$aleph_global'(rls_type,set(rls_type,gsat)).
'$aleph_global'(samplesize,set(samplesize,0)).
'$aleph_global'(sat_end_hook,set(sat_end_hook,true)).
'$aleph_global'(sat_start_hook,set(sat_start_hook,true)).
'$aleph_global'(search,set(search,bf)).
'$aleph_global'(searchstrat,set(searchstrat,bf)).
'$aleph_global'(recompute_cover,set(recompute_cover,false)).
'$aleph_global'(searchtime,set(searchtime,(+inf))).
'$aleph_global'(skolemvars,set(skolemvars,10000)).
'$aleph_global'(skolem_examples,set(skolem_examples,true)).
'$aleph_global'(splitvars,set(splitvars,false)).
'$aleph_global'(store_bottom,set(store_bottom,false)).
'$aleph_global'(subsample,set(subsample,false)).
'$aleph_global'(subsamplesize,set(subsamplesize,(+inf))).
'$aleph_global'(threads,set(threads,1)).
'$aleph_global'(trace_memory_usage,set(trace_memory_usage,false)).
'$aleph_global'(tries,set(tries,10)).
'$aleph_global'(typeoverlap,set(typeoverlap,0.95)).
'$aleph_global'(uniform_sample,set(uniform_sample,false)).
'$aleph_global'(updateback,set(updateback,true)).
'$aleph_global'(version,set(version,5)).
'$aleph_global'(clauselength,set(clauselength,10)).
'$aleph_global'(i,set(i,5)).
'$aleph_global'(noise,set(noise,1000)).
'$aleph_global'(minacc,set(minacc,0.1)).
'$aleph_global'(explore,set(explore,true)).
'$aleph_global'(nodes,set(nodes,500000)).
'$aleph_global'(evalfn,set(evalfn,f)).
'$aleph_global'(test_pos,set(test_pos,'test.f')).
'$aleph_global'(test_neg,set(test_neg,'test.n')).
'$aleph_global'(verbosity,set(verbosity,0)).
'$aleph_global'(minpos,set(minpos,10)).
'$aleph_global'(record,set(record,true)).
'$aleph_global'(recordfile,set(recordfile,'test.out')).
'$aleph_global'(recordfile_stream,set(recordfile_stream,'$stream'(4))).
'$aleph_global'(determination,determination(advisedby/2,taughtby/3)).
'$aleph_global'(determination,determination(advisedby/2,courselevel/2)).
'$aleph_global'(determination,determination(advisedby/2,position/2)).
'$aleph_global'(determination,determination(advisedby/2,projectmember/2)).
'$aleph_global'(determination,determination(advisedby/2,phase/2)).
'$aleph_global'(determination,determination(advisedby/2,tempadvisedby/2)).
'$aleph_global'(determination,determination(advisedby/2,yearsinprogram/2)).
'$aleph_global'(determination,determination(advisedby/2,ta/3)).
'$aleph_global'(determination,determination(advisedby/2,professor/1)).
'$aleph_global'(determination,determination(advisedby/2,student/1)).
'$aleph_global'(determination,determination(advisedby/2,allpublicationswith/2)).
'$aleph_global'(determination,determination(advisedby/2,nofpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpub/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubs/2)).
'$aleph_global'(determination,determination(advisedby/2,commonpubsratio/2)).
'$aleph_global'(modeb,modeb(*,taughtby(+course,-person,-date))).
'$aleph_global'(mode,mode(*,taughtby(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,taughtby(-course,+person,-date))).
'$aleph_global'(mode,mode(*,taughtby(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,-level))).
'$aleph_global'(mode,mode(*,courselevel(+course,-level))).
'$aleph_global'(modeb,modeb(*,courselevel(+course,#level))).
'$aleph_global'(mode,mode(*,courselevel(+course,#level))).
'$aleph_global'(modeb,modeb(*,position(+person,-faculty))).
'$aleph_global'(mode,mode(*,position(+person,-faculty))).
'$aleph_global'(modeb,modeb(*,position(+person,#faculty))).
'$aleph_global'(mode,mode(*,position(+person,#faculty))).
'$aleph_global'(modeb,modeb(*,projectmember(+project,-person))).
'$aleph_global'(mode,mode(*,projectmember(+project,-person))).
'$aleph_global'(modeb,modeb(*,projectmember(-project,+person))).
'$aleph_global'(mode,mode(*,projectmember(-project,+person))).
'$aleph_global'(modeh,modeh(*,advisedby(+person,+person))).
'$aleph_global'(mode,mode(*,advisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,phase(+person,-phase))).
'$aleph_global'(mode,mode(*,phase(+person,-phase))).
'$aleph_global'(modeb,modeb(*,phase(+person,#phase))).
'$aleph_global'(mode,mode(*,phase(+person,#phase))).
'$aleph_global'(modeb,modeb(*,tempadvisedby(+person,+person))).
'$aleph_global'(mode,mode(*,tempadvisedby(+person,+person))).
'$aleph_global'(modeb,modeb(*,yearsinprogram(+person,-number))).
'$aleph_global'(mode,mode(*,yearsinprogram(+person,-number))).
'$aleph_global'(modeb,modeb(*,ta(+course,-person,-date))).
'$aleph_global'(mode,mode(*,ta(+course,-person,-date))).
'$aleph_global'(modeb,modeb(*,ta(-course,+person,-date))).
'$aleph_global'(mode,mode(*,ta(-course,+person,-date))).
'$aleph_global'(modeb,modeb(*,professor(+person))).
'$aleph_global'(mode,mode(*,professor(+person))).
'$aleph_global'(modeb,modeb(*,student(+person))).
'$aleph_global'(mode,mode(*,student(+person))).
'$aleph_global'(determination,determination(advisedby/2,geq/2)).
'$aleph_global'(modeb,modeb(1,geq(+number,#number))).
'$aleph_global'(mode,mode(1,geq(+number,#number))).
'$aleph_global'(modeb,modeb(1,geq(+number,+number))).
'$aleph_global'(mode,mode(1,geq(+number,+number))).
'$aleph_global'(determination,determination(advisedby/2,diff/2)).
'$aleph_global'(modeb,modeb(1,diff(+number,+number))).
'$aleph_global'(mode,mode(1,diff(+number,+number))).
'$aleph_global'(train_pos,set(train_pos,'advisedby.f')).
'$aleph_global'(train_neg,set(train_neg,'advisedby.n')).
'$aleph_global'(prior,set(prior,[0.0431965-pos,0.956803-neg])).
'$aleph_global'(stage,set(stage,command)).


set(qpacks,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks(_)),
   assert(qpacks:qpacks(A)).
set(discretize,A) :-
   ( A=on
   ->
     B=on
   ;
     ( A==off
     ->
       B=off
     )
   ;
     ( atom(A)
     ->
       B=on
     )
   ),
   !,
   ( A=on
   ->
     true
   ;
     ( A=off
     ->
       true
     )
   ;
     ensure_loaded(A)
   ),
   retractall(user:discretize(_)),
   assert(user:discretize(B)).
set(qpacks_compact,A) :-
   (
     A=on
   ;
     A==off
   ),
   !,
   retractall(qpacks:qpacks_compact(_)),
   assert(qpacks:qpacks_compact(A)).
set(A,B) :-
   check_setting(A,B),
   ( B=inf
   ->
     C is inf
   ;
     ( B=(+inf)
     ->
       C is inf
     )
   ;
     ( B=(-inf)
     ->
       C is(-inf)
     )
   ;
     C=B
   ),
   retractall(user:'$aleph_global'(A,set(A,_))),
   assertz(user:'$aleph_global'(A,set(A,C))),
   broadcast(set(A,C)),
   special_consideration(A,B).


setting(A,B) :-
   nonvar(A),
   '$aleph_global'(A,set(A,C)),
   !,
   B=C.
setting(A,B) :-
   default_setting(A,B).


init(yap) :-
   source,
   load_files(library(dbusage),[]),
   load_files(library(nb),[]),
   load_files(library(tries),[]),
   use_module(qpacks),
   use_module(prefix_trees),
   use_module(c2c),
   use_module(utils),
   ( prolog:predicate_property(user:false,built_in)
   ->
     prolog:hide_predicate(user:false)
   ;
     true
   ),
   style_check(single_var),
   yap_flag(unknown,error),
   prolog:assert_static(user: (aleph_random(A):-A is random)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     prolog:assert_static(user: (remove_alarm(A):-alarm(0,_,_)))
   ;
     prolog:assert_static(user:alarm(_,_,_)),
     prolog:assert_static(user:remove_alarm(_))
   ),
   prolog:assert_static(user: (aleph_consult(B):-consult(B))),
   prolog:assert_static(user: (aleph_reconsult(B):-reconsult(B))),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     prolog:assert_static(user: (thread_local  _))
   ),
   prolog:assert_static(user:broadcast(_)),
   prolog:assert_static(user: (aleph_background_predicate(C):-predicate_property(C,D),(D=static;D= (dynamic);D=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).
init(swi) :-
   redefine_system_predicate(false),
   style_check(+singleton),
   style_check(- (discontiguous)),
   dynamic false/0,
   dynamic example/3,
   assert(user: (aleph_random(A):-B=1000000,A is float(random(B-1))/float(B))),
   arithmetic_function(inf/0),
   assert(user:inf(1e+10)),
   assert(user: (gc:-garbage_collect)),
   assert(user: (depth_bound_call(C,D):-call_with_depth_limit(C,D,E),E\=depth_limit_exceeded)),
   ( prolog:predicate_property(user:numbervars(_,_,_),built_in)
   ->
     true
   ;
     assert(user: (numbervars(F,G,H):-numbervars(F,'$VAR',G,H)))
   ),
   assert(user: (assert_static(A):-assert(A))),
   assert(user: (system(A):-shell(A))),
   assert(user: (exists(A):-exists_file(A))),
   assert(user: (aleph_reconsult(I):-consult(I))),
   assert(user: (aleph_consult(A):-aleph_open(A,read,J),repeat,read(J,I),(I=end_of_file->close(J),!;assertz(I),fail))),
   use_module(library(broadcast)),
   ( prolog:predicate_property(user:alarm(_,_,_),built_in)
   ->
     use_module(library(time))
   ;
     assert(user:alarm(_,_,_)),
     assert(user:remove_alarm(_))
   ),
   ( prolog:predicate_property(user: (thread_local  _),built_in)
   ->
     true
   ;
     assert(user: (thread_local  _))
   ),
   assert(user: (aleph_background_predicate(K):-predicate_property(K,L),(L=interpreted;L=built_in),!)),
   ( prolog:predicate_property(user:delete_file(_),built_in)
   ->
     true
   ;
     prolog:assert_static(user:delete_file(_))
   ).


prolog_type(yap) :-
   prolog:predicate_property(user:yap_flag(_,_),built_in),
   !.
prolog_type(swi).

:- dynamic message_hook/3.


:- dynamic portray_message/2.


:- dynamic term_expansion/2.


:- dynamic exception/3.


:- dynamic library_directory/1.

library_directory(A) :-
   current_prolog_flag(prolog_library_directory,A),
   A\=''.
library_directory(A) :-
   getenv('YAPSHAREDIR',A).
library_directory('~/share/Yap').
library_directory('.').
library_directory(A) :-
   system_library(A).

:- dynamic commons_directory/1.

commons_directory(A) :-
   system_commons(A).

:- dynamic foreign_directory/1.

foreign_directory(A) :-
   current_prolog_flag(prolog_foreign_directory,A),
   A\=''.
foreign_directory(A) :-
   current_prolog_flag(windows,true),
   file_search_path(path,A).
foreign_directory('.').
foreign_directory(yap('lib/Yap')).

:- dynamic prolog_file_type/2.

prolog_file_type(yap,prolog).
prolog_file_type(pl,prolog).
prolog_file_type(prolog,prolog).
prolog_file_type(A,prolog) :-
   current_prolog_flag(associate,A),
   A\==prolog,
   A\==pl,
   A\==yap.
prolog_file_type(qly,qly).
prolog_file_type(A,executable) :-
   current_prolog_flag(shared_object_extension,A).
prolog_file_type(pyd,executable).

:- dynamic file_search_path/2.

file_search_path(library,A) :-
   library_directory(A).
file_search_path(commons,A) :-
   commons_directory(A).
file_search_path(swi,A) :-
   current_prolog_flag(home,A).
file_search_path(yap,A) :-
   current_prolog_flag(home,A).
file_search_path(system,A) :-
   prolog_flag(host_type,A).
file_search_path(foreign,A) :-
   foreign_directory(A).
file_search_path(executable,A) :-
   foreign_directory(A).
file_search_path(path,C) :-
   getenv('PATH',A),
   ( current_prolog_flag(windows,true)
   ->
     atomic_list_concat(B,;,A)
   ;
     atomic_list_concat(B,:,A)
   ),
   lists:member(C,B).

:- dynamic goal_expansion/3.


:- dynamic unknown_predicate_handler/3.

