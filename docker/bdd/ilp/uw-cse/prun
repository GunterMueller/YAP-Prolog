# change to use your own YAP and Aleph
YAP="../../bins/java/yap"
PREFIX=P
BKFILE="$PREFIX"advisedby
TEST="$PREFIX"test
TRACEFILE="$PREFIX"advisedby"$i".trace
for i in 0 1 2 3 4; do
  rm -f train.f train.n test.f test.n
  let "train1=$i % 5"
  let "train2=($i+1) % 5"
  let "tune1=($i+2) % 5"
  let "tune2=($i+3) % 5"
  let "test=($i+4) % 5"
  cat fs/f"$train1".f \
      fs/f"$train2".f > "$PREFIX"train.f
  cat fs/f"$tune1".f \
      fs/f"$tune2".f > "$PREFIX"tune.f
  cat fs/f"$test".f > "$TEST".f
  cat fs/f"$train1".n \
      fs/f"$train2".n > "$PREFIX"train.n
  cat fs/f"$tune1".n \
      fs/f"$tune2".n > "$PREFIX"tune.n
  cat fs/f"$test".n > "$TEST".n
  cat "$PREFIX"train.f "$PREFIX"tune.f > "$PREFIX"advisedby.f
  cat "$PREFIX"train.n "$PREFIX"tune.f > "$PREFIX"advisedby.n
  "$YAP" << EOF > LOGPATH.$i 2>&1
['../AlephUW/aleph.yap'].
%assert(fold($i)).
read_all('$BKFILE').
%yap_flag(gc_trace,verbose).
set(test_pos,'$TEST.f').
set(test_neg,'$TEST.n').
set(recordfile,'$TRACEFILE').
set(nodes,2000).
set(verbosity,0).
vsc_set(pathf(on)).
%yap_flag(gc_trace,verbose).
induce.

EOF
done

