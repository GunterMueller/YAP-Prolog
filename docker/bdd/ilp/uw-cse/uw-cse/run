# change to use your own YAP and Aleph
YAP="../../bins/java/yap"
for i in 0 1 2 3 4; do
  rm -f train.f train.n test.f test.n
  let "train1=$i % 5"
  let "train2=($i+1) % 5"
  let "tune1=($i+2) % 5"
  let "tune2=($i+3) % 5"
  let "test=($i+4) % 5"
  cat fs/f"$train1".f \
      fs/f"$train2".f > train.f
  cat fs/f"$tune1".f \
      fs/f"$tune2".f > tune.f
  cat fs/f"$test".f > test.f
  cat fs/f"$train1".n \
      fs/f"$train2".n > train.n
  cat fs/f"$tune1".n \
      fs/f"$tune2".n > tune.n
  cat fs/f"$test".n > test.n
  cat train.f tune.f > advisedby.f
  cat train.n tune.n > advisedby.n
  "$YAP" << EOF > LOGNOPATH.$i 2>&1
['../AlephUW/aleph.yap'].
%assert(fold($i)).
read_all(advisedby).
%yap_flag(gc_trace,verbose).
set(recordfile,'advisedby$i.trace').
set(nodes,20000).
set(verbosity,0).
%yap_flag(gc_trace,verbose).
%induce.
vsc_set(vsc_interesting_threshold(15)).
open('ntimes.yap',append,S), statistics(runtime,[T,_]), induce_cover, statistics(runtime,[Tf,_], D is Tf-T, format(S,'fold($i,~w).~n',[D]).

EOF
done

