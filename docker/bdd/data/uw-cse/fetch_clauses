
:- yap_flag(unknown,error).

:- dynamic cl_counter/1, covers/3.

:- ['../AlephUW/aleph'].

main(_,_) :-
	retractall(cl_counter(_)),
	assert(cl_counter(0)),
	fail.
main(InFile,OFile) :-
	open(InFile,read,S1),
	open(OFile,write,S2),
	catch(process(S1,S2), end_of_file, (covers(S2),halt)).

process(S1,S2) :-
	repeat,
	search_for_clause(S1,S2).

search_for_clause(S1,S2) :-
	scan_comment(S1,PCover,NCover),
	read(S1, T0),
	( T0 = (H :- B) ->
%	  optimise(T0,_,T),
%	  numbervars(T,0,_),
	  store(H,B,PCover,NCover,S2)
	;
	  !
	),
	fail.

scan_comment(S,P,N) :-
	get_sequence(S,"INTERESTING clause: ["),
	get_digits(S,0,P),
	get_digits(S,0,N),
	get_sequence(S," >>> */").

get_sequence(_,[]).
get_sequence(S,[H|T]) :-
	myget(S,H),
	get_sequence(S,T).

get_digits(S,P0,PF) :-
	myget(S,H),
	H >= 0'0, H =< 0'9, !,
	PI is 10*P0+(H-0'0),
	get_digits(S,PI,PF).
get_digits(_,P,P) :- P > 0.

myget(S,H) :-
	get0(S,H0), (H0 = -1 -> throw(end_of_file) ; H = H0).

/* don't allow for duplicated entries */
store(H,Bd,P,S,_) :-
	recorded(H,c(P,S,Bd,H),_), !, fail.
store(H,Bd,P,S,_) :-
	recordz(H,c(P,S,Bd,H),_),
	take_last_from_bd(Bd,BdParent),
	no_improvement_on_parent(H,Bd,BdParent,P,S), !, 
	fail.
store(H,Bd,P,S,S2) :-
%	S/P < 1.8,
%	P > 30,
	retract(cl_counter(I)),
	I1 is I+1,
	assert(cl_counter(I1)),
	H =.. [N|L],
	H1 =.. [N,I|L],
	assert(covers(I,P,S)),
	portray_clause(S2,(H1 :- Bd)).

take_last_from_bd((G1,G2),O) :- G2 \= (_,_), !, (O = G1 ; O = G2).
take_last_from_bd((G1,G2),O) :- 
	(O = G2 ;  O = (G1,NG2), take_last_from_bd(G2,NG2)).

no_improvement_on_parent(H,_,BdParent,P,N) :-
	recorded(H,c(P0,N0,BdParent,H),_),
	((P0+0.1*P0)/N0 >= P/N ; P0/(N0-0.1*N0) >= P/N ; P < 10 ; N/P > 1).

covers(S2) :-
	format(S2,'~n~n~n~n~n',[]),
	covers(I,P,S),
	format(S2, 'covers(~d,~d,~d).~n',[I,P,S]),
	fail.	
covers(_).




