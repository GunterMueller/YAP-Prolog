# change to use your own YAP and Aleph
YAP="../../bins/java/yap"
for i in 0 1 2 3 4; do
  rm -f train.f train.n test.f test.n
  let "train1=$i % 5"
  let "train2=($i+1) % 5"
  let "tune1=($i+2) % 5"
  let "tune2=($i+3) % 5"
  let "test=($i+4) % 5"
  cat fs/f"$train1".f \
      fs/f"$train2".f > train.f
  cat fs/f"$tune1".f \
      fs/f"$tune2".f > tune.f
  cat fs/f"$test".f > test.f
  cat fs/f"$train1".n \
      fs/f"$train2".n > train.n
  cat fs/f"$tune1".n \
      fs/f"$tune2".n > tune.n
  cat fs/f"$test".n > test.n
  cat train.f tune.f > advisedby.f
  cat train.n tune.n > advisedby.n
  "$YAP" << EOF > LOGTAN.$i 2>&1
['../AlephUW/aleph.yap'].
%assert(fold($i)).
[times].
read_all(advisedby).
set(recordfile,'tadvisedby$i.trace').
set(nodes,10000).
set(verbosity,0).
vsc_set(bnet_dump_file('probabilities-t$i.yap')).
%vsc_set(bnet_min_recall_in_area(0.5)).
vsc_set(bnet_class('BNet.TanSearch')).
%vsc_set(bnet_scoring_method(0)).
%vsc_set(bnet_start_seeds(200)).
%vsc_set(bnet_min_recall_in_area(0.0)).
statistics(runtime,[T,_]), time($i,X), Z is X // 1000,induce_bnet_timed(Z), statistics(runtime,[Tf,_]), D is Tf-T, format('ILP run took ~d msec.~n',[D]).
EOF
done

