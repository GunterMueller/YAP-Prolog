BEAM/eam_am.c:  if (beam_su->prev==b) { beam_su=b; return; } /* It was the last one */
BEAM/eam_am.c:  b->prev=beam_su->prev;
BEAM/eam_am.c:  beam_su->prev=b;
BEAM/eam_am.c:    s->prev=beam_su->prev;
BEAM/eam_am.c:    beam_su->prev=s;
BEAM/eam_am.c:    if (beam_su->next==beam_su) { /* so existem 2 elementos na lista */
BEAM/eam_am.c:      beam_su->next=s;
BEAM/eam_am.c:			 beam_ABX=beam_su->and_box;
BEAM/eam_am.c:			  beam_ABX=beam_su->and_box;
BEAM/eam_am.c:			     beam_su=beam_su->next;
BEAM/eam_am.c:       l=beam_su->prev;
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s/%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal,  \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/absmi.c~:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s/%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal,  \
C/amasm.c:  ic->SiblingIndex = cl_u->lui.ChildIndex;
C/amasm.c:  cl_u->lui.ChildIndex = ic;
C/amasm.c:  cl_u->lui.ChildIndex = ic;
C/amasm.c:  cl_u->lui.ClRefCount++;
C/amasm.c:  ic->SiblingIndex = cl_u->si.ChildIndex;
C/amasm.c:  cl_u->si.ChildIndex = ic;
C/amasm.c:	cl_u->luc.Id = FunctorDBRef;
C/amasm.c:	cl_u->luc.ClFlags = LogUpdMask;
C/amasm.c:	  cl_u->luc.ClFlags |= HasCutMask;	  
C/amasm.c:	cl_u->luc.ClRefCount = 0;
C/amasm.c:	cl_u->luc.ClPred = cip->CurrentPred;
C/amasm.c:	cl_u->luc.ClTimeStart = cip->CurrentPred->TimeStampOfPred;
C/amasm.c:	cl_u->luc.ClTimeEnd = TIMESTAMP_EOT; 
C/amasm.c:	  cl_u->luc.ClFlags |= HasBlobsMask;
C/amasm.c:	  cl_u->luc.ClFlags |= HasDBTMask;
C/amasm.c:	cl_u->luc.ClExt = NULL;
C/amasm.c:	cl_u->luc.ClPrev = cl_u->luc.ClNext = NULL;
C/amasm.c:	//INIT_LOCK(cl_u->luc.ClLock);
C/amasm.c:	INIT_CLREF_COUNT(&(cl_u->luc));
C/amasm.c:      code_p = cl_u->luc.ClCode;
C/amasm.c:	cl_u->ic.ClFlags = DynamicMask;
C/amasm.c:	  cl_u->ic.ClFlags |= HasBlobsMask;
C/amasm.c:	  cl_u->ic.ClFlags |= HasDBTMask;
C/amasm.c:	cl_u->ic.ClSize = size;
C/amasm.c:	cl_u->ic.ClRefCount = 0;
C/amasm.c:	INIT_LOCK(cl_u->ic.ClLock);
C/amasm.c:	INIT_CLREF_COUNT(&(cl_u->ic));
C/amasm.c:      code_p = cl_u->ic.ClCode;
C/amasm.c:	cl_u->sc.ClFlags = StaticMask;
C/amasm.c:	  cl_u->sc.ClFlags |= HasCutMask;	  
C/amasm.c:	cl_u->sc.ClNext = NULL;
C/amasm.c:	cl_u->sc.ClSize = size;
C/amasm.c:	cl_u->sc.usc.ClLine = Yap_source_line_no();
C/amasm.c:	  cl_u->sc.ClFlags |= HasBlobsMask;
C/amasm.c:	  cl_u->sc.ClFlags |= HasDBTMask;
C/amasm.c:      code_p = cl_u->sc.ClCode;
C/amasm.c:	cl_u->lui.ClFlags = LogUpdMask|IndexedPredFlag|IndexMask|SwitchRootMask;
C/amasm.c:	cl_u->lui.ChildIndex = NULL;
C/amasm.c:	cl_u->lui.SiblingIndex = NULL;
C/amasm.c:	cl_u->lui.PrevSiblingIndex = NULL;
C/amasm.c:	cl_u->lui.ClPred = cip->CurrentPred;
C/amasm.c:	cl_u->lui.ParentIndex = NULL;
C/amasm.c:	cl_u->lui.ClSize = size;
C/amasm.c:	cl_u->lui.ClRefCount =  0;
C/amasm.c:	//	INIT_LOCK(cl_u->lui.ClLock);
C/amasm.c:	INIT_CLREF_COUNT(&(cl_u->lui));
C/amasm.c:      code_p = cl_u->lui.ClCode;
C/amasm.c:	cl_u->si.ClSize = size;
C/amasm.c:	cl_u->si.ClFlags = IndexMask; 
C/amasm.c:	cl_u->si.ChildIndex = NULL;
C/amasm.c:	cl_u->si.SiblingIndex = NULL;
C/amasm.c:	cl_u->si.ClPred = cip->CurrentPred;
C/amasm.c:      code_p = cl_u->si.ClCode;
C/cdmgr.c:  if (clau->ClFlags & ErasedMask) {
C/cdmgr.c:    if (!clau->ClRefCount) {
C/cdmgr.c:      decrease_log_indices(clau, (yamop *)&(clau->ClPred->cs.p_code.ExpandCode));
C/cdmgr.c:      if (clau->ClFlags & SwitchRootMask) {
C/cdmgr.c:	kill_off_lu_block(clau, NULL, clau->ClPred);
C/cdmgr.c:	kill_off_lu_block(clau, clau->ParentIndex, clau->ClPred);
C/cdmgr.c:  if (clau->ClFlags & SwitchRootMask) {
C/cdmgr.c:    kill_first_log_iblock(clau, NULL, clau->ClPred);
C/cdmgr.c:    clau->ClRefCount++;
C/cdmgr.c:    kill_first_log_iblock(clau, clau->ParentIndex, clau->ClPred);
C/cdmgr.c:    clau->ClRefCount--;
C/dbase.c:  if (clau->ClFlags & FactMask)
C/dbase.c:    cp = clau->lusl.ClSource->DBRefs;
C/dbase.c:  if (clau->ClNext)
C/dbase.c:    clau->ClNext->ClPrev = clau->ClPrev;
C/dbase.c:  if (clau->ClPrev) {
C/dbase.c:    clau->ClPrev->ClNext = clau->ClNext;
C/dbase.c:    DBErasedList = clau->ClNext;
C/dbase.c:  Yap_LUClauseSpace -= clau->ClSize;
C/dbase.c:  ap = clau->ClPred;
C/dbase.c:  if (!(clau->ClFlags & ErasedMask)) {
C/dbase.c:    if (clau->ClNext != NULL) {
C/dbase.c:      clau->ClNext->ClPrev = clau->ClPrev;
C/dbase.c:    if (clau->ClPrev != NULL) {
C/dbase.c:      clau->ClPrev->ClNext = clau->ClNext;
C/dbase.c:      if (clau->ClCode == ap->cs.p_code.FirstClause) {
C/dbase.c:	if (clau->ClNext == NULL) {
C/dbase.c:	  ap->cs.p_code.FirstClause = clau->ClNext->ClCode;
C/dbase.c:      if (clau->ClCode == ap->cs.p_code.LastClause) {
C/dbase.c:	if (clau->ClPrev == NULL) {
C/dbase.c:	  ap->cs.p_code.LastClause = clau->ClPrev->ClCode;
C/dbase.c:    clau->ClFlags |= ErasedMask;
C/dbase.c:	clau->ClPrev = clau->ClNext = NULL;
C/dbase.c:	clau->ClNext = er_head;
C/dbase.c:	clau->ClPrev = NULL;
C/dbase.c:    clau->ClRefCount++;
C/dbase.c:      clau->ClTimeEnd = ap->TimeStampOfPred;
C/dbase.c:      Yap_RemoveClauseFromIndex(ap, clau->ClCode);
C/dbase.c:    clau->ClRefCount--;
C/dbase.c:  ref = (DBRef) NEXTOP(clau->ClCode,Otapl)->y_u.Osbpp.bmap;
C/dbase.c:  if ( P == clau->ClCode ) {
C/dbase.c:    Yap_LUClauseSpace -= clau->ClSize;
C/dbase.c:  yamop          *code_p = clau->ClCode;
C/dbase.c:  PredEntry *p = clau->ClPred;
C/dbase.c:  if (clau->ClFlags & ErasedMask) {
C/dbase.c:  clau->ClFlags |= ErasedMask;
C/dbase.c:	if (!(clau->ClFlags & ErasedMask))
C/dbase.c:	if (!(clau->ClFlags & ErasedMask))
C/index.c:      if (clau->ClFlags & ErasedMask) {
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d: (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s:%d:  (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal, \
C/myabsmi.c:  if (trace_interrupts) fprintf(stderr,"[%d] %lu--%lu %s/%d (YENV=%p ENV=%p ASP=%p)\n",  worker_id, LOCAL_FirstActiveSignal, LOCAL_LastActiveSignal,  \
docs/builtins.tex:?- atomic_list_concat(L, -, 'gnu-gnat').
docs/new_header.html:						<button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".menu-navbar-collapse">
docs/new_header.html:					<div class="collapse navbar-collapse menu-navbar-collapse" role="navigation">
docs/swi.tex:?- concat_atom(L, -, 'gnu-gnat').
docs/yapdocs.md:?- atomic_list_concat(L, -, 'gnu-gnat').
docs/yapdocs.md:?- concat_atom(L, -, 'gnu-gnat').
docs/yapdocs.yap:?- atomic_list_concat(L, -, 'gnu-gnat').
docs/yapdocs.yap:?- concat_atom(L, -, 'gnu-gnat').
man/pl.bib:                 {Qu-Prolog}",
Binary file osx-threads/absmi.o matches
Binary file osx-threads/agc.o matches
Binary file osx-threads/amasm.o matches
Binary file osx-threads/arith1.o matches
Binary file osx-threads/arith2.o matches
Binary file osx-threads/atomic.o matches
Binary file osx-threads/c_interface.o matches
Binary file osx-threads/cdmgr.o matches
Binary file osx-threads/clause_list.o matches
Binary file osx-threads/cmppreds.o matches
Binary file osx-threads/compiler.o matches
osx-threads/config.log:uname -v = Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64
osx-threads/config.log:	 Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64
Binary file osx-threads/globals.o matches
Binary file osx-threads/gmp_support.o matches
Binary file osx-threads/index.o matches
Binary file osx-threads/libYap.6.3.4.dylib matches
Binary file osx-threads/libYap.6.dylib matches
Binary file osx-threads/libYap.a matches
Binary file osx-threads/libYap.dylib matches
Binary file osx-threads/opt.preds.o matches
Binary file osx-threads/pl-file.o matches
Binary file osx-threads/pl-stream.o matches
Binary file osx-threads/pl-tai.o matches
Binary file osx-threads/pl-text.o matches
Binary file osx-threads/pl-utf8.o matches
Binary file osx-threads/pl-yap.o matches
Binary file osx-threads/qlyr.o matches
Binary file osx-threads/sysbits.o matches
Binary file osx-threads/tab.tries.o matches
Binary file osx-threads/text.o matches
Binary file osx-threads/tracer.o matches
Binary file osx-threads/unify.o matches
Binary file osx-threads/utilpreds.o matches
pl/atoms.yap:?- atomic_list_concat(L, -, 'gnu-gnat').
