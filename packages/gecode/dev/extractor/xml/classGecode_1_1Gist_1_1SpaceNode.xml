<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Gist_1_1SpaceNode" kind="class" prot="public">
    <compoundname>Gecode::Gist::SpaceNode</compoundname>
    <basecompoundref refid="classGecode_1_1Gist_1_1Node" prot="public" virt="non-virtual">Gecode::Gist::Node</basecompoundref>
    <derivedcompoundref refid="classGecode_1_1Gist_1_1VisualNode" prot="public" virt="non-virtual">Gecode::Gist::VisualNode</derivedcompoundref>
    <includes refid="spacenode_8hh" local="no">spacenode.hh</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94" prot="protected" static="no">
        <name>SpaceNodeFlags</name>
        <enumvalue id="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a497fbf8d606e1d016376a81383585943" prot="protected">
          <name>HASOPENCHILDREN</name>
          <initializer>= FIRSTBIT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a03e03c0865c27d68f0abdb64f2f9997d" prot="protected">
          <name>HASFAILEDCHILDREN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a7dda540395845045b7fe0fb66bf8a19f" prot="protected">
          <name>HASSOLVEDCHILDREN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for SpaceNodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="125" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="125" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1Gist_1_1SpaceNode_1a0a172325cbe028ffb5440b13a393b5a8" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>Space* Gecode::Gist::SpaceNode::copy</definition>
        <argsstring></argsstring>
        <name>copy</name>
        <briefdescription>
<para>A copy used for recomputation, or NULL. </para>        </briefdescription>
        <detaileddescription>
<para>If the copy is marked, it is a working copy, i.e., it does not have to be kept for recomputation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="100" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Gist_1_1SpaceNode_1a1770518d8a6345e09d318da8af58a360" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classGecode_1_1Choice" kindref="compound">Choice</ref> *</type>
        <definition>const Choice* Gecode::Gist::SpaceNode::choice</definition>
        <argsstring></argsstring>
        <name>choice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="102" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Gist_1_1SpaceNode_1a3b8f86c47db93ca2a991a50a3b183c76" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Gecode::Gist::SpaceNode::nstatus</definition>
        <argsstring></argsstring>
        <name>nstatus</name>
        <briefdescription>
<para>Status of the node. </para>        </briefdescription>
        <detaileddescription>
<para>If the node has a working copy, the first 20 bits encode the distance to the closest copy. The next 5 bits encode the NodeStatus, and the remaining bits are used by the <ref refid="classGecode_1_1Gist_1_1VisualNode" kindref="compound">VisualNode</ref> class for further flags. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="110" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classGecode_1_1Gist_1_1SpaceNode_1a3b2e556983d3b3e1b7c8a0ce9d709832" prot="protected" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::Gist::SpaceNode::LASTBIT</definition>
        <argsstring></argsstring>
        <name>LASTBIT</name>
        <initializer>= HASSOLVEDCHILDREN</initializer>
        <briefdescription>
<para>Last bit used for <ref refid="classGecode_1_1Gist_1_1SpaceNode" kindref="compound">SpaceNode</ref> flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="131" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a5309ea005af1603ca60598dba61d2311" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setDistance</definition>
        <argsstring>(unsigned int d)</argsstring>
        <name>setDistance</name>
        <param>
          <type>unsigned int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> distance from copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="113" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a435f0efc7d9a79de130cabde4df013a4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Gist::SpaceNode::getDistance</definition>
        <argsstring>(void) const </argsstring>
        <name>getDistance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return distance from copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="116" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a82fd1d1d433bb8f7e12014edd38c3d37" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setFlag</definition>
        <argsstring>(int flag, bool value)</argsstring>
        <name>setFlag</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> status flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="119" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a3cd555ecf0715b588c9b2aa1112fc89c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::getFlag</definition>
        <argsstring>(int flag) const </argsstring>
        <name>getFlag</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Return status flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="122" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a5aa891d18a42d609b1d678c7a3ff0e8a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setStatus</definition>
        <argsstring>(NodeStatus s)</argsstring>
        <name>setStatus</name>
        <param>
          <type><ref refid="namespaceGecode_1_1Gist_1a579d345f937ff0b19a2a4157995931f2" kindref="member">NodeStatus</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> status to <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="150" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a5c4ea1e84b7a801d8d7bf00f6a2f3eaf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Gist::SpaceNode::acquireSpace</definition>
        <argsstring>(NodeAllocator &amp;na, BestNode *curBest, int c_d, int a_d)</argsstring>
        <name>acquireSpace</name>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1BestNode" kindref="compound">BestNode</ref> *</type>
          <declname>curBest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c_d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_d</declname>
        </param>
        <briefdescription>
<para>Acquire working space, either from parent or by recomputation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a1e2dff40fa5d3f4e4a80af3b7667f02f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setHasOpenChildren</definition>
        <argsstring>(bool b)</argsstring>
        <name>setHasOpenChildren</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> whether the node has children that are not fully explored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="135" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a051616005911162f71f273d0d283caca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setHasFailedChildren</definition>
        <argsstring>(bool b)</argsstring>
        <name>setHasFailedChildren</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> whether the subtree of this node is known to contain failure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="137" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a6524f2f71257ac143070f4f7f56a66f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::setHasSolvedChildren</definition>
        <argsstring>(bool b)</argsstring>
        <name>setHasSolvedChildren</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> whether the subtree of this node is known to contain solutions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="139" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a6d94dbc4e5ad0a29331f6118205ab74a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::Gist::SpaceNode::recompute</definition>
        <argsstring>(NodeAllocator &amp;na, BestNode *curBest, int c_d, int a_d)</argsstring>
        <name>recompute</name>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1BestNode" kindref="compound">BestNode</ref> *</type>
          <declname>curBest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c_d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_d</declname>
        </param>
        <briefdescription>
<para>Recompute workingSpace from a copy higher up, return distance to copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1abf8afc147cf2bd6f40f520ccc1184b35" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Gist::SpaceNode::closeChild</definition>
        <argsstring>(const NodeAllocator &amp;na, bool hadFailures, bool hadSolutions)</argsstring>
        <name>closeChild</name>
        <param>
          <type>const <ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hadFailures</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hadSolutions</declname>
        </param>
        <briefdescription>
<para>Book-keeping of open children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="146" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1aa316b48e1d0f80c59cc5dee35a922b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Gist::SpaceNode::SpaceNode</definition>
        <argsstring>(int p)</argsstring>
        <name>SpaceNode</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Construct node with parent <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="156" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1aa347efede99b9b965a4fa807ffa2a828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::Gist::SpaceNode::SpaceNode</definition>
        <argsstring>(Space *root)</argsstring>
        <name>SpaceNode</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Construct root node from <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> <emphasis>root</emphasis> and branch-and-bound object <emphasis>better</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a161d1ac44c65708adb034470a76de58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>forceinline Space * Gecode::Gist::SpaceNode::getSpace</definition>
        <argsstring>(NodeAllocator &amp;na, BestNode *curBest, int c_d, int a_d)</argsstring>
        <name>getSpace</name>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1BestNode" kindref="compound">BestNode</ref> *</type>
          <declname>curBest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c_d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_d</declname>
        </param>
        <briefdescription>
<para>Return working space. Receiver must delete the space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="161" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="102" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a8a28681a80b5e8575b6892b9137b3a70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>forceinline const Space * Gecode::Gist::SpaceNode::getWorkingSpace</definition>
        <argsstring>(void) const </argsstring>
        <name>getWorkingSpace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return working space (if present). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="165" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1ab19a1eeeee22227fc2d23cc088cbb1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Gist::SpaceNode::purge</definition>
        <argsstring>(const NodeAllocator &amp;na)</argsstring>
        <name>purge</name>
        <param>
          <type>const <ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <briefdescription>
<para>Clear working space and copy (if present and this is not the root). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="168" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a5bd56da622f4960dc1871dabb72f3dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Gist::SpaceNode::dispose</definition>
        <argsstring>(void)</argsstring>
        <name>dispose</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a80b205319f33a23fb3e091c430175d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::isCurrentBest</definition>
        <argsstring>(BestNode *curBest)</argsstring>
        <name>isCurrentBest</name>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1BestNode" kindref="compound">BestNode</ref> *</type>
          <declname>curBest</declname>
        </param>
        <briefdescription>
<para>Return whether this node is the currently best solution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="174" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a654df1deb4f2e68047735b2355871f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::Gist::SpaceNode::getNumberOfChildNodes</definition>
        <argsstring>(NodeAllocator &amp;na, BestNode *curBest, Statistics &amp;stats, int c_d, int a_d)</argsstring>
        <name>getNumberOfChildNodes</name>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1BestNode" kindref="compound">BestNode</ref> *</type>
          <declname>curBest</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Gist_1_1Statistics" kindref="compound">Statistics</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c_d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_d</declname>
        </param>
        <briefdescription>
<para>Compute and return the number of children. </para>        </briefdescription>
        <detaileddescription>
<para>On a node whose status is already determined, this function just returns the number of children. On an undetermined node, it first acquires a <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> (possibly through recomputation), and then asks for its status. If the space is solved or failed, the node&apos;s status will be set accordingly, and 0 will be returned. Otherwise, the status is SS_BRANCH, and as many new children will be created as the branch has alternatives, and the number returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a761b8c0b2bdfbfc3616af1fc48537250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1_1Gist_1a579d345f937ff0b19a2a4157995931f2" kindref="member">NodeStatus</ref></type>
        <definition>forceinline NodeStatus Gecode::Gist::SpaceNode::getStatus</definition>
        <argsstring>(void) const </argsstring>
        <name>getStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current status of the node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="192" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1aac1d94c4f2a63f5115e0f9d528198039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::isOpen</definition>
        <argsstring>(void)</argsstring>
        <name>isOpen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether this node still has open children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="195" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a2dd3836f977c8137ff81f8742016d054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::hasFailedChildren</definition>
        <argsstring>(void)</argsstring>
        <name>hasFailedChildren</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether the subtree of this node has any failed children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="197" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a97366b607037285b6b6e5a821c66afd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::hasSolvedChildren</definition>
        <argsstring>(void)</argsstring>
        <name>hasSolvedChildren</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether the subtree of this node has any solved children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="199" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1ab767d5a5d1ade2a13a36f18fcb3becb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::hasOpenChildren</definition>
        <argsstring>(void)</argsstring>
        <name>hasOpenChildren</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether the subtree of this node has any open children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="201" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1af27441fca912ea5b2d95257a2199442d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::Gist::SpaceNode::getNoOfOpenChildren</definition>
        <argsstring>(const NodeAllocator &amp;na)</argsstring>
        <name>getNoOfOpenChildren</name>
        <param>
          <type>const <ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <briefdescription>
<para>Return number of open children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a3a2592678bb1f4a4380a7456574102a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Gist::SpaceNode::setNoOfOpenChildren</definition>
        <argsstring>(int n)</argsstring>
        <name>setNoOfOpenChildren</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> number of open children to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a891f19abbbd7490a4c67064e0b2531d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::hasCopy</definition>
        <argsstring>(void)</argsstring>
        <name>hasCopy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether the node has a copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="207" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a8349f99edfbc56fe3823365f8ca2754f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Gist::SpaceNode::hasWorkingSpace</definition>
        <argsstring>(void)</argsstring>
        <name>hasWorkingSpace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return whether the node has a working space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="209" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1aec08184747286f69edbc51438714f469" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Gist::SpaceNode::getAlternative</definition>
        <argsstring>(const NodeAllocator &amp;na) const </argsstring>
        <name>getAlternative</name>
        <param>
          <type>const <ref refid="classGecode_1_1Gist_1_1NodeAllocatorBase" kindref="compound">NodeAllocator</ref> &amp;</type>
          <declname>na</declname>
        </param>
        <briefdescription>
<para>Return alternative number of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="212" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="173" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Gist_1_1SpaceNode_1a61558968dcfcbb1ae26b4d0d9bbda703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1Choice" kindref="compound">Choice</ref> *</type>
        <definition>forceinline const Choice * Gecode::Gist::SpaceNode::getChoice</definition>
        <argsstring>(void)</argsstring>
        <name>getChoice</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return choice of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/gist/spacenode.hh" line="214" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node of a search tree of Gecode spaces. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6607">
        <label>Gecode::Gist::VisualNode</label>
        <link refid="classGecode_1_1Gist_1_1VisualNode"/>
        <childnode refid="6605" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6606">
        <label>Gecode::Gist::Node</label>
        <link refid="classGecode_1_1Gist_1_1Node"/>
      </node>
      <node id="6605">
        <label>Gecode::Gist::SpaceNode</label>
        <link refid="classGecode_1_1Gist_1_1SpaceNode"/>
        <childnode refid="6606" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6615">
        <label>Gecode::SharedHandle::Object</label>
        <link refid="classGecode_1_1SharedHandle_1_1Object"/>
      </node>
      <node id="6611">
        <label>Gecode::LocalObject</label>
        <link refid="classGecode_1_1LocalObject"/>
        <childnode refid="6612" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6614">
        <label>Gecode::VarImpBase</label>
        <link refid="classGecode_1_1VarImpBase"/>
      </node>
      <node id="6610">
        <label>Gecode::Space</label>
        <link refid="classGecode_1_1Space"/>
        <childnode refid="6611" relation="usage">
          <edgelabel>local</edgelabel>
        </childnode>
        <childnode refid="6614" relation="usage">
          <edgelabel>vars_u</edgelabel>
          <edgelabel>vars_noidx</edgelabel>
        </childnode>
        <childnode refid="6615" relation="usage">
          <edgelabel>shared</edgelabel>
        </childnode>
        <childnode refid="6613" relation="usage">
          <edgelabel>active</edgelabel>
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="6609">
        <label>Gecode::Gist::Node</label>
        <link refid="classGecode_1_1Gist_1_1Node"/>
      </node>
      <node id="6616">
        <label>Gecode::Choice</label>
        <link refid="classGecode_1_1Choice"/>
      </node>
      <node id="6612">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="6613" relation="private-inheritance">
        </childnode>
      </node>
      <node id="6613">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
      <node id="6608">
        <label>Gecode::Gist::SpaceNode</label>
        <link refid="classGecode_1_1Gist_1_1SpaceNode"/>
        <childnode refid="6609" relation="public-inheritance">
        </childnode>
        <childnode refid="6610" relation="usage">
          <edgelabel>copy</edgelabel>
        </childnode>
        <childnode refid="6616" relation="usage">
          <edgelabel>choice</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/gist/spacenode.hh" line="93" column="1" bodyfile="/usr/include/gecode/gist/spacenode.hh" bodystart="93" bodyend="215"/>
    <listofallmembers>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a5c4ea1e84b7a801d8d7bf00f6a2f3eaf" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>acquireSpace</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a1770518d8a6345e09d318da8af58a360" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>choice</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1abf8afc147cf2bd6f40f520ccc1184b35" prot="private" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>closeChild</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a0a172325cbe028ffb5440b13a393b5a8" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>copy</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a5bd56da622f4960dc1871dabb72f3dce" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>dispose</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1aec08184747286f69edbc51438714f469" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getAlternative</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a81a3ee39115b6771a4d63edfeef2fe47" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getChild</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a799e7bc0bb7c2e99a916d47b8366990a" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getChild</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a61558968dcfcbb1ae26b4d0d9bbda703" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getChoice</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a435f0efc7d9a79de130cabde4df013a4" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getDistance</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a3cd555ecf0715b588c9b2aa1112fc89c" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getFlag</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1adff3aae1f3bb07f9c73d23482b756ddf" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getIndex</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1af27441fca912ea5b2d95257a2199442d" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getNoOfOpenChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a654df1deb4f2e68047735b2355871f0d" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getNumberOfChildNodes</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1afbbbcaf065a9cf68d2bee0414468000d" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getNumberOfChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1af832b649d232c4d03b6fcf534c3482e7" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getParent</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a20e1a0cd69047563508f91e3fca0d5c2" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getParent</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a161d1ac44c65708adb034470a76de58d" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getSpace</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a761b8c0b2bdfbfc3616af1fc48537250" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getStatus</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a8a28681a80b5e8575b6892b9137b3a70" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>getWorkingSpace</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a891f19abbbd7490a4c67064e0b2531d5" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>hasCopy</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a03e03c0865c27d68f0abdb64f2f9997d" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>HASFAILEDCHILDREN</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a2dd3836f977c8137ff81f8742016d054" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>hasFailedChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a497fbf8d606e1d016376a81383585943" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>HASOPENCHILDREN</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1ab767d5a5d1ade2a13a36f18fcb3becb0" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>hasOpenChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94a7dda540395845045b7fe0fb66bf8a19f" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>HASSOLVEDCHILDREN</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a97366b607037285b6b6e5a821c66afd2" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>hasSolvedChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a8349f99edfbc56fe3823365f8ca2754f" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>hasWorkingSpace</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a80b205319f33a23fb3e091c430175d2e" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>isCurrentBest</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1aac1d94c4f2a63f5115e0f9d528198039" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>isOpen</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a2b0f5b6e8ab7b1c0ca0dd91abbac7a97" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>isRoot</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a3c539ac10e753095aeafa88722b9dd37" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>isUndetermined</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a3b2e556983d3b3e1b7c8a0ce9d709832" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>LASTBIT</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a71b358f00310f2776ebfe4c491e4399d" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>Node</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a21ef10b538b71bd34825e488a42f11b9" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>NodeAllocator</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a3b8f86c47db93ca2a991a50a3b183c76" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>nstatus</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1ab19a1eeeee22227fc2d23cc088cbb1aa" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>purge</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a6d94dbc4e5ad0a29331f6118205ab74a" prot="private" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>recompute</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a5309ea005af1603ca60598dba61d2311" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setDistance</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a82fd1d1d433bb8f7e12014edd38c3d37" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setFlag</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a051616005911162f71f273d0d283caca" prot="private" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setHasFailedChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a1e2dff40fa5d3f4e4a80af3b7667f02f" prot="private" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setHasOpenChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a6524f2f71257ac143070f4f7f56a66f5" prot="private" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setHasSolvedChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a3a2592678bb1f4a4380a7456574102a9" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setNoOfOpenChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1Node_1a4d03aa68107480cfe62dedf6b369f389" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setNumberOfChildren</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a5aa891d18a42d609b1d678c7a3ff0e8a" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>setStatus</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1aa316b48e1d0f80c59cc5dee35a922b4b" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>SpaceNode</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1aa347efede99b9b965a4fa807ffa2a828" prot="public" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>SpaceNode</name></member>
      <member refid="classGecode_1_1Gist_1_1SpaceNode_1a2d6672ee838fc02e84ba3312fa96da94" prot="protected" virt="non-virtual"><scope>Gecode::Gist::SpaceNode</scope><name>SpaceNodeFlags</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
