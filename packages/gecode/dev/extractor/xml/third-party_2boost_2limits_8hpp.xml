<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="third-party_2boost_2limits_8hpp" kind="file">
    <compoundname>limits.hpp</compoundname>
    <includes refid="third-party_2boost_2config_8hpp" local="no">gecode/third-party/boost/config.hpp</includes>
    <includes local="no">limits</includes>
    <includedby refid="checking_8hpp" local="no">/usr/include/gecode/third-party/boost/numeric/interval/checking.hpp</includedby>
    <includedby refid="interval_8hpp" local="no">/usr/include/gecode/third-party/boost/numeric/interval.hpp</includedby>
    <incdepgraph>
      <node id="4292">
        <label>limits</label>
      </node>
      <node id="4286">
        <label>/usr/include/gecode/third-party/boost/limits.hpp</label>
        <link refid="third-party/boost/limits.hpp"/>
        <childnode refid="4287" relation="include">
        </childnode>
        <childnode refid="4292" relation="include">
        </childnode>
      </node>
      <node id="4290">
        <label>gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix_8hpp_source"/>
        <childnode refid="4291" relation="include">
        </childnode>
      </node>
      <node id="4291">
        <label>limits.h</label>
      </node>
      <node id="4289">
        <label>gecode/third-party/boost/config/select_platform_config.hpp</label>
        <link refid="select__platform__config_8hpp_source"/>
      </node>
      <node id="4288">
        <label>gecode/third-party/boost/config/select_compiler_config.hpp</label>
        <link refid="select__compiler__config_8hpp_source"/>
      </node>
      <node id="4287">
        <label>gecode/third-party/boost/config.hpp</label>
        <link refid="third-party_2boost_2config_8hpp_source"/>
        <childnode refid="4288" relation="include">
        </childnode>
        <childnode refid="4289" relation="include">
        </childnode>
        <childnode refid="4290" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4293">
        <label>/usr/include/gecode/third-party/boost/limits.hpp</label>
        <link refid="third-party/boost/limits.hpp"/>
        <childnode refid="4294" relation="include">
        </childnode>
        <childnode refid="4295" relation="include">
        </childnode>
      </node>
      <node id="4296">
        <label>/usr/include/gecode/float.hh</label>
        <link refid="float_8hh_source"/>
        <childnode refid="4297" relation="include">
        </childnode>
        <childnode refid="4298" relation="include">
        </childnode>
        <childnode refid="4299" relation="include">
        </childnode>
        <childnode refid="4300" relation="include">
        </childnode>
      </node>
      <node id="4295">
        <label>/usr/include/gecode/third-party/boost/numeric/interval.hpp</label>
        <link refid="interval_8hpp_source"/>
        <childnode refid="4296" relation="include">
        </childnode>
      </node>
      <node id="4300">
        <label>/usr/include/gecode/float/rel.hh</label>
        <link refid="float_2rel_8hh_source"/>
        <childnode refid="4297" relation="include">
        </childnode>
      </node>
      <node id="4297">
        <label>/usr/include/gecode/float/arithmetic.hh</label>
        <link refid="float_2arithmetic_8hh_source"/>
      </node>
      <node id="4294">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/checking.hpp</label>
        <link refid="checking_8hpp_source"/>
        <childnode refid="4295" relation="include">
        </childnode>
      </node>
      <node id="4299">
        <label>/usr/include/gecode/float/linear.hh</label>
        <link refid="float_2linear_8hh_source"/>
      </node>
      <node id="4298">
        <label>/usr/include/gecode/float/branch.hh</label>
        <link refid="float_2branch_8hh_source"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>John<sp/>maddock<sp/>1999.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>David<sp/>Abrahams<sp/>2002.<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>header<sp/>as<sp/>a<sp/>workaround<sp/>for<sp/>missing<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>See<sp/>http://www.boost.org/libs/compatibility/index.html<sp/>for<sp/>documentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_LIMITS</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_LIMITS</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_NO_LIMITS</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;gecode/third-party/boost/detail/limits.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(BOOST_HAS_LONG_LONG)<sp/>&amp;&amp;<sp/>defined(BOOST_NO_LONG_LONG_NUMERIC_LIMITS))<sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(defined(BOOST_HAS_MS_INT64)<sp/>&amp;&amp;<sp/>defined(BOOST_NO_MS_INT64_NUMERIC_LIMITS))</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Add<sp/>missing<sp/>specializations<sp/>for<sp/>numeric_limits:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_HAS_MS_INT64</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_LLT<sp/>__int64</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_ULLT<sp/>unsigned<sp/>__int64</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_LLT<sp/><sp/>::boost::long_long_type</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_ULLT<sp/><sp/>::boost::ulong_long_type</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>CHAR_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">numeric_limits&lt;BOOST_LLT&gt;<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_specialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_HAS_MS_INT64</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x8000000000000000i64;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x7FFFFFFFFFFFFFFFi64;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(LLONG_MAX)</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LLONG_MIN;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LLONG_MAX;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(LONGLONG_MAX)</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LONGLONG_MIN;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LONGLONG_MAX;<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1LL<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BOOST_LLT)<sp/>*<sp/>CHAR_BIT<sp/>-<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~(<ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref>)();<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BOOST_LLT)<sp/>*<sp/>CHAR_BIT<sp/>-1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10<sp/>=<sp/>(CHAR_BIT<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(BOOST_LLT)<sp/>-<sp/>1)<sp/>*<sp/>301L<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_signed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_integer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_exact<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix<sp/>=<sp/>2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>epsilon()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>round_error()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent10<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent10<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_infinity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_quiet_NaN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_signaling_NaN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm_loss<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>infinity()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>quiet_NaN()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>signaling_NaN()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_LLT<sp/>denorm_min()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_iec559<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_bounded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_modulo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>traps<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>tinyness_before<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(float_round_style,<sp/>round_style<sp/>=<sp/>round_toward_zero);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">numeric_limits&lt;BOOST_ULLT&gt;<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_specialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_HAS_MS_INT64</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0ui64;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xFFFFFFFFFFFFFFFFui64;<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(ULLONG_MAX)<sp/>&amp;&amp;<sp/>defined(ULLONG_MIN)</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ULLONG_MIN;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ULLONG_MAX;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(ULONGLONG_MAX)<sp/>&amp;&amp;<sp/>defined(ULONGLONG_MIN)</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ULONGLONG_MIN;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ULONGLONG_MAX;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0uLL;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~0uLL;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BOOST_LLT)<sp/>*<sp/>CHAR_BIT);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10<sp/>=<sp/>(CHAR_BIT<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(BOOST_LLT))<sp/>*<sp/>301L<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_signed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_integer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_exact<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix<sp/>=<sp/>2);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>epsilon()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>round_error()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent10<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent10<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_infinity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_quiet_NaN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_signaling_NaN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm_loss<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>infinity()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>quiet_NaN()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>signaling_NaN()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOST_ULLT<sp/>denorm_min()<sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_iec559<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_bounded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_modulo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>traps<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>tinyness_before<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_CONSTANT(float_round_style,<sp/>round_style<sp/>=<sp/>round_toward_zero);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/limits.hpp"/>
  </compounddef>
</doxygen>
