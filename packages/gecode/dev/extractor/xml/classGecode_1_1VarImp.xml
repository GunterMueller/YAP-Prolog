<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1VarImp" kind="class" prot="public">
    <compoundname>Gecode::VarImp</compoundname>
    <basecompoundref refid="classGecode_1_1VarImpBase" prot="public" virt="non-virtual">Gecode::VarImpBase</basecompoundref>
    <includes refid="core_8hpp" local="no">core.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>VIC</declname>
        <defname>VIC</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Dependencies</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a002f494031ed88207f845be3f79264d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::VarImp&lt; VIC &gt;::subscribe</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc, bool assigned, ModEvent me, bool schedule)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assigned</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>schedule</declname>
        </param>
        <briefdescription>
<para>Subscribe propagator <emphasis>p</emphasis> with propagation condition <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>In case <emphasis>schedule</emphasis> is false, the propagator is just subscribed but not scheduled for execution (this must be used when creating subscriptions during propagation).</para><para>In case the variable is assigned (that is, <emphasis>assigned</emphasis> is true), the subscribing propagator is scheduled for execution. Otherwise, the propagator subscribes and is scheduled for execution with modification event <emphasis>me</emphasis> provided that <emphasis>pc</emphasis> is different from <emphasis>PC_GEN_ASSIGNED</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="416" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3650" bodyend="3662"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a89fde2382c9b6ae946e5d97e729daec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::cancel</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc, bool assigned)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assigned</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of propagator <emphasis>p</emphasis> with propagation condition <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the variable is assigned, <emphasis>assigned</emphasis> must be true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="423" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3726" bodyend="3729"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a069ba6a9c5903e0d9ccc8da50db21206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::subscribe</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a, bool assigned)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assigned</declname>
        </param>
        <briefdescription>
<para>Subscribe advisor <emphasis>a</emphasis> to variable. </para>        </briefdescription>
        <detaileddescription>
<para>The advisor <emphasis>a</emphasis> is only subscribed if <emphasis>assigned</emphasis> is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="430" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3666" bodyend="3669"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a86928b50f8546d119dd6fc5909bc7127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::cancel</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a, bool assigned)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assigned</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of advisor <emphasis>a</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the variable is assigned, <emphasis>assigned</emphasis> must be true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="436" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3733" bodyend="3736"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a956458babaa22d8df94adbe97185783f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::VarImp&lt; VIC &gt;::degree</definition>
        <argsstring>(void) const </argsstring>
        <name>degree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return degree (number of subscribed propagators and advisors) </para>        </briefdescription>
        <detaileddescription>
<para>Note that the degree of a variable implementation is not available during cloning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="444" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3433" bodyend="3436"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a0c2d6cbd253dd4c9e0b0d617d51f199f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>forceinline double Gecode::VarImp&lt; VIC &gt;::afc</definition>
        <argsstring>(const Space &amp;home) const </argsstring>
        <name>afc</name>
        <param>
          <type>const <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Return accumulated failure count (plus degree) </para>        </briefdescription>
        <detaileddescription>
<para>Note that the accumulated failure count of a variable implementation is not available during cloning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="451" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3440" bodyend="3459"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning variables</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1aa09d8c4e7fa46d4536f7150a2208b14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarImp&lt; VIC &gt;::VarImp</definition>
        <argsstring>(Space &amp;home, bool share, VarImp &amp;x)</argsstring>
        <name>VarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="457" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3515" bodyend="3535"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1aa8086d2e8e2310b26ab56b8539bba334" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarImp&lt; VIC &gt;::copied</definition>
        <argsstring>(void) const </argsstring>
        <name>copied</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is variable already copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="459" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3495" bodyend="3497"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1acf5d4de13c75caa5c1673e43db8efb8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
        <definition>forceinline VarImp&lt; VIC &gt; * Gecode::VarImp&lt; VIC &gt;::forward</definition>
        <argsstring>(void) const </argsstring>
        <name>forward</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Use forward pointer if variable already copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="461" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3501" bodyend="3504"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a5fd7d3b0ad1a1ceab1d1004d0537ee66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
        <definition>VarImp* Gecode::VarImp&lt; VIC &gt;::next</definition>
        <argsstring>(void) const </argsstring>
        <name>next</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return next copied variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="463" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variable implementation-dependent propagator support</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a47487fb72d88ed08e7266e365d7c0e83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::schedule</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, ModEvent me, bool force=false)</argsstring>
        <name>schedule</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Schedule propagator <emphasis>p</emphasis> with modification event <emphasis>me</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>force</emphasis> is true, the propagator is re-scheduled (including cost computation) even though its modification event delta has not changed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="475" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3557" bodyend="3561"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1ab145ba585c9f1340d9b178e2faf4e764" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::VarImp&lt; VIC &gt;::me</definition>
        <argsstring>(const ModEventDelta &amp;med)</argsstring>
        <name>me</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref> &amp;</type>
          <declname>med</declname>
        </param>
        <briefdescription>
<para>Project modification event for this variable type from <emphasis>med</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="478" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3539" bodyend="3541"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a52cf921ba180ee1ef017fb9dab708d3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
        <definition>forceinline ModEventDelta Gecode::VarImp&lt; VIC &gt;::med</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>med</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Translate modification event <emphasis>me</emphasis> into modification event delta. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="480" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3545" bodyend="3547"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a2d6c555eb0482f85498bfba671caa8ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::VarImp&lt; VIC &gt;::me_combine</definition>
        <argsstring>(ModEvent me1, ModEvent me2)</argsstring>
        <name>me_combine</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me1</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me2</declname>
        </param>
        <briefdescription>
<para>Combine modifications events <emphasis>me1</emphasis> and <emphasis>me2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="482" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3551" bodyend="3553"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delta information for advisors</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1aaa6434bc2cc2981c22a2e93af2c7a044" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::VarImp&lt; VIC &gt;::modevent</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>modevent</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return modification event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="488" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3463" bodyend="3465"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Bit management</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a90b2a4f6e38fed3f0e460867ad91106d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::VarImp&lt; VIC &gt;::bits</definition>
        <argsstring>(void) const </argsstring>
        <name>bits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Provide access to free bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="494" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3469" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1aa223e9b098b62dc012910adc93134a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int &amp;</type>
        <definition>forceinline unsigned int &amp; Gecode::VarImp&lt; VIC &gt;::bits</definition>
        <argsstring>(void)</argsstring>
        <name>bits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Provide access to free bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="496" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3475" bodyend="3477"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory management</header>
      <memberdef kind="function" id="classGecode_1_1VarImp_1aabff7330d8de263667fea4e319aeb546" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::VarImp&lt; VIC &gt;::operator new</definition>
        <argsstring>(size_t, Space &amp;)</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <defname>home</defname>
        </param>
        <briefdescription>
<para>Allocate memory from space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="507" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="2539" bodyend="2541"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1ac734858b259bcdecdaa2228cac28d24a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::operator delete</definition>
        <argsstring>(void *, Space &amp;)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Return memory to space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="509" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="2536" bodyend="2536"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a34ddaa8df6945ce76c4b9fd34f46694e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::operator delete</definition>
        <argsstring>(void *)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Needed for exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="511" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="2533" bodyend="2533"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1VarImp_1a2129e6c0ac73536a2ac4f681dae16947" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Space</definition>
        <argsstring></argsstring>
        <name>Space</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="291" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classGecode_1_1VarImp_1a9d01c82a7038a8c986c6b15c15b2e631" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Propagator</definition>
        <argsstring></argsstring>
        <name>Propagator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="292" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classGecode_1_1VarImp_1a524446ac6b57974e912f498e8b688f35" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref></type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class VarImpDisposer</definition>
        <argsstring></argsstring>
        <name>VarImpDisposer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="293" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a43dc7f1b77d3d325de300769c0364d5f" prot="public" static="no" mutable="no">
        <type><ref refid="classGecode_1_1ActorLink" kindref="compound">ActorLink</ref> **</type>
        <definition>ActorLink** Gecode::VarImp&lt; VIC &gt;::base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
<para>Subscribed actors. </para>        </briefdescription>
        <detaileddescription>
<para>The base pointer of the array of subscribed actors.</para><para>This pointer must be first to avoid padding on 64 bit machines. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="303" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1abcc24392bda391960713a2e5c6f73b07" prot="public" static="no" mutable="no">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref>&lt; VIC &gt; *</type>
        <definition>VarImp&lt;VIC&gt;* Gecode::VarImp&lt; VIC &gt;::fwd</definition>
        <argsstring></argsstring>
        <name>fwd</name>
        <briefdescription>
<para>Forwarding pointer. </para>        </briefdescription>
        <detaileddescription>
<para>During cloning, this is used as the forwarding pointer for the variable. The original value is saved in the copy and restored after cloning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="312" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a95a8eee0b5ad9e76ee8e2fcd4b9fe818" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::VarImp&lt; VIC &gt;::idx</definition>
        <argsstring>[pc_max+1]</argsstring>
        <name>idx</name>
        <briefdescription>
<para>Indices of subscribed actors. </para>        </briefdescription>
        <detaileddescription>
<para>The entries from base[0] to base[idx[pc_max]] are propagators, where the entries between base[idx[pc-1]] and base[idx[pc]] are the propagators that have subscribed with propagation condition pc.</para><para>The entries between base[idx[pc_max]] and base[idx[pc_max+1]] are the advisors subscribed to the variable implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="339" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1ac96876361e6e01f5ecf3c4cae50145eb" prot="public" static="no" mutable="no">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref>&lt; VIC &gt; *</type>
        <definition>forceinline VarImp&lt; VIC &gt; * Gecode::VarImp&lt; VIC &gt;::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <briefdescription>
<para>During cloning, points to the next copied variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="341" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a7a62996e772bedaf1daee8653fd38cb1" prot="private" static="no" mutable="no">
        <type>union Gecode::VarImp::@2</type>
        <definition>union Gecode::VarImp::@2  Gecode::VarImp&lt; VIC &gt;::b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="313" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a6c94098a5505a88ee73cdda028e020d3" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Gecode::VarImp&lt; VIC &gt;::entries</definition>
        <argsstring></argsstring>
        <name>entries</name>
        <briefdescription>
<para>Number of used subscription entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="322" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a3b62e1423f13f002c112316af01fb295" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Gecode::VarImp&lt; VIC &gt;::free_and_bits</definition>
        <argsstring></argsstring>
        <name>free_and_bits</name>
        <briefdescription>
<para>Number of free subscription entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="324" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a31367aaf8a323b455053234b9895df64" prot="private" static="no" mutable="no">
        <type>union Gecode::VarImp::@3</type>
        <definition>union Gecode::VarImp::@3  Gecode::VarImp&lt; VIC &gt;::u</definition>
        <argsstring></argsstring>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="342" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a18ef21a855aaefb9c7c26fbf72c63118" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::VarImp&lt; VIC &gt;::idx_c</definition>
        <argsstring></argsstring>
        <name>idx_c</name>
        <initializer>= VIC::idx_c</initializer>
        <briefdescription>
<para>Index for update. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="316" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1afd811899ff7d88337cf575504728d736" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::VarImp&lt; VIC &gt;::idx_d</definition>
        <argsstring></argsstring>
        <name>idx_d</name>
        <initializer>= VIC::idx_d</initializer>
        <briefdescription>
<para>Index for disposal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="318" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1a0e9c266a03c14aa6f7067188a046b087" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::VarImp&lt; VIC &gt;::free_bits</definition>
        <argsstring></argsstring>
        <name>free_bits</name>
        <initializer>= VIC::free_bits</initializer>
        <briefdescription>
<para>Number of freely available bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="320" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarImp_1ae4470b4161c297162a0d48729ae821de" prot="private" static="yes" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">Gecode::PropCond</ref></type>
        <definition>const Gecode::PropCond Gecode::VarImp&lt; VIC &gt;::pc_max</definition>
        <argsstring></argsstring>
        <name>pc_max</name>
        <initializer>= VIC::pc_max</initializer>
        <briefdescription>
<para>Maximal propagation condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="326" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1VarImp_1a588fee4960b1c1cb44956171b2b918eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1ActorLink" kindref="compound">ActorLink</ref> **</type>
        <definition>forceinline ActorLink ** Gecode::VarImp&lt; VIC &gt;::actor</definition>
        <argsstring>(PropCond pc)</argsstring>
        <name>actor</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Return subscribed actor at index <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="345" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3387" bodyend="3390"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1af19a399ce57ca892715ea9771db6b3dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1ActorLink" kindref="compound">ActorLink</ref> **</type>
        <definition>forceinline ActorLink ** Gecode::VarImp&lt; VIC &gt;::actorNonZero</definition>
        <argsstring>(PropCond pc)</argsstring>
        <name>actorNonZero</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Return subscribed actor at index <emphasis>pc</emphasis>, where <emphasis>pc</emphasis> is non-zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="347" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3394" bodyend="3397"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a6be911527ffcf6a55877064254a08a95" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int &amp;</type>
        <definition>unsigned int&amp; Gecode::VarImp&lt; VIC &gt;::idx</definition>
        <argsstring>(PropCond pc)</argsstring>
        <name>idx</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Return reference to index <emphasis>pc</emphasis>, where <emphasis>pc</emphasis> is non-zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a37680ba973985f6428afb8fd57cbe97d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Gecode::VarImp&lt; VIC &gt;::idx</definition>
        <argsstring>(PropCond pc) const </argsstring>
        <name>idx</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Return index <emphasis>pc</emphasis>, where <emphasis>pc</emphasis> is non-zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a86acb144f8fe78d4b102255bf490b7a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::update</definition>
        <argsstring>(VarImp *x, ActorLink **&amp;sub)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1ActorLink" kindref="compound">ActorLink</ref> **&amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Update copied variable <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The argument <emphasis>sub</emphasis> gives the memory area where subscriptions are to be stored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="359" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3793" bodyend="3822"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a3a8fe1b75a8279c2bda1eea4d308a07a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::enter</definition>
        <argsstring>(Space &amp;home, Propagator *p, PropCond pc)</argsstring>
        <name>enter</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Enter propagator to subscription array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="369" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3574" bodyend="3603"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1adacbe85c43850ba9844112fd1109f9f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::enter</definition>
        <argsstring>(Space &amp;home, Advisor *a)</argsstring>
        <name>enter</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Enter advisor to subscription array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="371" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3607" bodyend="3617"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a56a37ac556a081464051176df7979328" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::VarImp&lt; VIC &gt;::resize</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Resize subscription array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="373" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3621" bodyend="3646"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a7db0d7cada4683aa7f1d744e75913853" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::remove</definition>
        <argsstring>(Space &amp;home, Propagator *p, PropCond pc)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Remove propagator from subscription array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="375" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3673" bodyend="3700"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a08ffa956cab266b2fe051d205ede4a03" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::remove</definition>
        <argsstring>(Space &amp;home, Advisor *a)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Remove advisor from subscription array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="377" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3704" bodyend="3722"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classGecode_1_1VarImp_1a8fe56c5881d68a85c8fad2abb293c4e0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::update</definition>
        <argsstring>(Space &amp;home, ActorLink **&amp;sub)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1ActorLink" kindref="compound">ActorLink</ref> **&amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Update all copied variables of this type. </para>        </briefdescription>
        <detaileddescription>
<para>The argument <emphasis>sub</emphasis> gives the memory area where subscriptions are to be stored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="366" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3826" bodyend="3831"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1VarImp_1a60fa39149a7ecef4c7b94aa454e4832a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::cancel</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Cancel all subscriptions when variable implementation is assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="382" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3740" bodyend="3749"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1ac7e52f974ce534df4d776b97e51899d9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarImp&lt; VIC &gt;::advise</definition>
        <argsstring>(Space &amp;home, ModEvent me, Delta &amp;d)</argsstring>
        <name>advise</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Run advisors when variable implementation has been modified with modification event <emphasis>me</emphasis> and domain change <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if an advisor has failed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="388" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3753" bodyend="3789"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1a5b0c31a6631b256c1969dcc961bef433" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImp&lt; VIC &gt;::schedule</definition>
        <argsstring>(Space &amp;home, PropCond pc1, PropCond pc2, ModEvent me)</argsstring>
        <name>schedule</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc1</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc2</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Schedule subscribed propagators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="501" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3565" bodyend="3570"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1VarImp_1a7ee4d75176b790ea4114b16379fb04c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarImp&lt; VIC &gt;::VarImp</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>VarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Creation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="398" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3415" bodyend="3420"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImp_1ad99d4e1d80d25fd6dea731755a082fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarImp&lt; VIC &gt;::VarImp</definition>
        <argsstring>(void)</argsstring>
        <name>VarImp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creation of static instances. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="400" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="3424" bodyend="3429"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base-class for variable implementations. </para>    </briefdescription>
    <detaileddescription>
<para>Implements variable implementation for variable implementation configuration of type <emphasis>VIC</emphasis>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7702">
        <label>Gecode::VarImpBase</label>
        <link refid="classGecode_1_1VarImpBase"/>
      </node>
      <node id="7701">
        <label>Gecode::VarImp&lt; VIC &gt;</label>
        <link refid="classGecode_1_1VarImp"/>
        <childnode refid="7702" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7704">
        <label>Gecode::VarImpBase</label>
        <link refid="classGecode_1_1VarImpBase"/>
      </node>
      <node id="7705">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
      <node id="7703">
        <label>Gecode::VarImp&lt; VIC &gt;</label>
        <link refid="classGecode_1_1VarImp"/>
        <childnode refid="7704" relation="public-inheritance">
        </childnode>
        <childnode refid="7705" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/kernel/core.hpp" line="228" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="228" bodyend="-1"/>
    <listofallmembers>
      <member refid="classGecode_1_1VarImp_1a588fee4960b1c1cb44956171b2b918eb" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>actor</name></member>
      <member refid="classGecode_1_1VarImp_1af19a399ce57ca892715ea9771db6b3dc" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>actorNonZero</name></member>
      <member refid="classGecode_1_1VarImp_1ac7e52f974ce534df4d776b97e51899d9" prot="protected" virt="non-virtual"><scope>Gecode::VarImp</scope><name>advise</name></member>
      <member refid="classGecode_1_1VarImp_1a0c2d6cbd253dd4c9e0b0d617d51f199f" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>afc</name></member>
      <member refid="classGecode_1_1VarImp_1a7a62996e772bedaf1daee8653fd38cb1" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>b</name></member>
      <member refid="classGecode_1_1VarImp_1a43dc7f1b77d3d325de300769c0364d5f" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>base</name></member>
      <member refid="classGecode_1_1VarImp_1a90b2a4f6e38fed3f0e460867ad91106d" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>bits</name></member>
      <member refid="classGecode_1_1VarImp_1aa223e9b098b62dc012910adc93134a89" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>bits</name></member>
      <member refid="classGecode_1_1VarImp_1a60fa39149a7ecef4c7b94aa454e4832a" prot="protected" virt="non-virtual"><scope>Gecode::VarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1VarImp_1a89fde2382c9b6ae946e5d97e729daec7" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1VarImp_1a86928b50f8546d119dd6fc5909bc7127" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1VarImp_1aa8086d2e8e2310b26ab56b8539bba334" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>copied</name></member>
      <member refid="classGecode_1_1VarImp_1a956458babaa22d8df94adbe97185783f" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>degree</name></member>
      <member refid="classGecode_1_1VarImp_1a3a8fe1b75a8279c2bda1eea4d308a07a" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>enter</name></member>
      <member refid="classGecode_1_1VarImp_1adacbe85c43850ba9844112fd1109f9f7" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>enter</name></member>
      <member refid="classGecode_1_1VarImp_1a6c94098a5505a88ee73cdda028e020d3" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>entries</name></member>
      <member refid="classGecode_1_1VarImp_1acf5d4de13c75caa5c1673e43db8efb8f" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>forward</name></member>
      <member refid="classGecode_1_1VarImp_1a3b62e1423f13f002c112316af01fb295" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>free_and_bits</name></member>
      <member refid="classGecode_1_1VarImp_1a0e9c266a03c14aa6f7067188a046b087" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>free_bits</name></member>
      <member refid="classGecode_1_1VarImp_1abcc24392bda391960713a2e5c6f73b07" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>fwd</name></member>
      <member refid="classGecode_1_1VarImp_1a95a8eee0b5ad9e76ee8e2fcd4b9fe818" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>idx</name></member>
      <member refid="classGecode_1_1VarImp_1a6be911527ffcf6a55877064254a08a95" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>idx</name></member>
      <member refid="classGecode_1_1VarImp_1a37680ba973985f6428afb8fd57cbe97d" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>idx</name></member>
      <member refid="classGecode_1_1VarImp_1a18ef21a855aaefb9c7c26fbf72c63118" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>idx_c</name></member>
      <member refid="classGecode_1_1VarImp_1afd811899ff7d88337cf575504728d736" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>idx_d</name></member>
      <member refid="classGecode_1_1VarImp_1ab145ba585c9f1340d9b178e2faf4e764" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>me</name></member>
      <member refid="classGecode_1_1VarImp_1a2d6c555eb0482f85498bfba671caa8ab" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>me_combine</name></member>
      <member refid="classGecode_1_1VarImp_1a52cf921ba180ee1ef017fb9dab708d3b" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>med</name></member>
      <member refid="classGecode_1_1VarImp_1aaa6434bc2cc2981c22a2e93af2c7a044" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>modevent</name></member>
      <member refid="classGecode_1_1VarImp_1ac96876361e6e01f5ecf3c4cae50145eb" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>next</name></member>
      <member refid="classGecode_1_1VarImp_1a5fd7d3b0ad1a1ceab1d1004d0537ee66" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>next</name></member>
      <member refid="classGecode_1_1VarImp_1ac734858b259bcdecdaa2228cac28d24a" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1VarImp_1a34ddaa8df6945ce76c4b9fd34f46694e" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1VarImp_1aabff7330d8de263667fea4e319aeb546" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>operator new</name></member>
      <member refid="classGecode_1_1VarImp_1ae4470b4161c297162a0d48729ae821de" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>pc_max</name></member>
      <member refid="classGecode_1_1VarImp_1a9d01c82a7038a8c986c6b15c15b2e631" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1VarImp_1a7db0d7cada4683aa7f1d744e75913853" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>remove</name></member>
      <member refid="classGecode_1_1VarImp_1a08ffa956cab266b2fe051d205ede4a03" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>remove</name></member>
      <member refid="classGecode_1_1VarImp_1a56a37ac556a081464051176df7979328" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>resize</name></member>
      <member refid="classGecode_1_1VarImp_1a47487fb72d88ed08e7266e365d7c0e83" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>schedule</name></member>
      <member refid="classGecode_1_1VarImp_1a5b0c31a6631b256c1969dcc961bef433" prot="protected" virt="non-virtual"><scope>Gecode::VarImp</scope><name>schedule</name></member>
      <member refid="classGecode_1_1VarImp_1a2129e6c0ac73536a2ac4f681dae16947" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>Space</name></member>
      <member refid="classGecode_1_1VarImp_1a002f494031ed88207f845be3f79264d9" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1VarImp_1a069ba6a9c5903e0d9ccc8da50db21206" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1VarImp_1a31367aaf8a323b455053234b9895df64" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>u</name></member>
      <member refid="classGecode_1_1VarImp_1a86acb144f8fe78d4b102255bf490b7a3" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>update</name></member>
      <member refid="classGecode_1_1VarImp_1a8fe56c5881d68a85c8fad2abb293c4e0" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>update</name></member>
      <member refid="classGecode_1_1VarImp_1a7ee4d75176b790ea4114b16379fb04c5" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>VarImp</name></member>
      <member refid="classGecode_1_1VarImp_1ad99d4e1d80d25fd6dea731755a082fb9" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>VarImp</name></member>
      <member refid="classGecode_1_1VarImp_1aa09d8c4e7fa46d4536f7150a2208b14d" prot="public" virt="non-virtual"><scope>Gecode::VarImp</scope><name>VarImp</name></member>
      <member refid="classGecode_1_1VarImp_1a524446ac6b57974e912f498e8b688f35" prot="private" virt="non-virtual"><scope>Gecode::VarImp</scope><name>VarImpDisposer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
