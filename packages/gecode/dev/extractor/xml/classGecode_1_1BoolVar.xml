<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1BoolVar" kind="class" prot="public">
    <compoundname>Gecode::BoolVar</compoundname>
    <basecompoundref refid="classGecode_1_1VarImpVar" prot="public" virt="non-virtual">Gecode::VarImpVar&lt; Int::BoolVarImp &gt;</basecompoundref>
    <includes refid="int_8hh" local="no">int.hh</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and initialization</header>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a1366196fd411022d607b981073128b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::BoolVar::BoolVar</definition>
        <argsstring>(void)</argsstring>
        <name>BoolVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="505" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a5a2db1d90a7c69c061b47212dbfd580d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::BoolVar::BoolVar</definition>
        <argsstring>(const BoolVar &amp;y)</argsstring>
        <name>BoolVar</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize from Boolean variable <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="507" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a54828838cf43b4a0bcb59c77b418fbf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::BoolVar::BoolVar</definition>
        <argsstring>(const Int::BoolView &amp;y)</argsstring>
        <name>BoolVar</name>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1BoolView" kindref="compound">Int::BoolView</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize from Boolean view <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="509" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="57" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1abd015eab3163a449fcd30450a26d3bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT</type>
        <definition>GECODE_INT_EXPORT Gecode::BoolVar::BoolVar</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>BoolVar</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize Boolean variable with range domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain ranging from <emphasis>min</emphasis> to <emphasis>max</emphasis>. The following exceptions might be thrown:<itemizedlist>
<listitem><para>If <emphasis>min</emphasis> is greater than <emphasis>max</emphasis>, an exception of type <ref refid="classGecode_1_1Int_1_1VariableEmptyDomain" kindref="compound">Gecode::Int::VariableEmptyDomain</ref> is thrown.</para></listitem><listitem><para>If <emphasis>min</emphasis> is less than 0 or <emphasis>max</emphasis> is greater than 1, an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Gecode::Int::NotZeroOne</ref> is thrown. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="521" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value access</header>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1adbf6b228c6cfeff17dabe087cc5a22f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::BoolVar::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="527" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a0360832a74cdc9c4799cdeff91a51921" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::BoolVar::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return maximum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="529" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a6dcd4b0d7166f7b6898f5809f9629853" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::BoolVar::med</definition>
        <argsstring>(void) const </argsstring>
        <name>med</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return median of domain (greatest element not greater than the median) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="531" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a76270e5a7e57bf2fcb80731bcebcc0e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::BoolVar::val</definition>
        <argsstring>(void) const </argsstring>
        <name>val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return assigned value. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ValOfUnassignedVar" kindref="compound">Int::ValOfUnassignedVar</ref> if variable is not yet assigned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="539" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a0d7ceb55221e3aed39009bfa650ce348" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::BoolVar::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size (cardinality) of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="542" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1afd1f8615248fc54eb5306b46040ac0db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::BoolVar::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of domain (distance between maximum and minimum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="544" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a8fe2e786900675a75cc75ed7b9df52ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::BoolVar::regret_min</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain minimum (distance to next larger value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="546" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a8f275d9584c4147e1bd91182acba837b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::BoolVar::regret_max</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain maximum (distance to next smaller value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="548" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a32f099b145abd22531a708efd85965fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::BoolVar::range</definition>
        <argsstring>(void) const </argsstring>
        <name>range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="554" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1ad858d3050abf2f394e4051200c30db8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::BoolVar::in</definition>
        <argsstring>(int n) const </argsstring>
        <name>in</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="556" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Boolean domain tests</header>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a69d4d65ac25f0df007f8ff1e7b7028b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::BoolVar::zero</definition>
        <argsstring>(void) const </argsstring>
        <name>zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="562" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1abe4f8f8bc35051ce47ff61568e697ace" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::BoolVar::one</definition>
        <argsstring>(void) const </argsstring>
        <name>one</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="564" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a8c388750078a7056e120c360ddf31d2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::BoolVar::none</definition>
        <argsstring>(void) const </argsstring>
        <name>none</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is neither zero nor one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="566" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="115" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1BoolVar_1a8150965457f145160cbd48f277a4fd1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class BoolVarArray</definition>
        <argsstring></argsstring>
        <name>BoolVarArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="490" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classGecode_1_1BoolVar_1a6a9ee36bbad8194869698ad2e45d634e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class BoolVarArgs</definition>
        <argsstring></argsstring>
        <name>BoolVarArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="491" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="491" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a0ed51337de3e854293ff449055d12e77" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::BoolVar::_init</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>_init</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize Boolean variable with range domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain ranging from <emphasis>min</emphasis> to <emphasis>max</emphasis>. No exceptions are thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="500" column="1" bodyfile="/usr/include/gecode/int/var/bool.hpp" bodystart="41" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classGecode_1_1BoolVar_1a122a8889a83af8e0386f39c1679fbffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const BoolVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Print Boolean variable <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="319" column="1" bodyfile="/usr/include/gecode/int/var/print.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boolean integer variables. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1227">
        <label>Gecode::BoolVar</label>
        <link refid="classGecode_1_1BoolVar"/>
        <childnode refid="1228" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1228">
        <label>Gecode::VarImpVar&lt; Int::BoolVarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="1229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1229">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1230">
        <label>Gecode::BoolVar</label>
        <link refid="classGecode_1_1BoolVar"/>
        <childnode refid="1231" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1234">
        <label>BoolVarImpBase</label>
      </node>
      <node id="1231">
        <label>Gecode::VarImpVar&lt; Int::BoolVarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="1232" relation="public-inheritance">
        </childnode>
        <childnode refid="1233" relation="usage">
          <edgelabel>x</edgelabel>
        </childnode>
      </node>
      <node id="1232">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
      <node id="1233">
        <label>Gecode::Int::BoolVarImp</label>
        <link refid="classGecode_1_1Int_1_1BoolVarImp"/>
        <childnode refid="1234" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int.hh" line="489" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="489" bodyend="568"/>
    <listofallmembers>
      <member refid="classGecode_1_1BoolVar_1a0ed51337de3e854293ff449055d12e77" prot="private" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>_init</name></member>
      <member refid="classGecode_1_1VarImpVar_1a7d2b5ff6179ac3200ebc4d05046192b9" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>afc</name></member>
      <member refid="classGecode_1_1VarImpVar_1a46d10d8d6c4d60627a1d14bf6e7a8ccf" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>assigned</name></member>
      <member refid="classGecode_1_1VarImpVar_1a523eac9883d95fce3bbaf14313ada660" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>before</name></member>
      <member refid="classGecode_1_1BoolVar_1a1366196fd411022d607b981073128b7a" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVar</name></member>
      <member refid="classGecode_1_1BoolVar_1a5a2db1d90a7c69c061b47212dbfd580d" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVar</name></member>
      <member refid="classGecode_1_1BoolVar_1a54828838cf43b4a0bcb59c77b418fbf3" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVar</name></member>
      <member refid="classGecode_1_1BoolVar_1abd015eab3163a449fcd30450a26d3bbd" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVar</name></member>
      <member refid="classGecode_1_1BoolVar_1a6a9ee36bbad8194869698ad2e45d634e" prot="private" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVarArgs</name></member>
      <member refid="classGecode_1_1BoolVar_1a8150965457f145160cbd48f277a4fd1f" prot="private" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>BoolVarArray</name></member>
      <member refid="classGecode_1_1VarImpVar_1a75b6d985437329ba108580b9f8415284" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>degree</name></member>
      <member refid="classGecode_1_1BoolVar_1ad858d3050abf2f394e4051200c30db8c" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>in</name></member>
      <member refid="classGecode_1_1BoolVar_1a0360832a74cdc9c4799cdeff91a51921" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>max</name></member>
      <member refid="classGecode_1_1BoolVar_1a6dcd4b0d7166f7b6898f5809f9629853" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>med</name></member>
      <member refid="classGecode_1_1BoolVar_1adbf6b228c6cfeff17dabe087cc5a22f2" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>min</name></member>
      <member refid="classGecode_1_1BoolVar_1a8c388750078a7056e120c360ddf31d2b" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>none</name></member>
      <member refid="classGecode_1_1BoolVar_1abe4f8f8bc35051ce47ff61568e697ace" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>one</name></member>
      <member refid="classGecode_1_1BoolVar_1a122a8889a83af8e0386f39c1679fbffe" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1BoolVar_1a32f099b145abd22531a708efd85965fc" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>range</name></member>
      <member refid="classGecode_1_1BoolVar_1a8f275d9584c4147e1bd91182acba837b" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>regret_max</name></member>
      <member refid="classGecode_1_1BoolVar_1a8fe2e786900675a75cc75ed7b9df52ee" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>regret_min</name></member>
      <member refid="classGecode_1_1VarImpVar_1a9b85f0619f18004aaaa3bd94a7d0eec0" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>same</name></member>
      <member refid="classGecode_1_1BoolVar_1a0d7ceb55221e3aed39009bfa650ce348" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>size</name></member>
      <member refid="classGecode_1_1VarImpVar_1abdbe8fe5fcdbac6679e255058e3b716c" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>update</name></member>
      <member refid="classGecode_1_1BoolVar_1a76270e5a7e57bf2fcb80731bcebcc0e1" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>val</name></member>
      <member refid="classGecode_1_1VarImpVar_1a908cddb663db8f85c53391dd63befb53" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>varimp</name></member>
      <member refid="classGecode_1_1VarImpVar_1af8ea39682fc7b0251df684ace1063a65" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>VarImpType</name></member>
      <member refid="classGecode_1_1VarImpVar_1a8297a58d748bdb1dd081dc920f21d44a" prot="protected" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1VarImpVar_1a5c99d2d1dba56a32e8ff8f326b6204be" prot="protected" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1BoolVar_1afd1f8615248fc54eb5306b46040ac0db" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>width</name></member>
      <member refid="classGecode_1_1VarImpVar_1ac9314cfea4cf6ccd9f34e79e6f41dda3" prot="protected" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>x</name></member>
      <member refid="classGecode_1_1BoolVar_1a69d4d65ac25f0df007f8ff1e7b7028b5" prot="public" virt="non-virtual"><scope>Gecode::BoolVar</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
