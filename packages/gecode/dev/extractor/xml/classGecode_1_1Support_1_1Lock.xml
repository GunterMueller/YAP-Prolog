<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Support_1_1Lock" kind="class" prot="public">
    <compoundname>Gecode::Support::Lock</compoundname>
    <includes refid="thread_8hpp" local="no">thread.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGecode_1_1Support_1_1Lock_1a9e1a8739672ee6f8d77b703cfa8320d2" prot="private" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Support_1_1Mutex" kindref="compound">Mutex</ref> &amp;</type>
        <definition>Mutex&amp; Gecode::Support::Lock::m</definition>
        <argsstring></argsstring>
        <name>m</name>
        <briefdescription>
<para>The mutex used for the lock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="202" column="1" bodyfile="/usr/include/gecode/support/thread.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Support_1_1Lock_1ab447c53480b9acbc5e7e42db5801e33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Support::Lock::Lock</definition>
        <argsstring>(Mutex &amp;m0)</argsstring>
        <name>Lock</name>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Mutex" kindref="compound">Mutex</ref> &amp;</type>
          <declname>m0</declname>
        </param>
        <briefdescription>
<para>Enter lock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="205" column="1" bodyfile="/usr/include/gecode/support/thread/thread.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Support_1_1Lock_1a4e47e46b4427911187b348cde5e35ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Support::Lock::~Lock</definition>
        <argsstring>(void)</argsstring>
        <name>~Lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Leave lock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="207" column="1" bodyfile="/usr/include/gecode/support/thread/thread.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1Support_1_1Lock_1aef28c3c53f3531ec48553545de79b97c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gecode::Support::Lock::Lock</definition>
        <argsstring>(const Lock &amp;l)</argsstring>
        <name>Lock</name>
        <param>
          <type>const <ref refid="classGecode_1_1Support_1_1Lock" kindref="compound">Lock</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>A lock cannot be copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="210" column="1" bodyfile="/usr/include/gecode/support/thread.hpp" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Support_1_1Lock_1ad5730a72a2136583bfd6c2bf3d72507a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Support::Lock::operator=</definition>
        <argsstring>(const Lock &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classGecode_1_1Support_1_1Lock" kindref="compound">Lock</ref> &amp;</type>
        </param>
        <briefdescription>
<para>A lock cannot be assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="212" column="1" bodyfile="/usr/include/gecode/support/thread.hpp" bodystart="212" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A lock as a scoped frontend for a mutex. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/support/thread.hpp" line="199" column="1" bodyfile="/usr/include/gecode/support/thread.hpp" bodystart="199" bodyend="213"/>
    <listofallmembers>
      <member refid="classGecode_1_1Support_1_1Lock_1ab447c53480b9acbc5e7e42db5801e33c" prot="public" virt="non-virtual"><scope>Gecode::Support::Lock</scope><name>Lock</name></member>
      <member refid="classGecode_1_1Support_1_1Lock_1aef28c3c53f3531ec48553545de79b97c" prot="private" virt="non-virtual"><scope>Gecode::Support::Lock</scope><name>Lock</name></member>
      <member refid="classGecode_1_1Support_1_1Lock_1a9e1a8739672ee6f8d77b703cfa8320d2" prot="private" virt="non-virtual"><scope>Gecode::Support::Lock</scope><name>m</name></member>
      <member refid="classGecode_1_1Support_1_1Lock_1ad5730a72a2136583bfd6c2bf3d72507a" prot="private" virt="non-virtual"><scope>Gecode::Support::Lock</scope><name>operator=</name></member>
      <member refid="classGecode_1_1Support_1_1Lock_1a4e47e46b4427911187b348cde5e35ca6" prot="public" virt="non-virtual"><scope>Gecode::Support::Lock</scope><name>~Lock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
