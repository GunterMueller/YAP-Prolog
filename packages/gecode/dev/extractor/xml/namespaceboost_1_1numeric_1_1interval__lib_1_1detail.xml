<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail" kind="namespace">
    <compoundname>boost::numeric::interval_lib::detail</compoundname>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1borland__workaround" prot="public">boost::numeric::interval_lib::detail::borland_workaround</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1x86__rounding" prot="public">boost::numeric::interval_lib::detail::x86_rounding</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1c99__rounding__control" prot="public">boost::numeric::interval_lib::detail::c99_rounding_control</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1sparc__rounding__control" prot="public">boost::numeric::interval_lib::detail::sparc_rounding_control</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1fpu__rounding__modes" prot="public">boost::numeric::interval_lib::detail::fpu_rounding_modes</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1x86__rounding__control" prot="public">boost::numeric::interval_lib::detail::x86_rounding_control</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1x86__rounding__control__long__double" prot="public">boost::numeric::interval_lib::detail::x86_rounding_control_long_double</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1x86__rounding__control__long__double_3_01false_01_4" prot="public">boost::numeric::interval_lib::detail::x86_rounding_control_long_double&lt; false &gt;</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1x86__rounding__control__long__double_3_01true_01_4" prot="public">boost::numeric::interval_lib::detail::x86_rounding_control_long_double&lt; true &gt;</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1save__state__unprotected" prot="public">boost::numeric::interval_lib::detail::save_state_unprotected</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a0440b5272900debb8fc19171ff1d8f8a" prot="public" static="yes" mutable="no">
        <type><ref refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1borland__workaround" kindref="compound">borland_workaround</ref></type>
        <definition>borland_workaround boost::numeric::interval_lib::detail::borland_workaround_exec</definition>
        <argsstring></argsstring>
        <name>borland_workaround_exec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/bcc_rounding_control.hpp" line="36" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/bcc_rounding_control.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a7d4d65eabe1ce9d01c73caf46906b0c4" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structboost_1_1numeric_1_1interval__lib_1_1detail_1_1fpu__rounding__modes" kindref="compound">fpu_rounding_modes</ref></type>
        <definition>const fpu_rounding_modes boost::numeric::interval_lib::detail::rnd_mode</definition>
        <argsstring></argsstring>
        <name>rnd_mode</name>
        <initializer>= { 0x137f, 0x177f, 0x1b7f, 0x1f7f }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/x86_rounding_control.hpp" line="47" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/x86_rounding_control.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1ab0bee5a466fde4c4e566b2de9063b957" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Rounding</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::numeric::interval_lib::detail::pow_dn</definition>
        <argsstring>(const T &amp;x_, int pwr, Rounding &amp;rnd)</argsstring>
        <name>pow_dn</name>
        <param>
          <type>const T &amp;</type>
          <declname>x_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwr</declname>
        </param>
        <param>
          <type>Rounding &amp;</type>
          <declname>rnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="127" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1aa34217a5c88c0b814e1ebeb6f574a826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Rounding</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::numeric::interval_lib::detail::pow_up</definition>
        <argsstring>(const T &amp;x_, int pwr, Rounding &amp;rnd)</argsstring>
        <name>pow_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwr</declname>
        </param>
        <param>
          <type>Rounding &amp;</type>
          <declname>rnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="141" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" bodystart="141" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a512b415024a2cbf454da36431d14f0d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I boost::numeric::interval_lib::detail::root_aux</definition>
        <argsstring>(typename I::base_type const &amp;x, int k)</argsstring>
        <name>root_aux</name>
        <param>
          <type>typename I::base_type const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="229" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" bodystart="229" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a914dd892d8727b9f0e5d0102f44ec37b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I::base_type</type>
        <definition>I::base_type boost::numeric::interval_lib::detail::root_aux_dn</definition>
        <argsstring>(typename I::base_type const &amp;x, int k)</argsstring>
        <name>root_aux_dn</name>
        <param>
          <type>typename I::base_type const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="243" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" bodystart="243" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a79e1f29fb048f6106ff6f8862374e45d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I::base_type</type>
        <definition>I::base_type boost::numeric::interval_lib::detail::root_aux_up</definition>
        <argsstring>(typename I::base_type const &amp;x, int k)</argsstring>
        <name>root_aux_up</name>
        <param>
          <type>typename I::base_type const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="255" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" bodystart="255" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a1d124801f6255a7ea893da9d0d997639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int _RTLENTRY</type>
        <definition>unsigned int _RTLENTRY boost::numeric::interval_lib::detail::_fm_init</definition>
        <argsstring>(void)</argsstring>
        <name>_fm_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/bcc_rounding_control.hpp" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1af0c216d9a13fc32a6f55ce3fe96776c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__inline double</type>
        <definition>double boost::numeric::interval_lib::detail::rint</definition>
        <argsstring>(double)</argsstring>
        <name>rint</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/bcc_rounding_control.hpp" line="39" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/bcc_rounding_control.hpp" bodystart="39" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1ae3cc4134e4fade2246d84910ae36a2e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_non_zero</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const interval&lt; T, Policies &gt; &amp;y)</argsstring>
        <name>div_non_zero</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="25" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="25" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a6809a7c7ad94e34d86263f6c237be2a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_non_zero</definition>
        <argsstring>(const T &amp;x, const interval&lt; T, Policies &gt; &amp;y)</argsstring>
        <name>div_non_zero</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="53" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="53" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a2288b396f02ca76c05960c16ff6005b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_positive</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;yu)</argsstring>
        <name>div_positive</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>yu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="67" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="67" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1ae9369d636db433b325aae3d1ca337fe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_positive</definition>
        <argsstring>(const T &amp;x, const T &amp;yu)</argsstring>
        <name>div_positive</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>yu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="87" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="87" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1af00f55071dd97f4917494fac46e03f94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_negative</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;yl)</argsstring>
        <name>div_negative</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>yl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="102" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="102" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1ae126edfc682b4d150dd602d71d25664a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_negative</definition>
        <argsstring>(const T &amp;x, const T &amp;yl)</argsstring>
        <name>div_negative</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>yl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="122" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a1dc0181b13ce9e4442dea0a9b81033ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_zero</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x)</argsstring>
        <name>div_zero</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="137" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a3c8b04bebdefe41502f38a062a1c384c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_zero</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>div_zero</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="146" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a016e13c437b57230d6b075d1ca18de2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_zero_part1</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const interval&lt; T, Policies &gt; &amp;y, bool &amp;b)</argsstring>
        <name>div_zero_part1</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="154" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="154" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1affc48d98475e1afbf21c50b593d55d5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt;</type>
        <definition>interval&lt;T, Policies&gt; boost::numeric::interval_lib::detail::div_zero_part2</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const interval&lt; T, Policies &gt; &amp;y)</argsstring>
        <name>div_zero_part2</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" line="176" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1abf2c068131211bf0ac7bab12494d803c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x)</argsstring>
        <name>test_input</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="34" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a0ab9e3f7c554553d551cee96be3a08ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>test_input</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="40" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1aeb17f421947b20ad4ebabff819d6e5bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const T &amp;x, const interval&lt; T, Policies &gt; &amp;y)</argsstring>
        <name>test_input</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="48" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a0fb666bbaa7fcd23748063553bb533b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>test_input</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="54" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a580c3c1bee5a2d5698e940eed90e01d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>test_input</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="60" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1detail_1a7253936f86d530e24134600c158586d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::detail::test_input</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>test_input</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" line="66" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/detail/test_input.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp" line="124" column="1"/>
  </compounddef>
</doxygen>
