<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceGecode_1_1Int_1_1Limits" kind="namespace">
    <compoundname>Gecode::Int::Limits</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::Int::Limits::max</definition>
        <argsstring></argsstring>
        <name>max</name>
        <initializer>= INT_MAX - 1</initializer>
        <briefdescription>
<para>Largest allowed integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="111" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::Int::Limits::min</definition>
        <argsstring></argsstring>
        <name>min</name>
        <initializer>= -<ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">max</ref></initializer>
        <briefdescription>
<para>Smallest allowed integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="113" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1a5a8edf24fe7e29c7159587b7e7d0260a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::Int::Limits::infinity</definition>
        <argsstring></argsstring>
        <name>infinity</name>
        <initializer>= <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">max</ref> + 1</initializer>
        <briefdescription>
<para>Infinity for integers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="115" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1a3faccb12e317ec3af3c96a081eb1050a" prot="public" static="no" mutable="no">
        <type>const long long int</type>
        <definition>const long long int Gecode::Int::Limits::llmax</definition>
        <argsstring></argsstring>
        <name>llmax</name>
        <initializer>=  LLONG_MAX - 1</initializer>
        <briefdescription>
<para>Largest allowed long long integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="117" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1a35f7e7acce40be2c1ded5e832b61cecb" prot="public" static="no" mutable="no">
        <type>const long long int</type>
        <definition>const long long int Gecode::Int::Limits::llmin</definition>
        <argsstring></argsstring>
        <name>llmin</name>
        <initializer>= -<ref refid="namespaceGecode_1_1Int_1_1Limits_1a3faccb12e317ec3af3c96a081eb1050a" kindref="member">llmax</ref></initializer>
        <briefdescription>
<para>Smallest allowed long long integer value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="119" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1_1Int_1_1Limits_1ae5e93636b2a7b2defae6986b2eb85dab" prot="public" static="no" mutable="no">
        <type>const long long int</type>
        <definition>const long long int Gecode::Int::Limits::llinfinity</definition>
        <argsstring></argsstring>
        <name>llinfinity</name>
        <initializer>= <ref refid="namespaceGecode_1_1Int_1_1Limits_1a3faccb12e317ec3af3c96a081eb1050a" kindref="member">llmax</ref> + 1</initializer>
        <briefdescription>
<para>Infinity for long long integers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="121" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a9f38c9a86fc2da4db070dd6fb8ea186c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::Int::Limits::valid</definition>
        <argsstring>(int n)</argsstring>
        <name>valid</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return whether <emphasis>n</emphasis> is in range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="123" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1aad63f67cb78ec44f15fc48405bbb3d87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::Int::Limits::valid</definition>
        <argsstring>(long long int n)</argsstring>
        <name>valid</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return whether <emphasis>n</emphasis> is in range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="125" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a599fb66cd1480d48f8cb8f4aedf14551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::check</definition>
        <argsstring>(int n, const char *l)</argsstring>
        <name>check</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in range, otherwise throw out of limits with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="127" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a5bc72ca2907d717dae8eeaf6e2450541" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::check</definition>
        <argsstring>(long long int n, const char *l)</argsstring>
        <name>check</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in range, otherwise throw out of limits with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="129" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a3bd12aaf542cfe4220218c6ae290b2da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::positive</definition>
        <argsstring>(int n, const char *l)</argsstring>
        <name>positive</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in range and strictly positive, otherwise throw out of limits with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="131" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1ae081933c7448044b37c1dbb5d4e6953a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::positive</definition>
        <argsstring>(long long int n, const char *l)</argsstring>
        <name>positive</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in range and strictly positive, otherwise throw out of limits with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="133" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a4ed1c3010669dffdca42157047329b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::nonnegative</definition>
        <argsstring>(int n, const char *l)</argsstring>
        <name>nonnegative</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in range and nonnegative, otherwise throw out of limits with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="135" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a17ac574266ed2195a4caae0cc84d6ad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Limits::nonnegative</definition>
        <argsstring>(long long int n, const char *l)</argsstring>
        <name>nonnegative</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>n</emphasis> is in integer range and nonnegative, otherwise throw out of limits exception with information <emphasis>l</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="137" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a6d4ef7d4bc24565a3ea8eee87bd560b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::Limits::overflow_add</definition>
        <argsstring>(int n, int m)</argsstring>
        <name>overflow_add</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether adding <emphasis>n</emphasis> and <emphasis>m</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="139" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a09fb8df8a0747484bc56abaa2ad19530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::Limits::overflow_add</definition>
        <argsstring>(long long int n, long long int m)</argsstring>
        <name>overflow_add</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether adding <emphasis>n</emphasis> and <emphasis>m</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="141" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1ac67ec5f9a4bf51ca96c216c01e8c0a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::Limits::overflow_sub</definition>
        <argsstring>(int n, int m)</argsstring>
        <name>overflow_sub</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether subtracting <emphasis>m</emphasis> from <emphasis>n</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="143" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a6bc6fdb9c7ff103655a5029a767f4e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::Limits::overflow_sub</definition>
        <argsstring>(long long int n, long long int m)</argsstring>
        <name>overflow_sub</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether subtracting <emphasis>m</emphasis> from <emphasis>n</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="145" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a6eed53c743936f191655e99fdd61944f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::Int::Limits::overflow_mul</definition>
        <argsstring>(int n, int m)</argsstring>
        <name>overflow_mul</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether multiplying <emphasis>n</emphasis> and <emphasis>m</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="147" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Int_1_1Limits_1a76c86d03e44d0097c62b4eec5d54225c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::Int::Limits::overflow_mul</definition>
        <argsstring>(long long int n, long long int m)</argsstring>
        <name>overflow_mul</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check whether multiplying <emphasis>n</emphasis> and <emphasis>m</emphasis> would overflow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="149" column="1" bodyfile="/usr/include/gecode/int/limits.hpp" bodystart="118" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Numerical limits for integer variables. </para>    </briefdescription>
    <detaileddescription>
<para>The integer limits are chosen such changing the sign is always possible without overflow. </para>    </detaileddescription>
    <location file="/usr/include/gecode/int.hh" line="109" column="1"/>
  </compounddef>
</doxygen>
