<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__TaskModelIntScheduling" kind="group">
    <compoundname>TaskModelIntScheduling</compoundname>
    <title>Scheduling constraints</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gab3d035d788ebde42a7ec3630b1847e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga72bbbbe583e8f639e2c7ded0637966c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga1b3f79372d79f46a6cd0043830e7a18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf44ecae94701dcbad2f6d7964e5d8c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaa56931a4aac3e6672b47c2527d27e136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad36dc738cf8a14308052c42827bda2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaff1eb3d747385d94554face6b1ac3c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad6a9f0e413966e6bf757dd279bca65cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaa0f3653b3001bc88b9cb6115bdd8d2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntArgs &amp;p, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis> and processing times <emphasis>p</emphasis> on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>s</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad4a290dcf9cdbf41a422dd73e14c95bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntArgs &amp;p, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>s</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gac691c987f7ce4056b74a8775f90a0469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis> and fixed times <emphasis>fix</emphasis> on a unary resource. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative for a task with type <computeroutput>TT_FIXP</computeroutput> or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga22d7fd0b24ef044d4b69885d09a3d7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative for a task with type <computeroutput>TT_FIXP</computeroutput> or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga6272031c2406f9e872a845a110d8dafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and end times <emphasis>e</emphasis> on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para>The processing times are constrained to be non-negative.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf4cb91074d98e1791b0c88c0783073dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The processing times are constrained to be non-negative.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2866" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga9186b1ea47755a1af7b45907f094467d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf8b8cbc843ec64f4a643ca0375da07e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga6a771542d318b5b597f3a6bcae680fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, use capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga654d7aab5be3f688ad5d24368cc87a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const TaskTypeArgs &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, use capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2963" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga70836414c40cac15451277379e9847a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga2de39228ece46ac9c94e98a8b484fc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaac9f0c48219459feea4bf6551017346a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga37ccf32f2bdda49db36871a2a7faa85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gac6047a5a23eab84b537a2da87d0e4ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf61e234827801b723d4790b4b8b31ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaabf651d32c8c7593e0ed9d8b8bb326a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gae003a727acb524a7970d5166965e683d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3117" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
