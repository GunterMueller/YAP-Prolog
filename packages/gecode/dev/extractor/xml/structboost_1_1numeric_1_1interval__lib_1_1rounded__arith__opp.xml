<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp" kind="struct" prot="public">
    <compoundname>boost::numeric::interval_lib::rounded_arith_opp</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Rounding</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>Rounding</declname>
        <defname>Rounding</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a9916654dc8491f9efef6f5727b329b59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="80" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1aa608eeed543d42c0529734ca26918418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::conv_down</definition>
        <argsstring>(U const &amp;v)</argsstring>
        <name>conv_down</name>
        <param>
          <type>U const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="93" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1afbdaaf5363565724db230f58d505f55c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::conv_up</definition>
        <argsstring>(U const &amp;v)</argsstring>
        <name>conv_up</name>
        <param>
          <type>U const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="94" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1adc7b8d311d04770a7dacedfb7fe38e4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::add_down</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>add_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="95" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1accc187dbaffdb2ce5af72ebdf43cd082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::sub_down</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>sub_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="96" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab4a0847deccfb396c05166a3a687635a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::mul_down</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>mul_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="97" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1af845bf3f3c5736deb4569e930f33bba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::div_down</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>div_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="98" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a4c8a271f2ab3c17202201085b394a65e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::add_up</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>add_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="99" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab0914a937b167c88dec18eb4bbc8718a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::sub_up</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>sub_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="100" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a5cc138b0e714dae5d4fe49e4d6562eb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::mul_up</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>mul_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="101" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1addee770f5199c2efb658eab20b360917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::div_up</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>div_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="102" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a8eb8a2f72c799cbbbf143715441abd57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::median</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>median</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="103" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a5cd5f3ec002b52d2c9d401f5b4128e47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::sqrt_down</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>sqrt_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="104" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="104" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1aa86619c6139dd2c48850320592ceaf60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::sqrt_up</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>sqrt_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="106" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="106" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab8b952c65fff762c3096051fb44e7aca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::int_down</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>int_down</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="108" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a27c72e54b993e9c2aff2b81831837de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;::int_up</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>int_up</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="109" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6174">
        <label>Rounding</label>
      </node>
      <node id="6173">
        <label>boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;</label>
        <link refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp"/>
        <childnode refid="6174" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6176">
        <label>Rounding</label>
      </node>
      <node id="6175">
        <label>boost::numeric::interval_lib::rounded_arith_opp&lt; T, Rounding &gt;</label>
        <link refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp"/>
        <childnode refid="6176" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" line="79" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp" bodystart="79" bodyend="114"/>
    <listofallmembers>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1adc7b8d311d04770a7dacedfb7fe38e4b" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>add_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a4c8a271f2ab3c17202201085b394a65e" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>add_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1aa608eeed543d42c0529734ca26918418" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>conv_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1afbdaaf5363565724db230f58d505f55c" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>conv_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1af845bf3f3c5736deb4569e930f33bba2" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>div_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1addee770f5199c2efb658eab20b360917" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>div_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a9916654dc8491f9efef6f5727b329b59" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>init</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab8b952c65fff762c3096051fb44e7aca" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>int_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a27c72e54b993e9c2aff2b81831837de7" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>int_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a8eb8a2f72c799cbbbf143715441abd57" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>median</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab4a0847deccfb396c05166a3a687635a" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>mul_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a5cc138b0e714dae5d4fe49e4d6562eb6" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>mul_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1a5cd5f3ec002b52d2c9d401f5b4128e47" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>sqrt_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1aa86619c6139dd2c48850320592ceaf60" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>sqrt_up</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1accc187dbaffdb2ce5af72ebdf43cd082" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>sub_down</name></member>
      <member refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__arith__opp_1ab0914a937b167c88dec18eb4bbc8718a" prot="public" virt="non-virtual"><scope>boost::numeric::interval_lib::rounded_arith_opp</scope><name>sub_up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
