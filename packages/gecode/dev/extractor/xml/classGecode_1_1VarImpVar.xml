<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1VarImpVar" kind="class" prot="public">
    <compoundname>Gecode::VarImpVar</compoundname>
    <basecompoundref refid="classGecode_1_1Var" prot="public" virt="non-virtual">Gecode::Var</basecompoundref>
    <includes refid="kernel_2var_8hpp" local="no">var.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>VarImp</declname>
        <defname>VarImp</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Generic variable information</header>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a908cddb663db8f85c53391dd63befb53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
        <definition>forceinline VarImp * Gecode::VarImpVar&lt; VarImp &gt;::varimp</definition>
        <argsstring>(void) const </argsstring>
        <name>varimp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return variable implementation of variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="65" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a75b6d985437329ba108580b9f8415284" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::VarImpVar&lt; VarImp &gt;::degree</definition>
        <argsstring>(void) const </argsstring>
        <name>degree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return degree (number of subscribed propagators and advisors) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="67" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a7d2b5ff6179ac3200ebc4d05046192b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>forceinline double Gecode::VarImpVar&lt; VarImp &gt;::afc</definition>
        <argsstring>(const Space &amp;home) const </argsstring>
        <name>afc</name>
        <param>
          <type>const <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Return accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="69" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a46d10d8d6c4d60627a1d14bf6e7a8ccf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarImpVar&lt; VarImp &gt;::assigned</definition>
        <argsstring>(void) const </argsstring>
        <name>assigned</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether view is assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="75" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning</header>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1abdbe8fe5fcdbac6679e255058e3b716c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarImpVar&lt; VarImp &gt;::update</definition>
        <argsstring>(Space &amp;home, bool share, VarImpVar&lt; VarImp &gt; &amp;y)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarImpVar" kindref="compound">VarImpVar</ref>&lt; <ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Update this variable to be a clone of variable <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="81" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variable comparison</header>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a9b85f0619f18004aaaa3bd94a7d0eec0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarImpVar&lt; VarImp &gt;::same</definition>
        <argsstring>(const VarImpVar&lt; VarImp &gt; &amp;y) const </argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpVar" kindref="compound">VarImpVar</ref>&lt; <ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether variable is the same as <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="87" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a523eac9883d95fce3bbaf14313ada660" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarImpVar&lt; VarImp &gt;::before</definition>
        <argsstring>(const VarImpVar&lt; VarImp &gt; &amp;y) const </argsstring>
        <name>before</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpVar" kindref="compound">VarImpVar</ref>&lt; <ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether variable comes before <emphasis>y</emphasis> (arbitrary order) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="89" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="138" bodyend="140"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classGecode_1_1VarImpVar_1af8ea39682fc7b0251df684ace1063a65" prot="public" static="no">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref></type>
        <definition>typedef VarImp Gecode::VarImpVar&lt; VarImp &gt;::VarImpType</definition>
        <argsstring></argsstring>
        <name>VarImpType</name>
        <briefdescription>
<para>The variable implementation type corresponding to the variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="61" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1VarImpVar_1ac9314cfea4cf6ccd9f34e79e6f41dda3" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
        <definition>VarImp* Gecode::VarImpVar&lt; VarImp &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>Pointer to variable implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="54" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a8297a58d748bdb1dd081dc920f21d44a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarImpVar&lt; VarImp &gt;::VarImpVar</definition>
        <argsstring>(void)</argsstring>
        <name>VarImpVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="56" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="100" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarImpVar_1a5c99d2d1dba56a32e8ff8f326b6204be" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarImpVar&lt; VarImp &gt;::VarImpVar</definition>
        <argsstring>(VarImp *y)</argsstring>
        <name>VarImpVar</name>
        <param>
          <type><ref refid="classGecode_1_1VarImp" kindref="compound">VarImp</ref> *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize with variable implementation <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/var.hpp" line="58" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="104" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variables as interfaces to variable implementations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7716">
        <label>Gecode::VarImpVar&lt; VarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="7717" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7717">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7718">
        <label>Gecode::VarImpVar&lt; VarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="7719" relation="public-inheritance">
        </childnode>
        <childnode refid="7720" relation="usage">
          <edgelabel>x</edgelabel>
        </childnode>
      </node>
      <node id="7719">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
      <node id="7721">
        <label>Gecode::VarImpBase</label>
        <link refid="classGecode_1_1VarImpBase"/>
      </node>
      <node id="7722">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
      <node id="7720">
        <label>Gecode::VarImp&lt; VIC &gt;</label>
        <link refid="classGecode_1_1VarImp"/>
        <childnode refid="7721" relation="public-inheritance">
        </childnode>
        <childnode refid="7722" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/kernel/var.hpp" line="51" column="1" bodyfile="/usr/include/gecode/kernel/var.hpp" bodystart="51" bodyend="91"/>
    <listofallmembers>
      <member refid="classGecode_1_1VarImpVar_1a7d2b5ff6179ac3200ebc4d05046192b9" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>afc</name></member>
      <member refid="classGecode_1_1VarImpVar_1a46d10d8d6c4d60627a1d14bf6e7a8ccf" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>assigned</name></member>
      <member refid="classGecode_1_1VarImpVar_1a523eac9883d95fce3bbaf14313ada660" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>before</name></member>
      <member refid="classGecode_1_1VarImpVar_1a75b6d985437329ba108580b9f8415284" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>degree</name></member>
      <member refid="classGecode_1_1VarImpVar_1a9b85f0619f18004aaaa3bd94a7d0eec0" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>same</name></member>
      <member refid="classGecode_1_1VarImpVar_1abdbe8fe5fcdbac6679e255058e3b716c" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>update</name></member>
      <member refid="classGecode_1_1VarImpVar_1a908cddb663db8f85c53391dd63befb53" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>varimp</name></member>
      <member refid="classGecode_1_1VarImpVar_1af8ea39682fc7b0251df684ace1063a65" prot="public" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>VarImpType</name></member>
      <member refid="classGecode_1_1VarImpVar_1a8297a58d748bdb1dd081dc920f21d44a" prot="protected" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1VarImpVar_1a5c99d2d1dba56a32e8ff8f326b6204be" prot="protected" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1VarImpVar_1ac9314cfea4cf6ccd9f34e79e6f41dda3" prot="protected" virt="non-virtual"><scope>Gecode::VarImpVar</scope><name>x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
