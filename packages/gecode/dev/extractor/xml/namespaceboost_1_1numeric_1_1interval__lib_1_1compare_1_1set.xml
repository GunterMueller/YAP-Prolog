<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set" kind="namespace">
    <compoundname>boost::numeric::interval_lib::compare::set</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a457d11e6a8c7a4f8888c4246b1a100b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="24" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a3a352f4635bb2ec6f52d18ff0b41c163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="30" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1aafb134e509bb11156429263389e57c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="37" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a8fed75fe0de632d1bd37b7687e29eeb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="43" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1ab0fa4e95cab86f835cf6d4aaa55c2204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="50" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a47beff2aa8787d3a2b2ff19dd75ba797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="56" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a3f0c11ef206f25a4c519132ae38ab2b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="63" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a3d35e133ed21641121912225b560c8c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="69" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a16dfce82ed15d03f916fe029b193d7e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator==</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="76" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a150de19bbbe788176d472dc2d91478a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator==</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="82" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1ad71212135d749afbdc25a35c9741fb18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="89" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1set_1a709ca43e3f2d1de51faed323daeabc5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::set::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="95" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" bodystart="95" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
