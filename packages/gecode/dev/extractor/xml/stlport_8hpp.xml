<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="stlport_8hpp" kind="file">
    <compoundname>stlport.hpp</compoundname>
    <includes local="no">cstddef</includes>
    <incdepgraph>
      <node id="34360">
        <label>/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp</label>
        <link refid="stlport.hpp"/>
        <childnode refid="34361" relation="include">
        </childnode>
      </node>
      <node id="34361">
        <label>cstddef</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stlport_8hpp_1a8d8e1c6496a27aa2c0f70c23c132fa58" prot="public" static="no">
        <name>BOOST_NO_STD_ITERATOR_TRAITS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="42" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1abd05e0eebd57d4d79a48c08aa1f42dd1" prot="public" static="no">
        <name>BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="87" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1ae4e4629a2d4b5ed01aba3f0c497b8e1d" prot="public" static="no">
        <name>BOOST_NO_STD_ALLOCATOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="88" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1abc2a597f9adf761cd9e003cddcd64c6d" prot="public" static="no">
        <name>BOOST_HAS_PARTIAL_STD_ALLOCATOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="93" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1ae4e4629a2d4b5ed01aba3f0c497b8e1d" prot="public" static="no">
        <name>BOOST_NO_STD_ALLOCATOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="96" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a17f5f21da04d3286810cfdc30799e262" prot="public" static="no">
        <name>BOOST_NO_STD_WSTRING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="109" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a4d5a952e5263bcdbf5fd3aef881ed02d" prot="public" static="no">
        <name>BOOST_NO_STD_WSTREAMBUF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="112" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a2e2f4ab617d28e51366ecc85ce3479d0" prot="public" static="no">
        <name>BOOST_HAS_HASH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="120" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a24178ea4042b8eb9dbae65db8a7016df" prot="public" static="no">
        <name>BOOST_HAS_SLIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="121" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a7741217677869546396dfa921c058be9" prot="public" static="no">
        <name>BOOST_NO_INTRINSIC_WCHAR_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="192" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a2a025f67528583e3e0c30e7f9dca14a3" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_ARRAY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="215" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1af5ba0869e1d6440efcc83a7e4371c786" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_CHRONO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="216" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a99a70abe45125cd77461db951af623b1" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_CODECVT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="217" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1aeafca1ba0ce1c0e9a506dc5c4ae0db02" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_CONDITION_VARIABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="218" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a6a8fe3913cbbe5a9b7ec68aa4ef2f32c" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_FORWARD_LIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="219" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a78d01772010913e629fad312f3039b0c" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_FUTURE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="220" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1aa2c7a518048d09ee2503f0da79ca45eb" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_INITIALIZER_LIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="221" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a3101ea14746ac1d04dbfca62eab46b37" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_MUTEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="222" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a11078fb53f856c1773a028f8ae1dbb74" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_RANDOM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="223" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a2dcba45f6486552307f6c41050949127" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_RATIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="224" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1aaea35104fb86aeb7a56e813aa4b1641a" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_REGEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="225" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a8efd9c2962dcb5b1dd0189e1581a36bb" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_SYSTEM_ERROR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="226" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1ac21a1d6ab1bdf429c4f3863eb61640fd" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_THREAD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="227" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1ac4c03c75c321273027da8aa498dc812d" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_TUPLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="228" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a5e9484cc1a51f14e9c5ac50bf0321a36" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_TYPE_TRAITS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="229" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a5aa0152b7f8a0edb483120c514f24f68" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_TYPEINDEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="230" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a5f7c16445a4a41896de19fd44d0efa0d" prot="public" static="no">
        <name>BOOST_NO_STD_UNORDERED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="231" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a4ae4004387f3985465752f3f8a149b89" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_UNORDERED_MAP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="232" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a0df1997f5eadf550a841cd1e0190d841" prot="public" static="no">
        <name>BOOST_NO_0X_HDR_UNORDERED_SET</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="233" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a53e18344e017dae60158edae1f7ce594" prot="public" static="no">
        <name>BOOST_NO_NUMERIC_LIMITS_LOWEST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="234" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stlport_8hpp_1a119bfbef30b482000f193169d6ae9fee" prot="public" static="no">
        <name>BOOST_STDLIB</name>
        <initializer>&quot;STLPort standard library version &quot; BOOST_STRINGIZE(__SGI_STL_PORT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" line="236" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>John<sp/>Maddock<sp/>2001<sp/>-<sp/>2002.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Darin<sp/>Adler<sp/>2001.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Jens<sp/>Maurer<sp/>2001.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Use,<sp/>modification<sp/>and<sp/>distribution<sp/>are<sp/>subject<sp/>to<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>See<sp/>http://www.boost.org<sp/>for<sp/>most<sp/>recent<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>STLPort<sp/>standard<sp/>library<sp/>config:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__SGI_STL_PORT)<sp/>&amp;&amp;<sp/>!defined(_STLPORT_VERSION)</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(__SGI_STL_PORT)<sp/>&amp;&amp;<sp/>!defined(_STLPORT_VERSION)</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>&quot;This<sp/>is<sp/>not<sp/>STLPort!&quot;</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apple<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>reliably<sp/>defined<sp/>a<sp/>*unix*<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CYGWIN)<sp/>&amp;&amp;<sp/>(<sp/><sp/>defined(__unix__)<sp/><sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(__unix)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(unix)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(__APPLE__)<sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(__APPLE)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(APPLE))</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__STL_STATIC_CONST_INIT_BUG<sp/>implies<sp/>BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>versions<sp/>prior<sp/>to<sp/>4.1(beta)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__STL_STATIC_CONST_INIT_BUG)<sp/>||<sp/>defined(_STLP_STATIC_CONST_INIT_BUG))<sp/>&amp;&amp;<sp/>(__SGI_STL_PORT<sp/>&lt;=<sp/>0x400)</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>STLport<sp/>thinks<sp/>that<sp/>there<sp/>is<sp/>no<sp/>partial<sp/>specialisation,<sp/>then<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::iterator<sp/>traits:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(_STLP_CLASS_PARTIAL_SPECIALIZATION)<sp/>||<sp/>defined(__STL_CLASS_PARTIAL_SPECIALIZATION))</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_ITERATOR_TRAITS</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>new<sp/>style<sp/>iostreams<sp/>on<sp/>GCC<sp/>without<sp/>STLport&apos;s<sp/>iostreams<sp/>enabled:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&lt;<sp/>3))<sp/>&amp;&amp;<sp/>!(defined(__SGI_STL_OWN_IOSTREAMS)<sp/>||<sp/>defined(_STLP_OWN_IOSTREAMS))</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STRINGSTREAM</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>new<sp/>iostreams<sp/>implies<sp/>no<sp/>std::locale,<sp/>and<sp/>no<sp/>std::stringstream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__STL_NO_IOSTREAMS)<sp/>||<sp/>defined(__STL_NO_NEW_IOSTREAMS)<sp/>||<sp/>defined(_STLP_NO_IOSTREAMS)<sp/>||<sp/>defined(_STLP_NO_NEW_IOSTREAMS)</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_LOCALE</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STRINGSTREAM</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>streams<sp/>are<sp/>not<sp/>native,<sp/>and<sp/>we<sp/>have<sp/>a<sp/>&quot;using<sp/>::x&quot;<sp/>compiler<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>io<sp/>stream<sp/>facets<sp/>are<sp/>not<sp/>available<sp/>in<sp/>namespace<sp/>std::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_STLPORT_VERSION</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!(_STLPORT_VERSION<sp/>&gt;=<sp/>0x500)<sp/>&amp;&amp;<sp/>!defined(_STLP_OWN_IOSTREAMS)<sp/>&amp;&amp;<sp/>defined(_STLP_USE_NAMESPACES)<sp/>&amp;&amp;<sp/>defined(BOOST_NO_USING_TEMPLATE)<sp/>&amp;&amp;<sp/>!defined(__BORLANDC__)</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_LOCALE</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(__SGI_STL_OWN_IOSTREAMS)<sp/>&amp;&amp;<sp/>defined(__STL_USE_NAMESPACES)<sp/>&amp;&amp;<sp/>defined(BOOST_NO_USING_TEMPLATE)<sp/>&amp;&amp;<sp/>!defined(__BORLANDC__)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_LOCALE</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_STLPORT_VERSION)<sp/>&amp;&amp;<sp/>((_STLPORT_VERSION<sp/>&lt;<sp/>0x500)<sp/>||<sp/>(_STLPORT_VERSION<sp/>&gt;=<sp/>0x520))</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_UNORDERED</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_STLPORT_VERSION)<sp/>&amp;&amp;<sp/>(_STLPORT_VERSION<sp/>&gt;=<sp/>0x520)</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_TR1_UNORDERED_SET</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_TR1_UNORDERED_MAP</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>member<sp/>template<sp/>support<sp/>enabled,<sp/>their<sp/>are<sp/>no<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterate<sp/>constructors,<sp/>and<sp/>no<sp/>std::allocator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(__STL_MEMBER_TEMPLATES)<sp/>||<sp/>defined(_STLP_MEMBER_TEMPLATES))</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>however<sp/>we<sp/>always<sp/>have<sp/>at<sp/>least<sp/>a<sp/>partial<sp/>allocator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_HAS_PARTIAL_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_STLP_MEMBER_TEMPLATE_CLASSES)<sp/>||<sp/>defined(_STLP_DONT_SUPPORT_REBIND_MEMBER_TEMPLATE)</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_STLP_NO_MEMBER_TEMPLATE_KEYWORD)<sp/>&amp;&amp;<sp/>defined(BOOST_MSVC)<sp/>&amp;&amp;<sp/>(BOOST_MSVC<sp/>&lt;=<sp/>1300)</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>STLport<sp/>thinks<sp/>there<sp/>is<sp/>no<sp/>wchar_t<sp/>at<sp/>all,<sp/>then<sp/>we<sp/>have<sp/>to<sp/>disable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>support<sp/>for<sp/>the<sp/>relevant<sp/>specilazations<sp/>of<sp/>std::<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_STLP_HAS_WCHAR_T)<sp/>&amp;&amp;<sp/>!defined(_STLP_WCHAR_T_IS_USHORT)</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/><sp/>BOOST_NO_STD_WSTRING</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_WSTRING</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/><sp/>BOOST_NO_STD_WSTREAMBUF</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_WSTREAMBUF</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>always<sp/>have<sp/>SGI<sp/>style<sp/>hash_set,<sp/>hash_map,<sp/>and<sp/>slist:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_STLP_NO_EXTENSIONS</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_HAS_HASH</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_HAS_SLIST</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STLport<sp/>does<sp/>a<sp/>good<sp/>job<sp/>of<sp/>importing<sp/>names<sp/>into<sp/>namespace<sp/>std::,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>doesn&apos;t<sp/>always<sp/>get<sp/>them<sp/>all,<sp/>define<sp/>BOOST_NO_STDC_NAMESPACE,<sp/>since<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>workaround<sp/>does<sp/>not<sp/>conflict<sp/>with<sp/>STLports:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Harold<sp/>Howe<sp/>says:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Borland<sp/>switched<sp/>to<sp/>STLport<sp/>in<sp/>BCB6.<sp/>Defining<sp/>BOOST_NO_STDC_NAMESPACE<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BCB6<sp/>does<sp/>cause<sp/>problems.<sp/>If<sp/>we<sp/>detect<sp/>C++<sp/>Builder,<sp/>then<sp/>don&apos;t<sp/>define<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_NO_STDC_NAMESPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__BORLANDC__)<sp/>&amp;&amp;<sp/>!defined(__DMC__)</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>STLport<sp/>is<sp/>using<sp/>it&apos;s<sp/>own<sp/>namespace,<sp/>and<sp/>the<sp/>real<sp/>names<sp/>are<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>global<sp/>namespace,<sp/>then<sp/>we<sp/>duplicate<sp/>STLport&apos;s<sp/>using<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(by<sp/>defining<sp/>BOOST_NO_STDC_NAMESPACE),<sp/>we<sp/>do<sp/>this<sp/>because<sp/>STLport<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessarily<sp/>import<sp/>all<sp/>the<sp/>names<sp/>we<sp/>need<sp/>into<sp/>namespace<sp/>std::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(defined(__STL_IMPORT_VENDOR_CSTD)<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(__STL_USE_OWN_NAMESPACE)<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(_STLP_IMPORT_VENDOR_CSTD)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(_STLP_USE_OWN_NAMESPACE))<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(defined(__STL_VENDOR_GLOBAL_CSTD)<sp/>||<sp/>defined<sp/>(_STLP_VENDOR_GLOBAL_CSTD))</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STDC_NAMESPACE</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_EXCEPTION_STD_NAMESPACE</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__BORLANDC__)<sp/>&amp;&amp;<sp/>__BORLANDC__<sp/>&lt;<sp/>0x560</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>STLport<sp/>doesn&apos;t<sp/>import<sp/>std::abs<sp/>correctly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{<sp/><ref refid="group__TaskModelFloatArith_1ga145d954fbf9194d03bc87f591cc1eac1" kindref="member">using ::abs</ref>;<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>strcmp/strcpy<sp/>don&apos;t<sp/>get<sp/>imported<sp/>either<sp/>(&apos;cos<sp/>they<sp/>are<sp/>macros)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>strcpy</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>strcpy</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>strcmp</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>strcmp</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_STLP_VENDOR_CSTD</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_STLP_VENDOR_CSTD::strcmp;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_STLP_VENDOR_CSTD::strcpy;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::use_facet<sp/>may<sp/>be<sp/>non-standard,<sp/>uses<sp/>a<sp/>class<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__STL_NO_EXPLICIT_FUNCTION_TMPL_ARGS)<sp/>||<sp/>defined(_STLP_NO_EXPLICIT_FUNCTION_TMPL_ARGS)</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_USE_FACET</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_STLP_USE_FACET</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>STLport<sp/>thinks<sp/>there<sp/>are<sp/>no<sp/>wide<sp/>functions,<sp/>&lt;cwchar&gt;<sp/>etc.<sp/>is<sp/>not<sp/>working;<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>if<sp/>BOOST_NO_STDC_NAMESPACE<sp/>is<sp/>not<sp/>defined<sp/>(if<sp/>it<sp/>is<sp/>then<sp/>we<sp/>do<sp/>the<sp/>import<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>into<sp/>std::<sp/>ourselves).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_STLP_NO_NATIVE_WIDE_FUNCTIONS)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STDC_NAMESPACE)</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_CWCHAR</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_CWCTYPE</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>STLport<sp/>for<sp/>some<sp/>reason<sp/>was<sp/>configured<sp/>so<sp/>that<sp/>it<sp/>thinks<sp/>that<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>an<sp/>intrinsic<sp/>type,<sp/>then<sp/>we<sp/>have<sp/>to<sp/>disable<sp/>the<sp/>support<sp/>for<sp/>it<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>well<sp/>(we<sp/>would<sp/>be<sp/>missing<sp/>required<sp/>specializations<sp/>otherwise).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>_STLP_HAS_WCHAR_T)<sp/>||<sp/>defined(_STLP_WCHAR_T_IS_USHORT)</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Borland<sp/>ships<sp/>a<sp/>version<sp/>of<sp/>STLport<sp/>with<sp/>C++<sp/>Builder<sp/>6<sp/>that<sp/>lacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hashtables<sp/>and<sp/>the<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)<sp/>&amp;&amp;<sp/>(__BORLANDC__<sp/>==<sp/>0x560)</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_HASH</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gcc-2.95.3/STLPort<sp/>does<sp/>not<sp/>like<sp/>the<sp/>using<sp/>declarations<sp/>we<sp/>use<sp/>to<sp/>get<sp/>ADL<sp/>with<sp/>std::min/max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::min<sp/>and<sp/>std::max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_USING_STD_MIN()<sp/>((void)0)</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_USING_STD_MAX()<sp/>((void)0)</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">std::min</ref>;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">std::max</ref>;<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>C++0x<sp/>headers<sp/>not<sp/>yet<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_ARRAY</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_CHRONO</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_CODECVT</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_CONDITION_VARIABLE</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_FORWARD_LIST</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_FUTURE</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_INITIALIZER_LIST</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_MUTEX</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_RANDOM</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_RATIO</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_REGEX</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_SYSTEM_ERROR</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_THREAD</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_TUPLE</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_TYPE_TRAITS</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_TYPEINDEX</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_STD_UNORDERED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>deprecated;<sp/>see<sp/>following</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_UNORDERED_MAP</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_UNORDERED_SET</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_NUMERIC_LIMITS_LOWEST</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_STDLIB<sp/>&quot;STLPort<sp/>standard<sp/>library<sp/>version<sp/>&quot;<sp/>BOOST_STRINGIZE(__SGI_STL_PORT)</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/config/stdlib/stlport.hpp"/>
  </compounddef>
</doxygen>
