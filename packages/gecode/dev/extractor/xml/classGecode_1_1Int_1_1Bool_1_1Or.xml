<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1Bool_1_1Or" kind="class" prot="public">
    <compoundname>Gecode::Int::Bool::Or</compoundname>
    <basecompoundref refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary" prot="public" virt="non-virtual">Gecode::Int::Bool::BoolTernary&lt; BVA, BVB, BVC &gt;</basecompoundref>
    <includes refid="bool_8hh" local="no">bool.hh</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>BVA</declname>
        <defname>BVA</defname>
      </param>
      <param>
        <type>class</type>
        <declname>BVB</declname>
        <defname>BVB</defname>
      </param>
      <param>
        <type>class</type>
        <declname>BVC</declname>
        <defname>BVC</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1ad6079f3ea12728d9bc114069caddeea2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::Or</definition>
        <argsstring>(Home home, BVA b0, BVB b1, BVC b2)</argsstring>
        <name>Or</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>BVC</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Constructor for posting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="334" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="465" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1a32e9a76e9633a2edeedbd92309d459d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::Or</definition>
        <argsstring>(Space &amp;home, bool share, Or &amp;p)</argsstring>
        <name>Or</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1Bool_1_1Or" kindref="compound">Or</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="336" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="470" bodyend="471"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1a9c08a3eb7e74fbaf92263d087ea7aa9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::Or</definition>
        <argsstring>(Space &amp;home, bool share, Propagator &amp;p, BVA b0, BVB b1, BVC b2)</argsstring>
        <name>Or</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>BVC</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Constructor for rewriting <emphasis>p</emphasis> during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="339" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1a695150661e9466e92560f3a5d2632157" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGecode_1_1Actor" kindref="compound">Actor</ref> *</type>
        <definition>Actor * Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>copy</name>
        <reimplements refid="classGecode_1_1Actor_1a67b240e2810720846c3632c94cc9c99d">copy</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Copy propagator during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="341" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="481" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1a1a406988ad9916d41fb419e66f38d24a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::propagate</definition>
        <argsstring>(Space &amp;home, const ModEventDelta &amp;med)</argsstring>
        <name>propagate</name>
        <reimplements refid="classGecode_1_1Propagator_1ad2dc98c1345222892592339948c6cde1">propagate</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref> &amp;</type>
          <declname>med</declname>
        </param>
        <briefdescription>
<para>Perform propagation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="343" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="530" bodyend="608"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Or_1ad79374177c87f34c6e8f5a9e57ef4f80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;::post</definition>
        <argsstring>(Home home, BVA b0, BVB b1, BVC b2)</argsstring>
        <name>post</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>BVC</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Post propagator <formula id="105">$ b_0 \lor b_1 = b_2 $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="345" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="498" bodyend="526"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boolean disjunction propagator. </para>    </briefdescription>
    <detaileddescription>
<para>Requires<programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;gecode/int/bool.hh&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="5011">
        <label>Gecode::Int::Bool::BoolTernary&lt; BVA, BVB, BVC &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary"/>
        <childnode refid="5012" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5012">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="5013" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5010">
        <label>Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1Or"/>
        <childnode refid="5011" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5013">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="5014" relation="private-inheritance">
        </childnode>
      </node>
      <node id="5014">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5016">
        <label>Gecode::Int::Bool::BoolTernary&lt; BVA, BVB, BVC &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary"/>
        <childnode refid="5017" relation="public-inheritance">
        </childnode>
        <childnode refid="5020" relation="usage">
          <edgelabel>x0</edgelabel>
        </childnode>
        <childnode refid="5021" relation="usage">
          <edgelabel>x1</edgelabel>
        </childnode>
      </node>
      <node id="5020">
        <label>BVA</label>
      </node>
      <node id="5021">
        <label>BVB</label>
      </node>
      <node id="5017">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="5018" relation="public-inheritance">
        </childnode>
        <childnode refid="5019" relation="usage">
          <edgelabel>advisors</edgelabel>
        </childnode>
      </node>
      <node id="5015">
        <label>Gecode::Int::Bool::Or&lt; BVA, BVB, BVC &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1Or"/>
        <childnode refid="5016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5018">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="5019" relation="private-inheritance">
        </childnode>
      </node>
      <node id="5019">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/bool.hh" line="328" column="1" bodyfile="/usr/include/gecode/int/bool.hh" bodystart="328" bodyend="346"/>
    <listofallmembers>
      <member refid="classGecode_1_1Propagator_1a55629f061a0fd8ecb2a4c41aa1568e28" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Or</scope><name>advise</name></member>
      <member refid="classGecode_1_1Propagator_1afee33d8aed2bc9debee126f17b5015cf" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>advisors</name></member>
      <member refid="classGecode_1_1Propagator_1a593de773d2204f47ea365a99df2f75d0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>afc</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1aab0e750e139705d551c3b0026af631dc" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>BoolTernary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1af6c4ca4d150406d3fa5d7a64bace65c6" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>BoolTernary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1ae6281354820da8d2d2b1d5997f84b976" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>BoolTernary</name></member>
      <member refid="classGecode_1_1ActorLink_1a8427f41a27a72b52ceb52d0fdad21063" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::Or</scope><name>cast</name></member>
      <member refid="classGecode_1_1ActorLink_1a464526456db41981f82a1193a8b4e569" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::Or</scope><name>cast</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1a695150661e9466e92560f3a5d2632157" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Or</scope><name>copy</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1a68f212f6021f64a332d190b59324a84a" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Or</scope><name>cost</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1a81b3d6c8603e2d264c16cc13140ce7a7" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Or</scope><name>dispose</name></member>
      <member refid="classGecode_1_1Propagator_1a3b286c7aec9843b60a531b495015b5f7" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>fwd</name></member>
      <member refid="classGecode_1_1Propagator_1ae9dfa55e47e4ff8e0c8e4c2a6efdbfc0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>med</name></member>
      <member refid="classGecode_1_1Propagator_1a4905db55af49af8f38558bdbcf5fd4a2" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>modeventdelta</name></member>
      <member refid="classGecode_1_1Actor_1a388f671145dcf906f81d22bde2dc0f3d" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Actor_1ac28b9601b530076a1bda75834487f898" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>operator new</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1ad6079f3ea12728d9bc114069caddeea2" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>Or</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1a32e9a76e9633a2edeedbd92309d459d0" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>Or</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1a9c08a3eb7e74fbaf92263d087ea7aa9b" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>Or</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1ad79374177c87f34c6e8f5a9e57ef4f80" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>post</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Or_1a1a406988ad9916d41fb419e66f38d24a" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Or</scope><name>propagate</name></member>
      <member refid="classGecode_1_1Propagator_1a891f3e84cde2e8e60f8ad9340ad74b05" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1afeaeed8dae67de4313858bd82fdae5d0" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1a1781b5b0df38c39dddca4b44c3a00530" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>size</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1a4277e07dde9220d66f1e8020272005f2" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>x0</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1a41e5314bc2439a4d7435e3abbf8b7272" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>x1</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolTernary_1a5839b72f6a28d6717773b8a69dd10695" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Or</scope><name>x2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
