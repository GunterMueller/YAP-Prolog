<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceGecode_1_1Support" kind="namespace">
    <compoundname>Gecode::Support</compoundname>
    <innerclass refid="classGecode_1_1Support_1_1BitSetData" prot="public">Gecode::Support::BitSetData</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1BitSetBase" prot="public">Gecode::Support::BitSetBase</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1BitSetOffset" prot="public">Gecode::Support::BitSetOffset</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1BitSet" prot="public">Gecode::Support::BitSet</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1BlockAllocator" prot="public">Gecode::Support::BlockAllocator</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1BlockClient" prot="public">Gecode::Support::BlockClient</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1DynamicArray" prot="public">Gecode::Support::DynamicArray</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1DynamicQueue" prot="public">Gecode::Support::DynamicQueue</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1DynamicStack" prot="public">Gecode::Support::DynamicStack</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits" prot="public">Gecode::Support::IntTypeTraits</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01signed_01char_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; signed char &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01unsigned_01char_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; unsigned char &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01signed_01short_01int_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; signed short int &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01unsigned_01short_01int_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; unsigned short int &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01signed_01int_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; signed int &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1IntTypeTraits_3_01unsigned_01int_01_4" prot="public">Gecode::Support::IntTypeTraits&lt; unsigned int &gt;</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1LinearCongruentialGenerator" prot="public">Gecode::Support::LinearCongruentialGenerator</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1QuickSortStack" prot="public">Gecode::Support::QuickSortStack</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Less" prot="public">Gecode::Support::Less</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1StaticStack" prot="public">Gecode::Support::StaticStack</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Mutex" prot="public">Gecode::Support::Mutex</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Lock" prot="public">Gecode::Support::Lock</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Event" prot="public">Gecode::Support::Event</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Runnable" prot="public">Gecode::Support::Runnable</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Thread" prot="public">Gecode::Support::Thread</innerclass>
    <innerclass refid="classGecode_1_1Support_1_1Timer" prot="public">Gecode::Support::Timer</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceGecode_1_1Support_1a60e97c4d0da78774fa00500b557e50c4" prot="public" static="no">
        <name>BitSetStatus</name>
        <enumvalue id="namespaceGecode_1_1Support_1a60e97c4d0da78774fa00500b557e50c4a3472d380224555d667a573ddd992645b" prot="public">
          <name>BSS_NONE</name>
          <briefdescription>
<para>No bits set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1_1Support_1a60e97c4d0da78774fa00500b557e50c4a9236421c5bd5de3bcbd628487c5a6570" prot="public">
          <name>BSS_ALL</name>
          <briefdescription>
<para>All bits set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1_1Support_1a60e97c4d0da78774fa00500b557e50c4a96ac9a16b70601b236b83ede29eb073d" prot="public">
          <name>BSS_SOME</name>
          <briefdescription>
<para>Some but not all bits set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status of a bitset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/bitset-base.hpp" line="106" column="1" bodyfile="/usr/include/gecode/support/bitset-base.hpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1_1Support_1af857b3cdf87a25584809b528b781c118" prot="public" static="no">
        <name>IntType</name>
        <enumvalue id="namespaceGecode_1_1Support_1af857b3cdf87a25584809b528b781c118a74d1ad14e809b0929a9f881851408be5" prot="public">
          <name>IT_CHAR</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>char integer type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1_1Support_1af857b3cdf87a25584809b528b781c118afa63afd836e905d51a7531c68cff71e7" prot="public">
          <name>IT_SHRT</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>short integer type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1_1Support_1af857b3cdf87a25584809b528b781c118ab7235f3d88e352014b61ea95db591817" prot="public">
          <name>IT_INT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>integer type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Description of integer types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/int-type.hpp" line="43" column="1" bodyfile="/usr/include/gecode/support/int-type.hpp" bodystart="43" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceGecode_1_1Support_1a02fe942f90a57a25639f09960dab4459" prot="public" static="no">
        <type><ref refid="classGecode_1_1Support_1_1LinearCongruentialGenerator" kindref="compound">LinearCongruentialGenerator</ref>&lt; 2147483647, 48271, 44488, 3399 &gt;</type>
        <definition>typedef LinearCongruentialGenerator&lt;2147483647, 48271, 44488, 3399&gt; Gecode::Support::RandomGenerator</definition>
        <argsstring></argsstring>
        <name>RandomGenerator</name>
        <briefdescription>
<para>Default values for linear congruential generator. </para>        </briefdescription>
        <detaileddescription>
<para>While this pseudo-random number generator is not a good source of randomness, it is still an acceptable choice for many applications. The choice of values is taken from D. E. Knuth, The Art of Computer Programming, Vol 2, Seminumerical Algorithms, 3rd edition. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/random.hpp" line="124" column="1" bodyfile="/usr/include/gecode/support/random.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1_1Support_1ae36558682637304c4e8f58411b802606" prot="public" static="no">
        <type><ref refid="classGecode_1_1Support_1_1Mutex" kindref="compound">Mutex</ref></type>
        <definition>typedef Mutex Gecode::Support::FastMutex</definition>
        <argsstring></argsstring>
        <name>FastMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/thread.hpp" line="133" column="1" bodyfile="/usr/include/gecode/support/thread.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceGecode_1_1Support_1a58ccfa1943d2e427867068d1b46c9e87" prot="public" static="no" mutable="no">
        <type>int const</type>
        <definition>int const Gecode::Support::QuickSortCutoff</definition>
        <argsstring></argsstring>
        <name>QuickSortCutoff</name>
        <initializer>= 20</initializer>
        <briefdescription>
<para>Perform quicksort only for more elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="51" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a679838235d798af6194fd818d74bf857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::Support::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const BitSetOffset&lt; A &gt; &amp;bs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Support_1_1BitSetOffset" kindref="compound">BitSetOffset</ref>&lt; A &gt; &amp;</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/bitset-offset.hpp" line="141" column="1" bodyfile="/usr/include/gecode/support/bitset-offset.hpp" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a364f939158266c4cb7c0800f8622b5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SUPPORT_EXPORT unsigned int</type>
        <definition>GECODE_SUPPORT_EXPORT unsigned int Gecode::Support::hwrnd</definition>
        <argsstring>(void)</argsstring>
        <name>hwrnd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return hardware generated random number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/hw-rnd.hpp" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1ad4b4a99331fbe8e0b5df3ae746223398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntType</type>
        <definition>forceinline IntType Gecode::Support::u_type</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>u_type</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return type required to represent <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/int-type.hpp" line="50" column="1" bodyfile="/usr/include/gecode/support/int-type.hpp" bodystart="151" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1adb317a8070d304a8be8195957d93a41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntType</type>
        <definition>IntType Gecode::Support::s_type</definition>
        <argsstring>(signed int n)</argsstring>
        <name>s_type</name>
        <param>
          <type>signed int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return type required to represent <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/int-type.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1adf7fb01fa732fbe583061b7428fa7928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline IntType</type>
        <definition>forceinline IntType Gecode::Support::s_type</definition>
        <argsstring>(int n)</argsstring>
        <name>s_type</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/int-type.hpp" line="161" column="1" bodyfile="/usr/include/gecode/support/int-type.hpp" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1ab3739c95d015c387055cfb7415d437f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Support::marked</definition>
        <argsstring>(void *p)</argsstring>
        <name>marked</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check whether <emphasis>p</emphasis> is marked. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/marked-pointer.hpp" line="43" column="1" bodyfile="/usr/include/gecode/support/marked-pointer.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1aadbd68c17a2ed700074f81d7e6426038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Support::mark</definition>
        <argsstring>(void *p)</argsstring>
        <name>mark</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return marked pointer for <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/marked-pointer.hpp" line="45" column="1" bodyfile="/usr/include/gecode/support/marked-pointer.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a01a9e438263d6dcf22a1abd66a220423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Support::unmark</definition>
        <argsstring>(void *p)</argsstring>
        <name>unmark</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return unmarked pointer for a marked pointer <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/marked-pointer.hpp" line="47" column="1" bodyfile="/usr/include/gecode/support/marked-pointer.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a2445e40108a3fc916298b43f2584181e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Support::fmark</definition>
        <argsstring>(void *p)</argsstring>
        <name>fmark</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return marked pointer for <emphasis>p</emphasis> (possibly already marked) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/marked-pointer.hpp" line="49" column="1" bodyfile="/usr/include/gecode/support/marked-pointer.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1ad05727ae036b75ada57b6562a9267abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Support::funmark</definition>
        <argsstring>(void *p)</argsstring>
        <name>funmark</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return unmarked pointer for a possibly marked pointer <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/marked-pointer.hpp" line="51" column="1" bodyfile="/usr/include/gecode/support/marked-pointer.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1ae52232016c0e4efa95a9bfe9e9dcc0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::exchange</definition>
        <argsstring>(Type &amp;a, Type &amp;b, Less &amp;less)</argsstring>
        <name>exchange</name>
        <param>
          <type>Type &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Type &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>less</declname>
        </param>
        <briefdescription>
<para>Exchange elements according to order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="46" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a5c38184b3beae24c0e95419489f1cc29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::insertion</definition>
        <argsstring>(Type *l, Type *r, Less &amp;less)</argsstring>
        <name>insertion</name>
        <param>
          <type>Type *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>less</declname>
        </param>
        <briefdescription>
<para>Standard insertion sort. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="101" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a20099ad7328dcc83131f71e459ae4b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>forceinline Type *</type>
        <definition>forceinline Type* Gecode::Support::partition</definition>
        <argsstring>(Type *l, Type *r, Less &amp;less)</argsstring>
        <name>partition</name>
        <param>
          <type>Type *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>less</declname>
        </param>
        <briefdescription>
<para>Standard partioning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="117" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="117" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a272bbf3276d7f1b73d08f67b297246b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gecode::Support::quicksort</definition>
        <argsstring>(Type *l, Type *r, Less &amp;less)</argsstring>
        <name>quicksort</name>
        <param>
          <type>Type *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>less</declname>
        </param>
        <briefdescription>
<para>Standard quick sort. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="134" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="134" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a56bd8334f0a1b9e427b9cf81442432b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::insertion</definition>
        <argsstring>(Type *x, int n, Less &amp;l)</argsstring>
        <name>insertion</name>
        <param>
          <type>Type *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Insertion sort. </para>        </briefdescription>
        <detaileddescription>
<para>Sorts by insertion the <emphasis>n</emphasis> first elements of array <emphasis>x</emphasis> according to the order <emphasis>l</emphasis> as instance of class <emphasis><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref></emphasis>. The class <emphasis><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref></emphasis> must implement the single member function <programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;)<sp/></highlight></codeline>
</programlisting> for comparing elements. Note that the order must be strict, that is: comparing an element with itself must return false.</para><para>The algorithm is largely based on the following book: Robert Sedgewick, Algorithms in C++, 3rd edition, 1998, Addison Wesley. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="189" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a595585d4756d8d8e9db1568a1ddcefc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::insertion</definition>
        <argsstring>(Type *x, int n)</argsstring>
        <name>insertion</name>
        <param>
          <type>Type *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Insertion sort. </para>        </briefdescription>
        <detaileddescription>
<para>Sorts by insertion the <emphasis>n</emphasis> first elements of array <emphasis>x</emphasis> according to the order <emphasis>&lt;</emphasis>.</para><para>The algorithm is largely based on the following book: Robert Sedgewick, Algorithms in C++, 3rd edition, 1998, Addison Wesley. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="209" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="209" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a98357934e4788f334cde10dad71afa2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::quicksort</definition>
        <argsstring>(Type *x, int n, Less &amp;l)</argsstring>
        <name>quicksort</name>
        <param>
          <type>Type *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Quicksort. </para>        </briefdescription>
        <detaileddescription>
<para>Sorts with quicksort the <emphasis>n</emphasis> first elements of array <emphasis>x</emphasis> according to the order <emphasis>l</emphasis> as instance of class <emphasis><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref></emphasis>. The class <emphasis><ref refid="classGecode_1_1Support_1_1Less" kindref="compound">Less</ref></emphasis> must implement the single member function <programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;)<sp/></highlight></codeline>
</programlisting> for comparing elements. Note that the order must be strict, that is: comparing an element with itself must return false.</para><para>The algorithm is largely based on the following book: Robert Sedgewick, Algorithms in C++, 3rd edition, 1998, Addison Wesley. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="234" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Support_1a3f0e9d5e5c8d8bdbed38cd23aaf1f40a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>forceinline void</type>
        <definition>forceinline void Gecode::Support::quicksort</definition>
        <argsstring>(Type *x, int n)</argsstring>
        <name>quicksort</name>
        <param>
          <type>Type *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Quicksort. </para>        </briefdescription>
        <detaileddescription>
<para>Sorts with quicksort the <emphasis>n</emphasis> first elements of array <emphasis>x</emphasis> according to the order <emphasis>&lt;</emphasis>.</para><para>The algorithm is largely based on the following book: Robert Sedgewick, Algorithms in C++, 3rd edition, 1998, Addison Wesley. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/sort.hpp" line="256" column="1" bodyfile="/usr/include/gecode/support/sort.hpp" bodystart="256" bodyend="264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/support/bitset-base.hpp" line="60" column="1"/>
  </compounddef>
</doxygen>
