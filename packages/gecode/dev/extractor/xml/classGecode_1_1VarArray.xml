<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1VarArray" kind="class" prot="public">
    <compoundname>Gecode::VarArray</compoundname>
    <includes refid="kernel_2array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Var</declname>
        <defname>Var</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Associated types</header>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1a832c744123e7d9fc0d1d0ce0cf3e4efb" prot="public" static="no">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref></type>
        <definition>typedef Var Gecode::VarArray&lt; Var &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Type of the variable stored in this array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="96" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1aa2b3ffc5da170d3af5973627f9040c62" prot="public" static="no">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
        <definition>typedef Var&amp; Gecode::VarArray&lt; Var &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Type of a reference to the value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="98" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1a36e7c81b7bcd3fb1b28c780caa17641d" prot="public" static="no">
        <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
        <definition>typedef const Var&amp; Gecode::VarArray&lt; Var &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Type of a constant reference to the value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="100" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1a9a4e54d0650597e70375809c82f7dc62" prot="public" static="no">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref> *</type>
        <definition>typedef Var* Gecode::VarArray&lt; Var &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Type of a pointer to the value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="102" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1ae4bfae3bf7f27951b53706a34627b539" prot="public" static="no">
        <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> *</type>
        <definition>typedef const Var* Gecode::VarArray&lt; Var &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Type of a read-only pointer to the value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="104" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1af066a140fe9aba9e239b5aa3699df4e0" prot="public" static="no">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref> *</type>
        <definition>typedef Var* Gecode::VarArray&lt; Var &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Type of the iterator used to iterate through this array&apos;s elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="106" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1a94809a3d551846433b0a85fd40db512e" prot="public" static="no">
        <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> *</type>
        <definition>typedef const Var* Gecode::VarArray&lt; Var &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Type of the iterator used to iterate read-only through this array&apos;s elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="108" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1a6e0db2dc6d3d548f5569720373ab030a" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> * &gt;</type>
        <definition>typedef std::reverse_iterator&lt;Var*&gt; Gecode::VarArray&lt; Var &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>Type of the iterator used to iterate backwards through this array&apos;s elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="110" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGecode_1_1VarArray_1aa3596ebfe2a624dabab6972da579c1cb" prot="public" static="no">
        <type>std::reverse_iterator&lt; const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> * &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const Var*&gt; Gecode::VarArray&lt; Var &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>Type of the iterator used to iterate backwards and read-only through this array&apos;s elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="112" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors and initialization</header>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a241ce7da828c64cab3b6b01c674a338a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarArray&lt; Var &gt;::VarArray</definition>
        <argsstring>(void)</argsstring>
        <name>VarArray</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor (array of size 0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="119" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="960" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ae32fbf0910e040ca3e3375eac765596f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarArray&lt; Var &gt;::VarArray</definition>
        <argsstring>(Space &amp;home, int m)</argsstring>
        <name>VarArray</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Allocate array with <emphasis>m</emphasis> variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="121" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="964" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ab62e77e0e2e2ea0e961cbb0b23fdff84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gecode::VarArray&lt; Var &gt;::VarArray</definition>
        <argsstring>(Space &amp;home, const VarArgArray&lt; Var &gt; &amp;)</argsstring>
        <name>VarArray</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Initialize from variable argument array <emphasis>a</emphasis> (copy elements) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="123" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2149" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ae969175e5545323fc99de65912a9a73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::VarArray&lt; Var &gt;::VarArray</definition>
        <argsstring>(const VarArray&lt; Var &gt; &amp;a)</argsstring>
        <name>VarArray</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Initialize from variable array <emphasis>a</emphasis> (share elements) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="125" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="972" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a4fed680f83a05790658a9b3a660c4c08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        <definition>const VarArray&lt; Var &gt; &amp; Gecode::VarArray&lt; Var &gt;::operator=</definition>
        <argsstring>(const VarArray&lt; Var &gt; &amp;a)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Initialize from variable array <emphasis>a</emphasis> (share elements) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="127" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="978" bodyend="981"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Array size</header>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a3cf80c58c32609c61de4c90605413fd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::VarArray&lt; Var &gt;::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size of array (number of elements) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="133" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="985" bodyend="987"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Array elements</header>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ace08813160ef06e0f1bbb3c30c200da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
        <definition>forceinline Var &amp; Gecode::VarArray&lt; Var &gt;::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return variable at position <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="139" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="991" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1af593147a24272627350513e305d79779" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
        <definition>forceinline const Var &amp; Gecode::VarArray&lt; Var &gt;::operator[]</definition>
        <argsstring>(int i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return variable at position <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="141" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="998" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a53b8648af92da9632e399e290e4c0d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArgArray&lt; Var &gt; &gt;::ArgsType Gecode::VarArray&lt; Var &gt;::slice</definition>
        <argsstring>(int start, int inc=1, int n=-1)</argsstring>
        <name>slice</name>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inc</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return slice <formula id="312">$y$</formula> of length at most <emphasis>n</emphasis> such that forall <formula id="313">$0\leq i&lt;n$</formula>, <formula id="314">$y_i=x_{\text{start}+i\cdot\text{inc}}$</formula></para><para>If <emphasis>n</emphasis> is -1, then all possible elements starting from <emphasis>start</emphasis> with increment <emphasis>inc</emphasis> are returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="148" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1005" bodyend="1020"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Array iteration</header>
      <memberdef kind="function" id="classGecode_1_1VarArray_1aa09c7045277614841a821b7e0636d44a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1af066a140fe9aba9e239b5aa3699df4e0" kindref="member">iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::iterator Gecode::VarArray&lt; Var &gt;::begin</definition>
        <argsstring>(void)</argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return an iterator at the beginning of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="154" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1024" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ad585be789f428414d4de84fdb4b2a1aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1a94809a3d551846433b0a85fd40db512e" kindref="member">const_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::const_iterator Gecode::VarArray&lt; Var &gt;::begin</definition>
        <argsstring>(void) const </argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a read-only iterator at the beginning of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="156" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1030" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1aa09a0d52ddd5a427e328f76b017a0e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1af066a140fe9aba9e239b5aa3699df4e0" kindref="member">iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::iterator Gecode::VarArray&lt; Var &gt;::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return an iterator past the end of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="158" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1036" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a197f67babbe8d7670fba55809a416cf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1a94809a3d551846433b0a85fd40db512e" kindref="member">const_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::const_iterator Gecode::VarArray&lt; Var &gt;::end</definition>
        <argsstring>(void) const </argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a read-only iterator past the end of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="160" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1042" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a6d94b11b3936df0b3548d4f9fd7cb318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1a6e0db2dc6d3d548f5569720373ab030a" kindref="member">reverse_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::reverse_iterator Gecode::VarArray&lt; Var &gt;::rbegin</definition>
        <argsstring>(void)</argsstring>
        <name>rbegin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a reverse iterator at the end of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="162" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1048" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1aa7c774d800efd0869edc7bfb5bdb530e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1aa3596ebfe2a624dabab6972da579c1cb" kindref="member">const_reverse_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::const_reverse_iterator Gecode::VarArray&lt; Var &gt;::rbegin</definition>
        <argsstring>(void) const </argsstring>
        <name>rbegin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a reverse and read-only iterator at the end of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="164" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1054" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a82d02915d20fad0b56a3aee26ca96b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1a6e0db2dc6d3d548f5569720373ab030a" kindref="member">reverse_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::reverse_iterator Gecode::VarArray&lt; Var &gt;::rend</definition>
        <argsstring>(void)</argsstring>
        <name>rend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a reverse iterator past the beginning of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="166" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1060" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a3d3e08149aae2f0428034fa0c40c4ff3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1VarArray_1aa3596ebfe2a624dabab6972da579c1cb" kindref="member">const_reverse_iterator</ref></type>
        <definition>forceinline VarArray&lt; Var &gt;::const_reverse_iterator Gecode::VarArray&lt; Var &gt;::rend</definition>
        <argsstring>(void) const </argsstring>
        <name>rend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a reverse and read-only iterator past the beginning of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="168" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1066" bodyend="1068"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning</header>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a807b3f987de58b67791872d6ec1e54a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarArray&lt; Var &gt;::update</definition>
        <argsstring>(Space &amp;, bool share, VarArray&lt; Var &gt; &amp;a)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <defname>home</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Update array to be a clone of array <emphasis>a</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>share</emphasis> is true, sharing is retained for all shared data structures. Otherwise, for each of them an independent copy is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="183" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1072" bodyend="1081"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1VarArray_1a67b64ccd287d53389a25ee43ad164ab6" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Gecode::VarArray&lt; Var &gt;::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
<para>Number of variables (size) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="89" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1VarArray_1ace04bdff621aba6ef39a063786092dfd" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Var" kindref="compound">Var</ref> *</type>
        <definition>Var* Gecode::VarArray&lt; Var &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>Array of variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="91" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1VarArray_1a42953c34d3d78772f3edbd55c5ce2768" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::VarArray&lt; Var &gt;::assigned</definition>
        <argsstring>(void) const </argsstring>
        <name>assigned</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if all variables are assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="172" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1085" bodyend="1090"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classGecode_1_1VarArray_1aa83b50df08ee08277316abe8b3714be2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::VarArray&lt; Var &gt;::operator new</definition>
        <argsstring>(size_t)</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="186" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1094" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1adcbdcbd7006b6cda1bd705cbf0bc6bd8" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::VarArray&lt; Var &gt;::operator delete</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="187" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1100" bodyend="1101"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classGecode_1_1VarArray_1a11a9ed8c82790c2e933e4f69b140def7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArray&lt; T &gt; &gt;::ArgsType operator+</definition>
        <argsstring>(const VarArray&lt; T &gt; &amp;x, const VarArgArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis> and return result </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1af31cf7eb48f0a575c7d22891e3580019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArray&lt; T &gt; &gt;::ArgsType operator+</definition>
        <argsstring>(const VarArray&lt; T &gt; &amp;x, const VarArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis> and return result </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ad4380a2de1d728eaf9eb9b2a6f453f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArray&lt; T &gt; &gt;::ArgsType operator+</definition>
        <argsstring>(const VarArgArray&lt; T &gt; &amp;x, const VarArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis> and return result </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1ae7eba5206bc008019c9204dcc209a259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArray&lt; T &gt; &gt;::ArgsType operator+</definition>
        <argsstring>(const VarArray&lt; T &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis> and return result </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a074db0e3b05ebcaae49075be8669abb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt; VarArray&lt; T &gt; &gt;::ArgsType operator+</definition>
        <argsstring>(const T &amp;x, const VarArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis> and return result </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1VarArray_1a52c9c6a326a4f0eb94dbf8de850b9277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class <ref refid="classGecode_1_1Var" kindref="compound">Var</ref></type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const VarArray&lt; Var &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Print array elements enclosed in curly brackets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="829" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2167" bodyend="2179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variable arrays </para>    </briefdescription>
    <detaileddescription>
<para>Variable arrays store variables. They are typically used for storing the variables being part of a solution.</para><para>Never use them for temporary purposes, use argument arrays instead.</para><para>Variable arrays can be enlarged dynamically. For memory efficiency, the initial array is allocated in the space. When adding variables, it is automatically resized and allocated on the heap. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="7632">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
      <node id="7631">
        <label>Gecode::VarArray&lt; Var &gt;</label>
        <link refid="classGecode_1_1VarArray"/>
        <childnode refid="7632" relation="usage">
          <edgelabel>x</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/kernel/array.hpp" line="52" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="52" bodyend="-1"/>
    <listofallmembers>
      <member refid="classGecode_1_1VarArray_1a42953c34d3d78772f3edbd55c5ce2768" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>assigned</name></member>
      <member refid="classGecode_1_1VarArray_1aa09c7045277614841a821b7e0636d44a" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>begin</name></member>
      <member refid="classGecode_1_1VarArray_1ad585be789f428414d4de84fdb4b2a1aa" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>begin</name></member>
      <member refid="classGecode_1_1VarArray_1a94809a3d551846433b0a85fd40db512e" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>const_iterator</name></member>
      <member refid="classGecode_1_1VarArray_1ae4bfae3bf7f27951b53706a34627b539" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>const_pointer</name></member>
      <member refid="classGecode_1_1VarArray_1a36e7c81b7bcd3fb1b28c780caa17641d" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>const_reference</name></member>
      <member refid="classGecode_1_1VarArray_1aa3596ebfe2a624dabab6972da579c1cb" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>const_reverse_iterator</name></member>
      <member refid="classGecode_1_1VarArray_1aa09a0d52ddd5a427e328f76b017a0e04" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>end</name></member>
      <member refid="classGecode_1_1VarArray_1a197f67babbe8d7670fba55809a416cf0" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>end</name></member>
      <member refid="classGecode_1_1VarArray_1af066a140fe9aba9e239b5aa3699df4e0" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>iterator</name></member>
      <member refid="classGecode_1_1VarArray_1a67b64ccd287d53389a25ee43ad164ab6" prot="protected" virt="non-virtual"><scope>Gecode::VarArray</scope><name>n</name></member>
      <member refid="classGecode_1_1VarArray_1adcbdcbd7006b6cda1bd705cbf0bc6bd8" prot="private" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1VarArray_1aa83b50df08ee08277316abe8b3714be2" prot="private" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator new</name></member>
      <member refid="classGecode_1_1VarArray_1a11a9ed8c82790c2e933e4f69b140def7" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator+</name></member>
      <member refid="classGecode_1_1VarArray_1af31cf7eb48f0a575c7d22891e3580019" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator+</name></member>
      <member refid="classGecode_1_1VarArray_1ad4380a2de1d728eaf9eb9b2a6f453f3f" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator+</name></member>
      <member refid="classGecode_1_1VarArray_1ae7eba5206bc008019c9204dcc209a259" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator+</name></member>
      <member refid="classGecode_1_1VarArray_1a074db0e3b05ebcaae49075be8669abb1" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator+</name></member>
      <member refid="classGecode_1_1VarArray_1a52c9c6a326a4f0eb94dbf8de850b9277" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1VarArray_1a4fed680f83a05790658a9b3a660c4c08" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator=</name></member>
      <member refid="classGecode_1_1VarArray_1ace08813160ef06e0f1bbb3c30c200da0" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator[]</name></member>
      <member refid="classGecode_1_1VarArray_1af593147a24272627350513e305d79779" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>operator[]</name></member>
      <member refid="classGecode_1_1VarArray_1a9a4e54d0650597e70375809c82f7dc62" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>pointer</name></member>
      <member refid="classGecode_1_1VarArray_1a6d94b11b3936df0b3548d4f9fd7cb318" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>rbegin</name></member>
      <member refid="classGecode_1_1VarArray_1aa7c774d800efd0869edc7bfb5bdb530e" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>rbegin</name></member>
      <member refid="classGecode_1_1VarArray_1aa2b3ffc5da170d3af5973627f9040c62" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>reference</name></member>
      <member refid="classGecode_1_1VarArray_1a82d02915d20fad0b56a3aee26ca96b56" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>rend</name></member>
      <member refid="classGecode_1_1VarArray_1a3d3e08149aae2f0428034fa0c40c4ff3" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>rend</name></member>
      <member refid="classGecode_1_1VarArray_1a6e0db2dc6d3d548f5569720373ab030a" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>reverse_iterator</name></member>
      <member refid="classGecode_1_1VarArray_1a3cf80c58c32609c61de4c90605413fd2" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>size</name></member>
      <member refid="classGecode_1_1VarArray_1a53b8648af92da9632e399e290e4c0d62" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>slice</name></member>
      <member refid="classGecode_1_1VarArray_1a807b3f987de58b67791872d6ec1e54a5" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>update</name></member>
      <member refid="classGecode_1_1VarArray_1a832c744123e7d9fc0d1d0ce0cf3e4efb" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>value_type</name></member>
      <member refid="classGecode_1_1VarArray_1a241ce7da828c64cab3b6b01c674a338a" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>VarArray</name></member>
      <member refid="classGecode_1_1VarArray_1ae32fbf0910e040ca3e3375eac765596f" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>VarArray</name></member>
      <member refid="classGecode_1_1VarArray_1ab62e77e0e2e2ea0e961cbb0b23fdff84" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>VarArray</name></member>
      <member refid="classGecode_1_1VarArray_1ae969175e5545323fc99de65912a9a73b" prot="public" virt="non-virtual"><scope>Gecode::VarArray</scope><name>VarArray</name></member>
      <member refid="classGecode_1_1VarArray_1ace04bdff621aba6ef39a063786092dfd" prot="protected" virt="non-virtual"><scope>Gecode::VarArray</scope><name>x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
