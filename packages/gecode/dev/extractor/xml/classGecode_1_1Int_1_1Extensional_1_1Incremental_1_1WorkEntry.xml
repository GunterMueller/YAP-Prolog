<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry" kind="class" prot="protected">
    <compoundname>Gecode::Int::Extensional::Incremental::WorkEntry</compoundname>
    <basecompoundref refid="classGecode_1_1FreeList" prot="public" virt="non-virtual">Gecode::FreeList</basecompoundref>
    <includes refid="extensional_8hh" local="no">extensional.hh</includes>
      <sectiondef kind="user-defined">
      <header>Constructor</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1ad9965515cca0c924e915a3a48e2a5fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::WorkEntry</definition>
        <argsstring>(int i, int n, WorkEntry *ne)</argsstring>
        <name>WorkEntry</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry" kindref="compound">WorkEntry</ref> *</type>
          <declname>ne</declname>
        </param>
        <briefdescription>
<para>Initialize with position <emphasis>i</emphasis>, value <emphasis>n</emphasis>, and next entry <emphasis>ne</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="400" column="1" bodyfile="/usr/include/gecode/int/extensional/incremental.hpp" bodystart="131" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Linkage access</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a82c3ca45aa1aa1e8e209fd66dc211d8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry" kindref="compound">WorkEntry</ref> *</type>
        <definition>WorkEntry* Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::next</definition>
        <argsstring>(void) const </argsstring>
        <name>next</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return next work entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1af583aa96ca2e128a711d42c75bb46cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::next</definition>
        <argsstring>(WorkEntry *n)</argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry" kindref="compound">WorkEntry</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> next work entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="408" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory management</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1ae61d6d3285e92ab34cc51dbb3c3beca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::dispose</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>dispose</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Free memory for this element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="414" column="1" bodyfile="/usr/include/gecode/int/extensional/incremental.hpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a6a55c3377522bf3bccb4c9d991868af9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::operator new</definition>
        <argsstring>(size_t s, Space &amp;home)</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Allocate memory from space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="417" column="1" bodyfile="/usr/include/gecode/int/extensional/incremental.hpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a10f6c978094aad6c93c8ed4ffd2c489f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::operator delete</definition>
        <argsstring>(void *p)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>No-op (for exceptions) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a251b406a5640b6e09150c784eaf566f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::operator delete</definition>
        <argsstring>(void *p, Space &amp;home)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>No-op (use dispose instead) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="421" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1aa8eeea5fbfe0f30dfd3bbbaed1f09a4b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <briefdescription>
<para>Position of view in view array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="393" column="1" bodyfile="/usr/include/gecode/int/extensional.hh" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a11b25a435b9a749b354f614a50330655" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
<para>Value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional.hh" line="395" column="1" bodyfile="/usr/include/gecode/int/extensional.hh" bodystart="395" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Description of work to be done. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="8087">
        <label>Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry</label>
        <link refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry"/>
        <childnode refid="8088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8088">
        <label>Gecode::FreeList</label>
        <link refid="classGecode_1_1FreeList"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8089">
        <label>Gecode::Int::Extensional::Incremental&lt; View &gt;::WorkEntry</label>
        <link refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry"/>
        <childnode refid="8090" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8090">
        <label>Gecode::FreeList</label>
        <link refid="classGecode_1_1FreeList"/>
        <childnode refid="8090" relation="usage">
          <edgelabel>_next</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/extensional.hh" line="390" column="1" bodyfile="/usr/include/gecode/int/extensional.hh" bodystart="390" bodyend="423"/>
    <listofallmembers>
      <member refid="classGecode_1_1FreeList_1af9f8e4304c3b32d60120be64f51a6140" prot="protected" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>_next</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1ae61d6d3285e92ab34cc51dbb3c3beca3" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>dispose</name></member>
      <member refid="classGecode_1_1FreeList_1af1afc36981b813bf6aa84b9520692a23" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>FreeList</name></member>
      <member refid="classGecode_1_1FreeList_1a46875b41d67aa1429d1e16be296a496e" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>FreeList</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1aa8eeea5fbfe0f30dfd3bbbaed1f09a4b" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>i</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a11b25a435b9a749b354f614a50330655" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>n</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a82c3ca45aa1aa1e8e209fd66dc211d8d" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>next</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1af583aa96ca2e128a711d42c75bb46cfc" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>next</name></member>
      <member refid="classGecode_1_1FreeList_1a6bcae4b5f7a4e613622abc7b5387a23f" prot="public" virt="non-virtual" ambiguityscope="Gecode::FreeList::"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>next</name></member>
      <member refid="classGecode_1_1FreeList_1a9874d126df8911a0cd9c04d2bcb51e8f" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>nextRef</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a10f6c978094aad6c93c8ed4ffd2c489f" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a251b406a5640b6e09150c784eaf566f3" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1a6a55c3377522bf3bccb4c9d991868af9" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>operator new</name></member>
      <member refid="classGecode_1_1Int_1_1Extensional_1_1Incremental_1_1WorkEntry_1ad9965515cca0c924e915a3a48e2a5fbf" prot="public" virt="non-virtual"><scope>Gecode::Int::Extensional::Incremental::WorkEntry</scope><name>WorkEntry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
