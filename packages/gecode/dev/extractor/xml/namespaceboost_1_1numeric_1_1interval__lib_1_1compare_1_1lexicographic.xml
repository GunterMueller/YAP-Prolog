<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic" kind="namespace">
    <compoundname>boost::numeric::interval_lib::compare::lexicographic</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1aa90c67fe5a7be24e1ee20a9599963970" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="23" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a53a1cce10daf19fd0be7e7df5d565bc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="32" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a9141ed1c90bc644b3e6c50d0c5546fdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="39" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a52987f7195f859b34e490c40a880cb34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="48" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a8d1f36561394ec25753056ac13227120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="56" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a0016d3d8b7186ad8dfbbc06fd135685f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="65" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1af9a86a92d6fcb4d8fd5ee8c3214de1d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="73" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1acc6324d05299d57efa712e2d2b0299bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="82" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a5b868152bff7d47665c9feaf07b845a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator==</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="89" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a43cda97984a529f747d31362aafb6e35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator==</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="96" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a821a056b15a08bea765260668ff5c13d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="103" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1lexicographic_1a09bd668066006193981196878dacc81f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::lexicographic::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="110" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" bodystart="110" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/lexicographic.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
