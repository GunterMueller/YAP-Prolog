<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__TaskModelMiniModelLin" kind="group">
    <compoundname>TaskModelMiniModelLin</compoundname>
    <title>Linear expressions and relations</title>
    <innernamespace refid="namespaceGecode">Gecode</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3dae225cf80797e339ea88aeb334cddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga81405b7a69d427722a5b97e555fcceec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga91b624b3ece76bcb30f0ea8807a9805e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae17f3cb4c9b6011618511a384e0d6cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab241252d9d78c0b19685e8008c708b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6b82f7c6d2638ccb696cfa3bd7087c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1aac95f3d1b91f43f06a644d4d89dbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga37e5dea450fa3c2166afcaa12dc3fc5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaafce29b63d9d2786f49b7ea52ab03efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga4ef610b960f34664bbb3f802db84fd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga46680a2c0b67989b55abe6e81309305a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1b88d561373701be9ce30e33145adaee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga24ca047ee14bdef8dffb504a727e282d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga618d8549da20db2a3bafeff198064860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa345325d3284d8215d0c8657ed249338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8b0d6eeb08aa3c1dc771092d7ce1e5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaba60f87fbad9cd4b73f9aafed3a69df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8b3db39f8f55fe8f0d3704e33ce32339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf4ccef7f2f9be0204389277ca140b1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga0ef5fbba8cda61a8cb98d61403f9c722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga126f90b5f334d0ff41d39117c03d8dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf2e774826b69f7b30a7bfadd33a7820d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga70375f818b2c105622230c44a7b44410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab09fccb4be57b1e3d9d80c92aebfd11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8f4cdfa2e79f4be2fe2b51db037d3842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga660cb78a5ce60e6153426f32eb2fc6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga712ddfafbda4094cbcdddfe883fee898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6812c652b280b4c22aa793e46489c6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8135b2344654c0c0c4975d274aeefa92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5555668953625fb12954ee992ae0c9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaefbad399f175a74ffc0ca6b9214ff665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa79c152ae5275a993d4d12f888ba2cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gafa503423ac9ce8c1415519b24f6cb468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca3bb47a1cc9129b556c96ddd57ae19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga69e9172fbf900c0801897984d136e262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6a2b4157bc05dbe42b1fe0efdc56b31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const IntVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gade996ba9e2ddfeef3fb5067e5172428a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const BoolVar &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga51a54498dd755cca66d14f29a0affce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabf822d9aaf2b14dcb6ab7f42335257c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8c3d837827d68f719e11213e95da6db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5ce88d6690c43267eb0fde72386f5199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;a, const IntVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables with coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae3c3644c11666413e125f25ed9097717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const BoolVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabcf80a1683f15f44768a6cbaca441d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;a, const BoolVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables with coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab9c1bf702e1a015949533ca5c7c66f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntExpr</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;args)</argsstring>
        <name>sum</name>
        <param>
          <type>const IntArgs &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6095e71acafa0a71ff3b6c021cfa0ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3c175f84fc1271856eefee7ce8cb1f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa8e59cb4c76b2fc88cccf306b65ace7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca8ce091e769560b213a3c6a3863622b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga490b0aa18a1c7f047b8cadfb4362b832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac63f76b2737d70c4d5a729ab19057c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad60fd62890ee2d13254c6d0a17548681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacf4cc07a79aae7317b9c648e29e31658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa09f019cfcfcf0e7cdd1de0e7ca8e094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae92a5a3d14d3a46e502b793ffea2f2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7894c4050b5b30481e660561f24f5365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga82830f4faf7e4f5e62488445bb48e218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1dabc79475b6593bfd9b876a358c9a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7898414e7145e5ad1eea483724715e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga34418f44acb7d02b7b41b202087a002a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga64786781fae4ff3bc2d902c63cfaa04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad58241231aceb718408b31d6a5bb9ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga19372ceb837c77db23b8b92fb0e135f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8acba9e3c38f6b51c00737a2b8975135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga594f7fdc4cf5f07d16424bc7100c6a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga68359d8b2ca970c70f153674aa00a8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacf07e05e7022a2f08207249ef0bc3257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8332138b52a1d4073a7b110043115221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga176efabf56464e1ec8243df14bd02853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab6d5b87421bfafab8e8c518ce423fe1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga81e74e876468aec6fd1ad21195d92027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga20fe57567c767ba4d5879215a29168d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac0f0e3c5732d17e6a5773e5c248b3eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3efada6b029f8ec8dc08efcab4b89398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8585bba1d384902bc3e9e00fb0f0301c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6a1534f72acc0cc96c11dd5adfa83534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga38a9223929ca712dc1fb3599a3e25dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6710ded20bcf95b37a3d6c3ac1bf5143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga2847d4efe555533e33e9ef52c883e871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf3b69fd26f30d57f8898c98f5b778187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad2aedec8a5fe0079564f0437d8085992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga44a1173211573eeadd7478463354672e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1c92a7fea30b9bc042016db216446091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa0e56b70bba7eed3a43b295d96c8c043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad6657b81a14550a44bbc360ff52d5261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga605d526d50e6e094c50c510b3533a692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabf1a9345d847d18a777294fb4f3ee224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga822541836df96be52c3a9decab2f488f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae1ad119d597f7100da0a6e5c5de80fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga92d9d4356bc985064413bb7755b5a7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga456fbc4ed8d2bfba22e0a7008dbd6af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9f53aa1dcfb4ca9a6f7b479149f18f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6c17087ce2ae8f6caed800b89766e165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga29b38cca296cb92e0709f579bb3700e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga12f924f294026f82162d221084cc8bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaece7129a653e281373939768914050cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga86b3d42a885b02a53817c7fd7c68142d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga71bd656f1be70e73adea3e11329baf4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaeeaeecfa464794aeef95a8039ac64d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga47f28785fc5f505e2547e7da87517128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9e58b32ade3ea083ec80a0e55a828ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab7b351be8253c13256fd34f7f16024b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga08b4ffa67605679c4c192b168fb7df86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1b7b3c9ec069010727f66f31b3101652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga76808fc1200b20b7f97a875e8f4c9a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga2f20bafbf9ca125cf5be1404bc443ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa34decac86f7dd7db1fe93a76d1d8ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabfc4a91a38ef013b9762a7ab9cf6ff76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaec42e3df52fbe004d1650c25ad72c550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga35a670daaa7b3057a4894206d27e29c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca3303958ca8b4707ec89c3e3f380af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5e51836cbaf1582574a6aae0c4d4b24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga901084f0a8564c8a7a2addb724190ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga62a69f0c59ad3f6f0d56b32712c4f805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9c0b854ca41e9edf0c9ba836a2580aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga084848c2c35b1a25f31be640de1fc0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf407de2fdda2f23ed15210ced0722923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacea90ae01f6facb9dcd496bbc2c4e5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gadc5c10c56bcc834d79e00fd450bec24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7920566b0fe55112939a1bc8a7cc6df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaaf2c1688fe50735366b9df02278a9e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga14ef94ec043c291d62b30d64d4f4217b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5a5ef28b3056302dbbd2a0fed42f8dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga44cf58ddb63e6297c55a294c6bd7cb07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9a5c815bfcb00a0504c3146b30fc4511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga60f1b7fca1c015f32ce0c80d7697e3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac9bb0bc98537e6a7bcc26729ec830a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga54ff33662f68fc628ff9562992e55403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa28fd3fe6a771c5732f669bf5aed627b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga288cdccfe0e59e4607f6bea9c1ecc626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5a2efb5a816df398c8eaee13d1c84a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const IntVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga612cf829dda1861c0961521b050b1573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga56038c8a7b700d83a7ee1aabf4093a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const IntVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga452f7e76fd78fb0cbb4468078b7ca92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const BoolVar &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gadc0ee868de71454ee3cb6faa4c73ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT LinIntRel</type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const LinIntExpr &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="680" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Linear expressions can be freely composed of sums and differences of integer variables (<ref refid="classGecode_1_1IntVar" kindref="compound">Gecode::IntVar</ref>) or Boolean variables (<ref refid="classGecode_1_1BoolVar" kindref="compound">Gecode::BoolVar</ref>) possibly with integer coefficients and integer constants.</para><para>Note that both integer and Boolean variables are automatically available as linear expressions.</para><para>Linear relations are obtained from linear expressions with the normal relation operators. </para>    </detaileddescription>
  </compounddef>
</doxygen>
