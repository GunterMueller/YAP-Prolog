<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="transc_8hpp" kind="file">
    <compoundname>transc.hpp</compoundname>
    <includes refid="third-party_2boost_2config_8hpp" local="no">gecode/third-party/boost/config.hpp</includes>
    <includes refid="interval__prototype_8hpp" local="no">gecode/third-party/boost/numeric/interval/detail/interval_prototype.hpp</includes>
    <includes refid="bugs_8hpp" local="no">gecode/third-party/boost/numeric/interval/detail/bugs.hpp</includes>
    <includes refid="test__input_8hpp" local="no">gecode/third-party/boost/numeric/interval/detail/test_input.hpp</includes>
    <includes refid="third-party_2boost_2numeric_2interval_2rounding_8hpp" local="no">gecode/third-party/boost/numeric/interval/rounding.hpp</includes>
    <includes refid="constants_8hpp" local="no">gecode/third-party/boost/numeric/interval/constants.hpp</includes>
    <includes refid="arith_8hpp" local="no">gecode/third-party/boost/numeric/interval/arith.hpp</includes>
    <includes refid="arith2_8hpp" local="no">gecode/third-party/boost/numeric/interval/arith2.hpp</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="interval_8hpp" local="no">/usr/include/gecode/third-party/boost/numeric/interval.hpp</includedby>
    <incdepgraph>
      <node id="34808">
        <label>gecode/third-party/boost/numeric/interval/detail/test_input.hpp</label>
        <link refid="test__input_8hpp_source"/>
        <childnode refid="34806" relation="include">
        </childnode>
      </node>
      <node id="34804">
        <label>gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix_8hpp_source"/>
        <childnode refid="34805" relation="include">
        </childnode>
      </node>
      <node id="34817">
        <label>gecode/third-party/boost/config/no_tr1/cmath.hpp</label>
        <link refid="cmath_8hpp_source"/>
        <childnode refid="34818" relation="include">
        </childnode>
      </node>
      <node id="34809">
        <label>gecode/third-party/boost/numeric/interval/rounding.hpp</label>
        <link refid="third-party_2boost_2numeric_2interval_2rounding_8hpp_source"/>
      </node>
      <node id="34821">
        <label>gecode/third-party/boost/numeric/interval/policies.hpp</label>
        <link refid="policies_8hpp_source"/>
        <childnode refid="34812" relation="include">
        </childnode>
      </node>
      <node id="34818">
        <label>cmath</label>
      </node>
      <node id="34822">
        <label>cassert</label>
      </node>
      <node id="34813">
        <label>stdexcept</label>
      </node>
      <node id="34810">
        <label>gecode/third-party/boost/numeric/interval/constants.hpp</label>
        <link refid="constants_8hpp_source"/>
      </node>
      <node id="34814">
        <label>string</label>
      </node>
      <node id="34807">
        <label>gecode/third-party/boost/numeric/interval/detail/bugs.hpp</label>
        <link refid="bugs_8hpp_source"/>
        <childnode refid="34801" relation="include">
        </childnode>
      </node>
      <node id="34805">
        <label>limits.h</label>
      </node>
      <node id="34803">
        <label>gecode/third-party/boost/config/select_platform_config.hpp</label>
        <link refid="select__platform__config_8hpp_source"/>
      </node>
      <node id="34820">
        <label>gecode/third-party/boost/numeric/interval/arith2.hpp</label>
        <link refid="arith2_8hpp_source"/>
        <childnode refid="34801" relation="include">
        </childnode>
        <childnode refid="34806" relation="include">
        </childnode>
        <childnode refid="34808" relation="include">
        </childnode>
        <childnode refid="34807" relation="include">
        </childnode>
        <childnode refid="34815" relation="include">
        </childnode>
        <childnode refid="34811" relation="include">
        </childnode>
        <childnode refid="34821" relation="include">
        </childnode>
        <childnode refid="34819" relation="include">
        </childnode>
        <childnode refid="34822" relation="include">
        </childnode>
        <childnode refid="34817" relation="include">
        </childnode>
      </node>
      <node id="34802">
        <label>gecode/third-party/boost/config/select_compiler_config.hpp</label>
        <link refid="select__compiler__config_8hpp_source"/>
      </node>
      <node id="34806">
        <label>gecode/third-party/boost/numeric/interval/detail/interval_prototype.hpp</label>
        <link refid="interval__prototype_8hpp_source"/>
      </node>
      <node id="34801">
        <label>gecode/third-party/boost/config.hpp</label>
        <link refid="third-party_2boost_2config_8hpp_source"/>
        <childnode refid="34802" relation="include">
        </childnode>
        <childnode refid="34803" relation="include">
        </childnode>
        <childnode refid="34804" relation="include">
        </childnode>
      </node>
      <node id="34811">
        <label>gecode/third-party/boost/numeric/interval/arith.hpp</label>
        <link refid="arith_8hpp_source"/>
        <childnode refid="34801" relation="include">
        </childnode>
        <childnode refid="34812" relation="include">
        </childnode>
        <childnode refid="34807" relation="include">
        </childnode>
        <childnode refid="34808" relation="include">
        </childnode>
        <childnode refid="34815" relation="include">
        </childnode>
        <childnode refid="34819" relation="include">
        </childnode>
      </node>
      <node id="34800">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/transc.hpp</label>
        <link refid="transc.hpp"/>
        <childnode refid="34801" relation="include">
        </childnode>
        <childnode refid="34806" relation="include">
        </childnode>
        <childnode refid="34807" relation="include">
        </childnode>
        <childnode refid="34808" relation="include">
        </childnode>
        <childnode refid="34809" relation="include">
        </childnode>
        <childnode refid="34810" relation="include">
        </childnode>
        <childnode refid="34811" relation="include">
        </childnode>
        <childnode refid="34820" relation="include">
        </childnode>
        <childnode refid="34819" relation="include">
        </childnode>
      </node>
      <node id="34815">
        <label>gecode/third-party/boost/numeric/interval/detail/division.hpp</label>
        <link refid="division_8hpp_source"/>
        <childnode refid="34806" relation="include">
        </childnode>
        <childnode refid="34807" relation="include">
        </childnode>
        <childnode refid="34808" relation="include">
        </childnode>
        <childnode refid="34816" relation="include">
        </childnode>
        <childnode refid="34819" relation="include">
        </childnode>
      </node>
      <node id="34816">
        <label>gecode/third-party/boost/numeric/interval/rounded_arith.hpp</label>
        <link refid="rounded__arith_8hpp_source"/>
        <childnode refid="34809" relation="include">
        </childnode>
        <childnode refid="34807" relation="include">
        </childnode>
        <childnode refid="34817" relation="include">
        </childnode>
      </node>
      <node id="34812">
        <label>gecode/third-party/boost/numeric/interval/interval.hpp</label>
        <link refid="interval_2interval_8hpp_source"/>
        <childnode refid="34813" relation="include">
        </childnode>
        <childnode refid="34814" relation="include">
        </childnode>
        <childnode refid="34806" relation="include">
        </childnode>
      </node>
      <node id="34819">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34825">
        <label>/usr/include/gecode/float.hh</label>
        <link refid="float_8hh_source"/>
        <childnode refid="34826" relation="include">
        </childnode>
        <childnode refid="34827" relation="include">
        </childnode>
        <childnode refid="34828" relation="include">
        </childnode>
        <childnode refid="34829" relation="include">
        </childnode>
      </node>
      <node id="34824">
        <label>/usr/include/gecode/third-party/boost/numeric/interval.hpp</label>
        <link refid="interval_8hpp_source"/>
        <childnode refid="34825" relation="include">
        </childnode>
      </node>
      <node id="34829">
        <label>/usr/include/gecode/float/rel.hh</label>
        <link refid="float_2rel_8hh_source"/>
        <childnode refid="34826" relation="include">
        </childnode>
      </node>
      <node id="34826">
        <label>/usr/include/gecode/float/arithmetic.hh</label>
        <link refid="float_2arithmetic_8hh_source"/>
      </node>
      <node id="34828">
        <label>/usr/include/gecode/float/linear.hh</label>
        <link refid="float_2linear_8hh_source"/>
      </node>
      <node id="34827">
        <label>/usr/include/gecode/float/branch.hh</label>
        <link refid="float_2branch_8hh_source"/>
      </node>
      <node id="34823">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/transc.hpp</label>
        <link refid="transc.hpp"/>
        <childnode refid="34824" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1numeric">boost::numeric</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Boost<sp/>interval/transc.hpp<sp/>template<sp/>implementation<sp/>file</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2000<sp/>Jens<sp/>Maurer</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2002<sp/>Hervé<sp/>Brönnimann,<sp/>Guillaume<sp/>Melquiond,<sp/>Sylvain<sp/>Pion</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NUMERIC_INTERVAL_TRANSC_HPP</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_NUMERIC_INTERVAL_TRANSC_HPP</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/detail/interval_prototype.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/detail/bugs.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/detail/test_input.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/rounding.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/constants.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/arith.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/arith2.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">numeric<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>exp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.exp_down(x.lower()),<sp/>rnd.exp_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>log(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x)<sp/>||</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!interval_lib::user::is_pos(x.upper()))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::checking<sp/>checking;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>!interval_lib::user::is_pos(x.lower())</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>checking::neg_inf()<sp/>:<sp/>rnd.log_down(x.lower());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(l,<sp/>rnd.log_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>cos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;::empty();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>interval_lib::unprotect&lt;I&gt;::type<sp/>R;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>lower<sp/>bound<sp/>within<sp/>[0,<sp/>pi]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R<sp/>pi2<sp/>=<sp/>interval_lib::pi_twice&lt;R&gt;();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>R<sp/>tmp<sp/>=<sp/>fmod((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;)x,<sp/>pi2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width(tmp)<sp/>&gt;=<sp/>pi2.lower())</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(static_cast&lt;T&gt;(-1),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>covering<sp/>a<sp/>full<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.lower()<sp/>&gt;=<sp/>interval_lib::constants::pi_upper&lt;T&gt;())</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-cos(tmp<sp/>-<sp/>interval_lib::pi&lt;R&gt;());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>tmp.lower();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>T<sp/>u<sp/>=<sp/>tmp.upper();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>BOOST_USING_STD_MIN();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>separate<sp/>into<sp/>monotone<sp/>subintervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&lt;=<sp/>interval_lib::constants::pi_lower&lt;T&gt;())</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.cos_down(u),<sp/>rnd.cos_up(l),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&lt;=<sp/>pi2.lower())</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(static_cast&lt;T&gt;(-1),<sp/>rnd.cos_up(<ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION(rnd.sub_down(pi2.lower(),<sp/>u),<sp/>l)),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(static_cast&lt;T&gt;(-1),<sp/>static_cast&lt;T&gt;(1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>sin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>interval_lib::unprotect&lt;I&gt;::type<sp/>R;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>I<sp/>r<sp/>=<sp/>cos((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;)x<sp/>-<sp/>interval_lib::pi_half&lt;R&gt;());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>(void)&amp;rnd;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>tan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>interval_lib::unprotect&lt;I&gt;::type<sp/>R;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>lower<sp/>bound<sp/>within<sp/>[-pi/2,<sp/>pi/2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R<sp/>pi<sp/>=<sp/>interval_lib::pi&lt;R&gt;();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>R<sp/>tmp<sp/>=<sp/>fmod((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;)x,<sp/>pi);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>pi_half_d<sp/>=<sp/>interval_lib::constants::pi_half_lower&lt;T&gt;();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.lower()<sp/>&gt;=<sp/>pi_half_d)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>-=<sp/>pi;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.lower()<sp/>&lt;=<sp/>-pi_half_d<sp/>||<sp/>tmp.upper()<sp/>&gt;=<sp/>pi_half_d)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::whole();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.tan_down(tmp.lower()),<sp/>rnd.tan_up(tmp.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>asin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>||<sp/>x.upper()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1)<sp/>||<sp/>x.lower()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1))</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>(x.lower()<sp/>&lt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>-interval_lib::constants::pi_half_upper&lt;T&gt;()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rnd.asin_down(x.lower());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>T<sp/>u<sp/>=<sp/>(x.upper()<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><sp/>interval_lib::constants::pi_half_upper&lt;T&gt;()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rnd.asin_up<sp/><sp/>(x.upper());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(l,<sp/>u,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>acos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>||<sp/>x.upper()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1)<sp/>||<sp/>x.lower()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>(x.upper()<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rnd.acos_down(x.upper());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>T<sp/>u<sp/>=<sp/>(x.lower()<sp/>&lt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1))</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>interval_lib::constants::pi_upper&lt;T&gt;()</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rnd.acos_up<sp/><sp/>(x.lower());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(l,<sp/>u,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>atan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.atan_down(x.lower()),<sp/>rnd.atan_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>sinh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.sinh_down(x.lower()),<sp/>rnd.sinh_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>cosh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::user::is_neg(x.upper()))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.cosh_down(x.upper()),<sp/>rnd.cosh_up(x.lower()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!interval_lib::user::is_neg(x.lower()))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.cosh_down(x.lower()),<sp/>rnd.cosh_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(static_cast&lt;T&gt;(1),<sp/>rnd.cosh_up(-x.lower()<sp/>&gt;<sp/>x.upper()<sp/>?<sp/>x.lower()<sp/>:<sp/>x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>tanh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.tanh_down(x.lower()),<sp/>rnd.tanh_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>asinh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(rnd.asinh_down(x.lower()),<sp/>rnd.asinh_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>acosh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x)<sp/>||<sp/>x.upper()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1))</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>x.lower()<sp/>&lt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>?<sp/>static_cast&lt;T&gt;(0)<sp/>:<sp/>rnd.acosh_down(x.lower());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(l,<sp/>rnd.acosh_up(x.upper()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Policies&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">interval&lt;T,<sp/>Policies&gt;<sp/>atanh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>interval&lt;T,<sp/>Policies&gt;<sp/>I;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_lib::detail::test_input(x)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>x.upper()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1)<sp/>||<sp/>x.lower()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I::empty();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::rounding<sp/>rnd;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policies::checking<sp/>checking;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>T<sp/>l<sp/>=<sp/>(x.lower()<sp/>&lt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1))</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>checking::neg_inf()<sp/>:<sp/>rnd.atanh_down(x.lower());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>T<sp/>u<sp/>=<sp/>(x.upper()<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>checking::pos_inf()<sp/>:<sp/>rnd.atanh_up<sp/><sp/>(x.upper());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I(l,<sp/>u,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>numeric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_NUMERIC_INTERVAL_TRANSC_HPP</highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/transc.hpp"/>
  </compounddef>
</doxygen>
