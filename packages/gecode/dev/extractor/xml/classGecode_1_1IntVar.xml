<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1IntVar" kind="class" prot="public">
    <compoundname>Gecode::IntVar</compoundname>
    <basecompoundref refid="classGecode_1_1VarImpVar" prot="public" virt="non-virtual">Gecode::VarImpVar&lt; Int::IntVarImp &gt;</basecompoundref>
    <includes refid="int_8hh" local="no">int.hh</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and initialization</header>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a33e5d9e817f7aeea17329740dd8d8ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::IntVar::IntVar</definition>
        <argsstring>(void)</argsstring>
        <name>IntVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="371" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1ac0775078282682627a61cb7b224bf9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::IntVar::IntVar</definition>
        <argsstring>(const IntVar &amp;y)</argsstring>
        <name>IntVar</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize from integer variable <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="373" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a4680baa297be6f1e4a897ff5a099cc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::IntVar::IntVar</definition>
        <argsstring>(const Int::IntView &amp;y)</argsstring>
        <name>IntVar</name>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1IntView" kindref="compound">Int::IntView</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize from integer view <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="375" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1ab97a893313904624ef776f909ddfd078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT</type>
        <definition>GECODE_INT_EXPORT Gecode::IntVar::IntVar</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>IntVar</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize variable with range domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain ranging from <emphasis>min</emphasis> to <emphasis>max</emphasis>. The following exceptions might be thrown:<itemizedlist>
<listitem><para>If <emphasis>min</emphasis> is greater than <emphasis>max</emphasis>, an exception of type <ref refid="classGecode_1_1Int_1_1VariableEmptyDomain" kindref="compound">Gecode::Int::VariableEmptyDomain</ref> is thrown.</para></listitem><listitem><para>If <emphasis>min</emphasis> or <emphasis>max</emphasis> exceed the limits for integers as defined in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Gecode::Int::Limits</ref>, an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Gecode::Int::OutOfLimits</ref> is thrown. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a47d204f83a6fde405b6b435c5e4146f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT</type>
        <definition>GECODE_INT_EXPORT Gecode::IntVar::IntVar</definition>
        <argsstring>(Space &amp;home, const IntSet &amp;d)</argsstring>
        <name>IntVar</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Initialize variable with arbitrary domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain described by <emphasis>d</emphasis>. The following exceptions might be thrown:<itemizedlist>
<listitem><para>If <emphasis>d</emphasis> is empty, an exception of type <ref refid="classGecode_1_1Int_1_1VariableEmptyDomain" kindref="compound">Gecode::Int::VariableEmptyDomain</ref> is thrown.</para></listitem><listitem><para>If <emphasis>d</emphasis> contains values that exceed the limits for integers as defined in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Gecode::Int::Limits</ref>, an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Gecode::Int::OutOfLimits</ref> is thrown. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="399" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value access</header>
      <memberdef kind="function" id="classGecode_1_1IntVar_1ab4dbc52f0a6f0789b573339e95307c77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::IntVar::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="405" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a81027aeed5d0c8e485bc87683d4d2992" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::IntVar::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return maximum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="407" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1afbd0873780f642ff9a2826aa2fb0ea60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::IntVar::med</definition>
        <argsstring>(void) const </argsstring>
        <name>med</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return median of domain (greatest element not greater than the median) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="409" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a38c7fb4fa3843efd76127e67b7f41375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::IntVar::val</definition>
        <argsstring>(void) const </argsstring>
        <name>val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return assigned value. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ValOfUnassignedVar" kindref="compound">Int::ValOfUnassignedVar</ref> if variable is not yet assigned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="417" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a8eedb1ba8052803a5863bebd3d1b8ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::IntVar::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size (cardinality) of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="420" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a35db047732b1e16daf675ced07a4b1d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::IntVar::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of domain (distance between maximum and minimum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="422" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a52067cc315f5fc34c7938630a3daf29b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::IntVar::regret_min</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain minimum (distance to next larger value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="424" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1aeabf998cb9bd4d1eba0c5d49de02bebb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::IntVar::regret_max</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain maximum (distance to next smaller value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="426" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a6f58fed8086378fa130802b2e0c8a68a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::IntVar::range</definition>
        <argsstring>(void) const </argsstring>
        <name>range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="432" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a9428b8379bc059f11f2e36526f8d6206" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::IntVar::in</definition>
        <argsstring>(int n) const </argsstring>
        <name>in</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="434" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="101" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1IntVar_1aa9eb1661eda7c9416195e82c7bec8a5a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IntVarArray</definition>
        <argsstring></argsstring>
        <name>IntVarArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="349" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classGecode_1_1IntVar_1a396499e8a16922e7cf24c945db8052f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IntVarArgs</definition>
        <argsstring></argsstring>
        <name>IntVarArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="350" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1IntVar_1af0c55122641b2a4902eaad5b157ade33" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::IntVar::_init</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>_init</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize variable with range domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain ranging from <emphasis>min</emphasis> to <emphasis>max</emphasis>. No exceptions are thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="359" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1IntVar_1a4b65262827adc58c366a33745045c5a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::IntVar::_init</definition>
        <argsstring>(Space &amp;home, const IntSet &amp;d)</argsstring>
        <name>_init</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Initialize variable with arbitrary domain. </para>        </briefdescription>
        <detaileddescription>
<para>The variable is created with a domain described by <emphasis>d</emphasis>. No exceptions are thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="366" column="1" bodyfile="/usr/include/gecode/int/var/int.hpp" bodystart="46" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classGecode_1_1IntVar_1a2665d53b1c568b9b0c36802a90c803b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const IntVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Print integer variable <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="319" column="1" bodyfile="/usr/include/gecode/int/var/print.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Integer variables. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3014">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
      <node id="3012">
        <label>Gecode::IntVar</label>
        <link refid="classGecode_1_1IntVar"/>
        <childnode refid="3013" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3013">
        <label>Gecode::VarImpVar&lt; Int::IntVarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="3014" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3019">
        <label>IntVarImpBase</label>
      </node>
      <node id="3017">
        <label>Gecode::Var</label>
        <link refid="classGecode_1_1Var"/>
      </node>
      <node id="3020">
        <label>Gecode::Int::IntVarImp::RangeList</label>
        <link refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList"/>
        <childnode refid="3021" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3015">
        <label>Gecode::IntVar</label>
        <link refid="classGecode_1_1IntVar"/>
        <childnode refid="3016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3018">
        <label>Gecode::Int::IntVarImp</label>
        <link refid="classGecode_1_1Int_1_1IntVarImp"/>
        <childnode refid="3019" relation="public-inheritance">
        </childnode>
        <childnode refid="3020" relation="usage">
          <edgelabel>dom</edgelabel>
          <edgelabel>_lst</edgelabel>
        </childnode>
      </node>
      <node id="3016">
        <label>Gecode::VarImpVar&lt; Int::IntVarImp &gt;</label>
        <link refid="classGecode_1_1VarImpVar"/>
        <childnode refid="3017" relation="public-inheritance">
        </childnode>
        <childnode refid="3018" relation="usage">
          <edgelabel>x</edgelabel>
        </childnode>
      </node>
      <node id="3021">
        <label>Gecode::FreeList</label>
        <link refid="classGecode_1_1FreeList"/>
        <childnode refid="3021" relation="usage">
          <edgelabel>_next</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int.hh" line="348" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="348" bodyend="436"/>
    <listofallmembers>
      <member refid="classGecode_1_1IntVar_1af0c55122641b2a4902eaad5b157ade33" prot="private" virt="non-virtual"><scope>Gecode::IntVar</scope><name>_init</name></member>
      <member refid="classGecode_1_1IntVar_1a4b65262827adc58c366a33745045c5a7" prot="private" virt="non-virtual"><scope>Gecode::IntVar</scope><name>_init</name></member>
      <member refid="classGecode_1_1VarImpVar_1a7d2b5ff6179ac3200ebc4d05046192b9" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>afc</name></member>
      <member refid="classGecode_1_1VarImpVar_1a46d10d8d6c4d60627a1d14bf6e7a8ccf" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>assigned</name></member>
      <member refid="classGecode_1_1VarImpVar_1a523eac9883d95fce3bbaf14313ada660" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>before</name></member>
      <member refid="classGecode_1_1VarImpVar_1a75b6d985437329ba108580b9f8415284" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>degree</name></member>
      <member refid="classGecode_1_1IntVar_1a9428b8379bc059f11f2e36526f8d6206" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>in</name></member>
      <member refid="classGecode_1_1IntVar_1a33e5d9e817f7aeea17329740dd8d8ddf" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVar</name></member>
      <member refid="classGecode_1_1IntVar_1ac0775078282682627a61cb7b224bf9b5" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVar</name></member>
      <member refid="classGecode_1_1IntVar_1a4680baa297be6f1e4a897ff5a099cc28" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVar</name></member>
      <member refid="classGecode_1_1IntVar_1ab97a893313904624ef776f909ddfd078" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVar</name></member>
      <member refid="classGecode_1_1IntVar_1a47d204f83a6fde405b6b435c5e4146f8" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVar</name></member>
      <member refid="classGecode_1_1IntVar_1a396499e8a16922e7cf24c945db8052f6" prot="private" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVarArgs</name></member>
      <member refid="classGecode_1_1IntVar_1aa9eb1661eda7c9416195e82c7bec8a5a" prot="private" virt="non-virtual"><scope>Gecode::IntVar</scope><name>IntVarArray</name></member>
      <member refid="classGecode_1_1IntVar_1a81027aeed5d0c8e485bc87683d4d2992" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>max</name></member>
      <member refid="classGecode_1_1IntVar_1afbd0873780f642ff9a2826aa2fb0ea60" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>med</name></member>
      <member refid="classGecode_1_1IntVar_1ab4dbc52f0a6f0789b573339e95307c77" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>min</name></member>
      <member refid="classGecode_1_1IntVar_1a2665d53b1c568b9b0c36802a90c803b9" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1IntVar_1a6f58fed8086378fa130802b2e0c8a68a" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>range</name></member>
      <member refid="classGecode_1_1IntVar_1aeabf998cb9bd4d1eba0c5d49de02bebb" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>regret_max</name></member>
      <member refid="classGecode_1_1IntVar_1a52067cc315f5fc34c7938630a3daf29b" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>regret_min</name></member>
      <member refid="classGecode_1_1VarImpVar_1a9b85f0619f18004aaaa3bd94a7d0eec0" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>same</name></member>
      <member refid="classGecode_1_1IntVar_1a8eedb1ba8052803a5863bebd3d1b8ce7" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>size</name></member>
      <member refid="classGecode_1_1VarImpVar_1abdbe8fe5fcdbac6679e255058e3b716c" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>update</name></member>
      <member refid="classGecode_1_1IntVar_1a38c7fb4fa3843efd76127e67b7f41375" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>val</name></member>
      <member refid="classGecode_1_1VarImpVar_1a908cddb663db8f85c53391dd63befb53" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>varimp</name></member>
      <member refid="classGecode_1_1VarImpVar_1af8ea39682fc7b0251df684ace1063a65" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>VarImpType</name></member>
      <member refid="classGecode_1_1VarImpVar_1a8297a58d748bdb1dd081dc920f21d44a" prot="protected" virt="non-virtual"><scope>Gecode::IntVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1VarImpVar_1a5c99d2d1dba56a32e8ff8f326b6204be" prot="protected" virt="non-virtual"><scope>Gecode::IntVar</scope><name>VarImpVar</name></member>
      <member refid="classGecode_1_1IntVar_1a35db047732b1e16daf675ced07a4b1d6" prot="public" virt="non-virtual"><scope>Gecode::IntVar</scope><name>width</name></member>
      <member refid="classGecode_1_1VarImpVar_1ac9314cfea4cf6ccd9f34e79e6f41dda3" prot="protected" virt="non-virtual"><scope>Gecode::IntVar</scope><name>x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
