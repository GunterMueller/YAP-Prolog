<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__TaskModelIntBranch" kind="group">
    <compoundname>TaskModelIntBranch</compoundname>
    <title>Branching</title>
    <innerclass refid="classGecode_1_1IntAFC" prot="public">Gecode::IntAFC</innerclass>
    <innerclass refid="classGecode_1_1IntActivity" prot="public">Gecode::IntActivity</innerclass>
    <innerclass refid="classGecode_1_1IntVarBranch" prot="public">Gecode::IntVarBranch</innerclass>
    <innerclass refid="classGecode_1_1IntValBranch" prot="public">Gecode::IntValBranch</innerclass>
    <innerclass refid="classGecode_1_1IntAssign" prot="public">Gecode::IntAssign</innerclass>
    <innerclass refid="classGecode_1_1SymmetryHandle" prot="public">Gecode::SymmetryHandle</innerclass>
    <innergroup refid="group__TaskModelIntBranchVar">Variable selection for integer and Boolean variables</innergroup>
    <innergroup refid="group__TaskModelIntBranchVal">Value selection for integer and Boolean variables</innergroup>
    <innergroup refid="group__TaskModelIntBranchAssign">Value selection for assigning integer and Boolean variables</innergroup>
    <innergroup refid="group__TaskModelIntBranchSymm">Symmetry declarations</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::IntBranchFilter)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3496" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::BoolBranchFilter)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3505" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gabd2629d15afdee6f6cb998c1647b210f" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::IntBranchMerit)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3516" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga9626c7a69aa0213a0a1191dfdb7b9efc" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::BoolBranchMerit)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3526" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga98ca9bcf71eeeb8d55b408a309a9ce9f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Gecode::IntBranchVal)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchVal</name>
        <briefdescription>
<para>Branch value function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3538" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga507b725c3cb54d2523dd544edbccd52a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Gecode::BoolBranchVal)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchVal</name>
        <briefdescription>
<para>Branch value function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3549" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga8a76dc88094c7c583b2afdc0f51d73f8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::IntBranchCommit)(Space &amp;home, unsigned int a, IntVar x, int i, int n)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, IntVar x, int i, int n)</argsstring>
        <name>IntBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>n</emphasis> is the value computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3562" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gaf4ad026af38c4abde69c8ea93bc4feee" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::BoolBranchCommit)(Space &amp;home, unsigned int a, BoolVar x, int i, int n)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, BoolVar x, int i, int n)</argsstring>
        <name>BoolBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>n</emphasis> is the value computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3575" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3575" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf9f9bd8c7bdd56bc09e9da2c53d75cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntVarBranch</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>IntBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4073" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gac6843672a82e6413f507fde220e785a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>TieBreak&lt; IntVarBranch &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>IntBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaa82326c8f46725c9a48e7fbaa4be191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, IntVar x, IntValBranch vals, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf61d652bb6737b2589349142159e4ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntVarBranch</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>BoolBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gafb58c854fddc02bef834305943b3ad33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>TieBreak&lt; IntVarBranch &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>BoolBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga328e4109d795e10d9c076fe7c3eedb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, BoolVar x, IntValBranch vals, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf75a0bb5132824aecb4ce11350cd370b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntAssign vals, IntBranchFilter ibf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntAssign</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>IntBranchFilter</type>
          <declname>ibf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga76c6b137e208eefe00f278df63ef19cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, IntVar x, IntAssign vals, IntVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntAssign</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gadebb156af05ca82aa9a90516a33bfe8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntAssign vals, BoolBranchFilter bbf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntAssign</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>BoolBranchFilter</type>
          <declname>bbf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gac56e4c176c09c16f089512b4d49782d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, BoolVar x, IntAssign vals, BoolVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntAssign</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaed06b2c0d92c0411a3e5eb0967a72a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, const Symmetries &amp;syms, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntVarBranch</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const Symmetries &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type>IntBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga3cfb2fd9f2b09bb36dc56826ab7a84a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, const Symmetries &amp;syms, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>TieBreak&lt; IntVarBranch &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const Symmetries &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type>IntBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>IntVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga46172acf27d49d9bfc0d3ad0fd7434f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, const Symmetries &amp;syms, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntVarBranch</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const Symmetries &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type>BoolBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaa3fbe2526f9a50f168a14204af3f0baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT BrancherHandle</type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, const Symmetries &amp;syms, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>TieBreak&lt; IntVarBranch &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>IntValBranch</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const Symmetries &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type>BoolBranchFilter</type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>BoolVarValPrint</type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4333" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
