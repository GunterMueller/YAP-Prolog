<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1REG" kind="class" prot="public">
    <compoundname>Gecode::REG</compoundname>
    <includes refid="minimodel_8hh" local="no">minimodel.hh</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1REG_1ac32930c9765e583028a3bf17f3e1d43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MiniModel::ExpInfo</definition>
        <argsstring></argsstring>
        <name>MiniModel::ExpInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1402" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1402" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGecode_1_1REG_1a9763d08c1d7aa68cbef131ef1cdd09c3" prot="private" static="no" mutable="no">
        <type>Exp *</type>
        <definition>Exp* Gecode::REG::e</definition>
        <argsstring></argsstring>
        <name>e</name>
        <briefdescription>
<para>The expression tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1407" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1405" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1REG_1a5a058827afa997dd216bf96c3199295f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::REG</definition>
        <argsstring>(Exp *e)</argsstring>
        <name>REG</name>
        <param>
          <type>Exp *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Initialize with given expression tree <emphasis></emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1409" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1REG_1acbf5ff681c3f38343a41fe83a49bae5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::REG</definition>
        <argsstring>(void)</argsstring>
        <name>REG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize as empty sequence (epsilon) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1aa3dd22555f920c7f4437cca4749136a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::REG</definition>
        <argsstring>(int s)</argsstring>
        <name>REG</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Initialize as single integer <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a0f5906baf4b43b59a253ad21a00e25bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::REG</definition>
        <argsstring>(const IntArgs &amp;x)</argsstring>
        <name>REG</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Initialize as alternative of integers. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1MiniModel_1_1TooFewArguments" kindref="compound">MiniModel::TooFewArguments</ref> if <emphasis>x</emphasis> is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1ab829a1686a4044040bcdb1e5e0b23e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::REG</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>REG</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Initialize from regular expression <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1afb68a70bc50516731a794325d27b64a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
        <definition>const REG&amp; Gecode::REG::operator=</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Assign to regular expression <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1ab776cf5c50d33dc8ba782878d7f3dd4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator+</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return expression for: this expression followed by <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a66c9aa7afe4139edc479f42b0d6ec6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
        <definition>REG&amp; Gecode::REG::operator+=</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>This expression is followed by <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1aeb04e321dad0c70cf603a78a84e3be57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator|</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return expression for: this expression or <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a2ae2cb1312f1f1b3ea7509445e46a33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
        <definition>REG&amp; Gecode::REG::operator|=</definition>
        <argsstring>(const REG &amp;r)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>This expression or <emphasis>r</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a4cb418b85e2d885caf0aa3e40654fcfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator*</definition>
        <argsstring>(void)</argsstring>
        <name>operator*</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return expression for: this expression arbitrarily often (Kleene star) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1ae3cd90f182d07af74d425813346403c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator+</definition>
        <argsstring>(void)</argsstring>
        <name>operator+</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return expression for: this expression at least once. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1adbf103143df27b00ba783a1ae54f9d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator()</definition>
        <argsstring>(unsigned int n, unsigned int m)</argsstring>
        <name>operator()</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Return expression for: this expression at least <emphasis>n</emphasis> and at most <emphasis>m</emphasis> times. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a0a17712325b5214218bab275871080cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1REG" kindref="compound">REG</ref></type>
        <definition>REG Gecode::REG::operator()</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>operator()</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return expression for: this expression at least <emphasis>n</emphasis> times. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a02f4798c5bb785ff2c2910efd42b5d5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; Gecode::REG::print</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os) const </argsstring>
        <name>print</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Print expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1447" column="1" bodyfile="/usr/include/gecode/minimodel/reg.hpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1ac5d264332e19d3c51b1d620aa1e66c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::operator DFA</definition>
        <argsstring>(void)</argsstring>
        <name>operator DFA</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> for regular expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1REG_1a266d1fb13f0ec4ae1614d86c403b50af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::REG::~REG</definition>
        <argsstring>(void)</argsstring>
        <name>~REG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1451" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classGecode_1_1REG_1a36bd3189d0de0f97cbe13debf2c312b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const REG &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print regular expression <emphasis>r</emphasis> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1261" column="1" bodyfile="/usr/include/gecode/minimodel/reg.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regular expressions over integer values. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/minimodel.hh" line="1401" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1401" bodyend="1452"/>
    <listofallmembers>
      <member refid="classGecode_1_1REG_1a9763d08c1d7aa68cbef131ef1cdd09c3" prot="private" virt="non-virtual"><scope>Gecode::REG</scope><name>e</name></member>
      <member refid="classGecode_1_1REG_1ac32930c9765e583028a3bf17f3e1d43f" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>MiniModel::ExpInfo</name></member>
      <member refid="classGecode_1_1REG_1ac5d264332e19d3c51b1d620aa1e66c20" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator DFA</name></member>
      <member refid="classGecode_1_1REG_1adbf103143df27b00ba783a1ae54f9d86" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator()</name></member>
      <member refid="classGecode_1_1REG_1a0a17712325b5214218bab275871080cb" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator()</name></member>
      <member refid="classGecode_1_1REG_1a4cb418b85e2d885caf0aa3e40654fcfd" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator*</name></member>
      <member refid="classGecode_1_1REG_1ab776cf5c50d33dc8ba782878d7f3dd4b" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator+</name></member>
      <member refid="classGecode_1_1REG_1ae3cd90f182d07af74d425813346403c6" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator+</name></member>
      <member refid="classGecode_1_1REG_1a66c9aa7afe4139edc479f42b0d6ec6eb" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator+=</name></member>
      <member refid="classGecode_1_1REG_1a36bd3189d0de0f97cbe13debf2c312b1" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1REG_1afb68a70bc50516731a794325d27b64a2" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator=</name></member>
      <member refid="classGecode_1_1REG_1aeb04e321dad0c70cf603a78a84e3be57" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator|</name></member>
      <member refid="classGecode_1_1REG_1a2ae2cb1312f1f1b3ea7509445e46a33e" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>operator|=</name></member>
      <member refid="classGecode_1_1REG_1a02f4798c5bb785ff2c2910efd42b5d5e" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>print</name></member>
      <member refid="classGecode_1_1REG_1a5a058827afa997dd216bf96c3199295f" prot="private" virt="non-virtual"><scope>Gecode::REG</scope><name>REG</name></member>
      <member refid="classGecode_1_1REG_1acbf5ff681c3f38343a41fe83a49bae5a" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>REG</name></member>
      <member refid="classGecode_1_1REG_1aa3dd22555f920c7f4437cca4749136a4" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>REG</name></member>
      <member refid="classGecode_1_1REG_1a0f5906baf4b43b59a253ad21a00e25bb" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>REG</name></member>
      <member refid="classGecode_1_1REG_1ab829a1686a4044040bcdb1e5e0b23e76" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>REG</name></member>
      <member refid="classGecode_1_1REG_1a266d1fb13f0ec4ae1614d86c403b50af" prot="public" virt="non-virtual"><scope>Gecode::REG</scope><name>~REG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
