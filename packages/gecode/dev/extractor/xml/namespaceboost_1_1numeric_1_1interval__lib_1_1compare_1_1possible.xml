<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible" kind="namespace">
    <compoundname>boost::numeric::interval_lib::compare::possible</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1aeb3ae9e5de9bae272a25755173ac7557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="23" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a3a573a660239337bd2ff5d652ca8d192" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&lt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="30" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a1caf1b13215afd91c1a12a72b0fac9cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="37" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1ac52a5d2dd3afbb1725ea718ccbc67c21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&lt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="44" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a031b86552359a7e39f10f64cad37667b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="51" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a387d48ad944250dc8194fa02001cdcfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&gt;</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="58" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a9eac70a94dfda5e4e8e80142d152d322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="65" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a834906f09949daedc17fc573b1e4916f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator&gt;=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="72" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1afde60bfd60bd7bd037de1ddec3d69acf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator==</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="79" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1ad5103d2a4221d1faff6a6735c2d0c932" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator==</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="86" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a76a04a5481f3632e94c6067f1779bdd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies1</type>
          </param>
          <param>
            <type>class Policies2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies1 &gt; &amp;x, const interval&lt; T, Policies2 &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="93" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1numeric_1_1interval__lib_1_1compare_1_1possible_1a9dea7f6f62a481f5b0362b1bc774c6b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Policies</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::numeric::interval_lib::compare::possible::operator!=</definition>
        <argsstring>(const interval&lt; T, Policies &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1numeric_1_1interval" kindref="compound">interval</ref>&lt; T, Policies &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="100" column="1" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" bodystart="100" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/compare/possible.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
