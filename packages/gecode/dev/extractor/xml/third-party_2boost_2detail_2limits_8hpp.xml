<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="third-party_2boost_2detail_2limits_8hpp" kind="file">
    <compoundname>limits.hpp</compoundname>
    <includes local="no">climits</includes>
    <includes local="no">cfloat</includes>
    <includes refid="third-party_2boost_2config_8hpp" local="no">gecode/third-party/boost/config.hpp</includes>
    <includes refid="endian_8hpp" local="no">gecode/third-party/boost/detail/endian.hpp</includes>
    <includes local="no">cwchar</includes>
    <incdepgraph>
      <node id="4281">
        <label>gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix_8hpp_source"/>
        <childnode refid="4282" relation="include">
        </childnode>
      </node>
      <node id="4284">
        <label>cwchar</label>
      </node>
      <node id="4277">
        <label>cfloat</label>
      </node>
      <node id="4283">
        <label>gecode/third-party/boost/detail/endian.hpp</label>
        <link refid="endian_8hpp_source"/>
      </node>
      <node id="4282">
        <label>limits.h</label>
      </node>
      <node id="4280">
        <label>gecode/third-party/boost/config/select_platform_config.hpp</label>
        <link refid="select__platform__config_8hpp_source"/>
      </node>
      <node id="4279">
        <label>gecode/third-party/boost/config/select_compiler_config.hpp</label>
        <link refid="select__compiler__config_8hpp_source"/>
      </node>
      <node id="4275">
        <label>/usr/include/gecode/third-party/boost/detail/limits.hpp</label>
        <link refid="third-party/boost/detail/limits.hpp"/>
        <childnode refid="4276" relation="include">
        </childnode>
        <childnode refid="4277" relation="include">
        </childnode>
        <childnode refid="4278" relation="include">
        </childnode>
        <childnode refid="4283" relation="include">
        </childnode>
        <childnode refid="4284" relation="include">
        </childnode>
      </node>
      <node id="4278">
        <label>gecode/third-party/boost/config.hpp</label>
        <link refid="third-party_2boost_2config_8hpp_source"/>
        <childnode refid="4279" relation="include">
        </childnode>
        <childnode refid="4280" relation="include">
        </childnode>
        <childnode refid="4281" relation="include">
        </childnode>
      </node>
      <node id="4276">
        <label>climits</label>
      </node>
    </incdepgraph>
    <innerclass refid="classstd_1_1__Numeric__limits__base" prot="public">std::_Numeric_limits_base</innerclass>
    <innerclass refid="classstd_1_1__Integer__limits" prot="public">std::_Integer_limits</innerclass>
    <innerclass refid="structstd_1_1float__helper" prot="public">std::float_helper</innerclass>
    <innerclass refid="classstd_1_1__Floating__limits" prot="public">std::_Floating_limits</innerclass>
    <innerclass refid="classstd_1_1numeric__limits" prot="public">std::numeric_limits</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01bool_01_4" prot="public">std::numeric_limits&lt; bool &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01char_01_4" prot="public">std::numeric_limits&lt; char &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01signed_01char_01_4" prot="public">std::numeric_limits&lt; signed char &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01unsigned_01char_01_4" prot="public">std::numeric_limits&lt; unsigned char &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01wchar__t_01_4" prot="public">std::numeric_limits&lt; wchar_t &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01short_01_4" prot="public">std::numeric_limits&lt; short &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01unsigned_01short_01_4" prot="public">std::numeric_limits&lt; unsigned short &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01int_01_4" prot="public">std::numeric_limits&lt; int &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01unsigned_01int_01_4" prot="public">std::numeric_limits&lt; unsigned int &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01long_01_4" prot="public">std::numeric_limits&lt; long &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01unsigned_01long_01_4" prot="public">std::numeric_limits&lt; unsigned long &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01float_01_4" prot="public">std::numeric_limits&lt; float &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01double_01_4" prot="public">std::numeric_limits&lt; double &gt;</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01long_01double_01_4" prot="public">std::numeric_limits&lt; long double &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="third-party_2boost_2detail_2limits_8hpp_1a02222c0aaf671bbf086aec3c6ee57d63" prot="public" static="no">
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param><defname>__mem_type</defname></param>
        <param><defname>__mem_name</defname></param>
        <param><defname>__mem_value</defname></param>
        <initializer>static const __mem_type __mem_name = __mem_value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="88" column="10" bodyfile="/usr/include/gecode/third-party/boost/detail/limits.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2001<sp/>John<sp/>Maddock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompany-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ing<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1997</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Silicon<sp/>Graphics<sp/>Computer<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>distribute<sp/>and<sp/>sell<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>and<sp/>its<sp/>documentation<sp/>for<sp/>any<sp/>purpose<sp/>is<sp/>hereby<sp/>granted<sp/>without<sp/>fee,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>provided<sp/>that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies<sp/>and</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>that<sp/>both<sp/>that<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>in<sp/>supporting<sp/>documentation.<sp/><sp/>Silicon<sp/>Graphics<sp/>makes<sp/>no</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>representations<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>purpose.<sp/><sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>This<sp/>is<sp/>not<sp/>portable<sp/>code.<sp/><sp/>Parts<sp/>of<sp/>numeric_limits&lt;&gt;<sp/>are</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>inherently<sp/>machine-dependent,<sp/>and<sp/>this<sp/>file<sp/>is<sp/>written<sp/>for<sp/>the<sp/>MIPS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>architecture<sp/>and<sp/>the<sp/>SGI<sp/>MIPSpro<sp/>C++<sp/>compiler.<sp/><sp/>Parts<sp/>of<sp/>it<sp/>(in</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>particular,<sp/>some<sp/>of<sp/>the<sp/>characteristics<sp/>of<sp/>floating-point<sp/>types)</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>are<sp/>almost<sp/>certainly<sp/>incorrect<sp/>for<sp/>any<sp/>other<sp/>platform.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>above<sp/>comment<sp/>is<sp/>almost<sp/>certainly<sp/>out<sp/>of<sp/>date.<sp/>This<sp/>file<sp/>works</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>on<sp/>systems<sp/>other<sp/>than<sp/>SGI<sp/>MIPSpro<sp/>C++<sp/>now.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>Revision<sp/>history:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>21<sp/>Sep<sp/>2001:</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Only<sp/>include<sp/>&lt;cwchar&gt;<sp/>if<sp/>BOOST_NO_CWCHAR<sp/>is<sp/>defined.<sp/>(Darin<sp/>Adler)</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>10<sp/>Aug<sp/>2001:</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Added<sp/>MIPS<sp/>(big<sp/>endian)<sp/>to<sp/>the<sp/>big<sp/>endian<sp/>family.<sp/>(Jens<sp/>Maurer)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>13<sp/>Apr<sp/>2001:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Added<sp/>powerpc<sp/>to<sp/>the<sp/>big<sp/>endian<sp/>family.<sp/>(Jeremy<sp/>Siek)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>5<sp/>Apr<sp/>2001:</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Added<sp/>sparc<sp/>(big<sp/>endian)<sp/>processor<sp/>support<sp/>(John<sp/>Maddock).</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Initial<sp/>sub:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Modified<sp/>by<sp/>Jens<sp/>Maurer<sp/>for<sp/>gcc<sp/>2.95<sp/>on<sp/>x86.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_SGI_CPP_LIMITS</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_SGI_CPP_LIMITS</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/detail/endian.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NO_CWCHAR</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cwchar&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>WCHAR_MIN<sp/>and<sp/>WCHAR_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>float_round_style<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>round_indeterminate<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>round_toward_zero<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>0,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>round_to_nearest<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>round_toward_infinity<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>2,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>round_toward_neg_infinity<sp/>=<sp/><sp/>3</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>float_denorm_style<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>denorm_indeterminate<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>denorm_absent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>0,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>denorm_present<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>C++<sp/>standard<sp/>(section<sp/>18.2.1)<sp/>requires<sp/>that<sp/>some<sp/>of<sp/>the<sp/>members<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>numeric_limits<sp/>be<sp/>static<sp/>const<sp/>data<sp/>members<sp/>that<sp/>are<sp/>given<sp/>constant-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initializers<sp/>within<sp/>the<sp/>class<sp/>declaration.<sp/><sp/>On<sp/>compilers<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_NO_INCLASS_MEMBER_INITIALIZATION<sp/>macro<sp/>is<sp/>defined,<sp/>it<sp/>is<sp/>impossible<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>standard-conforming<sp/>numeric_limits<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>possible<sp/>workarounds:<sp/>either<sp/>initialize<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>members<sp/>outside<sp/>the<sp/>class,<sp/>or<sp/>change<sp/>them<sp/>from<sp/>data<sp/>members<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enums.<sp/><sp/>Neither<sp/>workaround<sp/>is<sp/>satisfactory:<sp/>the<sp/>former<sp/>makes<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>impossible<sp/>to<sp/>use<sp/>the<sp/>data<sp/>members<sp/>in<sp/>constant-expressions,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>latter<sp/>means<sp/>they<sp/>have<sp/>the<sp/>wrong<sp/>type<sp/>and<sp/>that<sp/>it<sp/>is<sp/>impossible<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>take<sp/>their<sp/>addresses.<sp/><sp/>We<sp/>choose<sp/>the<sp/>former<sp/>workaround.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_NO_INCLASS_MEMBER_INITIALIZATION</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(__mem_type,<sp/>__mem_name,<sp/>__mem_value)<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/>enum<sp/>{<sp/>__mem_name<sp/>=<sp/>__mem_value<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>BOOST_NO_INCLASS_MEMBER_INITIALIZATION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(__mem_type,<sp/>__mem_name,<sp/>__mem_value)<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/>static<sp/>const<sp/>__mem_type<sp/>__mem_name<sp/>=<sp/>__mem_value</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BOOST_NO_INCLASS_MEMBER_INITIALIZATION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>specializations<sp/>of<sp/>numeric_limits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>__number&gt;</highlight></codeline>
<codeline lineno="94" refid="classstd_1_1__Numeric__limits__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1__Numeric__limits__base" kindref="compound">_Numeric_limits_base</ref><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_specialized,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits,<sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_signed,<sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_integer,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_exact,<sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix,<sp/>0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>epsilon()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>round_error()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent,<sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent10,<sp/>0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent,<sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent10,<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_infinity,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_quiet_NaN,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_signaling_NaN,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(float_denorm_style,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_denorm,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denorm_absent);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm_loss,<sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>infinity()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>quiet_NaN()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>signaling_NaN()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>denorm_min()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__number();<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_iec559,<sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_bounded,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_modulo,<sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>traps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>tinyness_before,<sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(float_round_style,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>round_style,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>round_toward_zero);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Int,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Int<sp/>__imin,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Int<sp/>__imax,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__idigits<sp/>=<sp/>-1&gt;</highlight></codeline>
<codeline lineno="148" refid="classstd_1_1__Integer__limits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Numeric__limits__base" kindref="compound">_Numeric_limits_base</ref>&lt;_Int&gt;<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_specialized,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Int<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__imin;<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Int<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__imax;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digits,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__idigits<sp/>&lt;<sp/>0)<sp/>?<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_Int)<sp/>*<sp/>CHAR_BIT)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(__imin<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>1)<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>__idigits);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10,<sp/>(digits<sp/>*<sp/>301)<sp/>/<sp/>1000);<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>2<sp/>=<sp/>0.301029995664...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_signed,<sp/><sp/>__imin<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_integer,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_exact,<sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><sp/>radix,<sp/><sp/><sp/><sp/><sp/><sp/>2);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_bounded,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_modulo,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_BIG_ENDIAN)</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Number,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1float__helper" kindref="compound">float_helper</ref>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Number<sp/>get_word()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sizeof(long<sp/>double)<sp/>==<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_S_word[4]<sp/>=<sp/>{<sp/>Word,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Number*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;_S_word);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Number,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="187" refid="structstd_1_1float__helper" refkind="compound"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1float__helper" kindref="compound">float_helper</ref>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Number<sp/>get_word()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sizeof(long<sp/>double)<sp/>==<sp/>12,<sp/>but<sp/>only<sp/>10<sp/>bytes<sp/>significant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_S_word[4]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>Word<sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Number*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;_S_word)+16-</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Number)<sp/>==<sp/>12<sp/>?<sp/>10<sp/>:<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Number)));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>floating-point<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">__number,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Digits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Digits10,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__MinExp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__MaxExp,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__MinExp10,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__MaxExp10,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__InfinityWord,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__QNaNWord,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__SNaNWord,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__IsIEC559,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_round_style<sp/>__RoundStyle&gt;</highlight></codeline>
<codeline lineno="208" refid="classstd_1_1__Floating__limits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1__Floating__limits" kindref="compound">_Floating_limits</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Numeric__limits__base" kindref="compound">_Numeric_limits_base</ref>&lt;__number&gt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_specialized,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits,<sp/><sp/><sp/>__Digits);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digits10,<sp/>__Digits10);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_signed,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>radix,<sp/>2);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent,<sp/><sp/><sp/>__MinExp);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent,<sp/><sp/><sp/>__MaxExp);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>min_exponent10,<sp/>__MinExp10);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>max_exponent10,<sp/>__MaxExp10);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_infinity,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_quiet_NaN,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_signaling_NaN,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(float_denorm_style,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_denorm,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denorm_indeterminate);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>has_denorm_loss,<sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>infinity()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1float__helper" kindref="compound">float_helper&lt;__number, __InfinityWord&gt;::get_word</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>quiet_NaN()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1float__helper" kindref="compound">float_helper&lt;__number,__QNaNWord&gt;::get_word</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__number<sp/>signaling_NaN()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1float__helper" kindref="compound">float_helper&lt;__number,__SNaNWord&gt;::get_word</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_iec559,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>__IsIEC559);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>is_bounded,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>traps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>was:<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>tinyness_before,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>BOOST_STL_DECLARE_LIMITS_MEMBER(float_round_style,<sp/>round_style,<sp/>__RoundStyle);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>unspecialized<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="257" refid="classstd_1_1numeric__limits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Numeric__limits__base" kindref="compound">_Numeric_limits_base</ref>&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specializations<sp/>for<sp/>all<sp/>built-in<sp/>integral<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="262" refid="classstd_1_1numeric__limits_3_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;bool&gt;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;bool,<sp/>false,<sp/>true,<sp/>0&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="267" refid="classstd_1_1numeric__limits_3_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;char&gt;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;char,<sp/>CHAR_MIN,<sp/>CHAR_MAX&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="272" refid="classstd_1_1numeric__limits_3_01signed_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;signed<sp/>char&gt;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;signed<sp/>char,<sp/>SCHAR_MIN,<sp/>SCHAR_MAX&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="277" refid="classstd_1_1numeric__limits_3_01unsigned_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;unsigned<sp/>char&gt;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;unsigned<sp/>char,<sp/>0,<sp/>UCHAR_MAX&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="283" refid="classstd_1_1numeric__limits_3_01wchar__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;wchar_t&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">#if<sp/>!defined(WCHAR_MAX)<sp/>||<sp/>!defined(WCHAR_MIN)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__CYGWIN__)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;wchar_t,<sp/>0,<sp/>USHRT_MAX&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__hppa)</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>has<sp/>&quot;unsigned<sp/>int&quot;<sp/>as<sp/>the<sp/>underlying<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;wchar_t,<sp/>0,<sp/>UINT_MAX&gt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>wchar_t<sp/>has<sp/>&quot;int&quot;<sp/>as<sp/>the<sp/>underlying<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;wchar_t,<sp/>INT_MIN,<sp/>INT_MAX&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>WCHAR_MIN<sp/>and<sp/>WCHAR_MAX<sp/>defined,<sp/>so<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;wchar_t,<sp/>WCHAR_MIN,<sp/>WCHAR_MAX&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"></highlight><highlight class="normal">{};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="302" refid="classstd_1_1numeric__limits_3_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;short&gt;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;short,<sp/>SHRT_MIN,<sp/>SHRT_MAX&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="307" refid="classstd_1_1numeric__limits_3_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;unsigned<sp/>short&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;unsigned<sp/>short,<sp/>0,<sp/>USHRT_MAX&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="312" refid="classstd_1_1numeric__limits_3_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;int&gt;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;int,<sp/>INT_MIN,<sp/>INT_MAX&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="317" refid="classstd_1_1numeric__limits_3_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;unsigned<sp/>int&gt;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;unsigned<sp/>int,<sp/>0,<sp/>UINT_MAX&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="322" refid="classstd_1_1numeric__limits_3_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;long&gt;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;long,<sp/>LONG_MIN,<sp/>LONG_MAX&gt;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="327" refid="classstd_1_1numeric__limits_3_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;unsigned<sp/>long&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Integer__limits" kindref="compound">_Integer_limits</ref>&lt;unsigned<sp/>long,<sp/>0,<sp/>ULONG_MAX&gt;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>have<sp/>long<sp/>long,<sp/>but<sp/>don&apos;t<sp/>define<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LONGLONG_MIN<sp/>and<sp/>LONGLONG_MAX<sp/>macros<sp/>in<sp/>limits.h.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assumes<sp/>that<sp/>long<sp/>long<sp/>is<sp/>64<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(LONGLONG_MAX)<sp/>&amp;&amp;<sp/>!defined(ULONGLONG_MAX)</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ULONGLONG_MAX<sp/>0xffffffffffffffffLLU</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>LONGLONG_MAX<sp/>0x7fffffffffffffffLL</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(LONGLONG_MIN)</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>LONGLONG_MIN<sp/>(-LONGLONG_MAX<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ULONGLONG_MIN)</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ULONGLONG_MIN<sp/>0</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__GNUC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specializations<sp/>for<sp/>all<sp/>built-in<sp/>floating-point<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classstd_1_1numeric__limits_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1numeric__limits" kindref="compound">numeric_limits</ref>&lt;float&gt;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1__Floating__limits" kindref="compound">_Floating_limits</ref>&lt;float,<sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_MANT_DIG,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_DIG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_MIN_EXP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_MAX_EXP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_MIN_10_EXP,<sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLT_MAX_10_EXP,<sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">#if<sp/>defined(BOOST_BIG_ENDIAN)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7f80<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7f81<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7fc1<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7f800000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7f810000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7fc10000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conforms<sp/>to<sp/>iec559</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>round_to_nearest&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>min<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>FLT_MIN;<sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>denorm_min()<sp/>throw()<sp/>{<sp/>return<sp/>FLT_MIN;<sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>max<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>FLT_MAX;<sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>epsilon()<sp/>throw()<sp/>{<sp/>return<sp/>FLT_EPSILON;<sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>round_error()<sp/>throw()<sp/>{<sp/>return<sp/>0.5f;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Units:<sp/>ulps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classstd_1_1numeric__limits_3_01double_01_4" refkind="compound"><highlight class="normal">template&lt;&gt;<sp/>class<sp/>numeric_limits&lt;double&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>_Floating_limits&lt;double,<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_MANT_DIG,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_DIG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_MIN_EXP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_MAX_EXP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_MIN_10_EXP,<sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBL_MAX_10_EXP,<sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">#if<sp/>defined(BOOST_BIG_ENDIAN)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff0<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff1<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff9<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff00000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff10000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff90000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conforms<sp/>to<sp/>iec559</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>round_to_nearest&gt;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>min<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>DBL_MIN;<sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>denorm_min()<sp/>throw()<sp/>{<sp/>return<sp/>DBL_MIN;<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>max<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>DBL_MAX;<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>epsilon()<sp/>throw()<sp/>{<sp/>return<sp/>DBL_EPSILON;<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>round_error()<sp/>throw()<sp/>{<sp/>return<sp/>0.5;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Units:<sp/>ulps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classstd_1_1numeric__limits_3_01long_01double_01_4" refkind="compound"><highlight class="normal">template&lt;&gt;<sp/>class<sp/>numeric_limits&lt;long<sp/>double&gt;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>_Floating_limits&lt;long<sp/>double,<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_MANT_DIG,<sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_DIG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>digits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_MIN_EXP,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_MAX_EXP,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_MIN_10_EXP,</highlight><highlight class="comment">//<sp/>Minimum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDBL_MAX_10_EXP,</highlight><highlight class="comment">//<sp/>Maximum<sp/>base<sp/>10<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">#if<sp/>defined(BOOST_BIG_ENDIAN)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff0<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff1<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ff9<sp/>&lt;&lt;<sp/>(sizeof(int)*CHAR_BIT-16),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7fff8000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>+infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7fffc000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>quiet<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7fff9000u,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>word<sp/>of<sp/>signaling<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>conform<sp/>to<sp/>iec559</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>round_to_nearest&gt;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>double<sp/>min<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>LDBL_MIN;<sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>double<sp/>denorm_min()<sp/>throw()<sp/>{<sp/>return<sp/>LDBL_MIN;<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>double<sp/>max<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>()<sp/>throw()<sp/>{<sp/>return<sp/>LDBL_MAX;<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>double<sp/>epsilon()<sp/>throw()<sp/>{<sp/>return<sp/>LDBL_EPSILON;<sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>double<sp/>round_error()<sp/>throw()<sp/>{<sp/>return<sp/>4;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Units:<sp/>ulps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>BOOST_SGI_CPP_LIMITS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>Variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mode:C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp"/>
  </compounddef>
</doxygen>
