<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1Bool_1_1Eq" kind="class" prot="public">
    <compoundname>Gecode::Int::Bool::Eq</compoundname>
    <basecompoundref refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary" prot="public" virt="non-virtual">Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</basecompoundref>
    <includes refid="bool_8hh" local="no">bool.hh</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>BVA</declname>
        <defname>BVA</defname>
      </param>
      <param>
        <type>class</type>
        <declname>BVB</declname>
        <defname>BVB</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1ad8b4c1047d04be7422f9f6d0cde22fd0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::Eq</definition>
        <argsstring>(Home home, BVA b0, BVB b1)</argsstring>
        <name>Eq</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
<para>Constructor for posting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="110" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1aad3f1c7e36c41ca3db130203a39190a4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::Eq</definition>
        <argsstring>(Space &amp;home, bool share, Eq &amp;p)</argsstring>
        <name>Eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1Bool_1_1Eq" kindref="compound">Eq</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="112" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="47" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1a4e74b19dee71c64fe630aeab5475a1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::Eq</definition>
        <argsstring>(Space &amp;home, bool share, Propagator &amp;p, BVA b0, BVB b1)</argsstring>
        <name>Eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
<para>Constructor for rewriting <emphasis>p</emphasis> during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="115" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1a20ec7096082411da792bef5b3debbb5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGecode_1_1Actor" kindref="compound">Actor</ref> *</type>
        <definition>Actor * Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>copy</name>
        <reimplements refid="classGecode_1_1Actor_1a67b240e2810720846c3632c94cc9c99d">copy</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Copy propagator during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="118" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1a73e2167f11a8c9e89b42bf8eefaeffd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::propagate</definition>
        <argsstring>(Space &amp;home, const ModEventDelta &amp;med)</argsstring>
        <name>propagate</name>
        <reimplements refid="classGecode_1_1Propagator_1ad2dc98c1345222892592339948c6cde1">propagate</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref> &amp;</type>
          <declname>med</declname>
        </param>
        <briefdescription>
<para>Perform propagation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="120" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="88" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1Eq_1a0056dade14f752481f1b74c70c1bb32c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;::post</definition>
        <argsstring>(Home home, BVA x0, BVB x1)</argsstring>
        <name>post</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator <formula id="19">$ x_0 = x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="122" column="1" bodyfile="/usr/include/gecode/int/bool/eq.hpp" bodystart="64" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boolean equality propagator. </para>    </briefdescription>
    <detaileddescription>
<para>Requires<programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;gecode/int/bool.hh&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2013">
        <label>Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary"/>
        <childnode refid="2014" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2014">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="2015" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2015">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="2016" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2016">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
      <node id="2012">
        <label>Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1Eq"/>
        <childnode refid="2013" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2022">
        <label>BVA</label>
      </node>
      <node id="2023">
        <label>BVB</label>
      </node>
      <node id="2018">
        <label>Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary"/>
        <childnode refid="2019" relation="public-inheritance">
        </childnode>
        <childnode refid="2022" relation="usage">
          <edgelabel>x0</edgelabel>
        </childnode>
        <childnode refid="2023" relation="usage">
          <edgelabel>x1</edgelabel>
        </childnode>
      </node>
      <node id="2019">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="2020" relation="public-inheritance">
        </childnode>
        <childnode refid="2021" relation="usage">
          <edgelabel>advisors</edgelabel>
        </childnode>
      </node>
      <node id="2020">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="2021" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2021">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
      <node id="2017">
        <label>Gecode::Int::Bool::Eq&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1Eq"/>
        <childnode refid="2018" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/bool.hh" line="105" column="1" bodyfile="/usr/include/gecode/int/bool.hh" bodystart="105" bodyend="123"/>
    <listofallmembers>
      <member refid="classGecode_1_1Propagator_1a55629f061a0fd8ecb2a4c41aa1568e28" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Eq</scope><name>advise</name></member>
      <member refid="classGecode_1_1Propagator_1afee33d8aed2bc9debee126f17b5015cf" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>advisors</name></member>
      <member refid="classGecode_1_1Propagator_1a593de773d2204f47ea365a99df2f75d0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>afc</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a49fe87b59f29b5e7e227ba98e4af83fc" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a98ed1862c29e8474d55d518a6d4af297" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a98afca96b38d3dcd270cd4ebda3e3eae" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1ActorLink_1a8427f41a27a72b52ceb52d0fdad21063" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::Eq</scope><name>cast</name></member>
      <member refid="classGecode_1_1ActorLink_1a464526456db41981f82a1193a8b4e569" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::Eq</scope><name>cast</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1a20ec7096082411da792bef5b3debbb5c" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Eq</scope><name>copy</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a47ef9a9ee4b5744c9164e58db3628665" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Eq</scope><name>cost</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a39f81fbdfe8969b5e9c0a3b43de71b1d" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Eq</scope><name>dispose</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1ad8b4c1047d04be7422f9f6d0cde22fd0" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>Eq</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1aad3f1c7e36c41ca3db130203a39190a4" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>Eq</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1a4e74b19dee71c64fe630aeab5475a1fe" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>Eq</name></member>
      <member refid="classGecode_1_1Propagator_1a3b286c7aec9843b60a531b495015b5f7" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>fwd</name></member>
      <member refid="classGecode_1_1Propagator_1ae9dfa55e47e4ff8e0c8e4c2a6efdbfc0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>med</name></member>
      <member refid="classGecode_1_1Propagator_1a4905db55af49af8f38558bdbcf5fd4a2" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>modeventdelta</name></member>
      <member refid="classGecode_1_1Actor_1a388f671145dcf906f81d22bde2dc0f3d" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Actor_1ac28b9601b530076a1bda75834487f898" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>operator new</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1a0056dade14f752481f1b74c70c1bb32c" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>post</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1Eq_1a73e2167f11a8c9e89b42bf8eefaeffd1" prot="public" virt="virtual"><scope>Gecode::Int::Bool::Eq</scope><name>propagate</name></member>
      <member refid="classGecode_1_1Propagator_1a891f3e84cde2e8e60f8ad9340ad74b05" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1afeaeed8dae67de4313858bd82fdae5d0" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1a1781b5b0df38c39dddca4b44c3a00530" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>size</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1ac25e6a75673c3e67093b553f10388672" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>x0</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a827d03e8a8bf0f2ff4cdd423d0f9ec96" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::Eq</scope><name>x1</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
