<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="intel_8hpp" kind="file">
    <compoundname>intel.hpp</compoundname>
    <includes refid="common__edg_8hpp" local="yes">gecode/third-party/boost/config/compiler/common_edg.hpp</includes>
    <incdepgraph>
      <node id="34150">
        <label>/usr/include/gecode/third-party/boost/config/compiler/intel.hpp</label>
        <link refid="intel.hpp"/>
        <childnode refid="34151" relation="include">
        </childnode>
      </node>
      <node id="34151">
        <label>gecode/third-party/boost/config/compiler/common_edg.hpp</label>
        <link refid="common__edg_8hpp_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="intel_8hpp_1a78005f877b1cc90480de16ddfd9a0def" prot="public" static="no">
        <name>BOOST_COMPILER</name>
        <initializer>&quot;Intel C++ version &quot; BOOST_STRINGIZE(BOOST_INTEL_CXX_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="40" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intel_8hpp_1aad0963b6b076023c720afb7bede87bbf" prot="public" static="no">
        <name>BOOST_INTEL</name>
        <initializer>BOOST_INTEL_CXX_VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="42" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intel_8hpp_1a057dd6aaea64b28d0712b473b54236c0" prot="public" static="no">
        <name>BOOST_INTEL_LINUX</name>
        <initializer>BOOST_INTEL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="47" column="12" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intel_8hpp_1a7741217677869546396dfa921c058be9" prot="public" static="no">
        <name>BOOST_NO_INTRINSIC_WCHAR_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="88" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intel_8hpp_1a9203431bad3691de147b7584c284cd1f" prot="public" static="no">
        <name>BOOST_NO_TWO_PHASE_NAME_LOOKUP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="116" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intel_8hpp_1a82c7df258bbdbe4a09ce17dabfc4a451" prot="public" static="no">
        <name>BOOST_NO_FENV_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" line="227" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>John<sp/>Maddock<sp/>2001-8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Peter<sp/>Dimov<sp/>2001.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Jens<sp/>Maurer<sp/>2001.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>David<sp/>Abrahams<sp/>2002<sp/>-<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Aleksey<sp/>Gurtovoy<sp/>2002<sp/>-<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Guillaume<sp/>Melquiond<sp/>2002<sp/>-<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Beman<sp/>Dawes<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Martin<sp/>Wille<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Use,<sp/>modification<sp/>and<sp/>distribution<sp/>are<sp/>subject<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>See<sp/>http://www.boost.org<sp/>for<sp/>most<sp/>recent<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Intel<sp/>compiler<sp/>setup:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gecode/third-party/boost/config/compiler/common_edg.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_CXX_VERSION<sp/>__INTEL_COMPILER</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ICL)</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_CXX_VERSION<sp/>__ICL</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ICC)</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_CXX_VERSION<sp/>__ICC</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ECC)</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_CXX_VERSION<sp/>__ECC</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flags<sp/>determined<sp/>by<sp/>comparing<sp/>output<sp/>of<sp/>&apos;icpc<sp/>-dM<sp/>-E&apos;<sp/>with<sp/>and<sp/>without<sp/>&apos;-std=c++0x&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!(defined(_WIN32)<sp/>||<sp/>defined(_WIN64))<sp/>&amp;&amp;<sp/>defined(__STDC_HOSTED__)<sp/>&amp;&amp;<sp/>__STDC_HOSTED__)<sp/>||<sp/>defined(__GXX_EXPERIMENTAL_CPP0X__)</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_STDCXX0X</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&gt;=<sp/>1600)</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_STDCXX0X</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_INTEL_STDCXX0X</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_COMPILER<sp/>&quot;Intel<sp/>C++<sp/>C++0x<sp/>mode<sp/>version<sp/>&quot;<sp/>BOOST_STRINGIZE(BOOST_INTEL_CXX_VERSION)</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_COMPILER<sp/>&quot;Intel<sp/>C++<sp/>version<sp/>&quot;<sp/>BOOST_STRINGIZE(BOOST_INTEL_CXX_VERSION)</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_INTEL<sp/>BOOST_INTEL_CXX_VERSION</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(_WIN64)</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_WIN<sp/>BOOST_INTEL</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_INTEL_LINUX<sp/>BOOST_INTEL</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&lt;=<sp/>500)<sp/>&amp;&amp;<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_EXPLICIT_FUNCTION_TEMPLATE_ARGUMENTS</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_TEMPLATE_TEMPLATES</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&lt;=<sp/>600)</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&lt;=<sp/>1300)<sp/>//<sp/>added<sp/>check<sp/>for<sp/>&lt;=<sp/>VC<sp/>7<sp/>(Peter<sp/>Dimov)</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boost<sp/>libraries<sp/>assume<sp/>strong<sp/>standard<sp/>conformance<sp/>unless<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>indicated<sp/>by<sp/>a<sp/>config<sp/>macro.<sp/>As<sp/>configured<sp/>by<sp/>Intel,<sp/>the<sp/>EDG<sp/>front-end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>certain<sp/>compiler<sp/>options<sp/>be<sp/>set<sp/>to<sp/>achieve<sp/>that<sp/>strong<sp/>conformance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Particularly<sp/>/Qoption,c,--arg_dep_lookup<sp/>(reported<sp/>by<sp/>Kirk<sp/>Klobe<sp/>&amp;<sp/>Thomas<sp/>Witt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>/Zc:wchar_t,forScope.<sp/>See<sp/>boost-root/tools/build/intel-win32-tools.jam<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>details<sp/>as<sp/>they<sp/>apply<sp/>to<sp/>particular<sp/>versions<sp/>of<sp/>the<sp/>compiler.<sp/>When<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>does<sp/>not<sp/>predefine<sp/>a<sp/>macro<sp/>indicating<sp/>if<sp/>an<sp/>option<sp/>has<sp/>been<sp/>set,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>config<sp/>file<sp/>simply<sp/>assumes<sp/>the<sp/>option<sp/>has<sp/>been<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thus<sp/>BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP<sp/>will<sp/>not<sp/>be<sp/>defined,<sp/>even<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>option<sp/>is<sp/>not<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_SWPRINTF</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Void<sp/>returns,<sp/>64<sp/>bit<sp/>integrals<sp/>don&apos;t<sp/>work<sp/>when<sp/>emulating<sp/>VC<sp/>6<sp/>(Peter<sp/>Dimov)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&lt;=<sp/>1200)</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_VOID_RETURNS</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_INTEGRAL_INT64_T</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&lt;=<sp/>710)<sp/>&amp;&amp;<sp/>defined(_WIN32)</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_POINTER_TO_MEMBER_TEMPLATE_PARAMETERS</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://aspn.activestate.com/ASPN/Mail/Message/boost/1614864</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_INTEL_CXX_VERSION<sp/>&lt;<sp/>600</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>test<sp/>the<sp/>macro<sp/>_WCHAR_T_DEFINED<sp/>to<sp/>check<sp/>if<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supports<sp/>wchar_t<sp/>natively.<sp/>*BUT*<sp/>there<sp/>is<sp/>a<sp/>problem<sp/>here:<sp/>the<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>headers<sp/>define<sp/>this<sp/>macro<sp/>if<sp/>they<sp/>typedef<sp/>wchar_t.<sp/>Anyway,<sp/>we&apos;re<sp/>lucky</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>they<sp/>define<sp/>it<sp/>without<sp/>a<sp/>value,<sp/>while<sp/>Intel<sp/>C++<sp/>defines<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>1.<sp/>So<sp/>we<sp/>can<sp/>check<sp/>its<sp/>value<sp/>to<sp/>see<sp/>if<sp/>the<sp/>macro<sp/>was<sp/>defined<sp/>natively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Under<sp/>UNIX,<sp/>the<sp/>situation<sp/>is<sp/>exactly<sp/>the<sp/>same,<sp/>but<sp/>the<sp/>macro<sp/>_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>((_WCHAR_T_DEFINED<sp/>+<sp/>0)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((_WCHAR_T<sp/>+<sp/>0)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL)</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>when<sp/>Intel<sp/>is<sp/>emulating<sp/>this<sp/>gcc<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(All<sp/>Intel<sp/>versions<sp/>prior<sp/>to<sp/>9.0.26,<sp/>and<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>later<sp/>than<sp/>that<sp/>if<sp/>they<sp/>are<sp/>set<sp/>up<sp/>to<sp/>emulate<sp/>gcc<sp/>3.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>earlier):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>((__GNUC__<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&lt;=<sp/>2))<sp/>||<sp/>(BOOST_INTEL<sp/>&lt;<sp/>900)<sp/>||<sp/>(__INTEL_COMPILER_BUILD_DATE<sp/>&lt;<sp/>20050912)</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&lt;<sp/>4))<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&lt;=<sp/>1200)</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>GCC<sp/>or<sp/>VC<sp/>emulation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_NO_TWO_PHASE_NAME_LOOKUP</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>we<sp/>have<sp/>actually<sp/>got<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>correctly,<sp/>if<sp/>we<sp/>don&apos;t<sp/>do<sp/>this<sp/>now,<sp/>we<sp/>will<sp/>get<sp/>errors<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>type_traits<sp/>code<sp/>among<sp/>other<sp/>things,<sp/>getting<sp/>this<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>Intel<sp/>compiler<sp/>is<sp/>actually<sp/>remarkably<sp/>fragile<sp/>and<sp/>tricky:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_INTRINSIC_WCHAR_T)</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cwchar&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assert_no_intrinsic_wchar_t;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assert_no_intrinsic_wchar_t&lt;wchar_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>see<sp/>an<sp/>error<sp/>here<sp/>then<sp/>you<sp/>need<sp/>to<sp/>unset<sp/>BOOST_NO_INTRINSIC_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>it<sp/>is<sp/>defined<sp/>above:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>assert_no_intrinsic_wchar_t&lt;unsigned<sp/>short&gt;::type<sp/>assert_no_intrinsic_wchar_t_;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assert_intrinsic_wchar_t;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assert_intrinsic_wchar_t&lt;wchar_t&gt;<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>see<sp/>an<sp/>error<sp/>here<sp/>then<sp/>define<sp/>BOOST_NO_INTRINSIC_WCHAR_T<sp/>on<sp/>the<sp/>command<sp/>line:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assert_intrinsic_wchar_t&lt;unsigned<sp/>short&gt;<sp/>{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER+0<sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>_MSC_VER<sp/>&gt;=<sp/>1200</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_MS_INT64</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_SWPRINTF</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_TWO_PHASE_NAME_LOOKUP</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32)</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_DISABLE_WIN32</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I<sp/>checked<sp/>version<sp/>6.0<sp/>build<sp/>020312Z,<sp/>it<sp/>implements<sp/>the<sp/>NRVO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Correct<sp/>this<sp/>as<sp/>you<sp/>find<sp/>out<sp/>which<sp/>version<sp/>of<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implemented<sp/>the<sp/>NRVO<sp/>first.<sp/><sp/>(Daniel<sp/>Frey)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&gt;=<sp/>600)</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_NRVO</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>versions<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>support<sp/>Intel<sp/>prior<sp/>to<sp/>version<sp/>5.0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_INTEL_CXX_VERSION<sp/>&lt;<sp/>500</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>&quot;Compiler<sp/>not<sp/>supported<sp/>or<sp/>configured<sp/>-<sp/>please<sp/>reconfigure&quot;</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Intel<sp/>on<sp/>MacOS<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>&amp;&amp;<sp/>defined(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_TWO_PHASE_NAME_LOOKUP</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Intel<sp/>on<sp/>Altix<sp/>Itanium</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__itanium__)<sp/>&amp;&amp;<sp/>defined(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_TWO_PHASE_NAME_LOOKUP</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>attempt<sp/>to<sp/>value-initialize<sp/>a<sp/>pointer-to-member<sp/>may<sp/>trigger<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>error<sp/>on<sp/>Intel<sp/>&lt;=<sp/>11.1<sp/>(last<sp/>checked<sp/>version),<sp/>as<sp/>was<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reported<sp/>by<sp/>John<sp/>Maddock,<sp/>Intel<sp/>support<sp/>issue<sp/>589832,<sp/>May<sp/>2010.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moreover,<sp/>according<sp/>to<sp/>test<sp/>results<sp/>from<sp/>Huang-Vista-x86_32_intel,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>intel-vc9-win-11.1<sp/>may<sp/>leave<sp/>a<sp/>non-POD<sp/>array<sp/>uninitialized,<sp/>in<sp/>some<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cases<sp/>when<sp/>it<sp/>should<sp/>be<sp/>value-initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Niels<sp/>Dekker,<sp/>LKEB,<sp/>May<sp/>2010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__INTEL_COMPILER<sp/>&lt;=<sp/>1110</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_COMPLETE_VALUE_INITIALIZATION</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dynamic<sp/>shared<sp/>object<sp/>(DSO)<sp/>and<sp/>dynamic-link<sp/>library<sp/>(DLL)<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_SYMBOL_EXPORT<sp/>__attribute__((visibility(&quot;default&quot;)))</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_SYMBOL_IMPORT</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_SYMBOL_VISIBLE<sp/>__attribute__((visibility(&quot;default&quot;)))</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++0x<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>ICC<sp/>added<sp/>static_assert<sp/>in<sp/>11.0<sp/>(first<sp/>version<sp/>with<sp/>C++0x<sp/>support)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_INTEL_STDCXX0X)</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_STATIC_ASSERT</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>pass<sp/>our<sp/>test<sp/>cases,<sp/>but<sp/>aren&apos;t<sp/>officially<sp/>supported<sp/>according<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/>undef<sp/><sp/>BOOST_NO_LAMBDAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/>undef<sp/><sp/>BOOST_NO_DECLTYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/>undef<sp/><sp/>BOOST_NO_AUTO_DECLARATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/>undef<sp/><sp/>BOOST_NO_AUTO_MULTIDECLARATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_INTEL_STDCXX0X)<sp/>&amp;&amp;<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&gt;=<sp/>1200)</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_RVALUE_REFERENCES</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="comment">//#<sp/><sp/>undef<sp/><sp/>BOOST_NO_SCOPED_ENUMS<sp/><sp/>//<sp/>doesn&apos;t<sp/>really<sp/>work!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_DELETED_FUNCTIONS</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_DEFAULTED_FUNCTIONS</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_LAMBDAS</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_DECLTYPE</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_AUTO_DECLARATIONS</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/><sp/>BOOST_NO_AUTO_MULTIDECLARATIONS</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&lt;<sp/>1200)</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fenv.h<sp/>appears<sp/>not<sp/>to<sp/>work<sp/>with<sp/>Intel<sp/>prior<sp/>to<sp/>12.0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_FENV_H</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>last<sp/>known<sp/>and<sp/>checked<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BOOST_INTEL_CXX_VERSION<sp/>&gt;<sp/>1200)</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_ASSERT_CONFIG)</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>error<sp/>&quot;Unknown<sp/>compiler<sp/>version<sp/>-<sp/>please<sp/>run<sp/>the<sp/>configure<sp/>tests<sp/>and<sp/>report<sp/>the<sp/>results&quot;</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>don&apos;t<sp/>emit<sp/>this<sp/>warning<sp/>any<sp/>more,<sp/>since<sp/>we<sp/>have<sp/>so<sp/>few</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>defect<sp/>macros<sp/>set<sp/>anyway<sp/>(just<sp/>the<sp/>one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/>pragma<sp/>message(&quot;Unknown<sp/>compiler<sp/>version<sp/>-<sp/>please<sp/>run<sp/>the<sp/>configure<sp/>tests<sp/>and<sp/>report<sp/>the<sp/>results&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/config/compiler/intel.hpp"/>
  </compounddef>
</doxygen>
