<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceGecode_1_1Iter_1_1Ranges" kind="namespace">
    <compoundname>Gecode::Iter::Ranges</compoundname>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1AddRange" prot="public">Gecode::Iter::Ranges::AddRange</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1SubRange" prot="public">Gecode::Iter::Ranges::SubRange</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Append" prot="public">Gecode::Iter::Ranges::Append</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1NaryAppend" prot="public">Gecode::Iter::Ranges::NaryAppend</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Array" prot="public">Gecode::Iter::Ranges::Array</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Cache" prot="public">Gecode::Iter::Ranges::Cache</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Compl" prot="public">Gecode::Iter::Ranges::Compl</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1ComplVal" prot="public">Gecode::Iter::Ranges::ComplVal</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Diff" prot="public">Gecode::Iter::Ranges::Diff</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Empty" prot="public">Gecode::Iter::Ranges::Empty</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Inter" prot="public">Gecode::Iter::Ranges::Inter</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1NaryInter" prot="public">Gecode::Iter::Ranges::NaryInter</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1RangeListIter" prot="public">Gecode::Iter::Ranges::RangeListIter</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Map" prot="public">Gecode::Iter::Ranges::Map</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Map_3_01I_00_01M_00_01false_01_4" prot="public">Gecode::Iter::Ranges::Map&lt; I, M, false &gt;</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Map_3_01I_00_01M_00_01true_01_4" prot="public">Gecode::Iter::Ranges::Map&lt; I, M, true &gt;</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1MinMax" prot="public">Gecode::Iter::Ranges::MinMax</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Minus" prot="public">Gecode::Iter::Ranges::Minus</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Negative" prot="public">Gecode::Iter::Ranges::Negative</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Offset" prot="public">Gecode::Iter::Ranges::Offset</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Positive" prot="public">Gecode::Iter::Ranges::Positive</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1RangeList" prot="public">Gecode::Iter::Ranges::RangeList</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1ScaleUp" prot="public">Gecode::Iter::Ranges::ScaleUp</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1ScaleDown" prot="public">Gecode::Iter::Ranges::ScaleDown</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1SingletonAppend" prot="public">Gecode::Iter::Ranges::SingletonAppend</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Singleton" prot="public">Gecode::Iter::Ranges::Singleton</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Size" prot="public">Gecode::Iter::Ranges::Size</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1Union" prot="public">Gecode::Iter::Ranges::Union</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1NaryUnion" prot="public">Gecode::Iter::Ranges::NaryUnion</innerclass>
    <innerclass refid="classGecode_1_1Iter_1_1Ranges_1_1ToValues" prot="public">Gecode::Iter::Ranges::ToValues</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__FuncIterRangesOp_1ga231b2059e20903d95675dab6351c0694" prot="public" static="no">
        <name>CompareStatus</name>
        <enumvalue id="group__FuncIterRangesOp_1gga231b2059e20903d95675dab6351c0694a2638a08c99d74d5c11119e1c3aa82056" prot="public">
          <name>CS_SUBSET</name>
          <briefdescription>
<para>First is subset of second iterator. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__FuncIterRangesOp_1gga231b2059e20903d95675dab6351c0694a5dbce948b4886b5ad1caf216d1ca4d3d" prot="public">
          <name>CS_DISJOINT</name>
          <briefdescription>
<para>Intersection is empty. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__FuncIterRangesOp_1gga231b2059e20903d95675dab6351c0694a1823ed20e48255de4d5a0cf6644e8fa7" prot="public">
          <name>CS_NONE</name>
          <briefdescription>
<para>Neither of the above. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Comapre two iterators with each other. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="64" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="64" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__FuncIterRangesOp_1ga9f9ab6d72452ad86b95cd65abf463161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int Gecode::Iter::Ranges::size</definition>
        <argsstring>(I &amp;i)</argsstring>
        <name>size</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><ref refid="classGecode_1_1Iter_1_1Ranges_1_1Size" kindref="compound">Size</ref> of all ranges of range iterator <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="49" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1gabc0077b3bcdd3d4e4ff6ab306f163c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::Iter::Ranges::equal</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>equal</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterators <emphasis>i</emphasis> and <emphasis>j</emphasis> are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="53" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1ga3e3d455a5dfd24404184fa2914cf3c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::Iter::Ranges::subset</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>subset</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterator <emphasis>i</emphasis> is subset of range iterator <emphasis>j</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="57" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1gae894b09d56b4a24232d79b577c8fffce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::Iter::Ranges::disjoint</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>disjoint</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterators <emphasis>i</emphasis> and <emphasis>j</emphasis> are disjoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="61" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1ga544c763f5400045d10bf8affc0768df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__FuncIterRangesOp_1ga231b2059e20903d95675dab6351c0694" kindref="member">CompareStatus</ref></type>
        <definition>CompareStatus Gecode::Iter::Ranges::compare</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>compare</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterator <emphasis>i</emphasis> is a subset of <emphasis>j</emphasis>, or whether they are disjoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="72" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="131" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1gabc0077b3bcdd3d4e4ff6ab306f163c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::Iter::Ranges::equal</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>equal</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterators <emphasis>i</emphasis> and <emphasis>j</emphasis> are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="88" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1ga3e3d455a5dfd24404184fa2914cf3c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::Iter::Ranges::subset</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>subset</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterator <emphasis>i</emphasis> is subset of range iterator <emphasis>j</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="101" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1gae894b09d56b4a24232d79b577c8fffce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::Iter::Ranges::disjoint</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>disjoint</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterators <emphasis>i</emphasis> and <emphasis>j</emphasis> are disjoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="116" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__FuncIterRangesOp_1ga544c763f5400045d10bf8affc0768df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class J</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__FuncIterRangesOp_1ga231b2059e20903d95675dab6351c0694" kindref="member">CompareStatus</ref></type>
        <definition>forceinline CompareStatus Gecode::Iter::Ranges::compare</definition>
        <argsstring>(I &amp;i, J &amp;j)</argsstring>
        <name>compare</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>J &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Check whether range iterator <emphasis>i</emphasis> is a subset of <emphasis>j</emphasis>, or whether they are disjoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-operations.hpp" line="131" column="1" bodyfile="/usr/include/gecode/iter/ranges-operations.hpp" bodystart="131" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Range iterators. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/iter/ranges-add.hpp" line="38" column="1"/>
  </compounddef>
</doxygen>
