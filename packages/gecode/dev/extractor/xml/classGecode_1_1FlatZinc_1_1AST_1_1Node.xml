<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1FlatZinc_1_1AST_1_1Node" kind="class" prot="public" abstract="yes">
    <compoundname>Gecode::FlatZinc::AST::Node</compoundname>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1Array" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::Array</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1ArrayAccess" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::ArrayAccess</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1Atom" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::Atom</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1BoolLit" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::BoolLit</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1Call" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::Call</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1FloatLit" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::FloatLit</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1IntLit" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::IntLit</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1SetLit" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::SetLit</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1String" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::String</derivedcompoundref>
    <derivedcompoundref refid="classGecode_1_1FlatZinc_1_1AST_1_1Var" prot="public" virt="non-virtual">Gecode::FlatZinc::AST::Var</derivedcompoundref>
    <includes refid="ast_8hh" local="no">ast.hh</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aa18417070f57c9af4011b86a90dd9963" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>Gecode::FlatZinc::AST::Node::~Node</definition>
        <argsstring>(void)</argsstring>
        <name>~Node</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="74" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a714f7b290019908fe5ef0efec1d84e04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::FlatZinc::AST::Node::append</definition>
        <argsstring>(Node *n)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>n</emphasis> to an array node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="77" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a88260fd0eabb620956c29f7c7b05e183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::hasAtom</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>hasAtom</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test if node has atom with <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="80" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="324" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aa5957d93c9016a66cb8218391c3a224b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isInt</definition>
        <argsstring>(int &amp;i)</argsstring>
        <name>isInt</name>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Test if node is int, if yes set <emphasis>i</emphasis> to the value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="82" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="367" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a9afcc32c6ae96e19b4dd69766de2e08b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isFloat</definition>
        <argsstring>(double &amp;i)</argsstring>
        <name>isFloat</name>
        <param>
          <type>double &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Test if node is float, if yes set <emphasis>d</emphasis> to the value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="84" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="376" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a95ebcdf87b7e46a1756f85905e9e444c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isCall</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>isCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test if node is function call with <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="86" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="337" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ad025ea160c39a800eb3b499a29f4e9c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Call" kindref="compound">Call</ref> *</type>
        <definition>Call * Gecode::FlatZinc::AST::Node::getCall</definition>
        <argsstring>(void)</argsstring>
        <name>getCall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return function call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="88" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a4ddcd813748efd7e612914cfc61454c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::hasCall</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>hasCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test if node is function call or array containing function call <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="90" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="353" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a8edf0c873287d0f92ebafa414f652ca0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Call" kindref="compound">Call</ref> *</type>
        <definition>Call * Gecode::FlatZinc::AST::Node::getCall</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>getCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return function call <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="92" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="385" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a271e09414e30895a48ab802a09cfdc1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Array" kindref="compound">Array</ref> *</type>
        <definition>Array * Gecode::FlatZinc::AST::Node::getArray</definition>
        <argsstring>(void)</argsstring>
        <name>getArray</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to an array node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="94" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="399" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abe48b355694673ed8bc23e6694901d10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Atom" kindref="compound">Atom</ref> *</type>
        <definition>Atom * Gecode::FlatZinc::AST::Node::getAtom</definition>
        <argsstring>(void)</argsstring>
        <name>getAtom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to an <ref refid="classGecode_1_1FlatZinc_1_1AST_1_1Atom" kindref="compound">Atom</ref> node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="96" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ad95fac54f5eeb6bec728e380177734d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gecode::FlatZinc::AST::Node::getVarName</definition>
        <argsstring>(void)</argsstring>
        <name>getVarName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return name of variable represented by this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="98" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="413" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abea8ae716612604e0b9561aae57251b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::FlatZinc::AST::Node::getIntVar</definition>
        <argsstring>(void)</argsstring>
        <name>getIntVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to an integer variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="100" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="419" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1add750d6f11c96d89c18337ca9a616c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::FlatZinc::AST::Node::getBoolVar</definition>
        <argsstring>(void)</argsstring>
        <name>getBoolVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a Boolean variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="102" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="425" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a63a64bde7ed095c11403636acb68822c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::FlatZinc::AST::Node::getFloatVar</definition>
        <argsstring>(void)</argsstring>
        <name>getFloatVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a <ref refid="namespaceGecode_1_1Float" kindref="compound">Float</ref> variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="104" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="431" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aea769788996bcbe3d35530e3393f0011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::FlatZinc::AST::Node::getSetVar</definition>
        <argsstring>(void)</argsstring>
        <name>getSetVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a set variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="106" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abc83be8a0565da08bbe8848643d8fdb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gecode::FlatZinc::AST::Node::getInt</definition>
        <argsstring>(void)</argsstring>
        <name>getInt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to an integer node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="109" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="443" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1afb8daa455fb1050bb9457641bcd4a081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::getBool</definition>
        <argsstring>(void)</argsstring>
        <name>getBool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a Boolean node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="111" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a44345c8a2177546a322a5fa5061be53e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gecode::FlatZinc::AST::Node::getFloat</definition>
        <argsstring>(void)</argsstring>
        <name>getFloat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a <ref refid="namespaceGecode_1_1Float" kindref="compound">Float</ref> node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="113" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="455" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a7f4606088f447c00d584bc293d73d84d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FlatZinc_1_1AST_1_1SetLit" kindref="compound">SetLit</ref> *</type>
        <definition>SetLit * Gecode::FlatZinc::AST::Node::getSet</definition>
        <argsstring>(void)</argsstring>
        <name>getSet</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a set literal node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="115" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="461" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1afc337aafc540f0222506ee3eacd4a920" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gecode::FlatZinc::AST::Node::getString</definition>
        <argsstring>(void)</argsstring>
        <name>getString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cast this node to a string node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="118" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="467" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abd4ed66a4647062f3090048a973cabb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isIntVar</definition>
        <argsstring>(void)</argsstring>
        <name>isIntVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is an integer variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="121" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ac58bdd215ef30a3fce05ab8958e813a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isBoolVar</definition>
        <argsstring>(void)</argsstring>
        <name>isBoolVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a Boolean variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="123" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="477" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a024fd8db719dd7e6a75751b7bf623730" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isSetVar</definition>
        <argsstring>(void)</argsstring>
        <name>isSetVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a set variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="125" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="481" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a350b36414263a1dd65a3021a870ae4c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isFloatVar</definition>
        <argsstring>(void)</argsstring>
        <name>isFloatVar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a float variable node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="127" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="485" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a91f7d7849685cc5d7a3ed9a731ad91c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isInt</definition>
        <argsstring>(void)</argsstring>
        <name>isInt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is an integer node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="129" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="489" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a7fcd5032ca4d07c686e1f915c2f3ea33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isFloat</definition>
        <argsstring>(void)</argsstring>
        <name>isFloat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a float node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="131" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="497" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a29cabd825fb460caed03d51b624cf670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isBool</definition>
        <argsstring>(void)</argsstring>
        <name>isBool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a Boolean node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="133" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a8713492078dff6e5e50aa0bdca303997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isString</definition>
        <argsstring>(void)</argsstring>
        <name>isString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a string node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="135" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a6e6c1cdd56b55530ef42b5f29d5b824c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isArray</definition>
        <argsstring>(void)</argsstring>
        <name>isArray</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is an array node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="137" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="509" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a39f04e9a92bac33e0b34f3955ca6d979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isSet</definition>
        <argsstring>(void)</argsstring>
        <name>isSet</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is a set literal node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="139" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abd2e0fb263a47f3364e9e209851dcc46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::FlatZinc::AST::Node::isAtom</definition>
        <argsstring>(void)</argsstring>
        <name>isAtom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if node is an atom node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="141" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="513" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ae71c6ef7039fea81ca018418796b7944" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Gecode::FlatZinc::AST::Node::print</definition>
        <argsstring>(std::ostream &amp;)=0</argsstring>
        <name>print</name>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1BoolLit_1a2b9b597d660d472ab9d5e700869c177f">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1IntLit_1a7b0eb9f1dcaebc24cb65c459e52f04be">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1FloatLit_1a6de3b2628e81982159b9543323268e17">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1SetLit_1ac8e57cdc6974a831b4a2d338ff832b4e">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1BoolVar_1aa10cf40aff163651e83cf673f54354b4">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1IntVar_1a0e3534e71debd60936cb004d1021fd75">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1FloatVar_1a071bcccedcb19c1403c22bcfcfcf2b8f">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1SetVar_1a8d09114c116ba82ba2a24d76573aaef7">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1Array_1a8fad6e6065029e02a9c8262fe24922c2">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1Call_1aef502a4ef39a2e1f3ee21b0f94b9fefc">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1ArrayAccess_1a14c02400594395c6d4e7c9be10b7f807">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1Atom_1a9f8b858525768be172a0c192538c8f22">print</reimplementedby>
        <reimplementedby refid="classGecode_1_1FlatZinc_1_1AST_1_1String_1a8b3b945625fe4d5e4f00866a4d01f5d7">print</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Output string representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/flatzinc/ast.hh" line="144" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node in a FlatZinc abstract syntax tree. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4434">
        <label>Gecode::FlatZinc::AST::BoolLit</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1BoolLit"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4440">
        <label>Gecode::FlatZinc::AST::Var</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1Var"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4433">
        <label>Gecode::FlatZinc::AST::Atom</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1Atom"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4442">
        <label>Gecode::FlatZinc::AST::FloatVar</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1FloatVar"/>
        <childnode refid="4440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4438">
        <label>Gecode::FlatZinc::AST::SetLit</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1SetLit"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4444">
        <label>Gecode::FlatZinc::AST::SetVar</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1SetVar"/>
        <childnode refid="4440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4435">
        <label>Gecode::FlatZinc::AST::Call</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1Call"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4430">
        <label>Gecode::FlatZinc::AST::Node</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1Node"/>
      </node>
      <node id="4441">
        <label>Gecode::FlatZinc::AST::BoolVar</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1BoolVar"/>
        <childnode refid="4440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4439">
        <label>Gecode::FlatZinc::AST::String</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1String"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4432">
        <label>Gecode::FlatZinc::AST::ArrayAccess</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1ArrayAccess"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4437">
        <label>Gecode::FlatZinc::AST::IntLit</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1IntLit"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4443">
        <label>Gecode::FlatZinc::AST::IntVar</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1IntVar"/>
        <childnode refid="4440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4431">
        <label>Gecode::FlatZinc::AST::Array</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1Array"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4436">
        <label>Gecode::FlatZinc::AST::FloatLit</label>
        <link refid="classGecode_1_1FlatZinc_1_1AST_1_1FloatLit"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/usr/include/gecode/flatzinc/ast.hh" line="71" column="1" bodyfile="/usr/include/gecode/flatzinc/ast.hh" bodystart="71" bodyend="145"/>
    <listofallmembers>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a714f7b290019908fe5ef0efec1d84e04" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>append</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a271e09414e30895a48ab802a09cfdc1a" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getArray</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abe48b355694673ed8bc23e6694901d10" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getAtom</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1afb8daa455fb1050bb9457641bcd4a081" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getBool</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1add750d6f11c96d89c18337ca9a616c96" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getBoolVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ad025ea160c39a800eb3b499a29f4e9c4" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getCall</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a8edf0c873287d0f92ebafa414f652ca0" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getCall</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a44345c8a2177546a322a5fa5061be53e" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getFloat</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a63a64bde7ed095c11403636acb68822c" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getFloatVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abc83be8a0565da08bbe8848643d8fdb0" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getInt</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abea8ae716612604e0b9561aae57251b5" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getIntVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a7f4606088f447c00d584bc293d73d84d" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getSet</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aea769788996bcbe3d35530e3393f0011" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getSetVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1afc337aafc540f0222506ee3eacd4a920" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getString</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ad95fac54f5eeb6bec728e380177734d2" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>getVarName</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a88260fd0eabb620956c29f7c7b05e183" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>hasAtom</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a4ddcd813748efd7e612914cfc61454c1" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>hasCall</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a6e6c1cdd56b55530ef42b5f29d5b824c" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isArray</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abd2e0fb263a47f3364e9e209851dcc46" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isAtom</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a29cabd825fb460caed03d51b624cf670" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isBool</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ac58bdd215ef30a3fce05ab8958e813a0" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isBoolVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a95ebcdf87b7e46a1756f85905e9e444c" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isCall</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a9afcc32c6ae96e19b4dd69766de2e08b" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isFloat</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a7fcd5032ca4d07c686e1f915c2f3ea33" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isFloat</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a350b36414263a1dd65a3021a870ae4c6" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isFloatVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aa5957d93c9016a66cb8218391c3a224b" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isInt</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a91f7d7849685cc5d7a3ed9a731ad91c4" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isInt</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1abd4ed66a4647062f3090048a973cabb7" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isIntVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a39f04e9a92bac33e0b34f3955ca6d979" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isSet</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a024fd8db719dd7e6a75751b7bf623730" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isSetVar</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1a8713492078dff6e5e50aa0bdca303997" prot="public" virt="non-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>isString</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1ae71c6ef7039fea81ca018418796b7944" prot="public" virt="pure-virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>print</name></member>
      <member refid="classGecode_1_1FlatZinc_1_1AST_1_1Node_1aa18417070f57c9af4011b86a90dd9963" prot="public" virt="virtual"><scope>Gecode::FlatZinc::AST::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
