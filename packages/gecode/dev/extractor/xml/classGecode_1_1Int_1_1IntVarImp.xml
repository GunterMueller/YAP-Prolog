<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1IntVarImp" kind="class" prot="public">
    <compoundname>Gecode::Int::IntVarImp</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IntVarImpBase</basecompoundref>
    <includes refid="int_2var-imp_8hpp" local="no">var-imp.hpp</includes>
    <innerclass refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" prot="protected">Gecode::Int::IntVarImp::RangeList</innerclass>
      <sectiondef kind="user-defined">
      <header>Value access</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a8a09f4f60960e40f5d65b81e1a3086ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::IntVarImp::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="216" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a384b0e2fff462537b096789a8252cc43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::IntVarImp::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return maximum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="218" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a57471071ccd52eab708e56f252eab3da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::IntVarImp::val</definition>
        <argsstring>(void) const </argsstring>
        <name>val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return assigned value (only if assigned) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="220" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1aa7cc5f71634703c00ddec72d5e67768d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT int</type>
        <definition>GECODE_INT_EXPORT int Gecode::Int::IntVarImp::med</definition>
        <argsstring>(void) const </argsstring>
        <name>med</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return median of domain (greatest element not greater than the median) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a5dff188f7276ae4f9abf057a8323b011" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::IntVarImp::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size (cardinality) of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="225" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a3d7f683d523cab38c4c8ff954db15b50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::IntVarImp::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of domain (distance between maximum and minimum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="227" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a920eec5fb3527fa20e70b645e1c53b9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::IntVarImp::regret_min</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain minimum (distance to next larger value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="229" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="262" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ad88c5db322bbbe24848a26f3f7639763" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::IntVarImp::regret_max</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain maximum (distance to next smaller value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="231" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="272" bodyend="280"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a708e79acf9ed6a0ef03067ecea69bd77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::IntVarImp::range</definition>
        <argsstring>(void) const </argsstring>
        <name>range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="242" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a46455cd1c92511c75b7d9a40b6605f72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::IntVarImp::assigned</definition>
        <argsstring>(void) const </argsstring>
        <name>assigned</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether variable is assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="244" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1af392c6e0570fac540a1c7a7749ea1eb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::IntVarImp::in</definition>
        <argsstring>(int n) const </argsstring>
        <name>in</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="247" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a186af16eee4dc028bc91422954a9a91a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::IntVarImp::in</definition>
        <argsstring>(long long int n) const </argsstring>
        <name>in</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="249" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="296" bodyend="300"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Range list access for iteration</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a70701ccb6740cabc309e2480678bbca7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
        <definition>forceinline const IntVarImp::RangeList * Gecode::Int::IntVarImp::ranges_fwd</definition>
        <argsstring>(void) const </argsstring>
        <name>ranges_fwd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return range list for forward iteration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="256" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1aafc97867bcd8568148321d030af6b64c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
        <definition>forceinline const IntVarImp::RangeList * Gecode::Int::IntVarImp::ranges_bwd</definition>
        <argsstring>(void) const </argsstring>
        <name>ranges_bwd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return range list for backward iteration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="258" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="314" bodyend="316"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by value (full domain)</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a021d0f7b90477846c5d90190623e18eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::IntVarImp::lq_full</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>lq_full</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1adeaee242bff0696e9c21249be6215ca3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::IntVarImp::gq_full</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>gq_full</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a195aee583fcfed2bc0d5ce425058361f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::IntVarImp::eq_full</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>eq_full</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to current minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a31476d97a06e7454b329c345149cbf8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::IntVarImp::nq_full</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>nq_full</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="273" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by value</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a25553d888848ced88935bb76885cbcb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::lq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>lq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="279" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="365" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ab7ca4d0cf7912181170e33989e1c14a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::lq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>lq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="281" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="375" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a7a10260457909d80f0cb59b79a2601d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::gq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>gq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="284" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a6202a16a88bcb16ebb6b06ef806e8cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::gq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>gq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="286" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="354" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1afe9634e005df773717903d9f8fd2ce46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::nq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>nq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="289" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="408" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a053ccdb2db9290bb7db154ee2f492a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::nq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>nq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="291" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="414" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a75582c6e4a40c301cde3a7d86ba8448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::eq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="294" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="386" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a622b16f768ee5c4dfc020eea5ea3d742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::eq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="296" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="396" bodyend="405"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by iterator</header>
      <description><para>Variable domains can be both updated by range and value iterators. Value iterators do not need to be strict in that the same value is allowed to occur more than once in the iterated sequence.</para><para>The argument <emphasis>depends</emphasis> must be true, if the iterator passed as argument depends on the variable implementation on which the operation is invoked. In this case, the variable implementation is only updated after the iterator has been consumed. Otherwise, the domain might be updated concurrently while following the iterator. </para></description>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ab8874e7898965023044c93a9ddd3f085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::narrow_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>narrow_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replace domain by ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ad8f38a61cc87b13fe8cc1439a6194e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::inter_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>inter_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersect domain with ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1aef470597c63aae1f326a2eba2ef9c07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::minus_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>minus_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove from domain the ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a2eb76882a608f8c8c7f0520ad387b95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::narrow_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>narrow_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replace domain by values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a36b271602409b1a98b93a4f46949e30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::inter_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>inter_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersect domain with values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a551c80feeb700ee31f9a5058ec117671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::IntVarImp::minus_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>minus_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove from domain the values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="332" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dependencies</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ac3dc8c74ea23cc42b6f15044eed16829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::subscribe</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc, bool schedule=true)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>schedule</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Subscribe propagator <emphasis>p</emphasis> with propagation condition <emphasis>pc</emphasis> to variable. </para>        </briefdescription>
        <detaileddescription>
<para>In case <emphasis>schedule</emphasis> is false, the propagator is just subscribed but not scheduled for execution (this must be used when creating subscriptions during propagation). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="345" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="1002" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a7fbac64dd0cc117890aeb41860a908ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::cancel</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of propagator <emphasis>p</emphasis> with propagation condition <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="347" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="1006" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a2fcd3886d6ba21485bbc776b75487169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::subscribe</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Subscribe advisor <emphasis>a</emphasis> to variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="349" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="1011" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a90188e4c49162538b0a44b0e96661051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::cancel</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of advisor <emphasis>a</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="351" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="1015" bodyend="1017"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variable implementation-dependent propagator support</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a0f1472f8ddd715fdc9285e01a1d3f6cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
        <definition>forceinline ModEventDelta Gecode::Int::IntVarImp::med</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>med</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Translate modification event <emphasis>me</emphasis> to modification event delta for view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="357" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="1020" bodyend="1022"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ab096c0a62b12c4b30c9e0cef9369892b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1IntVarImp" kindref="compound">IntVarImp</ref> *</type>
        <definition>forceinline IntVarImp * Gecode::Int::IntVarImp::copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Return copy of this variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="368" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="991" bodyend="994"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delta information for advisors</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a7cb90b00fe4f9107a9067acb9c2b03ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::IntVarImp::min</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return minimum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="374" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="325" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a3c0f23a4442c8edfe8b4f2f8c6b9fcbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::IntVarImp::max</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return maximum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="376" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="329" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ad0d6eb8b1bf462fb21435ed9155d683e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::IntVarImp::any</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Test whether arbitrary values got pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="378" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="333" bodyend="335"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1Int_1_1IntVarImp_1ae162e176f0bf03ec8ae801692a9da2f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IntVarImpFwd</definition>
        <argsstring></argsstring>
        <name>IntVarImpFwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="92" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classGecode_1_1Int_1_1IntVarImp_1ad2fecccf41c40f96d5a4f59f6ab65d3e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IntVarImpBwd</definition>
        <argsstring></argsstring>
        <name>IntVarImpBwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="93" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1Int_1_1IntVarImp_1aa854e97e95821160c8b02e66cbebbf47" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref></type>
        <definition>RangeList Gecode::Int::IntVarImp::dom</definition>
        <argsstring></argsstring>
        <name>dom</name>
        <briefdescription>
<para>Domain information. </para>        </briefdescription>
        <detaileddescription>
<para>Provides fast access to minimum and maximum of the entire domain and links to the first element of a <ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> defining the domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="190" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1IntVarImp_1a066c8273e5e00a136013af576186a22e" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
        <definition>RangeList* Gecode::Int::IntVarImp::_lst</definition>
        <argsstring></argsstring>
        <name>_lst</name>
        <briefdescription>
<para>Link the last element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="192" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1IntVarImp_1aad31dd252d57511819e98f0d29c4e66f" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Gecode::Int::IntVarImp::holes</definition>
        <argsstring></argsstring>
        <name>holes</name>
        <briefdescription>
<para>Size of holes in the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="202" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1aeb4e026b1085a77e4a3e4c9b00770e2b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
        <definition>forceinline IntVarImp::RangeList * Gecode::Int::IntVarImp::fst</definition>
        <argsstring>(void) const </argsstring>
        <name>fst</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return first element of rangelist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="194" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a6e2e9886c3688fc44a0ff7f9f1806d0c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::fst</definition>
        <argsstring>(RangeList *f)</argsstring>
        <name>fst</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> first element of rangelist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="196" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1afc331c47545c8f190ea26cff8a87cc33" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
        <definition>forceinline IntVarImp::RangeList * Gecode::Int::IntVarImp::lst</definition>
        <argsstring>(void) const </argsstring>
        <name>lst</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return last element of rangelist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="198" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a686e4cc2ed0a2eec5b6c914a80747db3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::IntVarImp::lst</definition>
        <argsstring>(RangeList *l)</argsstring>
        <name>lst</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList" kindref="compound">RangeList</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGecode_1_1Set" kindref="compound">Set</ref> last element of rangelist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="200" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1aac9e5e870d0cd16c77ef7d1180e37ffe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gecode::Int::IntVarImp::IntVarImp</definition>
        <argsstring>(Space &amp;home, bool share, IntVarImp &amp;x)</argsstring>
        <name>IntVarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1IntVarImp" kindref="compound">IntVarImp</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="206" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a7f1f8cdbe5e1d9d7a69dda1219186f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::IntVarImp::IntVarImp</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>IntVarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize with range domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="209" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="192" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a643cd2574c09d60abc110072d739440b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::IntVarImp::IntVarImp</definition>
        <argsstring>(Space &amp;home, const IntSet &amp;d)</argsstring>
        <name>IntVarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Initialize with domain specified by <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="211" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="196" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a303401abf708029fc3b8ac7dcab75e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::narrow_r</definition>
        <argsstring>(Space &amp;home, I &amp;ri, bool depends)</argsstring>
        <name>narrow_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>ri</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="503" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="503" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a5d831c4f2726f5cd898ab3d2ade6c814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::inter_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>inter_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="670" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="670" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ad2e5d38b0a32be7c443c1b2db1469977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::minus_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends)</argsstring>
        <name>minus_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="678" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="678" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a236d7f04ab007cc949c3053e620c7740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::narrow_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends)</argsstring>
        <name>narrow_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="835" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a908c455a3c00f3fb756cf841d4cd78cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::inter_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends)</argsstring>
        <name>inter_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="842" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="842" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a7119c500e6180ec2ec616bffa9487988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::IntVarImp::minus_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends)</argsstring>
        <name>minus_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/int.hpp" line="849" column="1" bodyfile="/usr/include/gecode/int/var-imp/int.hpp" bodystart="849" bodyend="982"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1ae90452a8d5b6c9558a2c6ecdda44dee1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT bool</type>
        <definition>GECODE_INT_EXPORT bool Gecode::Int::IntVarImp::in_full</definition>
        <argsstring>(int n) const </argsstring>
        <name>in_full</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain (full domain) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1a325e41ba0a82cc3bb69f0475985ecedc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gecode::Int::IntVarImp::closer_min</definition>
        <argsstring>(int b) const </argsstring>
        <name>closer_min</name>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is closer to the minimum or maximum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1IntVarImp_1afd52d6c842ab2a94338f0cb6607216ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1Int_1_1IntVarImp" kindref="compound">IntVarImp</ref> *</type>
        <definition>GECODE_INT_EXPORT IntVarImp* Gecode::Int::IntVarImp::perform_copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>perform_copy</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Return copy of not-yet copied variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="363" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Integer variable implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3069">
        <label>IntVarImpBase</label>
      </node>
      <node id="3068">
        <label>Gecode::Int::IntVarImp</label>
        <link refid="classGecode_1_1Int_1_1IntVarImp"/>
        <childnode refid="3069" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3071">
        <label>IntVarImpBase</label>
      </node>
      <node id="3072">
        <label>Gecode::Int::IntVarImp::RangeList</label>
        <link refid="classGecode_1_1Int_1_1IntVarImp_1_1RangeList"/>
        <childnode refid="3073" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3070">
        <label>Gecode::Int::IntVarImp</label>
        <link refid="classGecode_1_1Int_1_1IntVarImp"/>
        <childnode refid="3071" relation="public-inheritance">
        </childnode>
        <childnode refid="3072" relation="usage">
          <edgelabel>dom</edgelabel>
          <edgelabel>_lst</edgelabel>
        </childnode>
      </node>
      <node id="3073">
        <label>Gecode::FreeList</label>
        <link refid="classGecode_1_1FreeList"/>
        <childnode refid="3073" relation="usage">
          <edgelabel>_next</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/var-imp.hpp" line="91" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="91" bodyend="380"/>
    <listofallmembers>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a066c8273e5e00a136013af576186a22e" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>_lst</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ad0d6eb8b1bf462fb21435ed9155d683e" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>any</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a46455cd1c92511c75b7d9a40b6605f72" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>assigned</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a7fbac64dd0cc117890aeb41860a908ff" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a90188e4c49162538b0a44b0e96661051" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a325e41ba0a82cc3bb69f0475985ecedc" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>closer_min</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ab096c0a62b12c4b30c9e0cef9369892b" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>copy</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aa854e97e95821160c8b02e66cbebbf47" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>dom</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a75582c6e4a40c301cde3a7d86ba8448c" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>eq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a622b16f768ee5c4dfc020eea5ea3d742" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>eq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a195aee583fcfed2bc0d5ce425058361f" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>eq_full</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aeb4e026b1085a77e4a3e4c9b00770e2b" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>fst</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a6e2e9886c3688fc44a0ff7f9f1806d0c" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>fst</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a7a10260457909d80f0cb59b79a2601d2" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>gq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a6202a16a88bcb16ebb6b06ef806e8cb0" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>gq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1adeaee242bff0696e9c21249be6215ca3" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>gq_full</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aad31dd252d57511819e98f0d29c4e66f" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>holes</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1af392c6e0570fac540a1c7a7749ea1eb6" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>in</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a186af16eee4dc028bc91422954a9a91a" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>in</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ae90452a8d5b6c9558a2c6ecdda44dee1" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>in_full</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ad8f38a61cc87b13fe8cc1439a6194e6c" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>inter_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a5d831c4f2726f5cd898ab3d2ade6c814" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>inter_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a36b271602409b1a98b93a4f46949e30b" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>inter_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a908c455a3c00f3fb756cf841d4cd78cb" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>inter_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aac9e5e870d0cd16c77ef7d1180e37ffe" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>IntVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a7f1f8cdbe5e1d9d7a69dda1219186f16" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>IntVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a643cd2574c09d60abc110072d739440b" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>IntVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ad2fecccf41c40f96d5a4f59f6ab65d3e" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>IntVarImpBwd</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ae162e176f0bf03ec8ae801692a9da2f2" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>IntVarImpFwd</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a25553d888848ced88935bb76885cbcb7" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>lq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ab7ca4d0cf7912181170e33989e1c14a3" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>lq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a021d0f7b90477846c5d90190623e18eb" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>lq_full</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1afc331c47545c8f190ea26cff8a87cc33" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>lst</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a686e4cc2ed0a2eec5b6c914a80747db3" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>lst</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a384b0e2fff462537b096789a8252cc43" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>max</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a3c0f23a4442c8edfe8b4f2f8c6b9fcbb" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>max</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aa7cc5f71634703c00ddec72d5e67768d" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a0f1472f8ddd715fdc9285e01a1d3f6cb" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a8a09f4f60960e40f5d65b81e1a3086ba" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>min</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a7cb90b00fe4f9107a9067acb9c2b03ea" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>min</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aef470597c63aae1f326a2eba2ef9c07f" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>minus_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ad2e5d38b0a32be7c443c1b2db1469977" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>minus_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a551c80feeb700ee31f9a5058ec117671" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>minus_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a7119c500e6180ec2ec616bffa9487988" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>minus_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ab8874e7898965023044c93a9ddd3f085" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>narrow_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a303401abf708029fc3b8ac7dcab75e8f" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>narrow_r</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a2eb76882a608f8c8c7f0520ad387b95b" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>narrow_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a236d7f04ab007cc949c3053e620c7740" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>narrow_v</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1afe9634e005df773717903d9f8fd2ce46" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>nq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a053ccdb2db9290bb7db154ee2f492a1d" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>nq</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a31476d97a06e7454b329c345149cbf8d" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>nq_full</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1afd52d6c842ab2a94338f0cb6607216ee" prot="private" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>perform_copy</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a708e79acf9ed6a0ef03067ecea69bd77" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>range</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1aafc97867bcd8568148321d030af6b64c" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>ranges_bwd</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a70701ccb6740cabc309e2480678bbca7" prot="protected" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>ranges_fwd</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ad88c5db322bbbe24848a26f3f7639763" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>regret_max</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a920eec5fb3527fa20e70b645e1c53b9e" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>regret_min</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a5dff188f7276ae4f9abf057a8323b011" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>size</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1ac3dc8c74ea23cc42b6f15044eed16829" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a2fcd3886d6ba21485bbc776b75487169" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a57471071ccd52eab708e56f252eab3da" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>val</name></member>
      <member refid="classGecode_1_1Int_1_1IntVarImp_1a3d7f683d523cab38c4c8ff954db15b50" prot="public" virt="non-virtual"><scope>Gecode::Int::IntVarImp</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
