<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classstd_1_1__Floating__limits" kind="class" prot="public">
    <compoundname>std::_Floating_limits</compoundname>
    <basecompoundref refid="classstd_1_1__Numeric__limits__base" prot="public" virt="non-virtual">std::_Numeric_limits_base&lt; __number &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>__number</declname>
        <defname>__number</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__Digits</declname>
        <defname>__Digits</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__Digits10</declname>
        <defname>__Digits10</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__MinExp</declname>
        <defname>__MinExp</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__MaxExp</declname>
        <defname>__MaxExp</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__MinExp10</declname>
        <defname>__MinExp10</defname>
      </param>
      <param>
        <type>int</type>
        <declname>__MaxExp10</declname>
        <defname>__MaxExp10</defname>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>__InfinityWord</declname>
        <defname>__InfinityWord</defname>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>__QNaNWord</declname>
        <defname>__QNaNWord</defname>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>__SNaNWord</declname>
        <defname>__SNaNWord</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>__IsIEC559</declname>
        <defname>__IsIEC559</defname>
      </param>
      <param>
        <type>float_round_style</type>
        <declname>__RoundStyle</declname>
        <defname>__RoundStyle</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1aa745be5a27b3662dc2503fe0b079881c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, is_specialized, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>is_specialized</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1aaf57af9dcef34f736dd7459281b2e1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, digits, __Digits)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>digits</type>
        </param>
        <param>
          <type>__Digits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a61e43e629ec93caf00b10605057a46c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, digits10, __Digits10)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>digits10</type>
        </param>
        <param>
          <type>__Digits10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a41f414d4e648f2a3fa08d6542405e683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, is_signed, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>is_signed</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1ad7ed4e5cb39b7e8ec9f0d13b3c2f620d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, radix, 2)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>radix</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a3a0835826efaa01ecbe5a9936ef5e0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, min_exponent, __MinExp)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>min_exponent</type>
        </param>
        <param>
          <type>__MinExp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a3ca8dfb98a69a84c3fa860f6ea8c8b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, max_exponent, __MaxExp)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>max_exponent</type>
        </param>
        <param>
          <type>__MaxExp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a624803f2c30100859b63438ab4e213c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, min_exponent10, __MinExp10)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>min_exponent10</type>
        </param>
        <param>
          <type>__MinExp10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a8287fd7905e113f8377ec5930739f6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(int, max_exponent10, __MaxExp10)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>max_exponent10</type>
        </param>
        <param>
          <type>__MaxExp10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1aa6507a12be9185df5c60832f67f3531c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, has_infinity, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>has_infinity</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a8b6cce6939b6704ba4d129b884c6ce1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, has_quiet_NaN, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>has_quiet_NaN</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1abfa21f8580d6653ce23be920680665e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, has_signaling_NaN, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>has_signaling_NaN</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1acfa5db5a2e31f4e276e0dfa76698aaf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(float_denorm_style, has_denorm, denorm_indeterminate)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>float_denorm_style</type>
        </param>
        <param>
          <type>has_denorm</type>
        </param>
        <param>
          <type>denorm_indeterminate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1afd2639743f2354f7dd0987bae42672f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, has_denorm_loss, false)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>has_denorm_loss</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a782bd50c778978240a0984d5cdaa0934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, is_iec559, __IsIEC559)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>is_iec559</type>
        </param>
        <param>
          <type>__IsIEC559</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a2d63fba5235521109205a172c6c956d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, is_bounded, true)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>is_bounded</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a4c27e2364e0eec0fc2fbe032631c3ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, traps, false)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>traps</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a973a3de4027a200b15bcd1ed1eb65bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(bool, tinyness_before, false)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>tinyness_before</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a77e6d841370a0fe1e538f70d6fc48488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::BOOST_STL_DECLARE_LIMITS_MEMBER</definition>
        <argsstring>(float_round_style, round_style, __RoundStyle)</argsstring>
        <name>BOOST_STL_DECLARE_LIMITS_MEMBER</name>
        <param>
          <type>float_round_style</type>
        </param>
        <param>
          <type>round_style</type>
        </param>
        <param>
          <type>__RoundStyle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="249" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a3c2da24b50530d011b53f5cc41560cc1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__number</type>
        <definition>static __number std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::infinity</definition>
        <argsstring>()</argsstring>
        <name>infinity</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="234" column="1" bodyfile="/usr/include/gecode/third-party/boost/detail/limits.hpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1a24678d9c550ecdbbcb37f51d9bff103f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__number</type>
        <definition>static __number std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::quiet_NaN</definition>
        <argsstring>()</argsstring>
        <name>quiet_NaN</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="237" column="1" bodyfile="/usr/include/gecode/third-party/boost/detail/limits.hpp" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1__Floating__limits_1ae59f9028269186b6faf8fd485f3e927d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__number</type>
        <definition>static __number std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;::signaling_NaN</definition>
        <argsstring>()</argsstring>
        <name>signaling_NaN</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="240" column="1" bodyfile="/usr/include/gecode/third-party/boost/detail/limits.hpp" bodystart="240" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>std::_Numeric_limits_base&lt; __number &gt;</label>
        <link refid="classstd_1_1__Numeric__limits__base"/>
      </node>
      <node id="0">
        <label>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;</label>
        <link refid="classstd_1_1__Floating__limits"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::_Numeric_limits_base&lt; __number &gt;</label>
        <link refid="classstd_1_1__Numeric__limits__base"/>
      </node>
      <node id="2">
        <label>std::_Floating_limits&lt; __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __InfinityWord, __QNaNWord, __SNaNWord, __IsIEC559, __RoundStyle &gt;</label>
        <link refid="classstd_1_1__Floating__limits"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/third-party/boost/detail/limits.hpp" line="209" column="1" bodyfile="/usr/include/gecode/third-party/boost/detail/limits.hpp" bodystart="208" bodyend="250"/>
    <listofallmembers>
      <member refid="classstd_1_1__Numeric__limits__base_1ad6b2066c0c08c7e80212eeccac0e4c44" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_PREVENT_MACRO_SUBSTITUTION</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a2114e4b843fae938ff740a0d9d34f06f" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_PREVENT_MACRO_SUBSTITUTION</name></member>
      <member refid="classstd_1_1__Floating__limits_1aa745be5a27b3662dc2503fe0b079881c" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1aaf57af9dcef34f736dd7459281b2e1e0" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a61e43e629ec93caf00b10605057a46c3" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a41f414d4e648f2a3fa08d6542405e683" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1ad7ed4e5cb39b7e8ec9f0d13b3c2f620d" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a3a0835826efaa01ecbe5a9936ef5e0d9" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a3ca8dfb98a69a84c3fa860f6ea8c8b11" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a624803f2c30100859b63438ab4e213c5" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a8287fd7905e113f8377ec5930739f6fe" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1aa6507a12be9185df5c60832f67f3531c" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a8b6cce6939b6704ba4d129b884c6ce1a" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1abfa21f8580d6653ce23be920680665e9" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1acfa5db5a2e31f4e276e0dfa76698aaf1" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1afd2639743f2354f7dd0987bae42672f1" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a782bd50c778978240a0984d5cdaa0934" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a2d63fba5235521109205a172c6c956d6" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a4c27e2364e0eec0fc2fbe032631c3ae3" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a973a3de4027a200b15bcd1ed1eb65bd7" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Floating__limits_1a77e6d841370a0fe1e538f70d6fc48488" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a92885af216494bb7e83ed72ffb8a58f1" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a1df31f3aca7a2ea518cd40801dcb8643" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1ae87c09c3e33548032b22bb348d41968f" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a3f2b0710dffb2ebb8bb63c05322c46d8" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a7a9cfff8416c12d36273c38e2df364e7" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1af4d8590c373de7fb0aa9c4b8942492e8" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a65d7aecef991ef9c1b8da8714c86b630" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a0195017df59befb8cf72fd0f7b17f261" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1ab17cb4d2511ab89fbf6e275ec4f42100" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a83907946e96154dfc67a33e0c2c0594e" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a99994f5f692125a8c8cf4becc2206e4d" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1abf1a7c1a816b0b2c614a81d97d1a14b2" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a53582c7d49904a66f33b3683fd921ce7" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a8e0c26e0b26be02d4fe363679835f71a" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a6e4ea2607b411752b81b760163435b94" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1af80f417158dce1f41d9e31b87be584ed" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a12f9be99a6f55600140e3c26eb0551e0" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a7f7962ae6ec91abd098427cda354044c" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1aabd4fc221cb692f9a744422cb0a48573" prot="public" virt="non-virtual" ambiguityscope="std::_Numeric_limits_base::"><scope>std::_Floating_limits</scope><name>BOOST_STL_DECLARE_LIMITS_MEMBER</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1afec77458f2f3bffbb0f24a894a9fbe0f" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>denorm_min</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1adc774e3cc9199aa0fa8eb98b0ad6dcef" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>epsilon</name></member>
      <member refid="classstd_1_1__Floating__limits_1a3c2da24b50530d011b53f5cc41560cc1" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>infinity</name></member>
      <member refid="classstd_1_1__Floating__limits_1a24678d9c550ecdbbcb37f51d9bff103f" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>quiet_NaN</name></member>
      <member refid="classstd_1_1__Numeric__limits__base_1a3b72a9102d2cb852830c078e326d2eee" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>round_error</name></member>
      <member refid="classstd_1_1__Floating__limits_1ae59f9028269186b6faf8fd485f3e927d" prot="public" virt="non-virtual"><scope>std::_Floating_limits</scope><name>signaling_NaN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
