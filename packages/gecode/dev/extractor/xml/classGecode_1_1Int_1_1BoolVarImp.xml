<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1BoolVarImp" kind="class" prot="public">
    <compoundname>Gecode::Int::BoolVarImp</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BoolVarImpBase</basecompoundref>
    <includes refid="int_2var-imp_8hpp" local="no">var-imp.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Domain status access</header>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1a3120645b800e18c03118e71c85127433" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Gecode::Int::BoolVarImp::BITS</definition>
        <argsstring></argsstring>
        <name>BITS</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>How many bits does the status have. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="514" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1aa73d4867b560fd7a4c2ea0f1056e11ef" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceGecode_1_1Int_1ab342b6be942d41a4aa1899f20ad3cad8" kindref="member">BoolStatus</ref></type>
        <definition>const BoolStatus Gecode::Int::BoolVarImp::ZERO</definition>
        <argsstring></argsstring>
        <name>ZERO</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Status of domain assigned to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="516" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1acebaa81f095afaa54b9241f9b34c9278" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceGecode_1_1Int_1ab342b6be942d41a4aa1899f20ad3cad8" kindref="member">BoolStatus</ref></type>
        <definition>const BoolStatus Gecode::Int::BoolVarImp::ONE</definition>
        <argsstring></argsstring>
        <name>ONE</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>Status of domain assigned to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="518" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1a8af74f1d5e454e7952c628173b5f2299" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceGecode_1_1Int_1ab342b6be942d41a4aa1899f20ad3cad8" kindref="member">BoolStatus</ref></type>
        <definition>const BoolStatus Gecode::Int::BoolVarImp::NONE</definition>
        <argsstring></argsstring>
        <name>NONE</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Status of domain not yet assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="520" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a181e25ea54f1e44e8d28bc4d531f2a1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1_1Int_1ab342b6be942d41a4aa1899f20ad3cad8" kindref="member">BoolStatus</ref></type>
        <definition>forceinline BoolStatus Gecode::Int::BoolVarImp::status</definition>
        <argsstring>(void) const </argsstring>
        <name>status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current domain status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="522" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="62" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value access</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad2a123719240b6947fd015d023f0fd37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="528" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a5b47a7348771f94d333c0ffc6613f15e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return maximum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="530" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a9974469e7776365389f67a6d01455f4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::val</definition>
        <argsstring>(void) const </argsstring>
        <name>val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return assigned value (only if assigned) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="532" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a39e902678d6a6c69b8631ac7f0490da3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::med</definition>
        <argsstring>(void) const </argsstring>
        <name>med</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return median of domain (greatest element not greater than the median) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="534" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ab003b9d9d211ea42109e40380a6e8dc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::BoolVarImp::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size (cardinality) of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="537" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aa658ee3bae03872129396e146af6ad48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::BoolVarImp::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of domain (distance between maximum and minimum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="539" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aa03b717c392e9326e776a0bd45a20eab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::BoolVarImp::regret_min</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain minimum (distance to next larger value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="541" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1acd982d1600ab1c051e16fe0066ff8b3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Int::BoolVarImp::regret_max</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain maximum (distance to next smaller value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="543" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Boolean domain tests</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a2f1b9c2095dd2757baffad6b88fd2f63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::zero</definition>
        <argsstring>(void) const </argsstring>
        <name>zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether variable is assigned to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="549" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1af0b7ce135f2ebadb7e352a75d55b086a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::one</definition>
        <argsstring>(void) const </argsstring>
        <name>one</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether variable is assigned to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="551" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aefddd1ed1e1c764895aa81a373561120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::none</definition>
        <argsstring>(void) const </argsstring>
        <name>none</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether variable is not yet assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="553" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a4ddb696f9c7f6cf51852ca37f1bac5ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::range</definition>
        <argsstring>(void) const </argsstring>
        <name>range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="559" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad88a9d978e4881013db776781245a54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::assigned</definition>
        <argsstring>(void) const </argsstring>
        <name>assigned</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether variable is assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="561" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a35b163ab0ae440435b216946dffced22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::in</definition>
        <argsstring>(int n) const </argsstring>
        <name>in</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="564" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a4e72c61c82885688a55255c8d0a96300" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::in</definition>
        <argsstring>(long long int n) const </argsstring>
        <name>in</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="566" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by value</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad72fc453b4661e74d483901e3cc979fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::lq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>lq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="572" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="214" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a85bc7ec0ec389000161ce2da83eb115c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::lq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>lq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="574" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aad612b22310c05a0b685e11a15717d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::gq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>gq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="577" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a396cc11147b88fdf2ee6f147d3c6ea3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::gq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>gq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="579" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a7d63a12fc3ff7f823220466583410ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::nq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>nq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="582" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a328dee8e1e4fed4319e0e87ac3c40ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::nq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>nq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="584" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a7c819b1e1280330f7d6745b7fa061568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::eq</definition>
        <argsstring>(Space &amp;home, int n)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="587" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a477c6ae61ac3d8029c5048fad830c396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::eq</definition>
        <argsstring>(Space &amp;home, long long int n)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="589" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by iterator</header>
      <description><para>Variable domains can be both updated by range and value iterators. Value iterators do not need to be strict in that the same value is allowed to occur more than once in the iterated sequence.</para><para>The argument <emphasis>depends</emphasis> must be true, if the iterator passed as argument depends on the variable implementation on which the operation is invoked. In this case, the variable implementation is only updated after the iterator has been consumed. Otherwise, the domain might be updated concurrently while following the iterator. </para></description>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a5d63d161491db0073ad70a0592bffd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::narrow_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>narrow_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replace domain by ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a6d3bb35506aa67de2a0a74d8ef2edf33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::inter_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>inter_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersect domain with ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aa6c47c26b1747eed65ae5922dafa640f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::minus_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>minus_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove from domain the ranges described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a406084e9ff491dec698b958b81a29d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::narrow_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>narrow_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replace domain by values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a23fd0762153dd1131e09938f80ca0bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::inter_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>inter_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersect domain with values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad865da8a73c1086fc2fcd49a131fb59f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>ModEvent Gecode::Int::BoolVarImp::minus_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool depends=true)</argsstring>
        <name>minus_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>depends</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove from domain the values described by <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="625" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Boolean update operations</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aa4321ab39950feec59cf67f44832adbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::zero</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>zero</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Assign variable to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="631" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="183" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a7f6d9aff4ab4bec65acae25ea905e120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::one</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>one</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Assign variable to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="633" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a3113f0b5e9dd612367291918639b26cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::BoolVarImp::zero_none</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>zero_none</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Assign unassigned variable to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ab061cf9e42efe1140798c6a7644ebe9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>GECODE_INT_EXPORT ModEvent Gecode::Int::BoolVarImp::one_none</definition>
        <argsstring>(Space &amp;home)</argsstring>
        <name>one_none</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <briefdescription>
<para>Assign unassigned variable to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="637" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dependencies</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a428271261530f2260348a30a5794b788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::BoolVarImp::subscribe</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc, bool schedule=true)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>schedule</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Subscribe propagator <emphasis>p</emphasis> to variable with propagation condition <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>In case <emphasis>schedule</emphasis> is false, the propagator is just subscribed but not scheduled for execution (this must be used when creating subscriptions during propagation).</para><para>The propagation condition <emphasis>pc</emphasis> can be a propagation condition for integer variables, which will be mapped to PC_BOOL_VAL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="653" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aaa3d34d54a87c75f4fb6e8fd80e9e96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::BoolVarImp::cancel</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, PropCond pc)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
          <declname>pc</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of propagator <emphasis>p</emphasis> with propagation condition <emphasis>pc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The propagation condition <emphasis>pc</emphasis> can be a propagation condition for integer variables, which will be mapped to PC_BOOL_VAL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="660" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a9a7f4db1b635d72d91c53ee7d1930e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::BoolVarImp::subscribe</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a)</argsstring>
        <name>subscribe</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Subscribe advisor <emphasis>a</emphasis> to variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="662" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="407" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1afe60c242dddceccc2601c0c7f85ae937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::BoolVarImp::cancel</definition>
        <argsstring>(Space &amp;home, Advisor &amp;a)</argsstring>
        <name>cancel</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Cancel subscription of advisor <emphasis>a</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="664" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="411" bodyend="413"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variable implementation-dependent propagator support</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ab1af3b699eae8e40ee5750586a80a5e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::BoolVarImp::schedule</definition>
        <argsstring>(Space &amp;home, Propagator &amp;p, ModEvent me)</argsstring>
        <name>schedule</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Schedule propagator <emphasis>p</emphasis> with modification event <emphasis>me</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The modfication event <emphasis>me</emphasis> can be a modification event for integer variables, however <emphasis>me</emphasis> will be ignored if it is not ME_INT_VAL (or ME_BOOL_VAL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="676" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a2570bc0857b22987de0284ac5214ae56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
        <definition>forceinline ModEventDelta Gecode::Int::BoolVarImp::med</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>med</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Translate modification event <emphasis>me</emphasis> to modification event delta for view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="678" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="422" bodyend="424"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Support for delta information for advisors</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1aae1fe48747faf3b38afb0ba7e7d1263f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::modevent</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>modevent</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return modification event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="684" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a8f4d1b36a976985d6d6c26db526bf9ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::min</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return minimum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="686" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad924ea6958c9ab6b3a892817882eadf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::BoolVarImp::max</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return maximum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="688" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a104206ccc19b78d1b4c164cc1d77a5c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::any</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Test whether arbitrary values got pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="690" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a729a5a1ff7232dee8721ebb1aad8ebe4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::zero</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>zero</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Test whether a variable has been assigned to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="692" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ac160c3868ede70cd98b21f9fee4ddc81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::BoolVarImp::one</definition>
        <argsstring>(const Delta &amp;d)</argsstring>
        <name>one</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Test whether a variable has been assigned to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="694" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="173" bodyend="175"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ad7c67d5daa7c266d446d9dbe6ccd7504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1BoolVarImp" kindref="compound">BoolVarImp</ref> *</type>
        <definition>forceinline BoolVarImp * Gecode::Int::BoolVarImp::copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Return copy of this variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="700" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="258" bodyend="267"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGecode_1_1Int_1_1BoolVarImp_1a2175341b099b53a55ce3874671bc5476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ::Gecode::BoolVar</definition>
        <argsstring></argsstring>
        <name>::Gecode::BoolVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="487" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="487" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1a0b09753628c8118ac25f624f5dda9048" prot="private" static="yes" mutable="no">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1Int_1_1BoolVarImp" kindref="compound">BoolVarImp</ref></type>
        <definition>GECODE_INT_EXPORT BoolVarImp Gecode::Int::BoolVarImp::s_one</definition>
        <argsstring></argsstring>
        <name>s_one</name>
        <briefdescription>
<para>Domain information. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The bit at position 0 corresponds to the minimum</para></listitem><listitem><para>The bit at position 1 corresponds to the maximum</para></listitem><listitem><para>Interpreted as an unsigned, that is: 0 represents a variable assigned to 0, 3 represents a variable assigned to 1, and 2 represents an unassigned variable.</para></listitem><listitem><para>No other values are possible. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="500" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1BoolVarImp_1a5699ecfc296edc90ea96d9ca4528da9f" prot="private" static="yes" mutable="no">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1Int_1_1BoolVarImp" kindref="compound">BoolVarImp</ref></type>
        <definition>GECODE_INT_EXPORT BoolVarImp Gecode::Int::BoolVarImp::s_zero</definition>
        <argsstring></argsstring>
        <name>s_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="501" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="501" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a0a71b01789a60a7eb1ca89405998f11d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::BoolVarImp::BoolVarImp</definition>
        <argsstring>(Space &amp;home, bool share, BoolVarImp &amp;x)</argsstring>
        <name>BoolVarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1BoolVarImp" kindref="compound">BoolVarImp</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="504" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="255" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a2f36189f122c4157f9f4baa1d9d242c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::BoolVarImp::BoolVarImp</definition>
        <argsstring>(int n)</argsstring>
        <name>BoolVarImp</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Initialize static instance assigned to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="506" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a31ae859a8c1c2c09ce80a43a2081a8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::BoolVarImp::BoolVarImp</definition>
        <argsstring>(Space &amp;home, int min, int max)</argsstring>
        <name>BoolVarImp</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Initialize with range domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp.hpp" line="509" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1ab91ed1048844b4d1eec65d8718c6c2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::narrow_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>narrow_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="276" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="276" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a282e93fab18231b1fc3e9daef5485d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::inter_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>inter_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="297" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="297" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1adaeea513064b71c6aa24c5525c93f195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::minus_r</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>minus_r</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="314" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="314" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a4609601a1f1c63224a0576f9dc640a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::narrow_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>narrow_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="332" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a22d6eb811ebcad39a1f2b6c8ba16ffb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::inter_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>inter_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="351" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="351" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1BoolVarImp_1a7e4f8dc579c65a4746f1152a63e0e5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::BoolVarImp::minus_v</definition>
        <argsstring>(Space &amp;home, I &amp;i, bool)</argsstring>
        <name>minus_v</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var-imp/bool.hpp" line="370" column="1" bodyfile="/usr/include/gecode/int/var-imp/bool.hpp" bodystart="370" bodyend="386"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boolean variable implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1262">
        <label>BoolVarImpBase</label>
      </node>
      <node id="1261">
        <label>Gecode::Int::BoolVarImp</label>
        <link refid="classGecode_1_1Int_1_1BoolVarImp"/>
        <childnode refid="1262" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1264">
        <label>BoolVarImpBase</label>
      </node>
      <node id="1263">
        <label>Gecode::Int::BoolVarImp</label>
        <link refid="classGecode_1_1Int_1_1BoolVarImp"/>
        <childnode refid="1264" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/var-imp.hpp" line="486" column="1" bodyfile="/usr/include/gecode/int/var-imp.hpp" bodystart="486" bodyend="703"/>
    <listofallmembers>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a2175341b099b53a55ce3874671bc5476" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>::Gecode::BoolVar</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a104206ccc19b78d1b4c164cc1d77a5c4" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>any</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad88a9d978e4881013db776781245a54d" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>assigned</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a3120645b800e18c03118e71c85127433" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>BITS</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a0a71b01789a60a7eb1ca89405998f11d" prot="private" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>BoolVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a2f36189f122c4157f9f4baa1d9d242c8" prot="private" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>BoolVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a31ae859a8c1c2c09ce80a43a2081a8cd" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>BoolVarImp</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aaa3d34d54a87c75f4fb6e8fd80e9e96b" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1afe60c242dddceccc2601c0c7f85ae937" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>cancel</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad7c67d5daa7c266d446d9dbe6ccd7504" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>copy</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a7c819b1e1280330f7d6745b7fa061568" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>eq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a477c6ae61ac3d8029c5048fad830c396" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>eq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aad612b22310c05a0b685e11a15717d44" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>gq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a396cc11147b88fdf2ee6f147d3c6ea3f" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>gq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a35b163ab0ae440435b216946dffced22" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>in</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a4e72c61c82885688a55255c8d0a96300" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>in</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a6d3bb35506aa67de2a0a74d8ef2edf33" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>inter_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a282e93fab18231b1fc3e9daef5485d40" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>inter_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a23fd0762153dd1131e09938f80ca0bda" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>inter_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a22d6eb811ebcad39a1f2b6c8ba16ffb6" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>inter_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad72fc453b4661e74d483901e3cc979fb" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>lq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a85bc7ec0ec389000161ce2da83eb115c" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>lq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a5b47a7348771f94d333c0ffc6613f15e" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>max</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad924ea6958c9ab6b3a892817882eadf7" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>max</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a39e902678d6a6c69b8631ac7f0490da3" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a2570bc0857b22987de0284ac5214ae56" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad2a123719240b6947fd015d023f0fd37" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>min</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a8f4d1b36a976985d6d6c26db526bf9ca" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>min</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aa6c47c26b1747eed65ae5922dafa640f" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>minus_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1adaeea513064b71c6aa24c5525c93f195" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>minus_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ad865da8a73c1086fc2fcd49a131fb59f" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>minus_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a7e4f8dc579c65a4746f1152a63e0e5f5" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>minus_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aae1fe48747faf3b38afb0ba7e7d1263f" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>modevent</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a5d63d161491db0073ad70a0592bffd05" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>narrow_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ab91ed1048844b4d1eec65d8718c6c2ef" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>narrow_r</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a406084e9ff491dec698b958b81a29d1e" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>narrow_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a4609601a1f1c63224a0576f9dc640a3a" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>narrow_v</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aefddd1ed1e1c764895aa81a373561120" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>none</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a8af74f1d5e454e7952c628173b5f2299" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>NONE</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a7d63a12fc3ff7f823220466583410ca0" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>nq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a328dee8e1e4fed4319e0e87ac3c40ef3" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>nq</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1af0b7ce135f2ebadb7e352a75d55b086a" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>one</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a7f6d9aff4ab4bec65acae25ea905e120" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>one</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ac160c3868ede70cd98b21f9fee4ddc81" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>one</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1acebaa81f095afaa54b9241f9b34c9278" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>ONE</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ab061cf9e42efe1140798c6a7644ebe9c" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>one_none</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a4ddb696f9c7f6cf51852ca37f1bac5ee" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>range</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1acd982d1600ab1c051e16fe0066ff8b3e" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>regret_max</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aa03b717c392e9326e776a0bd45a20eab" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>regret_min</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a0b09753628c8118ac25f624f5dda9048" prot="private" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>s_one</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a5699ecfc296edc90ea96d9ca4528da9f" prot="private" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>s_zero</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ab1af3b699eae8e40ee5750586a80a5e2" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>schedule</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1ab003b9d9d211ea42109e40380a6e8dc5" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>size</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a181e25ea54f1e44e8d28bc4d531f2a1d" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>status</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a428271261530f2260348a30a5794b788" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a9a7f4db1b635d72d91c53ee7d1930e58" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a9974469e7776365389f67a6d01455f4e" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>val</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aa658ee3bae03872129396e146af6ad48" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>width</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a2f1b9c2095dd2757baffad6b88fd2f63" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>zero</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aa4321ab39950feec59cf67f44832adbb" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>zero</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a729a5a1ff7232dee8721ebb1aad8ebe4" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>zero</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1aa73d4867b560fd7a4c2ea0f1056e11ef" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>ZERO</name></member>
      <member refid="classGecode_1_1Int_1_1BoolVarImp_1a3113f0b5e9dd612367291918639b26cd" prot="public" virt="non-virtual"><scope>Gecode::Int::BoolVarImp</scope><name>zero_none</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
