<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="structGecode_1_1space__allocator" kind="struct" prot="public">
    <compoundname>Gecode::space_allocator</compoundname>
    <includes refid="allocators_8hpp" local="no">allocators.hpp</includes>
    <innerclass refid="structGecode_1_1space__allocator_1_1rebind" prot="public">Gecode::space_allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a79f21683fea214dee8c218f733fc63c1" prot="public" static="no">
        <type>T</type>
        <definition>typedef T Gecode::space_allocator&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Type of objects the allocator creates. This is identical to <emphasis>T</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="179" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t Gecode::space_allocator&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Type that can represent the size of the largest object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="181" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a948f939329792bc6bcebf6b9b97cb42b" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>typedef ptrdiff_t Gecode::space_allocator&lt; T &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Type that can represent the difference between any two pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="183" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* Gecode::space_allocator&lt; T &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Type of pointers returned by the allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="185" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a187d073ac401cee3c64ad78bec28628b" prot="public" static="no">
        <type>T const *</type>
        <definition>typedef T const* Gecode::space_allocator&lt; T &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Const version of pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="187" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a13f98460a8669abd6372c92b1528560d" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; Gecode::space_allocator&lt; T &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Non-const reference to <emphasis>T</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="189" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structGecode_1_1space__allocator_1a7a62efa673fd7597d3dbc18e5a2a143e" prot="public" static="no">
        <type>T const &amp;</type>
        <definition>typedef T const&amp; Gecode::space_allocator&lt; T &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Const reference to <emphasis>T</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="191" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structGecode_1_1space__allocator_1aa5d3b2310269f259b4af46af4b756f6b" prot="public" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
        <definition>Space&amp; Gecode::space_allocator&lt; T &gt;::space</definition>
        <argsstring></argsstring>
        <name>space</name>
        <briefdescription>
<para>The space that we allocate objects from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="199" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a40cbb885ecd20ab4a20a2ef035aef77d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gecode::space_allocator&lt; T &gt;::space_allocator</definition>
        <argsstring>(Space &amp;space)</argsstring>
        <name>space_allocator</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>space</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Construction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space whose heap to allocate objects from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="205" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a079355c31cd2feeeedffc23281c945de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gecode::space_allocator&lt; T &gt;::space_allocator</definition>
        <argsstring>(space_allocator const &amp;al)</argsstring>
        <name>space_allocator</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref> const &amp;</type>
          <declname>al</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Copy construction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>al</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="210" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a3f22d25e89554bc6bdf9f61c03707715" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref> &amp;</type>
        <definition>space_allocator&amp; Gecode::space_allocator&lt; T &gt;::operator=</definition>
        <argsstring>(space_allocator const &amp;al)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref> const &amp;</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>al</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to assign. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="215" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a1dd8964eebd965bb3212dbed3f8df4eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Gecode::space_allocator&lt; T &gt;::space_allocator</definition>
        <argsstring>(space_allocator&lt; U &gt; const &amp;al)</argsstring>
        <name>space_allocator</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref>&lt; U &gt; const &amp;</type>
          <declname>al</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Copy from other instantiation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>al</parametername>
</parameternamelist>
<parameterdescription>
<para>The source allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="225" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1adb068791fdd6d4f22213b8c2bd25b91e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
        <definition>pointer Gecode::space_allocator&lt; T &gt;::address</definition>
        <argsstring>(reference x) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a13f98460a8669abd6372c92b1528560d" kindref="member">reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Convert a reference <emphasis>x</emphasis> to a pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="228" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1acdcf551ddb2147e64b2c01cd1897d742" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator_1a187d073ac401cee3c64ad78bec28628b" kindref="member">const_pointer</ref></type>
        <definition>const_pointer Gecode::space_allocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference x) const </argsstring>
        <name>address</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a7a62efa673fd7597d3dbc18e5a2a143e" kindref="member">const_reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Convert a const reference <emphasis>x</emphasis> to a const pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="230" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a5079dbe8750011fcaed4d5f69b0bf5aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" kindref="member">size_type</ref></type>
        <definition>size_type Gecode::space_allocator&lt; T &gt;::max_size</definition>
        <argsstring>(void) const </argsstring>
        <name>max_size</name>
        <param>
          <type>void</type>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Returns the largest size for which a call to allocate might succeed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="232" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1afc4d34782c9a2cef2175882afd77c05d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
        <definition>pointer Gecode::space_allocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type count)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" kindref="member">size_type</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Allocates storage. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the first element in a block of storage <computeroutput>count*sizeof(T)</computeroutput> bytes in size. The block is aligned appropriately for objects of type <emphasis>T</emphasis>. Throws the exception <emphasis>bad_alloc</emphasis> if the storage is unavailable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="244" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a1b94c1aa672b0230cfa539dd24fafc4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
        <definition>pointer Gecode::space_allocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type count, const void *const hint)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" kindref="member">size_type</ref></type>
          <declname>count</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>Allocates storage. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the first element in a block of storage <computeroutput>count*sizeof(T)</computeroutput> bytes in size. The block is aligned appropriately for objects of type <emphasis>T</emphasis>. Throws the exception <emphasis>bad_alloc</emphasis> if the storage is unavailable. The (unused) parameter could be used as an allocation hint, but this allocator ignores it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="258" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1ae1a502e4e6414cc01fc60457bb43d605" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::space_allocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type count)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" kindref="member">size_type</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Deallocates the storage obtained by a call to <ref refid="structGecode_1_1space__allocator_1afc4d34782c9a2cef2175882afd77c05d" kindref="member">allocate()</ref> with arguments <emphasis>count</emphasis> and <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="264" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a013b6033d8911059f9f871406e70216a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::space_allocator&lt; T &gt;::construct</definition>
        <argsstring>(pointer element, const_reference t)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
          <declname>element</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a7a62efa673fd7597d3dbc18e5a2a143e" kindref="member">const_reference</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="275" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structGecode_1_1space__allocator_1a99e9203ae8e255dda7931bb24b629c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::space_allocator&lt; T &gt;::destroy</definition>
        <argsstring>(pointer element)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" kindref="member">pointer</ref></type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Calls the destructor on the object pointed to by <emphasis>element</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="280" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="280" bodyend="282"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocator that allocates memory from a space heap. </para>    </briefdescription>
    <detaileddescription>
<para>Note that this allocator may be used to construct dynamic data structures that allocate memory from the space heap, or even reside in the space heap as a whole. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="6584">
        <label>Gecode::SharedHandle::Object</label>
        <link refid="classGecode_1_1SharedHandle_1_1Object"/>
      </node>
      <node id="6580">
        <label>Gecode::LocalObject</label>
        <link refid="classGecode_1_1LocalObject"/>
        <childnode refid="6581" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6583">
        <label>Gecode::VarImpBase</label>
        <link refid="classGecode_1_1VarImpBase"/>
      </node>
      <node id="6579">
        <label>Gecode::Space</label>
        <link refid="classGecode_1_1Space"/>
        <childnode refid="6580" relation="usage">
          <edgelabel>local</edgelabel>
        </childnode>
        <childnode refid="6583" relation="usage">
          <edgelabel>vars_u</edgelabel>
          <edgelabel>vars_noidx</edgelabel>
        </childnode>
        <childnode refid="6584" relation="usage">
          <edgelabel>shared</edgelabel>
        </childnode>
        <childnode refid="6582" relation="usage">
          <edgelabel>active</edgelabel>
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="6578">
        <label>Gecode::space_allocator&lt; T &gt;</label>
        <link refid="structGecode_1_1space__allocator"/>
        <childnode refid="6579" relation="usage">
          <edgelabel>space</edgelabel>
        </childnode>
      </node>
      <node id="6581">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="6582" relation="private-inheritance">
        </childnode>
      </node>
      <node id="6582">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/kernel/allocators.hpp" line="40" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="40" bodyend="-1"/>
    <listofallmembers>
      <member refid="structGecode_1_1space__allocator_1adb068791fdd6d4f22213b8c2bd25b91e" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>address</name></member>
      <member refid="structGecode_1_1space__allocator_1acdcf551ddb2147e64b2c01cd1897d742" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>address</name></member>
      <member refid="structGecode_1_1space__allocator_1afc4d34782c9a2cef2175882afd77c05d" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>allocate</name></member>
      <member refid="structGecode_1_1space__allocator_1a1b94c1aa672b0230cfa539dd24fafc4e" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>allocate</name></member>
      <member refid="structGecode_1_1space__allocator_1a187d073ac401cee3c64ad78bec28628b" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>const_pointer</name></member>
      <member refid="structGecode_1_1space__allocator_1a7a62efa673fd7597d3dbc18e5a2a143e" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>const_reference</name></member>
      <member refid="structGecode_1_1space__allocator_1a013b6033d8911059f9f871406e70216a" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>construct</name></member>
      <member refid="structGecode_1_1space__allocator_1ae1a502e4e6414cc01fc60457bb43d605" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>deallocate</name></member>
      <member refid="structGecode_1_1space__allocator_1a99e9203ae8e255dda7931bb24b629c8c" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>destroy</name></member>
      <member refid="structGecode_1_1space__allocator_1a948f939329792bc6bcebf6b9b97cb42b" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>difference_type</name></member>
      <member refid="structGecode_1_1space__allocator_1a5079dbe8750011fcaed4d5f69b0bf5aa" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>max_size</name></member>
      <member refid="structGecode_1_1space__allocator_1a3f22d25e89554bc6bdf9f61c03707715" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>operator=</name></member>
      <member refid="structGecode_1_1space__allocator_1a8d91d6d17bf2fff7cf3e26d0ff6d3f5a" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>pointer</name></member>
      <member refid="structGecode_1_1space__allocator_1a13f98460a8669abd6372c92b1528560d" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>reference</name></member>
      <member refid="structGecode_1_1space__allocator_1ad2b49e652dc23ccad0e9d5645c7c72c1" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>size_type</name></member>
      <member refid="structGecode_1_1space__allocator_1aa5d3b2310269f259b4af46af4b756f6b" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>space</name></member>
      <member refid="structGecode_1_1space__allocator_1a40cbb885ecd20ab4a20a2ef035aef77d" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>space_allocator</name></member>
      <member refid="structGecode_1_1space__allocator_1a079355c31cd2feeeedffc23281c945de" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>space_allocator</name></member>
      <member refid="structGecode_1_1space__allocator_1a1dd8964eebd965bb3212dbed3f8df4eb" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>space_allocator</name></member>
      <member refid="structGecode_1_1space__allocator_1a79f21683fea214dee8c218f733fc63c1" prot="public" virt="non-virtual"><scope>Gecode::space_allocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
