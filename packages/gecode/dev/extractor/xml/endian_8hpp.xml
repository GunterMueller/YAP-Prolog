<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="endian_8hpp" kind="file">
    <compoundname>endian.hpp</compoundname>
    <includedby refid="third-party_2boost_2detail_2limits_8hpp" local="no">/usr/include/gecode/third-party/boost/detail/limits.hpp</includedby>
    <invincdepgraph>
      <node id="34390">
        <label>/usr/include/gecode/third-party/boost/detail/endian.hpp</label>
        <link refid="endian.hpp"/>
        <childnode refid="34391" relation="include">
        </childnode>
      </node>
      <node id="34391">
        <label>/usr/include/gecode/third-party/boost/detail/limits.hpp</label>
        <link refid="third-party_2boost_2detail_2limits_8hpp_source"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005<sp/>Caleb<sp/>Epstein</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2006<sp/>John<sp/>Maddock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2010<sp/>Rene<sp/>Rivera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompany-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ing<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1997</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Silicon<sp/>Graphics<sp/>Computer<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>distribute<sp/>and<sp/>sell<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>and<sp/>its<sp/>documentation<sp/>for<sp/>any<sp/>purpose<sp/>is<sp/>hereby<sp/>granted<sp/>without<sp/>fee,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>provided<sp/>that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>that<sp/>both<sp/>that<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>in<sp/>supporting<sp/>documentation.<sp/><sp/>Silicon<sp/>Graphics<sp/>makes<sp/>no</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>representations<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>purpose.<sp/><sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>notice<sp/>reproduced<sp/>from<sp/>&lt;gecode/third-party/boost/detail/limits.hpp&gt;,<sp/>from</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>which<sp/>this<sp/>code<sp/>was<sp/>originally<sp/>taken.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Modified<sp/>by<sp/>Caleb<sp/>Epstein<sp/>to<sp/>use<sp/>&lt;endian.h&gt;<sp/>with<sp/>GNU<sp/>libc<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>defined<sp/>the<sp/>BOOST_ENDIAN<sp/>macro.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_DETAIL_ENDIAN_HPP</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_DETAIL_ENDIAN_HPP</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>libc<sp/>offers<sp/>the<sp/>helpful<sp/>header<sp/>&lt;endian.h&gt;<sp/>which<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__BYTE_ORDER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__GLIBC__)</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(__BYTE_ORDER<sp/>==<sp/>__LITTLE_ENDIAN)</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>(__BYTE_ORDER<sp/>==<sp/>__BIG_ENDIAN)</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_BIG_ENDIAN</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>(__BYTE_ORDER<sp/>==<sp/>__PDP_ENDIAN)</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_PDP_ENDIAN</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>Unknown<sp/>machine<sp/>endianness<sp/>detected.</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BYTE_ORDER<sp/>__BYTE_ORDER</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(_BIG_ENDIAN)<sp/>&amp;&amp;<sp/>!defined(_LITTLE_ENDIAN)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__BIG_ENDIAN__)<sp/>&amp;&amp;<sp/>!defined(__LITTLE_ENDIAN__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(_STLP_BIG_ENDIAN)<sp/>&amp;&amp;<sp/>!defined(_STLP_LITTLE_ENDIAN)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BIG_ENDIAN</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BYTE_ORDER<sp/>4321</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(_LITTLE_ENDIAN)<sp/>&amp;&amp;<sp/>!defined(_BIG_ENDIAN)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__LITTLE_ENDIAN__)<sp/>&amp;&amp;<sp/>!defined(__BIG_ENDIAN__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(_STLP_LITTLE_ENDIAN)<sp/>&amp;&amp;<sp/>!defined(_STLP_BIG_ENDIAN)</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BYTE_ORDER<sp/>1234</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__sparc)<sp/>||<sp/>defined(__sparc__)<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(_POWER)<sp/>||<sp/>defined(__powerpc__)<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(__ppc__)<sp/>||<sp/>defined(__hpux)<sp/>||<sp/>defined(__hppa)<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(_MIPSEB)<sp/>||<sp/>defined(_POWER)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(__s390__)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BIG_ENDIAN</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BYTE_ORDER<sp/>4321</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__i386__)<sp/>||<sp/>defined(__alpha__)<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(__ia64)<sp/>||<sp/>defined(__ia64__)<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(_M_IX86)<sp/>||<sp/>defined(_M_IA64)<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(_M_ALPHA)<sp/>||<sp/>defined(__amd64)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(__amd64__)<sp/>||<sp/>defined(_M_AMD64)<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(__x86_64)<sp/>||<sp/>defined(__x86_64__)<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/>||<sp/>defined(_M_X64)<sp/>||<sp/>defined(__bfin__)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_BYTE_ORDER<sp/>1234</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>error<sp/>The<sp/>file<sp/>boost/detail/endian.hpp<sp/>needs<sp/>to<sp/>be<sp/>set<sp/>up<sp/>for<sp/>your<sp/>CPU<sp/>type.</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/detail/endian.hpp"/>
  </compounddef>
</doxygen>
