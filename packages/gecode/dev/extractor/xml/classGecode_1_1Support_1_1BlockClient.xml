<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Support_1_1BlockClient" kind="class" prot="public">
    <compoundname>Gecode::Support::BlockClient</compoundname>
    <includes refid="block-allocator_8hpp" local="no">block-allocator.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>A</declname>
        <defname>A</defname>
      </param>
      <param>
        <type>int</type>
        <declname>blocksize</declname>
        <defname>blocksize</defname>
        <defval>512</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGecode_1_1Support_1_1BlockClient_1a23bb9c142be653962e8c922cba096b7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Support::BlockClient&lt; T, A, blocksize &gt;::operator new</definition>
        <argsstring>(size_t s, BlockAllocator&lt; T, A, blocksize &gt; &amp;ba)</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1BlockAllocator" kindref="compound">BlockAllocator</ref>&lt; T, A, blocksize &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Allocate memory from block allocator <emphasis>ba</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/block-allocator.hpp" line="91" column="1" bodyfile="/usr/include/gecode/support/block-allocator.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Support_1_1BlockClient_1a1417331f77401df6c2815716b8ec416a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Support::BlockClient&lt; T, A, blocksize &gt;::operator delete</definition>
        <argsstring>(void *, BlockAllocator&lt; T, A, blocksize &gt; &amp;ba)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Support_1_1BlockAllocator" kindref="compound">BlockAllocator</ref>&lt; T, A, blocksize &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Noop (memory freed only when block allocator deleted) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/block-allocator.hpp" line="93" column="1" bodyfile="/usr/include/gecode/support/block-allocator.hpp" bodystart="154" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Support_1_1BlockClient_1a7873484dbfa571602fa51f7c4339e282" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Support::BlockClient&lt; T, A, blocksize &gt;::operator delete</definition>
        <argsstring>(void *)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Noop (memory freed only when block allocator deleted) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/block-allocator.hpp" line="95" column="1" bodyfile="/usr/include/gecode/support/block-allocator.hpp" bodystart="158" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Client for block allocator of type <emphasis>T</emphasis>. </para>    </briefdescription>
    <detaileddescription>
<para>Provides memory management for objects of type <emphasis>T</emphasis>. </para>    </detaileddescription>
    <location file="/usr/include/gecode/support/block-allocator.hpp" line="88" column="1" bodyfile="/usr/include/gecode/support/block-allocator.hpp" bodystart="88" bodyend="96"/>
    <listofallmembers>
      <member refid="classGecode_1_1Support_1_1BlockClient_1a1417331f77401df6c2815716b8ec416a" prot="public" virt="non-virtual"><scope>Gecode::Support::BlockClient</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Support_1_1BlockClient_1a7873484dbfa571602fa51f7c4339e282" prot="public" virt="non-virtual"><scope>Gecode::Support::BlockClient</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Support_1_1BlockClient_1a23bb9c142be653962e8c922cba096b7c" prot="public" virt="non-virtual"><scope>Gecode::Support::BlockClient</scope><name>operator new</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
