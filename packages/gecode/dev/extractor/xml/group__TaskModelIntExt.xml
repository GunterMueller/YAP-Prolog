<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__TaskModelIntExt" kind="group">
    <compoundname>TaskModelIntExt</compoundname>
    <title>Extensional constraints</title>
    <innerclass refid="classGecode_1_1DFA" prot="public">Gecode::DFA</innerclass>
    <innerclass refid="classGecode_1_1TupleSet" prot="public">Gecode::TupleSet</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__TaskModelIntExt_1ga239a8386d959c6bbd2c1a59e1b0ac8bb" prot="public" static="no">
        <name>ExtensionalPropKind</name>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba13685778bcbfc4aa364668b378b7f9da" prot="public">
          <name>EPK_DEF</name>
          <briefdescription>
<para>Make a default decision. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba064c32762dcbfe3e199c0eaccb2955a2" prot="public">
          <name>EPK_SPEED</name>
          <briefdescription>
<para>Prefer speed over memory consumption. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba916462addf616225b733bca90c1868b2" prot="public">
          <name>EPK_MEMORY</name>
          <briefdescription>
<para>Prefer little memory over speed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Extensional propagation kind. </para>        </briefdescription>
        <detaileddescription>
<para>Signals that a particular kind is used in propagation for the implementation of a extensional constraint. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1980" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="1980" bodyend="1984"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelIntExt_1gab5a81dfd00524e8840f18cbd07007c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, DFA d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>DFA</type>
          <declname>d</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for extensional constraint described by a <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of <emphasis>x</emphasis> must be a word of the language described by the <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> <emphasis>d</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. If shared occurences of variables are required, unshare should be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1gad095a3cd636e002ce1e0f7635ce91793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, DFA d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>DFA</type>
          <declname>d</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for extensional constraint described by a <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of <emphasis>x</emphasis> must be a word of the language described by the <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> <emphasis>d</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. If shared occurences of variables are required, unshare should be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1gaeb7c7d875c43b1292e52bccddc6500ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const TupleSet &amp;t, ExtensionalPropKind epk=EPK_DEF, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const IntVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const TupleSet &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>ExtensionalPropKind</type>
          <declname>epk</declname>
          <defval>EPK_DEF</defval>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="270">$x\in t$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports implementations optimized for memory (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>, default) and speed (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></listitem>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default) only. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>t</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotYetFinalized" kindref="compound">Int::NotYetFinalized</ref>, if the tuple set <emphasis>t</emphasis> has not been finalized.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>If the domains for the <formula id="189">$x_i$</formula> are not dense and have similar bounds, lots of memory will be wasted (memory consumption is in <formula id="271">$ O\left(|x|\cdot\min_i(\underline{x_i})\cdot\max_i(\overline{x_i})\right)$</formula> for the basic algorithm (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>) and additionally <formula id="272">$ O\left(|x|^2\cdot\min_i(\underline{x_i})\cdot\max_i(\overline{x_i})\right)$</formula> for the incremental algorithm (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1ga0060b43343e63df7365532f215ac6aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, const TupleSet &amp;t, ExtensionalPropKind epk=EPK_DEF, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const TupleSet &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>ExtensionalPropKind</type>
          <declname>epk</declname>
          <defval>EPK_DEF</defval>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="270">$x\in t$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports implementations optimized for memory (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>, default) and speed (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></listitem>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default) only. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>t</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotYetFinalized" kindref="compound">Int::NotYetFinalized</ref>, if the tuple set <emphasis>t</emphasis> has not been finalized. </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2132" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Extensional constraints support different ways of how the extensionally defined relation between the variables is defined. Examples include specification by a DFA or a table.</para><para>A DFA can be defined by a regular expression, for regular expressions see the module <ref refid="namespaceGecode_1_1MiniModel" kindref="compound">MiniModel</ref>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
