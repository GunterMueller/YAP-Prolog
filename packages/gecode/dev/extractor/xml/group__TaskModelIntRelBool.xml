<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__TaskModelIntRelBool" kind="group">
    <compoundname>TaskModelIntRelBool</compoundname>
    <title>Simple relation constraints over Boolean variables</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gae6a898bc3e7e74921f60a924bf4a9903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, IntRelType irt, BoolVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="213">$ x_0 \sim_{irt} x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga71b47881896af6c8d2b51a769f298f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, IntRelType irt, BoolVar x1, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Reify</type>
          <declname>r</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="219">$(x_0 \sim_{irt} x_1)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga760c8c33beb8fe172ac3e49e6abf72a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, BoolVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post doamin consistent propagator for <formula id="214">$ x_i \sim_{irt} y $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gafb705fa21fffda764b823fee7e166900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x, IntRelType irt, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="220">$ x \sim_{irt} n$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gad5242073594138591b82750f3f1645db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x, IntRelType irt, int n, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Reify</type>
          <declname>r</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="221">$(x \sim_{irt} n)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0364bf415371baf32e80de5e1e64513d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="222">$ x_i \sim_{irt} n $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga2a0b09997f2f0e84e87794d4129b4998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, const BoolVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for relation between <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that for the inequality relations this corresponds to the lexical order between <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga13f2ff9cb2e69d03bcd478414ba96114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntRelType</type>
          <declname>irt</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for relation between elements in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>States that the elements of <emphasis>x</emphasis> are in the following relation:<itemizedlist>
<listitem><para>if <emphasis>r</emphasis> = IRT_LE, <emphasis>r</emphasis> = IRT_LQ, <emphasis>r</emphasis> = IRT_GR, or <emphasis>r</emphasis> = IRT_GQ, then the elements of <emphasis>x</emphasis> are ordered with respect to <emphasis>r</emphasis>.</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_EQ, then all elements of <emphasis>x</emphasis> must be equal.</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_NQ, then not all elements of <emphasis>x</emphasis> must be equal. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gafd5d11ca722d7544ef4f286d7cf16ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, BoolOpType o, BoolVar x1, BoolVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x0</emphasis> and <emphasis>x1</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="223">$ x_0 \diamond_{\mathit{o}} x_1 = x_2$</formula> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gac1b00af339d78737254174e3aeb84235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, BoolOpType o, BoolVar x1, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x0</emphasis> and <emphasis>x1</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="224">$ x_0 \diamond_{\mathit{o}} x_1 = n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0f6fe66cc296edfe92dac88ec29a0fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, BoolVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="225">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1}= y$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="226">$|x|&lt;2$</formula> and <emphasis>o</emphasis> is BOT_IMP, BOT_EQV, or BOT_XOR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0e5133338d9f5fc4147befafb808576e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="227">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1}= n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="226">$|x|&lt;2$</formula> and <emphasis>o</emphasis> is BOT_IMP, BOT_EQV, or BOT_XOR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gab22418adb6e5fb8e3d8b698fbebef5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::clause</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, const BoolVarArgs &amp;y, BoolVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>clause</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>z</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean clause with positive variables <emphasis>x</emphasis> and negative variables <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="228">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1} \diamond_{\mathit{o}} \neg y_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} \neg y_{|y|-1}= z$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1IllegalOperation" kindref="compound">Int::IllegalOperation</ref>, if <emphasis>o</emphasis> is different from BOT_AND or BOT_OR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga81fb854ca7768875255cea39bac3590d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::clause</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, const BoolVarArgs &amp;y, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>clause</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolOpType</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BoolVarArgs &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean clause with positive variables <emphasis>x</emphasis> and negative variables <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="229">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1} \diamond_{\mathit{o}} \neg y_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} \neg y_{|y|-1}= n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1IllegalOperation" kindref="compound">Int::IllegalOperation</ref>, if <emphasis>o</emphasis> is different from BOT_AND or BOT_OR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga57c3ab43475b8b3055145bdd3708b8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::ite</definition>
        <argsstring>(Home home, BoolVar b, IntVar x, IntVar y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>ite</name>
        <param>
          <type>Home</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BoolVar</type>
          <declname>b</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IntVar</type>
          <declname>z</declname>
        </param>
        <param>
          <type>IntConLevel</type>
          <declname>icl</declname>
          <defval>ICL_DEF</defval>
        </param>
        <briefdescription>
<para>Post propagator for if-then-else constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="230">$ z = b ? x : y $</formula> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1282" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
