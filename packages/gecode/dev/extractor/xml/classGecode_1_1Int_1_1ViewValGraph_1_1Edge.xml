<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kind="class" prot="public">
    <compoundname>Gecode::Int::ViewValGraph::Edge</compoundname>
    <basecompoundref refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink" prot="public" virt="non-virtual">Gecode::Int::ViewValGraph::BiLink</basecompoundref>
    <includes refid="view-val-graph_8hh" local="no">view-val-graph.hh</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>View</declname>
        <defname>View</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aadc546fed93a07b0593bd0ccc6fe1d4b" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kindref="compound">Edge</ref>&lt; View &gt; *</type>
        <definition>Edge&lt;View&gt;* Gecode::Int::ViewValGraph::Edge&lt; View &gt;::_next_edge</definition>
        <argsstring></argsstring>
        <name>_next_edge</name>
        <briefdescription>
<para>Next edge in chain of value edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="215" column="1" bodyfile="/usr/include/gecode/int/view-val-graph.hh" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a3549add505b63b53a60052bd9a6ce2c7" prot="protected" static="no" mutable="no">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1CombPtrFlag" kindref="compound">CombPtrFlag</ref>&lt; <ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Node" kindref="compound">Node</ref>&lt; View &gt; &gt;</type>
        <definition>CombPtrFlag&lt;Node&lt;View&gt; &gt; Gecode::Int::ViewValGraph::Edge&lt; View &gt;::sd</definition>
        <argsstring></argsstring>
        <name>sd</name>
        <briefdescription>
<para>Combine source and destination node and flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="217" column="1" bodyfile="/usr/include/gecode/int/view-val-graph.hh" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a47ee24f3911ef3c7f6ef973ac94b9327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::ViewValGraph::Edge&lt; View &gt;::Edge</definition>
        <argsstring>(ValNode&lt; View &gt; *v, ViewNode&lt; View &gt; *x)</argsstring>
        <name>Edge</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ValNode" kindref="compound">ValNode</ref>&lt; View &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ViewNode" kindref="compound">ViewNode</ref>&lt; View &gt; *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct new edge between <emphasis>x</emphasis> and <emphasis>v</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="220" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a29e1bc29f4d3be116e9fc2c332b279ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::ViewValGraph::Edge&lt; View &gt;::Edge</definition>
        <argsstring>(ValNode&lt; View &gt; *v, ViewNode&lt; View &gt; *x, Edge&lt; View &gt; *n)</argsstring>
        <name>Edge</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ValNode" kindref="compound">ValNode</ref>&lt; View &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ViewNode" kindref="compound">ViewNode</ref>&lt; View &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kindref="compound">Edge</ref>&lt; View &gt; *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Construct new edge between <emphasis>x</emphasis> and <emphasis>v</emphasis> with next edge <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="222" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a59e6aed7e13ee3234bd2df30d2efd185" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Node" kindref="compound">Node</ref>&lt; View &gt; *</type>
        <definition>forceinline Node&lt; View &gt; * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::dst</definition>
        <argsstring>(Node&lt; View &gt; *s) const </argsstring>
        <name>dst</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Node" kindref="compound">Node</ref>&lt; View &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return destination of edge when source <emphasis>s</emphasis> is given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="224" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aa5cd99075b98d77661b76717f4f15e8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ViewNode" kindref="compound">ViewNode</ref>&lt; View &gt; *</type>
        <definition>forceinline ViewNode&lt; View &gt; * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::view</definition>
        <argsstring>(ValNode&lt; View &gt; *v) const </argsstring>
        <name>view</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ValNode" kindref="compound">ValNode</ref>&lt; View &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return view node when value node <emphasis>v</emphasis> is given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="227" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a6e6dbd73aa7f28bfc683bee77026b8ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ValNode" kindref="compound">ValNode</ref>&lt; View &gt; *</type>
        <definition>forceinline ValNode&lt; View &gt; * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::val</definition>
        <argsstring>(ViewNode&lt; View &gt; *x) const </argsstring>
        <name>val</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1ViewNode" kindref="compound">ViewNode</ref>&lt; View &gt; *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return value node when view node <emphasis>x</emphasis> is given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="229" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a79d6f3de5e68e6d71dd5f5aa00ef0665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::ViewValGraph::Edge&lt; View &gt;::used</definition>
        <argsstring>(Node&lt; View &gt; *v) const </argsstring>
        <name>used</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Node" kindref="compound">Node</ref>&lt; View &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Whether edge is used (marked or between nodes from the same scc) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="232" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a5f1dc15415c5a4dc1750dc962bf7d567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ViewValGraph::Edge&lt; View &gt;::use</definition>
        <argsstring>(void)</argsstring>
        <name>use</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Mark node as used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="234" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a2226cb1adcf5056816d022545043521e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ViewValGraph::Edge&lt; View &gt;::free</definition>
        <argsstring>(void)</argsstring>
        <name>free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unmark node as used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="236" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1acaf62af3a02f99e9a20c5e50aae90f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ViewValGraph::Edge&lt; View &gt;::revert</definition>
        <argsstring>(Node&lt; View &gt; *d)</argsstring>
        <name>revert</name>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Node" kindref="compound">Node</ref>&lt; View &gt; *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Revert edge to node <emphasis>d</emphasis> for matching. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="239" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1ad8a31acec820b6693c2fa0110487cb10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kindref="compound">Edge</ref>&lt; View &gt; *</type>
        <definition>forceinline Edge&lt; View &gt; * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::next_edge</definition>
        <argsstring>(void) const </argsstring>
        <name>next_edge</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return next edge in list of value edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="242" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a54c9473853b966b7eb8b7c17dd0a05a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kindref="compound">Edge</ref>&lt; View &gt; **</type>
        <definition>forceinline Edge&lt; View &gt; ** Gecode::Int::ViewValGraph::Edge&lt; View &gt;::next_edge_ref</definition>
        <argsstring>(void)</argsstring>
        <name>next_edge_ref</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return reference to next edge in list of value edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="244" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a2bfb0444bd79f60cf463eab77cbd2b99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge" kindref="compound">Edge</ref>&lt; View &gt; *</type>
        <definition>forceinline Edge&lt; View &gt; * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::next</definition>
        <argsstring>(void) const </argsstring>
        <name>next</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return next edge in list of edges per node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="246" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="105" bodyend="107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1abb5fad5c2ca794df79aff8394ab41da4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>forceinline void * Gecode::Int::ViewValGraph::Edge&lt; View &gt;::operator new</definition>
        <argsstring>(size_t, Space &amp;)</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <defname>home</defname>
        </param>
        <briefdescription>
<para>Allocate memory from space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="249" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aca4044bbc0500f815018ef3770653be8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ViewValGraph::Edge&lt; View &gt;::operator delete</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>Needed for exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="251" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a27a11e9e87b25e6f42702815b67edbb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ViewValGraph::Edge&lt; View &gt;::operator delete</definition>
        <argsstring>(void *, Space &amp;)</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Needed for exceptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view-val-graph.hh" line="253" column="1" bodyfile="/usr/include/gecode/int/view-val-graph/edge.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Edges in view-value graph. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1879">
        <label>Gecode::Int::ViewValGraph::Edge&lt; View &gt;</label>
        <link refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge"/>
        <childnode refid="1880" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1880">
        <label>Gecode::Int::ViewValGraph::BiLink</label>
        <link refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1883">
        <label>Gecode::Int::ViewValGraph::CombPtrFlag&lt; Gecode::Int::ViewValGraph::Node&lt; View &gt; &gt;</label>
        <link refid="classGecode_1_1Int_1_1ViewValGraph_1_1CombPtrFlag"/>
      </node>
      <node id="1881">
        <label>Gecode::Int::ViewValGraph::Edge&lt; View &gt;</label>
        <link refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge"/>
        <childnode refid="1882" relation="public-inheritance">
        </childnode>
        <childnode refid="1883" relation="usage">
          <edgelabel>sd</edgelabel>
        </childnode>
      </node>
      <node id="1882">
        <label>Gecode::Int::ViewValGraph::BiLink</label>
        <link refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink"/>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/view-val-graph.hh" line="108" column="1" bodyfile="/usr/include/gecode/int/view-val-graph.hh" bodystart="108" bodyend="-1"/>
    <listofallmembers>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aadc546fed93a07b0593bd0ccc6fe1d4b" prot="protected" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>_next_edge</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1abf6e776a761e4cbba3d2e47c2fa05b2c" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>add</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1a2c45d8f046c5ef13f19bc8bc63eee530" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>BiLink</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a59e6aed7e13ee3234bd2df30d2efd185" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>dst</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a47ee24f3911ef3c7f6ef973ac94b9327" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>Edge</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a29e1bc29f4d3be116e9fc2c332b279ac" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>Edge</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1af6a7e72170b5f244ee6e57e26ca1f04f" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>empty</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a2226cb1adcf5056816d022545043521e" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>free</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1ac1c5ef03c95a7232a921179e4506622a" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>mark</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1a477043f919a199f146ebc2825845d8be" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>marked</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a2bfb0444bd79f60cf463eab77cbd2b99" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>next</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1a676227782d04bba0fd9b28f154d4555f" prot="public" virt="non-virtual" ambiguityscope="Gecode::Int::ViewValGraph::BiLink::"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>next</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1ad8a31acec820b6693c2fa0110487cb10" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>next_edge</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a54c9473853b966b7eb8b7c17dd0a05a1" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>next_edge_ref</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aca4044bbc0500f815018ef3770653be8" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a27a11e9e87b25e6f42702815b67edbb3" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1abb5fad5c2ca794df79aff8394ab41da4" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>operator new</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1a9623cbba17d117289eebb6f2c2b5c4ae" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>prev</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1a903bfd23c708d3848f61697ff4435cc7" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>prev</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1acaf62af3a02f99e9a20c5e50aae90f4a" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>revert</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a3549add505b63b53a60052bd9a6ce2c7" prot="protected" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>sd</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1BiLink_1afc99ce400e8b5f69717cd7358c85aaa6" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>unlink</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a5f1dc15415c5a4dc1750dc962bf7d567" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>use</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a79d6f3de5e68e6d71dd5f5aa00ef0665" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>used</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1a6e6dbd73aa7f28bfc683bee77026b8ff" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>val</name></member>
      <member refid="classGecode_1_1Int_1_1ViewValGraph_1_1Edge_1aa5cd99075b98d77661b76717f4f15e8b" prot="public" virt="non-virtual"><scope>Gecode::Int::ViewValGraph::Edge</scope><name>view</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
