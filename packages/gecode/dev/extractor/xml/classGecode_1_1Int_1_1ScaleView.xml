<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1ScaleView" kind="class" prot="public">
    <compoundname>Gecode::Int::ScaleView</compoundname>
    <basecompoundref refid="classGecode_1_1DerivedView" prot="public" virt="non-virtual">Gecode::DerivedView&lt; IntView &gt;</basecompoundref>
    <includes refid="int_2view_8hpp" local="no">view.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Val</declname>
        <defname>Val</defname>
      </param>
      <param>
        <type>class</type>
        <declname>UnsVal</declname>
        <defname>UnsVal</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>View comparison</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a86759ef7208c37befd940263b276aad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Val</type>
          </param>
          <param>
            <type>class UnsVal</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool same</definition>
        <argsstring>(const ScaleView&lt; Val, UnsVal &gt; &amp;x, const ScaleView&lt; Val, UnsVal &gt; &amp;y)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1ScaleView" kindref="compound">ScaleView</ref>&lt; Val, UnsVal &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1ScaleView" kindref="compound">ScaleView</ref>&lt; Val, UnsVal &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether views <emphasis>x</emphasis> and <emphasis>y</emphasis> are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="789" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a1bd0ff5631eec7fbe2d545430d048331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Val</type>
          </param>
          <param>
            <type>class UnsVal</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool before</definition>
        <argsstring>(const ScaleView&lt; Val, UnsVal &gt; &amp;x, const ScaleView&lt; Val, UnsVal &gt; &amp;y)</argsstring>
        <name>before</name>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1ScaleView" kindref="compound">ScaleView</ref>&lt; Val, UnsVal &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1ScaleView" kindref="compound">ScaleView</ref>&lt; Val, UnsVal &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether view <emphasis>x</emphasis> comes before <emphasis>y</emphasis> (arbitrary order) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="792" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="306" bodyend="309"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors and initialization</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a9c8230dfb2ec54d46f0cfb67b0605035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::ScaleView</definition>
        <argsstring>(void)</argsstring>
        <name>ScaleView</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="680" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a2f63047481dcb7b2cc5f0cc4f7258809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::ScaleView</definition>
        <argsstring>(int b, const IntView &amp;y)</argsstring>
        <name>ScaleView</name>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Int_1_1IntView" kindref="compound">IntView</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initialize as <formula id="38">$b\cdot y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="682" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="52" bodyend="53"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value access</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a25886f06d0ae36747192a55fc5275319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::scale</definition>
        <argsstring>(void) const </argsstring>
        <name>scale</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return scale factor of scale view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="688" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1add6f52083e6e5776872e581aaa0ef4b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return minimum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="690" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a577c715c799422f9937d1e8fc76685ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return maximum of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="692" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a94872aaffdc0d3a82e427aa1d22af781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::med</definition>
        <argsstring>(void) const </argsstring>
        <name>med</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return median of domain (greatest element not greater than the median) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="694" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a7e6b379b35038f759a5f3f0585f35515" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::val</definition>
        <argsstring>(void) const </argsstring>
        <name>val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return assigned value (only if assigned) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="696" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a72b4268f93b0f8043aeb51993e2d85c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>UnsVal</type>
        <definition>forceinline UnsVal Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::size</definition>
        <argsstring>(void) const </argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return size (cardinality) of domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="699" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a8118aea37a4280e50e514ac58210c64e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>UnsVal</type>
        <definition>forceinline UnsVal Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of domain (distance between maximum and minimum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="701" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a0150d7bbb375f644bc475be945d71cc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>UnsVal</type>
        <definition>forceinline UnsVal Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::regret_min</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain minimum (distance to next larger value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="703" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a059830318788dc67dc2988c59b2044f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>UnsVal</type>
        <definition>forceinline UnsVal Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::regret_max</definition>
        <argsstring>(void) const </argsstring>
        <name>regret_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return regret of domain maximum (distance to next smaller value) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="705" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain tests</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1ab610e23ab23f3ffac622b8102de0f6f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::range</definition>
        <argsstring>(void) const </argsstring>
        <name>range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether domain is a range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="711" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1af6764d618f51c569bc943176f43b1762" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::in</definition>
        <argsstring>(Val n) const </argsstring>
        <name>in</name>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>n</emphasis> is contained in domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="713" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Domain update by value</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a924bf6387988693b1688588ac97379ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::lq</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>lq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="719" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a63b074ed548bc8fbb020d661204f06f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::le</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>le</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be less than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="721" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1ad014bc553633dc06ff9b53fc3da592ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::gq</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>gq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater or equal than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="723" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1adeebf8878fc9bea5b5fcbdcf3927e7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::gr</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>gr</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be greater than <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="725" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a84588f0283198755c22cbdcb2f003815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::nq</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>nq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be different from <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="727" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a482f9df637360918712a1efb970c30cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>forceinline ModEvent Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::eq</definition>
        <argsstring>(Space &amp;home, Val n)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>Val</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict domain values to be equal to <emphasis>n</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="729" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>View-dependent propagator support</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1ade7bef5c47c953a9043e845373988ad6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
        <definition>forceinline ModEventDelta Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::med</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>med</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Translate modification event <emphasis>me</emphasis> to modification event delta for view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="735" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delta information for advisors</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a5aaadb1e9ad6b56e1e2c08404b335ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::min</definition>
        <argsstring>(const Delta &amp;d) const </argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return minimum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="741" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a4faeec4ad9c8d05fe75b5f01b0093512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Val</type>
        <definition>forceinline Val Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::max</definition>
        <argsstring>(const Delta &amp;d) const </argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return maximum value just pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="743" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a85f6e976904d9f9671e0e7572890646f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::any</definition>
        <argsstring>(const Delta &amp;d) const </argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classGecode_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Test whether arbitrary values got pruned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="745" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="204" bodyend="206"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cloning</header>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1a5d9fe4f49c1aee59ceec8a68d7e0b4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::update</definition>
        <argsstring>(Space &amp;home, bool share, ScaleView&lt; Val, UnsVal &gt; &amp;y)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1ScaleView" kindref="compound">ScaleView</ref>&lt; Val, UnsVal &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Update this view to be a clone of view <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="751" column="1" bodyfile="/usr/include/gecode/int/view/scale.hpp" bodystart="216" bodyend="220"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1Int_1_1ScaleView_1a954152d6565c041c7152396ea18822f9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Gecode::Int::ScaleView&lt; Val, UnsVal &gt;::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
<para>Scale factor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="675" column="1" bodyfile="/usr/include/gecode/int/view.hpp" bodystart="675" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1ad928aff628431976926f24a2bc7caff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const IntScaleView &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskActorIntView_1gae1f5670a4cadd9ba2a9aac81c816be73" kindref="member">IntScaleView</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Print integer-precision integer scale view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="765" column="1" bodyfile="/usr/include/gecode/int/view/print.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1ScaleView_1aa8c3e7863b5c61dba77035892265a470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; Char, Traits &gt; &amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const LLongScaleView &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskActorIntView_1ga73b715b91eb09d00c331d77d4f5334f8" kindref="member">LLongScaleView</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Print long long-precision integer scale view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/view.hpp" line="765" column="1" bodyfile="/usr/include/gecode/int/view/print.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Scale integer view (template) </para>    </briefdescription>
    <detaileddescription>
<para>A scale integer view <formula id="36">$s$</formula> for an integer view <formula id="31">$x$</formula> and a non-negative integer <formula id="37">$a$</formula> provides operations such that <formula id="36">$s$</formula> behaves as <formula id="15">$a\cdot x$</formula>.</para><para>The precision of a scale integer view is defined by the value types <emphasis>Val</emphasis> and <emphasis>UnsVal</emphasis>. <emphasis>Val</emphasis> can be either <computeroutput>int</computeroutput> or <computeroutput>long</computeroutput> <computeroutput>long</computeroutput> <computeroutput>int</computeroutput> where <emphasis>UnsVal</emphasis> must be the unsigned variant of <emphasis>Val</emphasis>. The range which is allowed for the two types is defined by the values in Gecode::Limits.</para><para>Note that scale integer views currently do not provide operations for updating domains by range iterators.</para><para>The template is not to be used directly (as it is very clumsy). Use the following instead:<itemizedlist>
<listitem><para>IntScaleView for scale views with integer precision</para></listitem><listitem><para>LLongScaleView for scale views with long long precision </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="6307">
        <label>Gecode::DerivedView&lt; IntView &gt;</label>
        <link refid="classGecode_1_1DerivedView"/>
      </node>
      <node id="6306">
        <label>Gecode::Int::ScaleView&lt; Val, UnsVal &gt;</label>
        <link refid="classGecode_1_1Int_1_1ScaleView"/>
        <childnode refid="6307" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6310">
        <label>Gecode::Int::IntView</label>
        <link refid="classGecode_1_1Int_1_1IntView"/>
        <childnode refid="6311" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6311">
        <label>Gecode::VarImpView&lt; IntVar &gt;</label>
        <link refid="classGecode_1_1VarImpView"/>
      </node>
      <node id="6309">
        <label>Gecode::DerivedView&lt; IntView &gt;</label>
        <link refid="classGecode_1_1DerivedView"/>
        <childnode refid="6310" relation="usage">
          <edgelabel>x</edgelabel>
        </childnode>
      </node>
      <node id="6308">
        <label>Gecode::Int::ScaleView&lt; Val, UnsVal &gt;</label>
        <link refid="classGecode_1_1Int_1_1ScaleView"/>
        <childnode refid="6309" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/view.hpp" line="671" column="1" bodyfile="/usr/include/gecode/int/view.hpp" bodystart="671" bodyend="753"/>
    <listofallmembers>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a954152d6565c041c7152396ea18822f9" prot="protected" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>a</name></member>
      <member refid="classGecode_1_1DerivedView_1a8af1ef9d834817687d07b24073bb11cb" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>afc</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a85f6e976904d9f9671e0e7572890646f" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>any</name></member>
      <member refid="classGecode_1_1DerivedView_1a7a052d937c4a0e3e056f2c04bf426958" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>assigned</name></member>
      <member refid="classGecode_1_1DerivedView_1aa50003acd00fbe1aba2c59913cfef099" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>base</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a1bd0ff5631eec7fbe2d545430d048331" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>before</name></member>
      <member refid="classGecode_1_1DerivedView_1a7106983000f6ea5bb00ebf6220101ddc" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>cancel</name></member>
      <member refid="classGecode_1_1DerivedView_1a9eaeb396937207a32f1b79faa9330e66" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>cancel</name></member>
      <member refid="classGecode_1_1DerivedView_1a5268030de7f958b6cc01d3eeb672aab8" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>degree</name></member>
      <member refid="classGecode_1_1DerivedView_1a98dc20fbac8c4b0511291136fad93944" prot="protected" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>DerivedView</name></member>
      <member refid="classGecode_1_1DerivedView_1ae5ae685043fb880eef3c0041b1665b53" prot="protected" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>DerivedView</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a482f9df637360918712a1efb970c30cc" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>eq</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1ad014bc553633dc06ff9b53fc3da592ed" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>gq</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1adeebf8878fc9bea5b5fcbdcf3927e7a0" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>gr</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1af6764d618f51c569bc943176f43b1762" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>in</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a63b074ed548bc8fbb020d661204f06f1" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>le</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a924bf6387988693b1688588ac97379ad" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>lq</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a577c715c799422f9937d1e8fc76685ab" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>max</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a4faeec4ad9c8d05fe75b5f01b0093512" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>max</name></member>
      <member refid="classGecode_1_1DerivedView_1ad50ca39d6fc43ff0bb8f65a2f787b25d" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>me</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a94872aaffdc0d3a82e427aa1d22af781" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1ade7bef5c47c953a9043e845373988ad6" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>med</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1add6f52083e6e5776872e581aaa0ef4b3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>min</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a5aaadb1e9ad6b56e1e2c08404b335ac8" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>min</name></member>
      <member refid="classGecode_1_1DerivedView_1ae2ccb41242200b5e2121164db287d76d" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>modevent</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a84588f0283198755c22cbdcb2f003815" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>nq</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1ad928aff628431976926f24a2bc7caff3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1aa8c3e7863b5c61dba77035892265a470" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>operator&lt;&lt;</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1ab610e23ab23f3ffac622b8102de0f6f9" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>range</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a059830318788dc67dc2988c59b2044f2" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>regret_max</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a0150d7bbb375f644bc475be945d71cc3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>regret_min</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a86759ef7208c37befd940263b276aad3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>same</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a25886f06d0ae36747192a55fc5275319" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>scale</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a9c8230dfb2ec54d46f0cfb67b0605035" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>ScaleView</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a2f63047481dcb7b2cc5f0cc4f7258809" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>ScaleView</name></member>
      <member refid="classGecode_1_1DerivedView_1aed474218f6ac19c8958f5dd921dd4a56" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>schedule</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a72b4268f93b0f8043aeb51993e2d85c3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>size</name></member>
      <member refid="classGecode_1_1DerivedView_1a9ca639fc9c07f03ff1ed8e4bdb2554ca" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1DerivedView_1aa1b46557b44017c14d09f6397c62f7b1" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>subscribe</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a5d9fe4f49c1aee59ceec8a68d7e0b4a6" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>update</name></member>
      <member refid="classGecode_1_1DerivedView_1a1fd607dd28d8f0dd8a61efafc6cd46f7" prot="public" virt="non-virtual" ambiguityscope="DerivedView&lt; IntView &gt;::"><scope>Gecode::Int::ScaleView</scope><name>update</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a7e6b379b35038f759a5f3f0585f35515" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>val</name></member>
      <member refid="classGecode_1_1DerivedView_1a040ec29422fa48ade9b5d6b595e9d2e8" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>varderived</name></member>
      <member refid="classGecode_1_1DerivedView_1acf843af5c66aaf459055496fb6e69d5e" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>varimp</name></member>
      <member refid="classGecode_1_1DerivedView_1a859634f2bf00d75823bbd24bc052fbb3" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>VarImpType</name></member>
      <member refid="classGecode_1_1DerivedView_1a87ae51cbfed201d640f8d6db2d8fb4b4" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>VarType</name></member>
      <member refid="classGecode_1_1Int_1_1ScaleView_1a8118aea37a4280e50e514ac58210c64e" prot="public" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>width</name></member>
      <member refid="classGecode_1_1DerivedView_1a5183c0d4bfdd31dd2db78e4ad855c8ea" prot="protected" virt="non-virtual"><scope>Gecode::Int::ScaleView</scope><name>x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
