<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceGecode_1_1Float_1_1Linear" kind="namespace">
    <compoundname>Gecode::Float::Linear</compoundname>
    <innerclass refid="classGecode_1_1Float_1_1Linear_1_1Lin" prot="public">Gecode::Float::Linear::Lin</innerclass>
    <innerclass refid="classGecode_1_1Float_1_1Linear_1_1Eq" prot="public">Gecode::Float::Linear::Eq</innerclass>
    <innerclass refid="classGecode_1_1Float_1_1Linear_1_1Lq" prot="public">Gecode::Float::Linear::Lq</innerclass>
    <innerclass refid="classGecode_1_1Float_1_1Linear_1_1Term" prot="public">Gecode::Float::Linear::Term</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1a4f8bc885b7ca61fdfcb1b7f5d47f13dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gecode::Float::Linear::eliminate_p</definition>
        <argsstring>(ModEventDelta med, ViewArray&lt; View &gt; &amp;x, FloatVal &amp;c)</argsstring>
        <name>eliminate_p</name>
        <param>
          <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
          <declname>med</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1ViewArray" kindref="compound">ViewArray</ref>&lt; View &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear/nary.hpp" line="124" column="1" bodyfile="/usr/include/gecode/float/linear/nary.hpp" bodystart="124" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1a18ac45092a14db6faeba8fb13548f552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gecode::Float::Linear::eliminate_n</definition>
        <argsstring>(ModEventDelta med, ViewArray&lt; View &gt; &amp;y, FloatVal &amp;c)</argsstring>
        <name>eliminate_n</name>
        <param>
          <type><ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref></type>
          <declname>med</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1ViewArray" kindref="compound">ViewArray</ref>&lt; View &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear/nary.hpp" line="139" column="1" bodyfile="/usr/include/gecode/float/linear/nary.hpp" bodystart="139" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1af5bf388975161b893e4312e1e811d9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::Float::Linear::infty</definition>
        <argsstring>(const FloatNum &amp;n)</argsstring>
        <name>infty</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear/nary.hpp" line="152" column="1" bodyfile="/usr/include/gecode/float/linear/nary.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1a906288580d0584e4b2aef278f5892ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::Float::Linear::estimate</definition>
        <argsstring>(Term *t, int n, FloatVal c, FloatNum &amp;l, FloatNum &amp;u)</argsstring>
        <name>estimate</name>
        <param>
          <type><ref refid="classGecode_1_1Float_1_1Linear_1_1Term" kindref="compound">Term</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Estimate lower and upper bounds. </para>        </briefdescription>
        <detaileddescription>
<para>Estimates the boundaries for a linear expression <formula id="16">$\sum_{i=0}^{n-1}t_i + c$</formula>. If the boundaries exceed the limits as defined in Limits::Float, these boundaries are returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>array of linear terms </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>constant </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear.hh" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1aa1c7211b4dc3d66d9cdf33a5cff22d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::Float::Linear::post</definition>
        <argsstring>(Home home, Term *t, int n, FloatRelType frt, FloatVal c)</argsstring>
        <name>post</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Float_1_1Linear_1_1Term" kindref="compound">Term</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Post propagator for linear constraint over floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>array of linear terms over floats </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frt</parametername>
</parameternamelist>
<parameterdescription>
<para>type of relation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>result of linear constraint</para></parameterdescription>
</parameteritem>
</parameterlist>
All variants for linear constraints share the following properties:<itemizedlist>
<listitem><para>Variables occuring multiply in the term array are replaced by a single occurence: for example, <formula id="17">$ax+bx$</formula> becomes <formula id="18">$(a+b)x$</formula>.</para></listitem></itemizedlist>
</para><para>Requires<programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;gecode/float/linear.hh&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear.hh" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1_1Float_1_1Linear_1aeea3245d3b50cc52586df1ff3724cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::Float::Linear::post</definition>
        <argsstring>(Home home, Term *t, int n, FloatRelType frt, FloatVal c, Reify r)</argsstring>
        <name>post</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Float_1_1Linear_1_1Term" kindref="compound">Term</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for reified linear constraint over floats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>array of linear terms over Booleans </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frt</parametername>
</parameternamelist>
<parameterdescription>
<para>type of relation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>result of linear constraint </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>reification specification</para></parameterdescription>
</parameteritem>
</parameterlist>
All variants for linear constraints share the following properties:<itemizedlist>
<listitem><para>Variables occuring multiply in the term array are replaced by a single occurence: for example, <formula id="17">$ax+bx$</formula> becomes <formula id="18">$(a+b)x$</formula>.</para></listitem></itemizedlist>
</para><para>Requires<programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;gecode/float/linear.hh&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/linear.hh" line="230" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Linear propagators </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/include/gecode/float/linear/nary.hpp" line="40" column="1"/>
  </compounddef>
</doxygen>
