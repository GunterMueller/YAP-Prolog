<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="suffix_8hpp" kind="file">
    <compoundname>suffix.hpp</compoundname>
    <includes local="no">limits.h</includes>
    <includedby refid="third-party_2boost_2config_8hpp" local="no">/usr/include/gecode/third-party/boost/config.hpp</includedby>
    <incdepgraph>
      <node id="34363">
        <label>/usr/include/gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix.hpp"/>
        <childnode refid="34364" relation="include">
        </childnode>
      </node>
      <node id="34364">
        <label>limits.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34383">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp</label>
        <link refid="rounded__transc_8hpp_source"/>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34368">
        <label>/usr/include/gecode/third-party/boost/limits.hpp</label>
        <link refid="third-party_2boost_2limits_8hpp_source"/>
        <childnode refid="34369" relation="include">
        </childnode>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34365">
        <label>/usr/include/gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix.hpp"/>
        <childnode refid="34366" relation="include">
        </childnode>
      </node>
      <node id="34371">
        <label>/usr/include/gecode/float.hh</label>
        <link refid="float_8hh_source"/>
        <childnode refid="34372" relation="include">
        </childnode>
        <childnode refid="34373" relation="include">
        </childnode>
        <childnode refid="34374" relation="include">
        </childnode>
        <childnode refid="34375" relation="include">
        </childnode>
      </node>
      <node id="34379">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/detail/bugs.hpp</label>
        <link refid="bugs_8hpp_source"/>
        <childnode refid="34376" relation="include">
        </childnode>
        <childnode refid="34377" relation="include">
        </childnode>
        <childnode refid="34380" relation="include">
        </childnode>
        <childnode refid="34381" relation="include">
        </childnode>
        <childnode refid="34383" relation="include">
        </childnode>
        <childnode refid="34378" relation="include">
        </childnode>
        <childnode refid="34384" relation="include">
        </childnode>
      </node>
      <node id="34377">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/arith2.hpp</label>
        <link refid="arith2_8hpp_source"/>
        <childnode refid="34378" relation="include">
        </childnode>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34385">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/compare/set.hpp</label>
        <link refid="third-party_2boost_2numeric_2interval_2compare_2set_8hpp_source"/>
        <childnode refid="34386" relation="include">
        </childnode>
      </node>
      <node id="34370">
        <label>/usr/include/gecode/third-party/boost/numeric/interval.hpp</label>
        <link refid="interval_8hpp_source"/>
        <childnode refid="34371" relation="include">
        </childnode>
      </node>
      <node id="34367">
        <label>/usr/include/gecode/third-party/boost/detail/limits.hpp</label>
        <link refid="third-party_2boost_2detail_2limits_8hpp_source"/>
      </node>
      <node id="34375">
        <label>/usr/include/gecode/float/rel.hh</label>
        <link refid="float_2rel_8hh_source"/>
        <childnode refid="34372" relation="include">
        </childnode>
      </node>
      <node id="34366">
        <label>/usr/include/gecode/third-party/boost/config.hpp</label>
        <link refid="third-party_2boost_2config_8hpp_source"/>
        <childnode refid="34367" relation="include">
        </childnode>
        <childnode refid="34368" relation="include">
        </childnode>
        <childnode refid="34376" relation="include">
        </childnode>
        <childnode refid="34377" relation="include">
        </childnode>
        <childnode refid="34379" relation="include">
        </childnode>
        <childnode refid="34378" relation="include">
        </childnode>
        <childnode refid="34384" relation="include">
        </childnode>
      </node>
      <node id="34372">
        <label>/usr/include/gecode/float/arithmetic.hh</label>
        <link refid="float_2arithmetic_8hh_source"/>
      </node>
      <node id="34369">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/checking.hpp</label>
        <link refid="checking_8hpp_source"/>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34376">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/arith.hpp</label>
        <link refid="arith_8hpp_source"/>
        <childnode refid="34377" relation="include">
        </childnode>
        <childnode refid="34378" relation="include">
        </childnode>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34382">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/hw_rounding.hpp</label>
        <link refid="hw__rounding_8hpp_source"/>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34374">
        <label>/usr/include/gecode/float/linear.hh</label>
        <link refid="float_2linear_8hh_source"/>
      </node>
      <node id="34384">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/utility.hpp</label>
        <link refid="numeric_2interval_2utility_8hpp_source"/>
        <childnode refid="34385" relation="include">
        </childnode>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34373">
        <label>/usr/include/gecode/float/branch.hh</label>
        <link refid="float_2branch_8hh_source"/>
      </node>
      <node id="34378">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/transc.hpp</label>
        <link refid="transc_8hpp_source"/>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34380">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/detail/division.hpp</label>
        <link refid="division_8hpp_source"/>
        <childnode refid="34376" relation="include">
        </childnode>
        <childnode refid="34377" relation="include">
        </childnode>
      </node>
      <node id="34381">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/rounded_arith.hpp</label>
        <link refid="rounded__arith_8hpp_source"/>
        <childnode refid="34380" relation="include">
        </childnode>
        <childnode refid="34382" relation="include">
        </childnode>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
      <node id="34386">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/compare.hpp</label>
        <link refid="compare_8hpp_source"/>
        <childnode refid="34370" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="suffix_8hpp_1aaa70ac7a77243cd22112ecce51f11d45" prot="public" static="no">
        <name>BOOST_SYMBOL_EXPORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="40" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ab1c236f38f079097e89ffd5652e2a077" prot="public" static="no">
        <name>BOOST_SYMBOL_IMPORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="43" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a8a1a971388ee64e60f5bef61ed1d5458" prot="public" static="no">
        <name>BOOST_SYMBOL_VISIBLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="46" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a58f472dbf2df60e2c55934c76eaf93b1" prot="public" static="no">
        <name>BOOST_NO_LONG_LONG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="61" column="16" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ab3ab540a5e3cd2c5650415bcc89f2aab" prot="public" static="no">
        <name>BOOST_STD_EXTENSION_NAMESPACE</name>
        <initializer>std</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="76" column="13" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a4da0dd5554d0fc83505b043f612b0727" prot="public" static="no">
        <name>BOOST_NO_LONG_LONG_NUMERIC_LIMITS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="103" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1af6154d73a5d9445ae53ab081e3b6dc7c" prot="public" static="no">
        <name>BOOST_HAS_STATIC_ASSERT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="110" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ab4ec15368ad4a8520765a47c74c6aa84" prot="public" static="no">
        <name>BOOST_NO_MS_INT64_NUMERIC_LIMITS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="118" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a2e10baa5102871c37713dd486a2a0ae7" prot="public" static="no">
        <name>BOOST_MSVC6_MEMBER_TEMPLATES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="127" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1abc2a597f9adf761cd9e003cddcd64c6d" prot="public" static="no">
        <name>BOOST_HAS_PARTIAL_STD_ALLOCATOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="201" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a23f65f94e3046caef0d22e1cb29fa226" prot="public" static="no">
        <name>BOOST_NO_SLIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="309" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a1b842552ac2cc75cc74e65896efc7e55" prot="public" static="no">
        <name>BOOST_NO_HASH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="313" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a137a1d855d38297a6247d79f168ce1c0" prot="public" static="no">
        <name>BOOST_HAS_RVALUE_REFS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="352" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a6eaa046479ce9e2c8d1b16cbb14d5e06" prot="public" static="no">
        <name>BOOST_HAS_VARIADIC_TMPL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="359" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a7348e4c8108bce921f74ae590b2da6fe" prot="public" static="no">
        <name>BOOST_PREVENT_MACRO_SUBSTITUTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="389" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ae22b2038867b5864f8f4e72ea19d6f5e" prot="public" static="no">
        <name>BOOST_USING_STD_MIN</name>
        <param></param>
        <initializer>using std::min</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="392" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a88573a5450961de21a78c790019ce108" prot="public" static="no">
        <name>BOOST_USING_STD_MAX</name>
        <param></param>
        <initializer>using std::max</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="396" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a347deb9f70eeef37f8c718d30c9c98b6" prot="public" static="no">
        <name>BOOST_STATIC_CONSTANT</name>
        <param><defname>type</defname></param>
        <param><defname>assignment</defname></param>
        <initializer>static const type assignment</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="425" column="17" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1abd46e4c90a23ebef712133c146123de5" prot="public" static="no">
        <name>BOOST_USE_FACET</name>
        <param><defname>Type</defname></param>
        <param><defname>loc</defname></param>
        <initializer>std::use_facet&lt; Type &gt;(loc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="453" column="12" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a232fda79d565f3c6c19cd13d113cdd15" prot="public" static="no">
        <name>BOOST_HAS_FACET</name>
        <param><defname>Type</defname></param>
        <param><defname>loc</defname></param>
        <initializer>std::has_facet&lt; Type &gt;(loc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="454" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a7f03404fb3eedf3092282d4fa053f075" prot="public" static="no">
        <name>BOOST_NESTED_TEMPLATE</name>
        <initializer>template</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="468" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a49e08659ae34f11cea72b859ebd29e0b" prot="public" static="no">
        <name>BOOST_UNREACHABLE_RETURN</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="481" column="12" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a781d435c439be5109e8442d58a52d0a2" prot="public" static="no">
        <name>BOOST_DEDUCED_TYPENAME</name>
        <initializer>typename</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="496" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1aa0ba3a29a3b6c05896f3f9b5edf883ed" prot="public" static="no">
        <name>BOOST_CTOR_TYPENAME</name>
        <initializer>typename</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="502" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1aaa15e563626e1621e52d5ee391bfc958" prot="public" static="no">
        <name>BOOST_EXPLICIT_TEMPLATE_TYPE</name>
        <param><defname>t</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="589" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1aab985fffd191f19b1610d9be00f96e57" prot="public" static="no">
        <name>BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC</name>
        <param><defname>t</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="590" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a6d7774a9fbcc4466f76110c92fba92d7" prot="public" static="no">
        <name>BOOST_EXPLICIT_TEMPLATE_NON_TYPE</name>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="591" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ad0923abe44703d9e0bc1a6cd2a94ee96" prot="public" static="no">
        <name>BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC</name>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="592" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ad1a0171e3b3063e09ef32ad619b04547" prot="public" static="no">
        <name>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE</name>
        <param><defname>t</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="594" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1af6906c889e3f27cc1be2b03361bbd759" prot="public" static="no">
        <name>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC</name>
        <param><defname>t</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="595" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1adc95af48d59d18c4d3e20d914da5803c" prot="public" static="no">
        <name>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE</name>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="596" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a2c20199f29ec6e8896c25199f1832c05" prot="public" static="no">
        <name>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC</name>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="597" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a49132cc5bde61fd5c333f26dd0ea52d6" prot="public" static="no">
        <name>BOOST_STRINGIZE</name>
        <param><defname>X</defname></param>
        <initializer>BOOST_DO_STRINGIZE(X)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="616" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1af1075f0c8ba89928d05e022a5bf7683b" prot="public" static="no">
        <name>BOOST_DO_STRINGIZE</name>
        <param><defname>X</defname></param>
        <initializer>#X</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="617" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1af9b5068fd84dbc58f51536ed5676d1bd" prot="public" static="no">
        <name>BOOST_JOIN</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>BOOST_DO_JOIN( X, Y )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="627" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a5e02016aa7dbf6d61bd78716cc6aca17" prot="public" static="no">
        <name>BOOST_DO_JOIN</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>BOOST_DO_JOIN2(X,Y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="628" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ac9ff28785b382eea5d10bc4b7c655e89" prot="public" static="no">
        <name>BOOST_DO_JOIN2</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>X##Y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="629" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a78005f877b1cc90480de16ddfd9a0def" prot="public" static="no">
        <name>BOOST_COMPILER</name>
        <initializer>&quot;Unknown ISO C++ Compiler&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="636" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a119bfbef30b482000f193169d6ae9fee" prot="public" static="no">
        <name>BOOST_STDLIB</name>
        <initializer>&quot;Unknown ISO standard library&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="639" column="14" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1ada2b8c089a7d215b91eba5f2ee8624b3" prot="public" static="no">
        <name>BOOST_PLATFORM</name>
        <initializer>&quot;Unknown&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="646" column="23" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1aa5e6d856eba16373f4766e7b1c3b1630" prot="public" static="no">
        <name>BOOST_GPU_ENABLED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="654" column="11" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1aa02e911ac6c4e5abc85276284b9801aa" prot="public" static="no">
        <name>BOOST_CONSTEXPR</name>
        <initializer>constexpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="664" column="10" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a3c9424a7881af03de9578888817aa6c0" prot="public" static="no">
        <name>BOOST_CONSTEXPR_OR_CONST</name>
        <initializer>constexpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="665" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="suffix_8hpp_1a739eca1bb4d8253b7b1589a5ca7b12a7" prot="public" static="no">
        <name>BOOST_STATIC_CONSTEXPR</name>
        <initializer>static BOOST_CONSTEXPR_OR_CONST</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp" line="668" column="9" bodyfile="/usr/include/gecode/third-party/boost/config/suffix.hpp" bodystart="668" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>Boost<sp/>config.hpp<sp/>configuration<sp/>header<sp/>file<sp/><sp/>------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2001-2003<sp/>John<sp/>Maddock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2001<sp/>Darin<sp/>Adler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2001<sp/>Peter<sp/>Dimov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2002<sp/>Bill<sp/>Kempf<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2002<sp/>Jens<sp/>Maurer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2002-2003<sp/>David<sp/>Abrahams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2003<sp/>Gennaro<sp/>Prota</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2003<sp/>Eric<sp/>Friedman</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2010<sp/>Eric<sp/>Jourdanneau,<sp/>Joel<sp/>Falcou</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>See<sp/>http://www.boost.org/<sp/>for<sp/>most<sp/>recent<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Boost<sp/>config.hpp<sp/>policy<sp/>and<sp/>rationale<sp/>documentation<sp/>has<sp/>been<sp/>moved<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>http://www.boost.org/libs/config/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>file<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>stable,<sp/>and<sp/>relatively<sp/>unchanging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>It<sp/>should<sp/>contain<sp/>boilerplate<sp/>code<sp/>only<sp/>-<sp/>no<sp/>compiler<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>code<sp/>unless<sp/>it<sp/>is<sp/>unavoidable<sp/>-<sp/>no<sp/>changes<sp/>unless<sp/>unavoidable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_CONFIG_SUFFIX_HPP</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_CONFIG_SUFFIX_HPP</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>GCC-4.x<sp/>versions<sp/>issue<sp/>warnings<sp/>even<sp/>when<sp/>__extension__<sp/>is<sp/>used,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>use<sp/>this<sp/>as<sp/>a<sp/>workaround:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>system_header</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>visibility<sp/>macros<sp/>are<sp/>always<sp/>defined,<sp/>thus<sp/>symplifying<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_SYMBOL_EXPORT</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_SYMBOL_EXPORT</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_SYMBOL_IMPORT</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_SYMBOL_IMPORT</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_SYMBOL_VISIBLE</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_SYMBOL_VISIBLE</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>long<sp/>long<sp/>by<sp/>looking<sp/>for<sp/>the<sp/>appropriate<sp/>macros<sp/>in<sp/>&lt;limits.h&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>use<sp/>limits.h<sp/>rather<sp/>than<sp/>climits<sp/>for<sp/>maximal<sp/>portability,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>remember<sp/>that<sp/>since<sp/>these<sp/>just<sp/>declare<sp/>a<sp/>bunch<sp/>of<sp/>macros,<sp/>there<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>namespace<sp/>issues<sp/>from<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_HAS_LONG_LONG)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_LONG_LONG)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_MSVC)<sp/>&amp;&amp;<sp/>!defined(__BORLANDC__)</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(defined(ULLONG_MAX)<sp/>||<sp/>defined(ULONG_LONG_MAX)<sp/>||<sp/>defined(ULONGLONG_MAX))</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>BOOST_HAS_LONG_LONG</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>else</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>BOOST_NO_LONG_LONG</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC<sp/>3.x<sp/>will<sp/>clean<sp/>up<sp/>all<sp/>of<sp/>those<sp/>nasty<sp/>macro<sp/>definitions<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_NO_CTYPE_FUNCTIONS<sp/>is<sp/>intended<sp/>to<sp/>help<sp/>work<sp/>around,<sp/>so<sp/>undefine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>GCC<sp/>3.x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;=<sp/>3)<sp/>&amp;&amp;<sp/>defined(BOOST_NO_CTYPE_FUNCTIONS)</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_NO_CTYPE_FUNCTIONS</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>any<sp/>extensions<sp/>are<sp/>in<sp/>namespace<sp/>std::<sp/>unless<sp/>stated<sp/>otherwise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>BOOST_STD_EXTENSION_NAMESPACE</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>BOOST_STD_EXTENSION_NAMESPACE<sp/>std</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>cv-qualified<sp/>specializations<sp/>are<sp/>not<sp/>allowed,<sp/>then<sp/>neither<sp/>are<sp/>cv-void<sp/>ones:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_CV_SPECIALIZATIONS)<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_CV_VOID_SPECIALIZATIONS</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>numeric_limits<sp/>template,<sp/>then<sp/>it<sp/>can&apos;t<sp/>have<sp/>any<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants<sp/>either!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_LIMITS)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS)</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_MS_INT64_NUMERIC_LIMITS</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_LONG_LONG_NUMERIC_LIMITS</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>no<sp/>long<sp/>long<sp/>then<sp/>there<sp/>is<sp/>no<sp/>specialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>numeric_limits&lt;long<sp/>long&gt;<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_HAS_LONG_LONG)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_LONG_LONG_NUMERIC_LIMITS)</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_LONG_LONG_NUMERIC_LIMITS</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalize<sp/>BOOST_NO_STATIC_ASSERT<sp/>and<sp/>(depricated)<sp/>BOOST_HAS_STATIC_ASSERT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_NO_STATIC_ASSERT)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_STATIC_ASSERT)</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_STATIC_ASSERT</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>no<sp/>__int64<sp/>then<sp/>there<sp/>is<sp/>no<sp/>specialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>numeric_limits&lt;__int64&gt;<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_HAS_MS_INT64)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_MS_INT64_NUMERIC_LIMITS)</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_MS_INT64_NUMERIC_LIMITS</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>member<sp/>templates<sp/>are<sp/>supported<sp/>then<sp/>so<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VC6<sp/>subset<sp/>of<sp/>member<sp/>templates:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(BOOST_NO_MEMBER_TEMPLATES)<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_MSVC6_MEMBER_TEMPLATES)</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_MSVC6_MEMBER_TEMPLATES</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>partial<sp/>specialization,<sp/>can&apos;t<sp/>test<sp/>for<sp/>partial<sp/>specialisation<sp/>bugs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_BCB_PARTIAL_SPECIALIZATION_BUG)</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_BCB_PARTIAL_SPECIALIZATION_BUG</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>partial<sp/>specialization,<sp/>we<sp/>can&apos;t<sp/>have<sp/>array-type<sp/>partial<sp/>specialisations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS)</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>partial<sp/>specialization,<sp/>std::iterator_traits<sp/>can&apos;t<sp/>work:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STD_ITERATOR_TRAITS)</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_ITERATOR_TRAITS</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>partial<sp/>specialization,<sp/>partial<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>with<sp/>default<sp/>args<sp/>won&apos;t<sp/>work<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_PARTIAL_SPECIALIZATION_IMPLICIT_DEFAULT_ARGS)</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_PARTIAL_SPECIALIZATION_IMPLICIT_DEFAULT_ARGS</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>member<sp/>template<sp/>support,<sp/>we<sp/>can&apos;t<sp/>have<sp/>template<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>standard<sp/>library<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_MEMBER_TEMPLATES)<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_MSVC6_MEMBER_TEMPLATES)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS)</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>member<sp/>template<sp/>support,<sp/>we<sp/>can&apos;t<sp/>have<sp/>a<sp/>conforming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::allocator<sp/>template<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_MEMBER_TEMPLATES)<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_MSVC6_MEMBER_TEMPLATES)<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STD_ALLOCATOR)</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>ADL<sp/>support<sp/>then<sp/>using<sp/>declarations<sp/>will<sp/>break<sp/>ADL<sp/>as<sp/>well:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP)<sp/>&amp;&amp;<sp/>!defined(BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL)</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>typeid<sp/>support<sp/>we<sp/>have<sp/>no<sp/>dynamic<sp/>RTTI<sp/>either:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_TYPEID)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_RTTI)</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_RTTI</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>a<sp/>standard<sp/>allocator,<sp/>then<sp/>we<sp/>have<sp/>a<sp/>partial<sp/>one<sp/>as<sp/>well:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_NO_STD_ALLOCATOR)</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_PARTIAL_STD_ALLOCATOR</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>have<sp/>a<sp/>working<sp/>std::use_facet<sp/>if<sp/>there<sp/>is<sp/>no<sp/>std::locale:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_STD_LOCALE)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STD_USE_FACET)</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_USE_FACET</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>have<sp/>a<sp/>std::messages<sp/>facet<sp/>if<sp/>there<sp/>is<sp/>no<sp/>std::locale:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_STD_LOCALE)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STD_MESSAGES)</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_MESSAGES</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>have<sp/>a<sp/>working<sp/>std::wstreambuf<sp/>if<sp/>there<sp/>is<sp/>no<sp/>std::locale:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_STD_LOCALE)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_STD_WSTREAMBUF)</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_STD_WSTREAMBUF</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>have<sp/>a<sp/>&lt;cwctype&gt;<sp/>if<sp/>there<sp/>is<sp/>no<sp/>&lt;cwchar&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_CWCHAR)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_CWCTYPE)</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_CWCTYPE</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>have<sp/>a<sp/>swprintf<sp/>if<sp/>there<sp/>is<sp/>no<sp/>&lt;cwchar&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_CWCHAR)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_SWPRINTF)</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_SWPRINTF</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>Win32<sp/>support<sp/>is<sp/>turned<sp/>off,<sp/>then<sp/>we<sp/>must<sp/>turn<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threading<sp/>support<sp/>also,<sp/>unless<sp/>there<sp/>is<sp/>some<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread<sp/>API<sp/>enabled:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_DISABLE_WIN32)<sp/>&amp;&amp;<sp/>defined(_WIN32)<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_DISABLE_THREADS)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_PTHREADS)</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_DISABLE_THREADS</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turn<sp/>on<sp/>threading<sp/>support<sp/>if<sp/>the<sp/>compiler<sp/>thinks<sp/>that<sp/>it&apos;s<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multithreaded<sp/>mode.<sp/><sp/>We<sp/>put<sp/>this<sp/>here<sp/>because<sp/>there<sp/>are<sp/>only<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limited<sp/>number<sp/>of<sp/>macros<sp/>that<sp/>identify<sp/>this<sp/>(if<sp/>there&apos;s<sp/>any<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>here<sp/>then<sp/>add<sp/>to<sp/>the<sp/>appropriate<sp/>compiler<sp/>section):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__MT__)<sp/>||<sp/>defined(_MT)<sp/>||<sp/>defined(_REENTRANT)<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(_PTHREADS)<sp/>||<sp/>defined(__APPLE__)<sp/>||<sp/>defined(__DragonFly__))<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_THREADS)</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_THREADS</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turn<sp/>threading<sp/>support<sp/>off<sp/>if<sp/>BOOST_DISABLE_THREADS<sp/>is<sp/>defined:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_DISABLE_THREADS)<sp/>&amp;&amp;<sp/>defined(BOOST_HAS_THREADS)</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_THREADS</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turn<sp/>threading<sp/>support<sp/>off<sp/>if<sp/>we<sp/>don&apos;t<sp/>recognise<sp/>the<sp/>threading<sp/>API:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_THREADS)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_PTHREADS)\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_WINTHREADS)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_BETHREADS)\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_MPTASKS)</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_THREADS</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turn<sp/>threading<sp/>detail<sp/>macros<sp/>off<sp/>if<sp/>we<sp/>don&apos;t<sp/>(want<sp/>to)<sp/>use<sp/>threading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_HAS_THREADS</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_PTHREADS</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_PTHREAD_YIELD</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_PTHREAD_DELAY_NP</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_WINTHREADS</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_BETHREADS</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_MPTASKS</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>compiler<sp/>claims<sp/>to<sp/>be<sp/>C99<sp/>conformant,<sp/>then<sp/>it<sp/>had<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>a<sp/>&lt;stdint.h&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__STDC_VERSION__)<sp/>&amp;&amp;<sp/>(__STDC_VERSION__<sp/>&gt;=<sp/>199901)</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_STDINT_H</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifndef<sp/>BOOST_HAS_LOG1P</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_LOG1P</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifndef<sp/>BOOST_HAS_EXPM1</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_EXPM1</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>BOOST_NO_SLIST<sp/>and<sp/>BOOST_NO_HASH<sp/>if<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>for<sp/>backwards<sp/>compatibility<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(BOOST_HAS_SLIST)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_SLIST)</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_SLIST</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(BOOST_HAS_HASH)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_HASH)</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_NO_HASH</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_SLIST_HEADER<sp/>if<sp/>not<sp/>set<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_SLIST)<sp/>&amp;&amp;<sp/>!defined(BOOST_SLIST_HEADER)</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_SLIST_HEADER<sp/>&lt;slist&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_HASH_SET_HEADER<sp/>if<sp/>not<sp/>set<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_HASH)<sp/>&amp;&amp;<sp/>!defined(BOOST_HASH_SET_HEADER)</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HASH_SET_HEADER<sp/>&lt;hash_set&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_HASH_MAP_HEADER<sp/>if<sp/>not<sp/>set<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_HASH)<sp/>&amp;&amp;<sp/>!defined(BOOST_HASH_MAP_HEADER)</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HASH_MAP_HEADER<sp/>&lt;hash_map&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_NO_INITIALIZER_LISTS<sp/>if<sp/>there<sp/>is<sp/>no<sp/>library<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_0X_HDR_INITIALIZER_LIST)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_INITIALIZER_LISTS)</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_INITIALIZER_LISTS</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_INITIALIZER_LISTS)<sp/>&amp;&amp;<sp/>!defined(BOOST_NO_0X_HDR_INITIALIZER_LIST)</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NO_0X_HDR_INITIALIZER_LIST</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_HAS_RVALUE_REFS<sp/>when<sp/>BOOST_NO_RVALUE_REFERENCES<sp/>is<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_NO_RVALUE_REFERENCES)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_RVALUE_REFS)</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_HAS_RVALUE_REFS</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>BOOST_HAS_VARIADIC_TMPL<sp/>when<sp/>BOOST_NO_VARIADIC_TEMPLATES<sp/>is<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_NO_VARIADIC_TEMPLATES)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_VARIADIC_TMPL)</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_HAS_VARIADIC_TMPL</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BOOST_HAS_ABI_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>macro<sp/>gets<sp/>set<sp/>if<sp/>we<sp/>have<sp/>headers<sp/>that<sp/>fix<sp/>the<sp/>ABI,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>and<sp/>prevent<sp/>ODR<sp/>violations<sp/>when<sp/>linking<sp/>to<sp/>external<sp/>libraries:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_ABI_PREFIX)<sp/>&amp;&amp;<sp/>defined(BOOST_ABI_SUFFIX)<sp/>&amp;&amp;<sp/>!defined(BOOST_HAS_ABI_HEADERS)</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_ABI_HEADERS</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_ABI_HEADERS)<sp/>&amp;&amp;<sp/>defined(BOOST_DISABLE_ABI_HEADERS)</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>BOOST_HAS_ABI_HEADERS</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BOOST_NO_STDC_NAMESPACE<sp/>workaround<sp/><sp/>--------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Because<sp/>std::size_t<sp/>usage<sp/>is<sp/>so<sp/>common,<sp/>even<sp/>in<sp/>boost<sp/>headers<sp/>which<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>otherwise<sp/>use<sp/>the<sp/>C<sp/>library,<sp/>the<sp/>&lt;cstddef&gt;<sp/>workaround<sp/>is<sp/>included<sp/>here<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>that<sp/>ugly<sp/>workaround<sp/>code<sp/>need<sp/>not<sp/>appear<sp/>in<sp/>many<sp/>other<sp/>boost<sp/>headers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>NOTE<sp/>WELL:<sp/>This<sp/>is<sp/>a<sp/>workaround<sp/>for<sp/>non-conforming<sp/>compilers;<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>must<sp/>still<sp/>be<sp/>#included<sp/>in<sp/>the<sp/>usual<sp/>places<sp/>so<sp/>that<sp/>&lt;cstddef&gt;<sp/>inclusion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>works<sp/>as<sp/>expected<sp/>with<sp/>standard<sp/>conforming<sp/>compilers.<sp/><sp/>The<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>double<sp/>inclusion<sp/>of<sp/>&lt;cstddef&gt;<sp/>is<sp/>harmless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(BOOST_NO_STDC_NAMESPACE)<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{<sp/>using<sp/>::ptrdiff_t;<sp/>using<sp/>::size_t;<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Workaround<sp/>for<sp/>the<sp/>unfortunate<sp/>min/max<sp/>macros<sp/>defined<sp/>by<sp/>some<sp/>platform<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_PREVENT_MACRO_SUBSTITUTION</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_USING_STD_MIN</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_USING_STD_MIN()<sp/>using<sp/>std::min</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_USING_STD_MAX</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_USING_STD_MAX()<sp/>using<sp/>std::max</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BOOST_NO_STD_MIN_MAX<sp/>workaround<sp/><sp/>-----------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(BOOST_NO_STD_MIN_MAX)<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Tp&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/><ref refid="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" kindref="member">min</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/>__a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/>__b)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__b<sp/>&lt;<sp/>__a<sp/>?<sp/>__b<sp/>:<sp/>__a;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Tp&gt;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/><ref refid="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" kindref="member">max</ref><sp/>BOOST_PREVENT_MACRO_SUBSTITUTION<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/>__a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Tp&amp;<sp/>__b)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>__a<sp/>&lt;<sp/>__b<sp/>?<sp/>__b<sp/>:<sp/>__a;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_STATIC_CONSTANT<sp/>workaround<sp/>---------------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>compilers<sp/>which<sp/>don&apos;t<sp/>allow<sp/>in-class<sp/>initialization<sp/>of<sp/>static<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constant<sp/>members,<sp/>we<sp/>must<sp/>use<sp/>enums<sp/>as<sp/>a<sp/>workaround<sp/>if<sp/>we<sp/>want<sp/>the<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>available<sp/>at<sp/>compile-time.<sp/>This<sp/>macro<sp/>gives<sp/>us<sp/>a<sp/>convenient<sp/>way<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declare<sp/>such<sp/>constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>BOOST_NO_INCLASS_MEMBER_INITIALIZATION</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_STATIC_CONSTANT(type,<sp/>assignment)<sp/>enum<sp/>{<sp/>assignment<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_STATIC_CONSTANT(type,<sp/>assignment)<sp/>static<sp/>const<sp/>type<sp/>assignment</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_USE_FACET<sp/>/<sp/>HAS_FACET<sp/>workaround<sp/>----------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>standard<sp/>library<sp/>does<sp/>not<sp/>have<sp/>a<sp/>conforming<sp/>std::use_facet<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>various<sp/>workarounds<sp/>available,<sp/>but<sp/>they<sp/>differ<sp/>from<sp/>library<sp/>to<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>same<sp/>problem<sp/>occurs<sp/>with<sp/>has_facet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>macros<sp/>provide<sp/>a<sp/>consistent<sp/>way<sp/>to<sp/>access<sp/>a<sp/>locale&apos;s<sp/>facets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::use_facet&lt;Type&gt;(loc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_USE_FACET(Type,<sp/>loc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Note<sp/>do<sp/>not<sp/>add<sp/>a<sp/>std::<sp/>prefix<sp/>to<sp/>the<sp/>front<sp/>of<sp/>BOOST_USE_FACET!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Use<sp/>for<sp/>BOOST_HAS_FACET<sp/>is<sp/>analogous.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_STD_USE_FACET)</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>BOOST_HAS_TWO_ARG_USE_FACET</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_USE_FACET(Type,<sp/>loc)<sp/>std::use_facet(loc,<sp/>static_cast&lt;Type*&gt;(0))</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_FACET(Type,<sp/>loc)<sp/>std::has_facet(loc,<sp/>static_cast&lt;Type*&gt;(0))</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(BOOST_HAS_MACRO_USE_FACET)</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_USE_FACET(Type,<sp/>loc)<sp/>std::_USE(loc,<sp/>Type)</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_FACET(Type,<sp/>loc)<sp/>std::_HAS(loc,<sp/>Type)</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(BOOST_HAS_STLP_USE_FACET)</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_USE_FACET(Type,<sp/>loc)<sp/>(*std::_Use_facet&lt;Type<sp/>&gt;(loc))</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_HAS_FACET(Type,<sp/>loc)<sp/>std::has_facet&lt;<sp/>Type<sp/>&gt;(loc)</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_USE_FACET(Type,<sp/>loc)<sp/>std::use_facet&lt;<sp/>Type<sp/>&gt;(loc)</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_HAS_FACET(Type,<sp/>loc)<sp/>std::has_facet&lt;<sp/>Type<sp/>&gt;(loc)</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_NESTED_TEMPLATE<sp/>workaround<sp/>------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>templates<sp/>are<sp/>supported<sp/>by<sp/>some<sp/>compilers<sp/>even<sp/>though<sp/>they<sp/>can&apos;t<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>A::template<sp/>member&lt;U&gt;<sp/>syntax,<sp/>as<sp/>a<sp/>workaround<sp/>replace:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>typename<sp/>A::template<sp/>rebind&lt;U&gt;<sp/>binder;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>typename<sp/>A::BOOST_NESTED_TEMPLATE<sp/>rebind&lt;U&gt;<sp/>binder;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NO_MEMBER_TEMPLATE_KEYWORD</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NESTED_TEMPLATE<sp/>template</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_NESTED_TEMPLATE</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_UNREACHABLE_RETURN(x)<sp/>workaround<sp/>-------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normally<sp/>evaluates<sp/>to<sp/>nothing,<sp/>unless<sp/>BOOST_NO_UNREACHABLE_RETURN_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>defined,<sp/>in<sp/>which<sp/>case<sp/>it<sp/>evaluates<sp/>to<sp/>return<sp/>x;<sp/>Use<sp/>when<sp/>you<sp/>have<sp/>a<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>that<sp/>can<sp/>never<sp/>be<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_NO_UNREACHABLE_RETURN_DETECTION</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_UNREACHABLE_RETURN(x)<sp/>return<sp/>x;</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_UNREACHABLE_RETURN(x)</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_DEDUCED_TYPENAME<sp/>workaround<sp/>------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>don&apos;t<sp/>support<sp/>the<sp/>use<sp/>of<sp/>`typename&apos;<sp/>for<sp/>dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types<sp/>in<sp/>deduced<sp/>contexts,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>void<sp/>f(T,<sp/>typename<sp/>T::type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^^^^^^^^</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replace<sp/>these<sp/>declarations<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>void<sp/>f(T,<sp/>BOOST_DEDUCED_TYPENAME<sp/>T::type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NO_DEDUCED_TYPENAME</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_DEDUCED_TYPENAME<sp/>typename</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_DEDUCED_TYPENAME</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NO_TYPENAME_WITH_CTOR</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_CTOR_TYPENAME<sp/>typename</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_CTOR_TYPENAME</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>long<sp/>long<sp/>workaround<sp/>------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>gcc<sp/>(and<sp/>maybe<sp/>other<sp/>compilers?)<sp/>long<sp/>long<sp/>is<sp/>alway<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>use<sp/>may<sp/>generate<sp/>either<sp/>warnings<sp/>(with<sp/>-ansi),<sp/>or<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(with<sp/>-pedantic<sp/>-ansi)<sp/>unless<sp/>it&apos;s<sp/>use<sp/>is<sp/>prefixed<sp/>by<sp/>__extension__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_HAS_LONG_LONG)<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>__GNUC__</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>__extension__<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long_long_type;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>__extension__<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ulong_long_type;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long_long_type;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ulong_long_type;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BOOST_[APPEND_]EXPLICIT_TEMPLATE_[NON_]TYPE<sp/>macros<sp/>--------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>have<sp/>problems<sp/>with<sp/>function<sp/>templates<sp/>whose<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters<sp/>don&apos;t<sp/>appear<sp/>in<sp/>the<sp/>function<sp/>parameter<sp/>list<sp/>(basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>just<sp/>link<sp/>one<sp/>instantiation<sp/>of<sp/>the<sp/>template<sp/>in<sp/>the<sp/>final</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executable).<sp/>These<sp/>macros<sp/>provide<sp/>a<sp/>uniform<sp/>way<sp/>to<sp/>cope<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>problem<sp/>with<sp/>no<sp/>effects<sp/>on<sp/>the<sp/>calling<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>template<sp/>&lt;int<sp/>n&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>void<sp/>f()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&apos;<sp/>&apos;;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>void<sp/>g()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>typeid(T).name()<sp/>&lt;&lt;<sp/>&apos;<sp/>&apos;;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>int<sp/>main()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>f&lt;1&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>f&lt;2&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>g&lt;int&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>g&lt;double&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>VC++<sp/>6.0<sp/>the<sp/>output<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2<sp/>2<sp/>double<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>fix<sp/>it,<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>template<sp/>&lt;int<sp/>n&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>f(BOOST_EXPLICIT_TEMPLATE_NON_TYPE(int,<sp/>n))<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>g(BOOST_EXPLICIT_TEMPLATE_TYPE(T))<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_EXPLICIT_FUNCTION_TEMPLATE_ARGUMENTS)<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;gecode/third-party/boost/type.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;gecode/third-party/boost/non_type.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE(t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::type&lt;t&gt;*<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC(t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::type&lt;t&gt;*</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE(t,<sp/>v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::non_type&lt;t,<sp/>v&gt;*<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,<sp/>v)<sp/><sp/>boost::non_type&lt;t,<sp/>v&gt;*</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE(t)</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(t)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC(t)</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(t,<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE(t,<sp/>v)</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,<sp/>v)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,<sp/>v)</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>workaround<sp/>needed:<sp/>expand<sp/>to<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE(t)</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC(t)</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE(t,<sp/>v)</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,<sp/>v)</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(t)</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(t)</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(t,<sp/>v)</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,<sp/>v)</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined<sp/>BOOST_NO_EXPLICIT_FUNCTION_TEMPLATE_ARGUMENTS</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>BOOST_NO_STD_TYPEINFO<sp/>is<sp/>defined,<sp/>we<sp/>can<sp/>just<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>global<sp/>definition<sp/>into<sp/>std<sp/>namespace:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_STD_TYPEINFO)<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std{<sp/>using<sp/>::type_info;<sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>macro<sp/>BOOST_STRINGIZE:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>parameter<sp/>X<sp/>to<sp/>a<sp/>string<sp/>after<sp/>macro<sp/>replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>X<sp/>has<sp/>been<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_STRINGIZE(X)<sp/>BOOST_DO_STRINGIZE(X)</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_DO_STRINGIZE(X)<sp/>#X</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>macro<sp/>BOOST_JOIN:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>piece<sp/>of<sp/>macro<sp/>magic<sp/>joins<sp/>the<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments<sp/>together,<sp/>even<sp/>when<sp/>one<sp/>of<sp/>the<sp/>arguments<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>itself<sp/>a<sp/>macro<sp/>(see<sp/>16.3.1<sp/>in<sp/>C++<sp/>standard).<sp/><sp/>The<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>that<sp/>macro<sp/>expansion<sp/>of<sp/>macro<sp/>arguments<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>occur<sp/>in<sp/>BOOST_DO_JOIN2<sp/>but<sp/>does<sp/>in<sp/>BOOST_DO_JOIN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_JOIN(<sp/>X,<sp/>Y<sp/>)<sp/>BOOST_DO_JOIN(<sp/>X,<sp/>Y<sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_DO_JOIN(<sp/>X,<sp/>Y<sp/>)<sp/>BOOST_DO_JOIN2(X,Y)</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_DO_JOIN2(<sp/>X,<sp/>Y<sp/>)<sp/>X##Y</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>default<sp/>values<sp/>for<sp/>compiler/library/platform<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>for<sp/>debugging<sp/>config<sp/>setup<sp/>only:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>BOOST_COMPILER</highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_COMPILER<sp/>&quot;Unknown<sp/>ISO<sp/>C++<sp/>Compiler&quot;</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>BOOST_STDLIB</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_STDLIB<sp/>&quot;Unknown<sp/>ISO<sp/>standard<sp/>library&quot;</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>BOOST_PLATFORM</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>if<sp/>defined(unix)<sp/>||<sp/>defined(__unix)<sp/>||<sp/>defined(_XOPEN_SOURCE)<sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(_POSIX_SOURCE)</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_PLATFORM<sp/>&quot;Generic<sp/>Unix&quot;</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_PLATFORM<sp/>&quot;Unknown&quot;</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>default<sp/>values<sp/>GPU<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>BOOST_GPU_ENABLED</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BOOST_GPU_ENABLED<sp/></highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constexpr<sp/>workarounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_NO_CONSTEXPR)</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_CONSTEXPR</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_CONSTEXPR_OR_CONST<sp/>const</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_CONSTEXPR<sp/>constexpr</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_CONSTEXPR_OR_CONST<sp/>constexpr</highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_STATIC_CONSTEXPR<sp/><sp/>static<sp/>BOOST_CONSTEXPR_OR_CONST</highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/config/suffix.hpp"/>
  </compounddef>
</doxygen>
