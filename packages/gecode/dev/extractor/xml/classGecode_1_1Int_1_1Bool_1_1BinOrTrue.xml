<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue" kind="class" prot="public">
    <compoundname>Gecode::Int::Bool::BinOrTrue</compoundname>
    <basecompoundref refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary" prot="public" virt="non-virtual">Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</basecompoundref>
    <includes refid="bool_8hh" local="no">bool.hh</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>BVA</declname>
        <defname>BVA</defname>
      </param>
      <param>
        <type>class</type>
        <declname>BVB</declname>
        <defname>BVB</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1a166154caad70653ecf9b28241c8c9d5a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::BinOrTrue</definition>
        <argsstring>(Home home, BVA b0, BVB b1)</argsstring>
        <name>BinOrTrue</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
<para>Constructor for posting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="242" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="107" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1a5880ff4e7ca5a950e4b3f541dcc3d1a6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::BinOrTrue</definition>
        <argsstring>(Space &amp;home, bool share, BinOrTrue &amp;p)</argsstring>
        <name>BinOrTrue</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue" kindref="compound">BinOrTrue</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor for cloning <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="244" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="112" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1aab5098eee37e2a41a713dd99b559d1b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::BinOrTrue</definition>
        <argsstring>(Space &amp;home, bool share, Propagator &amp;p, BVA b0, BVB b1)</argsstring>
        <name>BinOrTrue</name>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
<para>Constructor for rewriting <emphasis>p</emphasis> during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="247" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1aff2c464331468a910f0747bae1adb5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGecode_1_1Actor" kindref="compound">Actor</ref> *</type>
        <definition>Actor * Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::copy</definition>
        <argsstring>(Space &amp;home, bool share)</argsstring>
        <name>copy</name>
        <reimplements refid="classGecode_1_1Actor_1a67b240e2810720846c3632c94cc9c99d">copy</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Copy propagator during cloning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="250" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1abdb96d3ca9b1d5b922aff05145291033" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::propagate</definition>
        <argsstring>(Space &amp;home, const ModEventDelta &amp;med)</argsstring>
        <name>propagate</name>
        <reimplements refid="classGecode_1_1Propagator_1ad2dc98c1345222892592339948c6cde1">propagate</reimplements>
        <param>
          <type><ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a129e41c1d037528010d7b6706495a560" kindref="member">ModEventDelta</ref> &amp;</type>
          <declname>med</declname>
        </param>
        <briefdescription>
<para>Perform propagation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="252" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="152" bodyend="176"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1ad443f6989e73dc96176d8f33f40eac5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" kindref="member">ExecStatus</ref></type>
        <definition>ExecStatus Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;::post</definition>
        <argsstring>(Home home, BVA b0, BVB b1)</argsstring>
        <name>post</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>BVA</type>
          <declname>b0</declname>
        </param>
        <param>
          <type>BVB</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
<para>Post propagator <formula id="102">$ b_0 \lor b_1 = 1 $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/bool.hh" line="254" column="1" bodyfile="/usr/include/gecode/int/bool/or.hpp" bodystart="129" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Binary Boolean disjunction propagator (true) </para>    </briefdescription>
    <detaileddescription>
<para>Requires<programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;gecode/int/bool.hh&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1091">
        <label>Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary"/>
        <childnode refid="1092" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1090">
        <label>Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue"/>
        <childnode refid="1091" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1092">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="1093" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1093">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="1094" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1094">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1100">
        <label>BVA</label>
      </node>
      <node id="1101">
        <label>BVB</label>
      </node>
      <node id="1096">
        <label>Gecode::Int::Bool::BoolBinary&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary"/>
        <childnode refid="1097" relation="public-inheritance">
        </childnode>
        <childnode refid="1100" relation="usage">
          <edgelabel>x0</edgelabel>
        </childnode>
        <childnode refid="1101" relation="usage">
          <edgelabel>x1</edgelabel>
        </childnode>
      </node>
      <node id="1095">
        <label>Gecode::Int::Bool::BinOrTrue&lt; BVA, BVB &gt;</label>
        <link refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue"/>
        <childnode refid="1096" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1097">
        <label>Gecode::Propagator</label>
        <link refid="classGecode_1_1Propagator"/>
        <childnode refid="1098" relation="public-inheritance">
        </childnode>
        <childnode refid="1099" relation="usage">
          <edgelabel>advisors</edgelabel>
        </childnode>
      </node>
      <node id="1098">
        <label>Gecode::Actor</label>
        <link refid="classGecode_1_1Actor"/>
        <childnode refid="1099" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1099">
        <label>Gecode::ActorLink</label>
        <link refid="classGecode_1_1ActorLink"/>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/int/bool.hh" line="237" column="1" bodyfile="/usr/include/gecode/int/bool.hh" bodystart="237" bodyend="255"/>
    <listofallmembers>
      <member refid="classGecode_1_1Propagator_1a55629f061a0fd8ecb2a4c41aa1568e28" prot="public" virt="virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>advise</name></member>
      <member refid="classGecode_1_1Propagator_1afee33d8aed2bc9debee126f17b5015cf" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>advisors</name></member>
      <member refid="classGecode_1_1Propagator_1a593de773d2204f47ea365a99df2f75d0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>afc</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1a166154caad70653ecf9b28241c8c9d5a" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BinOrTrue</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1a5880ff4e7ca5a950e4b3f541dcc3d1a6" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BinOrTrue</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1aab5098eee37e2a41a713dd99b559d1b4" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BinOrTrue</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a49fe87b59f29b5e7e227ba98e4af83fc" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a98ed1862c29e8474d55d518a6d4af297" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a98afca96b38d3dcd270cd4ebda3e3eae" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>BoolBinary</name></member>
      <member refid="classGecode_1_1ActorLink_1a8427f41a27a72b52ceb52d0fdad21063" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>cast</name></member>
      <member refid="classGecode_1_1ActorLink_1a464526456db41981f82a1193a8b4e569" prot="public" virt="non-virtual" ambiguityscope="Gecode::ActorLink::"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>cast</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1aff2c464331468a910f0747bae1adb5a0" prot="public" virt="virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>copy</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a47ef9a9ee4b5744c9164e58db3628665" prot="public" virt="virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>cost</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a39f81fbdfe8969b5e9c0a3b43de71b1d" prot="public" virt="virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>dispose</name></member>
      <member refid="classGecode_1_1Propagator_1a3b286c7aec9843b60a531b495015b5f7" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>fwd</name></member>
      <member refid="classGecode_1_1Propagator_1ae9dfa55e47e4ff8e0c8e4c2a6efdbfc0" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>med</name></member>
      <member refid="classGecode_1_1Propagator_1a4905db55af49af8f38558bdbcf5fd4a2" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>modeventdelta</name></member>
      <member refid="classGecode_1_1Actor_1a388f671145dcf906f81d22bde2dc0f3d" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>operator delete</name></member>
      <member refid="classGecode_1_1Actor_1ac28b9601b530076a1bda75834487f898" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>operator new</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1ad443f6989e73dc96176d8f33f40eac5b" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>post</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BinOrTrue_1abdb96d3ca9b1d5b922aff05145291033" prot="public" virt="virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>propagate</name></member>
      <member refid="classGecode_1_1Propagator_1a891f3e84cde2e8e60f8ad9340ad74b05" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1afeaeed8dae67de4313858bd82fdae5d0" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>Propagator</name></member>
      <member refid="classGecode_1_1Propagator_1a1781b5b0df38c39dddca4b44c3a00530" prot="public" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>size</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1ac25e6a75673c3e67093b553f10388672" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>x0</name></member>
      <member refid="classGecode_1_1Int_1_1Bool_1_1BoolBinary_1a827d03e8a8bf0f2ff4cdd423d0f9ec96" prot="protected" virt="non-virtual"><scope>Gecode::Int::Bool::BinOrTrue</scope><name>x1</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
