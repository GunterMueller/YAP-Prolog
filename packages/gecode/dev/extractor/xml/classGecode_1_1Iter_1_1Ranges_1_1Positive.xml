<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classGecode_1_1Iter_1_1Ranges_1_1Positive" kind="class" prot="public">
    <compoundname>Gecode::Iter::Ranges::Positive</compoundname>
    <includes refid="ranges-positive_8hpp" local="no">ranges-positive.hpp</includes>
    <templateparamlist>
      <param>
        <type>class I</type>
      </param>
      <param>
        <type>bool</type>
        <declname>strict</declname>
        <defname>strict</defname>
        <defval>false</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors and initialization</header>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a22874b6bb5cc705c46a4d9cdc04f28a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::Positive</definition>
        <argsstring>(void)</argsstring>
        <name>Positive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="58" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a8dd1654213bfca2d4727e09ffefe699c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forceinline Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::Positive</definition>
        <argsstring>(I &amp;i)</argsstring>
        <name>Positive</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Initialize with ranges from <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="60" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a0310104607b220e668a30b93dacf0ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::init</definition>
        <argsstring>(I &amp;i)</argsstring>
        <name>init</name>
        <param>
          <type>I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Initialize with ranges from <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="62" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="91" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iteration control</header>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1aff959f315dd1980a37245b5c6d6e5346" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::operator()</definition>
        <argsstring>(void) const </argsstring>
        <name>operator()</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether iterator is still at a range or done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="68" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a1f989d3c83c6a797f6a22e96f5994e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>forceinline void Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::operator++</definition>
        <argsstring>(void)</argsstring>
        <name>operator++</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Move iterator to next range (if possible) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="70" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Range access</header>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a29404563775f805065feb1947d78d51a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::min</definition>
        <argsstring>(void) const </argsstring>
        <name>min</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return smallest value of range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="76" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1ae74a5c492656f9087cdb601fe5684604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>forceinline int Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::max</definition>
        <argsstring>(void) const </argsstring>
        <name>max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return largest value of range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="78" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a70cb8fb767d749e21b40c217ab127721" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>forceinline unsigned int Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::width</definition>
        <argsstring>(void) const </argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return width of range (distance between minimum and maximum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="80" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a8333b80e30a94dbd9f212ff5e471c115" prot="protected" static="no" mutable="no">
        <type>I</type>
        <definition>I Gecode::Iter::Ranges::Positive&lt; I, strict &gt;::i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <briefdescription>
<para>Input iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="53" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Range iterator for positive part of a range iterator. </para>    </briefdescription>
    <detaileddescription>
<para>If <emphasis>strict</emphasis> is true, zero is excluded. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="5151">
        <label>I</label>
      </node>
      <node id="5150">
        <label>Gecode::Iter::Ranges::Positive&lt; I, strict &gt;</label>
        <link refid="classGecode_1_1Iter_1_1Ranges_1_1Positive"/>
        <childnode refid="5151" relation="usage">
          <edgelabel>i</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/include/gecode/iter/ranges-positive.hpp" line="50" column="1" bodyfile="/usr/include/gecode/iter/ranges-positive.hpp" bodystart="50" bodyend="82"/>
    <listofallmembers>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a8333b80e30a94dbd9f212ff5e471c115" prot="protected" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>i</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a0310104607b220e668a30b93dacf0ca0" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>init</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1ae74a5c492656f9087cdb601fe5684604" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>max</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a29404563775f805065feb1947d78d51a" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>min</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1aff959f315dd1980a37245b5c6d6e5346" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>operator()</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a1f989d3c83c6a797f6a22e96f5994e5d" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>operator++</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a22874b6bb5cc705c46a4d9cdc04f28a9" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>Positive</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a8dd1654213bfca2d4727e09ffefe699c" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>Positive</name></member>
      <member refid="classGecode_1_1Iter_1_1Ranges_1_1Positive_1a70cb8fb767d749e21b40c217ab127721" prot="public" virt="non-virtual"><scope>Gecode::Iter::Ranges::Positive</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
