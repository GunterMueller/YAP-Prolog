<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="rounded__transc_8hpp" kind="file">
    <compoundname>rounded_transc.hpp</compoundname>
    <includes refid="third-party_2boost_2numeric_2interval_2rounding_8hpp" local="no">gecode/third-party/boost/numeric/interval/rounding.hpp</includes>
    <includes refid="bugs_8hpp" local="no">gecode/third-party/boost/numeric/interval/detail/bugs.hpp</includes>
    <includes refid="cmath_8hpp" local="no">gecode/third-party/boost/config/no_tr1/cmath.hpp</includes>
    <includedby refid="interval_8hpp" local="no">/usr/include/gecode/third-party/boost/numeric/interval.hpp</includedby>
    <incdepgraph>
      <node id="34783">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp</label>
        <link refid="rounded_transc.hpp"/>
        <childnode refid="34784" relation="include">
        </childnode>
        <childnode refid="34785" relation="include">
        </childnode>
        <childnode refid="34791" relation="include">
        </childnode>
      </node>
      <node id="34789">
        <label>gecode/third-party/boost/config/suffix.hpp</label>
        <link refid="suffix_8hpp_source"/>
        <childnode refid="34790" relation="include">
        </childnode>
      </node>
      <node id="34791">
        <label>gecode/third-party/boost/config/no_tr1/cmath.hpp</label>
        <link refid="cmath_8hpp_source"/>
        <childnode refid="34792" relation="include">
        </childnode>
      </node>
      <node id="34784">
        <label>gecode/third-party/boost/numeric/interval/rounding.hpp</label>
        <link refid="third-party_2boost_2numeric_2interval_2rounding_8hpp_source"/>
      </node>
      <node id="34792">
        <label>cmath</label>
      </node>
      <node id="34785">
        <label>gecode/third-party/boost/numeric/interval/detail/bugs.hpp</label>
        <link refid="bugs_8hpp_source"/>
        <childnode refid="34786" relation="include">
        </childnode>
      </node>
      <node id="34790">
        <label>limits.h</label>
      </node>
      <node id="34788">
        <label>gecode/third-party/boost/config/select_platform_config.hpp</label>
        <link refid="select__platform__config_8hpp_source"/>
      </node>
      <node id="34787">
        <label>gecode/third-party/boost/config/select_compiler_config.hpp</label>
        <link refid="select__compiler__config_8hpp_source"/>
      </node>
      <node id="34786">
        <label>gecode/third-party/boost/config.hpp</label>
        <link refid="third-party_2boost_2config_8hpp_source"/>
        <childnode refid="34787" relation="include">
        </childnode>
        <childnode refid="34788" relation="include">
        </childnode>
        <childnode refid="34789" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34793">
        <label>/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp</label>
        <link refid="rounded_transc.hpp"/>
        <childnode refid="34794" relation="include">
        </childnode>
      </node>
      <node id="34795">
        <label>/usr/include/gecode/float.hh</label>
        <link refid="float_8hh_source"/>
        <childnode refid="34796" relation="include">
        </childnode>
        <childnode refid="34797" relation="include">
        </childnode>
        <childnode refid="34798" relation="include">
        </childnode>
        <childnode refid="34799" relation="include">
        </childnode>
      </node>
      <node id="34794">
        <label>/usr/include/gecode/third-party/boost/numeric/interval.hpp</label>
        <link refid="interval_8hpp_source"/>
        <childnode refid="34795" relation="include">
        </childnode>
      </node>
      <node id="34799">
        <label>/usr/include/gecode/float/rel.hh</label>
        <link refid="float_2rel_8hh_source"/>
        <childnode refid="34796" relation="include">
        </childnode>
      </node>
      <node id="34796">
        <label>/usr/include/gecode/float/arithmetic.hh</label>
        <link refid="float_2arithmetic_8hh_source"/>
      </node>
      <node id="34798">
        <label>/usr/include/gecode/float/linear.hh</label>
        <link refid="float_2linear_8hh_source"/>
      </node>
      <node id="34797">
        <label>/usr/include/gecode/float/branch.hh</label>
        <link refid="float_2branch_8hh_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__exact" prot="public">boost::numeric::interval_lib::rounded_transc_exact</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__std" prot="public">boost::numeric::interval_lib::rounded_transc_std</innerclass>
    <innerclass refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__opp" prot="public">boost::numeric::interval_lib::rounded_transc_opp</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1numeric">boost::numeric</innernamespace>
    <innernamespace refid="namespaceboost_1_1numeric_1_1interval__lib">boost::numeric::interval_lib</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) { BOOST_NUMERIC_INTERVAL_using_math(f); return f(x); } \
    T f##_up  (const T&amp; x) { BOOST_NUMERIC_INTERVAL_using_math(f); return f(x); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="24" column="10" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) { BOOST_NUMERIC_INTERVAL_using_ahyp(f); return f(x); } \
    T f##_up  (const T&amp; x) { BOOST_NUMERIC_INTERVAL_using_ahyp(f); return f(x); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="39" column="12" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      this-&gt;downward(); return this-&gt;force_rounding(f(x)); } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      this-&gt;upward(); return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="51" column="10" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      this-&gt;downward(); return this-&gt;force_rounding(f(x)); } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      this-&gt;upward(); return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="70" column="12" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      this-&gt;downward(); T y = this-&gt;force_rounding(f(x)); \
      this-&gt;upward(); return y; } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="86" column="10" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      return -this-&gt;force_rounding(-f(x)); } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_math(f); \
      return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="100" column="12" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      this-&gt;downward(); T y = this-&gt;force_rounding(f(x)); \
      this-&gt;upward(); return y; } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="114" column="12" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rounded__transc_8hpp_1a08d86d6f8dc16299cd258f295aab9808" prot="public" static="no">
        <name>BOOST_NUMERIC_INTERVAL_new_func</name>
        <param><defname>f</defname></param>
        <initializer>T f##_down(const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      return -this-&gt;force_rounding(-f(x)); } \
    T f##_up  (const T&amp; x) \
    { BOOST_NUMERIC_INTERVAL_using_ahyp(f); \
      return this-&gt;force_rounding(f(x)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" line="125" column="12" bodyfile="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Boost<sp/>interval/rounded_transc.hpp<sp/>template<sp/>implementation<sp/>file</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2002-2003<sp/>Hervé<sp/>Brönnimann,<sp/>Guillaume<sp/>Melquiond,<sp/>Sylvain<sp/>Pion</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_NUMERIC_INTERVAL_ROUNDED_TRANSC_HPP</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_NUMERIC_INTERVAL_ROUNDED_TRANSC_HPP</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/rounding.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/numeric/interval/detail/bugs.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gecode/third-party/boost/config/no_tr1/cmath.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">numeric<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">interval_lib<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rounding&gt;</highlight></codeline>
<codeline lineno="22" refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__exact" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__exact" kindref="compound">rounded_transc_exact</ref>:<sp/>Rounding</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>return<sp/>f(x);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>return<sp/>f(x);<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(exp)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(log)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sin)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cos)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tan)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asin)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acos)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atan)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sinh)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cosh)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tanh)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>return<sp/>f(x);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>return<sp/>f(x);<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asinh)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acosh)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atanh)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rounding&gt;</highlight></codeline>
<codeline lineno="49" refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__std" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__std" kindref="compound">rounded_transc_std</ref>:<sp/>Rounding</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;downward();<sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;upward();<sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(exp)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(log)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sin)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cos)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tan)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asin)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acos)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atan)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sinh)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cosh)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tanh)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;downward();<sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;upward();<sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asinh)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acosh)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atanh)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rounding&gt;</highlight></codeline>
<codeline lineno="84" refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__opp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1numeric_1_1interval__lib_1_1rounded__transc__opp" kindref="compound">rounded_transc_opp</ref>:<sp/>Rounding</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;downward();<sp/>T<sp/>y<sp/>=<sp/>this-&gt;force_rounding(f(x));<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;upward();<sp/>return<sp/>y;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(exp)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(log)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cos)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acos)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(cosh)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-this-&gt;force_rounding(-f(x));<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_math(f);<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sin)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tan)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asin)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atan)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(sinh)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(tanh)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;downward();<sp/>T<sp/>y<sp/>=<sp/>this-&gt;force_rounding(f(x));<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;upward();<sp/>return<sp/>y;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(asinh)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(atanh)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>BOOST_NUMERIC_INTERVAL_new_func(f)<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_down(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-this-&gt;force_rounding(-f(x));<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>T<sp/>f##_up<sp/><sp/>(const<sp/>T&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>BOOST_NUMERIC_INTERVAL_using_ahyp(f);<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this-&gt;force_rounding(f(x));<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>BOOST_NUMERIC_INTERVAL_new_func(acosh)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>BOOST_NUMERIC_INTERVAL_new_func</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>interval_lib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>numeric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_NUMERIC_INTERVAL_ROUNDED_TRANSC_HPP</highlight></codeline>
    </programlisting>
    <location file="/usr/include/gecode/third-party/boost/numeric/interval/rounded_transc.hpp"/>
  </compounddef>
</doxygen>
