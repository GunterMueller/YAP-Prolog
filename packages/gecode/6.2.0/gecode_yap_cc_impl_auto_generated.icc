// -*- c++ -*-
//=============================================================================
// Copyright (C) 2011 by Denys Duchier
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//=============================================================================

static YAP_Term gecode_RM_NONE;
static YAP_Term gecode_RM_CONSTANT;
static YAP_Term gecode_RM_LINEAR;
static YAP_Term gecode_RM_LUBY;
static YAP_Term gecode_RM_GEOMETRIC;

static RestartMode gecode_RestartMode_from_term(YAP_Term X)
{
  if (X==gecode_RM_NONE) return RM_NONE;
  if (X==gecode_RM_CONSTANT) return RM_CONSTANT;
  if (X==gecode_RM_LINEAR) return RM_LINEAR;
  if (X==gecode_RM_LUBY) return RM_LUBY;
  if (X==gecode_RM_GEOMETRIC) return RM_GEOMETRIC;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_FRT_EQ;
static YAP_Term gecode_FRT_NQ;
static YAP_Term gecode_FRT_LQ;
static YAP_Term gecode_FRT_LE;
static YAP_Term gecode_FRT_GQ;
static YAP_Term gecode_FRT_GR;

static FloatRelType gecode_FloatRelType_from_term(YAP_Term X)
{
  if (X==gecode_FRT_EQ) return FRT_EQ;
  if (X==gecode_FRT_NQ) return FRT_NQ;
  if (X==gecode_FRT_LQ) return FRT_LQ;
  if (X==gecode_FRT_LE) return FRT_LE;
  if (X==gecode_FRT_GQ) return FRT_GQ;
  if (X==gecode_FRT_GR) return FRT_GR;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_RM_EQV;
static YAP_Term gecode_RM_IMP;
static YAP_Term gecode_RM_PMI;

static ReifyMode gecode_ReifyMode_from_term(YAP_Term X)
{
  if (X==gecode_RM_EQV) return RM_EQV;
  if (X==gecode_RM_IMP) return RM_IMP;
  if (X==gecode_RM_PMI) return RM_PMI;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_IRT_EQ;
static YAP_Term gecode_IRT_NQ;
static YAP_Term gecode_IRT_LQ;
static YAP_Term gecode_IRT_LE;
static YAP_Term gecode_IRT_GQ;
static YAP_Term gecode_IRT_GR;

static IntRelType gecode_IntRelType_from_term(YAP_Term X)
{
  if (X==gecode_IRT_EQ) return IRT_EQ;
  if (X==gecode_IRT_NQ) return IRT_NQ;
  if (X==gecode_IRT_LQ) return IRT_LQ;
  if (X==gecode_IRT_LE) return IRT_LE;
  if (X==gecode_IRT_GQ) return IRT_GQ;
  if (X==gecode_IRT_GR) return IRT_GR;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_BOT_AND;
static YAP_Term gecode_BOT_OR;
static YAP_Term gecode_BOT_IMP;
static YAP_Term gecode_BOT_EQV;
static YAP_Term gecode_BOT_XOR;

static BoolOpType gecode_BoolOpType_from_term(YAP_Term X)
{
  if (X==gecode_BOT_AND) return BOT_AND;
  if (X==gecode_BOT_OR) return BOT_OR;
  if (X==gecode_BOT_IMP) return BOT_IMP;
  if (X==gecode_BOT_EQV) return BOT_EQV;
  if (X==gecode_BOT_XOR) return BOT_XOR;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_IPL_DEF;
static YAP_Term gecode_IPL_VAL;
static YAP_Term gecode_IPL_BND;
static YAP_Term gecode_IPL_DOM;
static YAP_Term gecode_IPL_BASIC;
static YAP_Term gecode_IPL_ADVANCED;
static YAP_Term gecode_IPL_BASIC_ADVANCED;
static YAP_Term gecode__IPL_BITS;

static IntPropLevel gecode_IntPropLevel_from_term(YAP_Term X)
{
  if (X==gecode_IPL_DEF) return IPL_DEF;
  if (X==gecode_IPL_VAL) return IPL_VAL;
  if (X==gecode_IPL_BND) return IPL_BND;
  if (X==gecode_IPL_DOM) return IPL_DOM;
  if (X==gecode_IPL_BASIC) return IPL_BASIC;
  if (X==gecode_IPL_ADVANCED) return IPL_ADVANCED;
  if (X==gecode_IPL_BASIC_ADVANCED) return IPL_BASIC_ADVANCED;
  if (X==gecode__IPL_BITS) return _IPL_BITS;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_TT_FIXP;
static YAP_Term gecode_TT_FIXS;
static YAP_Term gecode_TT_FIXE;

static TaskType gecode_TaskType_from_term(YAP_Term X)
{
  if (X==gecode_TT_FIXP) return TT_FIXP;
  if (X==gecode_TT_FIXS) return TT_FIXS;
  if (X==gecode_TT_FIXE) return TT_FIXE;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_TE_INIT;
static YAP_Term gecode_TE_PRUNE;
static YAP_Term gecode_TE_FIX;
static YAP_Term gecode_TE_FAIL;
static YAP_Term gecode_TE_DONE;
static YAP_Term gecode_TE_PROPAGATE;
static YAP_Term gecode_TE_COMMIT;
static YAP_Term gecode_TE_POST;

static TraceEvent gecode_TraceEvent_from_term(YAP_Term X)
{
  if (X==gecode_TE_INIT) return TE_INIT;
  if (X==gecode_TE_PRUNE) return TE_PRUNE;
  if (X==gecode_TE_FIX) return TE_FIX;
  if (X==gecode_TE_FAIL) return TE_FAIL;
  if (X==gecode_TE_DONE) return TE_DONE;
  if (X==gecode_TE_PROPAGATE) return TE_PROPAGATE;
  if (X==gecode_TE_COMMIT) return TE_COMMIT;
  if (X==gecode_TE_POST) return TE_POST;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_SRT_EQ;
static YAP_Term gecode_SRT_NQ;
static YAP_Term gecode_SRT_SUB;
static YAP_Term gecode_SRT_SUP;
static YAP_Term gecode_SRT_DISJ;
static YAP_Term gecode_SRT_CMPL;
static YAP_Term gecode_SRT_LQ;
static YAP_Term gecode_SRT_LE;
static YAP_Term gecode_SRT_GQ;
static YAP_Term gecode_SRT_GR;

static SetRelType gecode_SetRelType_from_term(YAP_Term X)
{
  if (X==gecode_SRT_EQ) return SRT_EQ;
  if (X==gecode_SRT_NQ) return SRT_NQ;
  if (X==gecode_SRT_SUB) return SRT_SUB;
  if (X==gecode_SRT_SUP) return SRT_SUP;
  if (X==gecode_SRT_DISJ) return SRT_DISJ;
  if (X==gecode_SRT_CMPL) return SRT_CMPL;
  if (X==gecode_SRT_LQ) return SRT_LQ;
  if (X==gecode_SRT_LE) return SRT_LE;
  if (X==gecode_SRT_GQ) return SRT_GQ;
  if (X==gecode_SRT_GR) return SRT_GR;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Term gecode_SOT_UNION;
static YAP_Term gecode_SOT_DUNION;
static YAP_Term gecode_SOT_INTER;
static YAP_Term gecode_SOT_MINUS;

static SetOpType gecode_SetOpType_from_term(YAP_Term X)
{
  if (X==gecode_SOT_UNION) return SOT_UNION;
  if (X==gecode_SOT_DUNION) return SOT_DUNION;
  if (X==gecode_SOT_INTER) return SOT_INTER;
  if (X==gecode_SOT_MINUS) return SOT_MINUS;
  cerr << "this should never happen" << endl; exit(1);
}

static YAP_Bool gecode_constraint_assign_1(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_3(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_5(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_7(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_2(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  BoolVarValPrint X4 = gecode_BoolVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_4(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  FloatVarValPrint X4 = gecode_FloatVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_6(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  IntVarValPrint X4 = gecode_IntVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_8(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  SetVarValPrint X4 = gecode_SetVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_9(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolAssign X4 = gecode_BoolAssign_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_12(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatAssign X4 = gecode_FloatAssign_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_15(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntAssign X4 = gecode_IntAssign_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_18(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetAssign X4 = gecode_SetAssign_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_10(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolAssign X4 = gecode_BoolAssign_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_13(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatAssign X4 = gecode_FloatAssign_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_16(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntAssign X4 = gecode_IntAssign_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_19(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetAssign X4 = gecode_SetAssign_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_11(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolAssign X4 = gecode_BoolAssign_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  BoolVarValPrint X6 = gecode_BoolVarValPrint_from_term(YAP_ARG6);
  assign(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_14(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatAssign X4 = gecode_FloatAssign_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  FloatVarValPrint X6 = gecode_FloatVarValPrint_from_term(YAP_ARG6);
  assign(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_17(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntAssign X4 = gecode_IntAssign_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  IntVarValPrint X6 = gecode_IntVarValPrint_from_term(YAP_ARG6);
  assign(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_20(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetAssign X4 = gecode_SetAssign_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  SetVarValPrint X6 = gecode_SetVarValPrint_from_term(YAP_ARG6);
  assign(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_binpacking_21(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  binpacking(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_binpacking_22(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  binpacking(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_23(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolValBranch X3 = gecode_BoolValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_25(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatValBranch X3 = gecode_FloatValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_27(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntValBranch X3 = gecode_IntValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_29(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetValBranch X3 = gecode_SetValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_24(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolValBranch X3 = gecode_BoolValBranch_from_term(YAP_ARG3);
  BoolVarValPrint X4 = gecode_BoolVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_26(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatValBranch X3 = gecode_FloatValBranch_from_term(YAP_ARG3);
  FloatVarValPrint X4 = gecode_FloatVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_28(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntValBranch X3 = gecode_IntValBranch_from_term(YAP_ARG3);
  IntVarValPrint X4 = gecode_IntVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_30(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetValBranch X3 = gecode_SetValBranch_from_term(YAP_ARG3);
  SetVarValPrint X4 = gecode_SetVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_31(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_37(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_40(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_46(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_32(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_34(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_38(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_41(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_43(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_47(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_49(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_33(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  BoolVarValPrint X6 = gecode_BoolVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_35(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_39(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  FloatVarValPrint X6 = gecode_FloatVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_42(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  IntVarValPrint X6 = gecode_IntVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_44(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_48(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  SetVarValPrint X6 = gecode_SetVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_50(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_36(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  BoolVarValPrint X7 = gecode_BoolVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_45(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  IntVarValPrint X7 = gecode_IntVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_51(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  SetVarValPrint X7 = gecode_SetVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_52(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  clause(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_54(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  clause(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_53(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  clause(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_55(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  clause(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_56(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_62(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_57(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_58(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_63(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_64(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_59(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  extensional(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_60(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  extensional(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_65(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  extensional(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_66(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  extensional(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_61(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  extensional(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_67(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  extensional(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_68(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_70(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_71(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_69(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  ite(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_72(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  ite(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_73(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_77(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_85(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_87(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_105(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_109(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_74(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_75(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_78(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_79(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_81(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVal X5 = gecode_FloatVal_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_83(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_86(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_88(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_89(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_93(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_97(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_101(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_106(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_107(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_110(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_111(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_76(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_80(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_82(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVal X5 = gecode_FloatVal_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_84(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_90(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_91(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_94(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_95(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_98(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_99(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_102(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_103(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_108(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_112(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_92(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_96(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_100(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_104(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_113(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  nooverlap(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_114(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  nooverlap(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_115(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  nooverlap(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_116(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  nooverlap(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_117(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  nooverlap(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_118(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_119(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  BoolVarArgs X8 = gecode_BoolVarArgs_from_term(space,YAP_ARG8);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_120(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  BoolVarArgs X8 = gecode_BoolVarArgs_from_term(space,YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_121(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  precede(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_122(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  precede(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_123(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  precede(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_124(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  precede(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_125(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_127(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_133(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_137(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_141(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_143(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_145(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_149(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_153(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_156(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_157(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_159(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_161(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_163(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_164(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_165(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_167(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_170(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_171(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_173(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_175(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_177(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_126(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_128(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_129(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_131(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_134(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_135(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_138(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_139(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_142(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_144(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_146(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_147(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_150(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_151(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_154(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_158(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_160(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_162(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_166(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_168(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_172(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_174(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_176(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_178(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_130(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_132(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_136(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_140(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_148(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_152(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_155(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  rel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_169(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  rel(*space,X2,X3);
  return TRUE;
}

